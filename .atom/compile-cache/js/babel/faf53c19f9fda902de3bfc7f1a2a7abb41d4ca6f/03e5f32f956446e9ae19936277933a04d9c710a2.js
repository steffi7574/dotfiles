function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _atomBuildSpecHelpers = require('atom-build-spec-helpers');

var _libMake = require('../lib/make');

'use babel';

describe('make', function () {
  var directory = undefined;
  var builder = undefined;
  var Builder = (0, _libMake.provideBuilder)();

  beforeEach(function () {
    atom.config.set('build-make.useMake', true);
    atom.config.set('build-make.jobs', 2);
    waitsForPromise(function () {
      return (0, _atomBuildSpecHelpers.vouch)(_temp2['default'].mkdir, 'atom-build-make-spec-').then(function (dir) {
        return (0, _atomBuildSpecHelpers.vouch)(_fsExtra2['default'].realpath, dir);
      }).then(function (dir) {
        return directory = dir + '/';
      }).then(function (dir) {
        return builder = new Builder(dir);
      });
    });
  });

  afterEach(function () {
    _fsExtra2['default'].removeSync(directory);
  });

  describe('when makefile exists', function () {
    beforeEach(function () {
      _fsExtra2['default'].writeFileSync(directory + 'Makefile', _fsExtra2['default'].readFileSync(__dirname + '/Makefile'));
    });

    it('should be eligible', function () {
      expect(builder.isEligible(directory)).toBe(true);
    });

    it('should yield available targets', function () {
      waitsForPromise(function () {
        return Promise.resolve(builder.settings(directory)).then(function (settings) {
          expect(settings.length).toBe(4); // default (no target), all, some_custom and Makefile

          var defaultTarget = settings[0]; // default MUST be first
          expect(defaultTarget.name).toBe('GNU Make: default (no target)');
          expect(defaultTarget.exec).toBe('make');
          expect(defaultTarget.args).toEqual(['-j2']);
          expect(defaultTarget.sh).toBe(false);

          var target = settings.find(function (setting) {
            return setting.name === 'GNU Make: some_custom';
          });
          expect(target.name).toBe('GNU Make: some_custom');
          expect(target.exec).toBe('make');
          expect(target.args).toEqual(['-j2', 'some_custom']);
          expect(target.sh).toBe(false);
        });
      });
    });

    it('should yield a subset of all targets if it does not use make to extract targets', function () {
      atom.config.set('build-make.useMake', false);
      waitsForPromise(function () {
        expect(builder.isEligible(directory)).toBe(true);
        return Promise.resolve(builder.settings(directory)).then(function (settings) {
          var targetNames = settings.map(function (s) {
            return s.name;
          }).sort();
          expect(targetNames).toEqual(['GNU Make: default (no target)', 'GNU Make: all', 'GNU Make: some_custom'].sort());
        });
      });
    });
  });

  describe('when makefile exists but make can not run', function () {
    var originalPath = process.env.PATH;
    beforeEach(function () {
      _fsExtra2['default'].writeFileSync(directory + 'Makefile', _fsExtra2['default'].readFileSync(__dirname + '/Makefile'));
      process.env.PATH = '';
    });

    afterEach(function () {
      process.env.PATH = originalPath;
    });

    it('should be eligible', function () {
      expect(builder.isEligible(directory)).toBe(true);
    });

    it('should list the default target', function () {
      waitsForPromise(function () {
        return Promise.resolve(builder.settings(directory)).then(function (settings) {
          expect(settings.length).toBe(1); // default (no target)

          var defaultTarget = settings[0]; // default MUST be first
          expect(defaultTarget.name).toBe('GNU Make: default (no target)');
          expect(defaultTarget.exec).toBe('make');
          expect(defaultTarget.args).toEqual(['-j2']);
          expect(defaultTarget.sh).toBe(false);
        });
      });
    });
  });

  describe('when makefile does not exist', function () {
    it('should not be eligible', function () {
      expect(builder.isEligible(directory)).toBe(false);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/sguenther/.atom/packages/build-make/spec/build-make-spec.js
