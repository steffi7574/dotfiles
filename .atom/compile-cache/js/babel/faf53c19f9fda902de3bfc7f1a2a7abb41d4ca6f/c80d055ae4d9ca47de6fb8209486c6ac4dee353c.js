function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _specHelpers = require('./spec-helpers');

var _specHelpers2 = _interopRequireDefault(_specHelpers);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libMasterTexFinder = require('../lib/master-tex-finder');

var _libMasterTexFinder2 = _interopRequireDefault(_libMasterTexFinder);

'use babel';

describe('MasterTexFinder', function () {
  var rootPath = undefined,
      fixturesPath = undefined;

  beforeEach(function () {
    rootPath = atom.project.getPaths()[0];
    fixturesPath = _path2['default'].join(rootPath, 'master-tex-finder', 'single-master');

    atom.config.set('latex.useMasterFileSearch', true);
  });

  describe('getMasterTexPath', function () {
    it('returns the master tex file for the current project', function () {
      var inc2Path = _path2['default'].join(fixturesPath, 'inc2.tex');
      var finder = new _libMasterTexFinder2['default'](inc2Path);

      expect(finder.getMasterTexPath()).toBe(_path2['default'].join(fixturesPath, 'master.tex'));
    });

    it('immediately return the given file, if itself is a root-file', function () {
      var masterFile = _path2['default'].join(fixturesPath, 'master.tex');
      var finder = new _libMasterTexFinder2['default'](masterFile);
      spyOn(finder, 'getTexFilesList').andCallThrough();

      expect(finder.getMasterTexPath()).toBe(masterFile);
      expect(finder.getTexFilesList).not.toHaveBeenCalled();
    });

    it('returns the original file if more than one file is a master file', function () {
      var multiMasterFixturePath = _path2['default'].join(rootPath, 'master-tex-finder', 'multiple-masters');
      var inc1Path = _path2['default'].join(multiMasterFixturePath, 'inc1.tex');
      var finder = new _libMasterTexFinder2['default'](inc1Path);

      expect(finder.getMasterTexPath()).toBe(inc1Path);
    });

    it('immediately returns the file specified by the magic comment when present', function () {
      var inc1Path = _path2['default'].join(fixturesPath, 'inc1.tex');
      var finder = new _libMasterTexFinder2['default'](inc1Path);

      spyOn(finder, 'getTexFilesList').andCallThrough();

      expect(finder.getMasterTexPath()).toBe(_path2['default'].join(fixturesPath, 'master.tex'));
      expect(finder.getTexFilesList).not.toHaveBeenCalled();
    });

    it('returns the original file if the heuristic search feature is disabled', function () {
      var inc2Path = _path2['default'].join(fixturesPath, 'inc2.tex');
      var finder = new _libMasterTexFinder2['default'](inc2Path);

      _specHelpers2['default'].spyOnConfig('latex.useMasterFileSearch', false);
      spyOn(finder, 'isMasterFile').andCallThrough();
      spyOn(finder, 'searchForMasterFile').andCallThrough();

      expect(finder.getMasterTexPath()).toBe(inc2Path);
      expect(finder.isMasterFile).not.toHaveBeenCalled();
      expect(finder.searchForMasterFile).not.toHaveBeenCalled();
    });
  });

  describe('isMasterFile', function () {
    it('returns true if the given file is the master file', function () {
      var masterFilePath = _path2['default'].join(fixturesPath, 'master.tex');
      var inc2Path = _path2['default'].join(fixturesPath, 'inc2.tex');
      var finder = new _libMasterTexFinder2['default'](inc2Path);

      expect(finder.isMasterFile(masterFilePath)).toBe(true);
    });
  });

  describe('getTexFilesList', function () {
    it('returns the list of tex files in the project directory', function () {
      var expectedFileList = ['inc1.tex', 'inc2.tex', 'inc3.tex', 'master.tex'].map(function (name) {
        return _path2['default'].join(fixturesPath, name);
      });
      var inc2Path = _path2['default'].join(fixturesPath, 'inc2.tex');
      var finder = new _libMasterTexFinder2['default'](inc2Path);
      var sortedFileList = finder.getTexFilesList().sort();

      expect(sortedFileList).toEqual(expectedFileList);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/sguenther/.atom/packages/latex/spec/master-tex-finder-spec.js
