(function() {
  var $, Project, ProjectsListView;

  ProjectsListView = require('../lib/projects-list-view');

  Project = require('../lib/project');

  $ = require('atom-space-pen-views').$;

  describe("List View", function() {
    var data, filterEditorView, list, listView, projects, workspaceElement, _ref;
    _ref = [], listView = _ref[0], workspaceElement = _ref[1], list = _ref[2], filterEditorView = _ref[3];
    data = {
      testproject1: {
        _id: 'testproject1',
        title: "Test project 1",
        paths: ["/Users/project-1"]
      },
      testproject2: {
        _id: 'testproject2',
        title: "Test project 2",
        paths: [atom.getConfigDirPath()],
        template: "test-template",
        icon: "icon-bug",
        group: "Test"
      }
    };
    projects = function() {
      var array, key, project, setting;
      array = [];
      for (key in data) {
        setting = data[key];
        project = new Project(setting);
        array.push(project);
      }
      return array;
    };
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      listView = new ProjectsListView;
      return list = listView.list, filterEditorView = listView.filterEditorView, listView;
    });
    it("will list all projects", function() {
      listView.show(projects());
      return expect(list.find('li').length).toBe(2);
    });
    it("will let you know if a path is not available", function() {
      listView.show(projects());
      expect(list.find('li').eq(0).data('pathMissing')).toBe(true);
      return expect(list.find('li').eq(1).data('pathMissing')).toBe(false);
    });
    it("will add the correct icon to each project", function() {
      var icon1, icon2;
      listView.show(projects());
      icon1 = list.find('li[data-project-id="testproject1"]').find('.icon');
      icon2 = list.find('li[data-project-id="testproject2"]').find('.icon');
      expect(icon1.attr('class')).toContain('icon-chevron-right');
      return expect(icon2.attr('class')).toContain('icon-bug');
    });
    describe("When the text of the mini editor changes", function() {
      beforeEach(function() {
        listView.show(projects());
        return listView.isOnDom = function() {
          return true;
        };
      });
      it("will only list projects with the correct title", function() {
        filterEditorView.getModel().setText('title:1');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('title');
        expect(listView.getFilterQuery()).toBe('1');
        return expect(list.find('li').length).toBe(1);
      });
      it("will only list projects with the correct group", function() {
        filterEditorView.getModel().setText('group:test');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('group');
        expect(listView.getFilterQuery()).toBe('test');
        expect(list.find('li').length).toBe(1);
        return expect(list.find('li:eq(0)').find('.project-manager-list-group')).toHaveText('Test');
      });
      it("will only list projects with the correct template", function() {
        filterEditorView.getModel().setText('template:test');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('template');
        expect(listView.getFilterQuery()).toBe('test');
        return expect(list.find('li').length).toBe(1);
      });
      return it("will fall back to default filter key if it's not valid", function() {
        filterEditorView.getModel().setText('test:1');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe(listView.defaultFilterKey);
        expect(listView.getFilterQuery()).toBe('1');
        return expect(list.find('li').length).toBe(1);
      });
    });
    return describe("It sorts the projects in correct order", function() {
      it("sorts after title", function() {
        atom.config.set('project-manager.sortBy', 'title');
        listView.show(projects());
        return expect(list.find('li:eq(0)').data('projectId')).toBe("testproject1");
      });
      return it("sort after group", function() {
        atom.config.set('project-manager.sortBy', 'group');
        listView.show(projects());
        return expect(list.find('li:eq(0)').data('projectId')).toBe("testproject2");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvc2d1ZW50aGVyLy5hdG9tL3BhY2thZ2VzL3Byb2plY3QtbWFuYWdlci9zcGVjL3Byb2plY3RzLWxpc3Qtdmlldy1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSw0QkFBQTs7QUFBQSxFQUFBLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSwyQkFBUixDQUFuQixDQUFBOztBQUFBLEVBQ0EsT0FBQSxHQUFVLE9BQUEsQ0FBUSxnQkFBUixDQURWLENBQUE7O0FBQUEsRUFFQyxJQUFLLE9BQUEsQ0FBUSxzQkFBUixFQUFMLENBRkQsQ0FBQTs7QUFBQSxFQUlBLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUEsR0FBQTtBQUNwQixRQUFBLHdFQUFBO0FBQUEsSUFBQSxPQUF1RCxFQUF2RCxFQUFDLGtCQUFELEVBQVcsMEJBQVgsRUFBNkIsY0FBN0IsRUFBbUMsMEJBQW5DLENBQUE7QUFBQSxJQUVBLElBQUEsR0FDRTtBQUFBLE1BQUEsWUFBQSxFQUNFO0FBQUEsUUFBQSxHQUFBLEVBQUssY0FBTDtBQUFBLFFBQ0EsS0FBQSxFQUFPLGdCQURQO0FBQUEsUUFFQSxLQUFBLEVBQU8sQ0FBQyxrQkFBRCxDQUZQO09BREY7QUFBQSxNQUlBLFlBQUEsRUFDRTtBQUFBLFFBQUEsR0FBQSxFQUFLLGNBQUw7QUFBQSxRQUNBLEtBQUEsRUFBTyxnQkFEUDtBQUFBLFFBRUEsS0FBQSxFQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFMLENBQUEsQ0FBRCxDQUZQO0FBQUEsUUFHQSxRQUFBLEVBQVUsZUFIVjtBQUFBLFFBSUEsSUFBQSxFQUFNLFVBSk47QUFBQSxRQUtBLEtBQUEsRUFBTyxNQUxQO09BTEY7S0FIRixDQUFBO0FBQUEsSUFlQSxRQUFBLEdBQVcsU0FBQSxHQUFBO0FBQ1QsVUFBQSw0QkFBQTtBQUFBLE1BQUEsS0FBQSxHQUFRLEVBQVIsQ0FBQTtBQUNBLFdBQUEsV0FBQTs0QkFBQTtBQUNFLFFBQUEsT0FBQSxHQUFjLElBQUEsT0FBQSxDQUFRLE9BQVIsQ0FBZCxDQUFBO0FBQUEsUUFDQSxLQUFLLENBQUMsSUFBTixDQUFXLE9BQVgsQ0FEQSxDQURGO0FBQUEsT0FEQTtBQUlBLGFBQU8sS0FBUCxDQUxTO0lBQUEsQ0FmWCxDQUFBO0FBQUEsSUFzQkEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsZ0JBQUEsR0FBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFYLENBQW1CLElBQUksQ0FBQyxTQUF4QixDQUFuQixDQUFBO0FBQUEsTUFDQSxRQUFBLEdBQVcsR0FBQSxDQUFBLGdCQURYLENBQUE7YUFFQyxnQkFBQSxJQUFELEVBQU8sNEJBQUEsZ0JBQVAsRUFBMkIsU0FIbEI7SUFBQSxDQUFYLENBdEJBLENBQUE7QUFBQSxJQTJCQSxFQUFBLENBQUcsd0JBQUgsRUFBNkIsU0FBQSxHQUFBO0FBQzNCLE1BQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxRQUFBLENBQUEsQ0FBZCxDQUFBLENBQUE7YUFDQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLENBQWUsQ0FBQyxNQUF2QixDQUE4QixDQUFDLElBQS9CLENBQW9DLENBQXBDLEVBRjJCO0lBQUEsQ0FBN0IsQ0EzQkEsQ0FBQTtBQUFBLElBK0JBLEVBQUEsQ0FBRyw4Q0FBSCxFQUFtRCxTQUFBLEdBQUE7QUFDakQsTUFBQSxRQUFRLENBQUMsSUFBVCxDQUFjLFFBQUEsQ0FBQSxDQUFkLENBQUEsQ0FBQTtBQUFBLE1BQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixDQUFlLENBQUMsRUFBaEIsQ0FBbUIsQ0FBbkIsQ0FBcUIsQ0FBQyxJQUF0QixDQUEyQixhQUEzQixDQUFQLENBQWlELENBQUMsSUFBbEQsQ0FBdUQsSUFBdkQsQ0FEQSxDQUFBO2FBRUEsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixDQUFlLENBQUMsRUFBaEIsQ0FBbUIsQ0FBbkIsQ0FBcUIsQ0FBQyxJQUF0QixDQUEyQixhQUEzQixDQUFQLENBQWlELENBQUMsSUFBbEQsQ0FBdUQsS0FBdkQsRUFIaUQ7SUFBQSxDQUFuRCxDQS9CQSxDQUFBO0FBQUEsSUFvQ0EsRUFBQSxDQUFHLDJDQUFILEVBQWdELFNBQUEsR0FBQTtBQUM5QyxVQUFBLFlBQUE7QUFBQSxNQUFBLFFBQVEsQ0FBQyxJQUFULENBQWMsUUFBQSxDQUFBLENBQWQsQ0FBQSxDQUFBO0FBQUEsTUFDQSxLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxvQ0FBVixDQUErQyxDQUFDLElBQWhELENBQXFELE9BQXJELENBRFIsQ0FBQTtBQUFBLE1BRUEsS0FBQSxHQUFRLElBQUksQ0FBQyxJQUFMLENBQVUsb0NBQVYsQ0FBK0MsQ0FBQyxJQUFoRCxDQUFxRCxPQUFyRCxDQUZSLENBQUE7QUFBQSxNQUdBLE1BQUEsQ0FBTyxLQUFLLENBQUMsSUFBTixDQUFXLE9BQVgsQ0FBUCxDQUEyQixDQUFDLFNBQTVCLENBQXNDLG9CQUF0QyxDQUhBLENBQUE7YUFJQSxNQUFBLENBQU8sS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYLENBQVAsQ0FBMkIsQ0FBQyxTQUE1QixDQUFzQyxVQUF0QyxFQUw4QztJQUFBLENBQWhELENBcENBLENBQUE7QUFBQSxJQTJDQSxRQUFBLENBQVMsMENBQVQsRUFBcUQsU0FBQSxHQUFBO0FBQ25ELE1BQUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULFFBQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxRQUFBLENBQUEsQ0FBZCxDQUFBLENBQUE7ZUFDQSxRQUFRLENBQUMsT0FBVCxHQUFtQixTQUFBLEdBQUE7aUJBQUcsS0FBSDtRQUFBLEVBRlY7TUFBQSxDQUFYLENBQUEsQ0FBQTtBQUFBLE1BSUEsRUFBQSxDQUFHLGdEQUFILEVBQXFELFNBQUEsR0FBQTtBQUNuRCxRQUFBLGdCQUFnQixDQUFDLFFBQWpCLENBQUEsQ0FBMkIsQ0FBQyxPQUE1QixDQUFvQyxTQUFwQyxDQUFBLENBQUE7QUFBQSxRQUNBLE1BQU0sQ0FBQyxZQUFQLENBQW9CLFFBQVEsQ0FBQyxhQUE3QixDQURBLENBQUE7QUFBQSxRQUdBLE1BQUEsQ0FBTyxRQUFRLENBQUMsWUFBVCxDQUFBLENBQVAsQ0FBK0IsQ0FBQyxJQUFoQyxDQUFxQyxPQUFyQyxDQUhBLENBQUE7QUFBQSxRQUlBLE1BQUEsQ0FBTyxRQUFRLENBQUMsY0FBVCxDQUFBLENBQVAsQ0FBaUMsQ0FBQyxJQUFsQyxDQUF1QyxHQUF2QyxDQUpBLENBQUE7ZUFLQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLENBQWUsQ0FBQyxNQUF2QixDQUE4QixDQUFDLElBQS9CLENBQW9DLENBQXBDLEVBTm1EO01BQUEsQ0FBckQsQ0FKQSxDQUFBO0FBQUEsTUFZQSxFQUFBLENBQUcsZ0RBQUgsRUFBcUQsU0FBQSxHQUFBO0FBQ25ELFFBQUEsZ0JBQWdCLENBQUMsUUFBakIsQ0FBQSxDQUEyQixDQUFDLE9BQTVCLENBQW9DLFlBQXBDLENBQUEsQ0FBQTtBQUFBLFFBQ0EsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsUUFBUSxDQUFDLGFBQTdCLENBREEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLFFBQVEsQ0FBQyxZQUFULENBQUEsQ0FBUCxDQUErQixDQUFDLElBQWhDLENBQXFDLE9BQXJDLENBSEEsQ0FBQTtBQUFBLFFBSUEsTUFBQSxDQUFPLFFBQVEsQ0FBQyxjQUFULENBQUEsQ0FBUCxDQUFpQyxDQUFDLElBQWxDLENBQXVDLE1BQXZDLENBSkEsQ0FBQTtBQUFBLFFBS0EsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixDQUFlLENBQUMsTUFBdkIsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxDQUFwQyxDQUxBLENBQUE7ZUFNQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxVQUFWLENBQ0wsQ0FBQyxJQURJLENBQ0MsNkJBREQsQ0FBUCxDQUN1QyxDQUFDLFVBRHhDLENBQ21ELE1BRG5ELEVBUG1EO01BQUEsQ0FBckQsQ0FaQSxDQUFBO0FBQUEsTUFzQkEsRUFBQSxDQUFHLG1EQUFILEVBQXdELFNBQUEsR0FBQTtBQUN0RCxRQUFBLGdCQUFnQixDQUFDLFFBQWpCLENBQUEsQ0FBMkIsQ0FBQyxPQUE1QixDQUFvQyxlQUFwQyxDQUFBLENBQUE7QUFBQSxRQUNBLE1BQU0sQ0FBQyxZQUFQLENBQW9CLFFBQVEsQ0FBQyxhQUE3QixDQURBLENBQUE7QUFBQSxRQUdBLE1BQUEsQ0FBTyxRQUFRLENBQUMsWUFBVCxDQUFBLENBQVAsQ0FBK0IsQ0FBQyxJQUFoQyxDQUFxQyxVQUFyQyxDQUhBLENBQUE7QUFBQSxRQUlBLE1BQUEsQ0FBTyxRQUFRLENBQUMsY0FBVCxDQUFBLENBQVAsQ0FBaUMsQ0FBQyxJQUFsQyxDQUF1QyxNQUF2QyxDQUpBLENBQUE7ZUFLQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLENBQWUsQ0FBQyxNQUF2QixDQUE4QixDQUFDLElBQS9CLENBQW9DLENBQXBDLEVBTnNEO01BQUEsQ0FBeEQsQ0F0QkEsQ0FBQTthQThCQSxFQUFBLENBQUcsd0RBQUgsRUFBNkQsU0FBQSxHQUFBO0FBQzNELFFBQUEsZ0JBQWdCLENBQUMsUUFBakIsQ0FBQSxDQUEyQixDQUFDLE9BQTVCLENBQW9DLFFBQXBDLENBQUEsQ0FBQTtBQUFBLFFBQ0EsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsUUFBUSxDQUFDLGFBQTdCLENBREEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLFFBQVEsQ0FBQyxZQUFULENBQUEsQ0FBUCxDQUErQixDQUFDLElBQWhDLENBQXFDLFFBQVEsQ0FBQyxnQkFBOUMsQ0FIQSxDQUFBO0FBQUEsUUFJQSxNQUFBLENBQU8sUUFBUSxDQUFDLGNBQVQsQ0FBQSxDQUFQLENBQWlDLENBQUMsSUFBbEMsQ0FBdUMsR0FBdkMsQ0FKQSxDQUFBO2VBS0EsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixDQUFlLENBQUMsTUFBdkIsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxDQUFwQyxFQU4yRDtNQUFBLENBQTdELEVBL0JtRDtJQUFBLENBQXJELENBM0NBLENBQUE7V0FrRkEsUUFBQSxDQUFTLHdDQUFULEVBQW1ELFNBQUEsR0FBQTtBQUNqRCxNQUFBLEVBQUEsQ0FBRyxtQkFBSCxFQUF3QixTQUFBLEdBQUE7QUFDdEIsUUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0Isd0JBQWhCLEVBQTBDLE9BQTFDLENBQUEsQ0FBQTtBQUFBLFFBQ0EsUUFBUSxDQUFDLElBQVQsQ0FBYyxRQUFBLENBQUEsQ0FBZCxDQURBLENBQUE7ZUFFQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxVQUFWLENBQXFCLENBQUMsSUFBdEIsQ0FBMkIsV0FBM0IsQ0FBUCxDQUErQyxDQUFDLElBQWhELENBQXFELGNBQXJELEVBSHNCO01BQUEsQ0FBeEIsQ0FBQSxDQUFBO2FBS0EsRUFBQSxDQUFHLGtCQUFILEVBQXVCLFNBQUEsR0FBQTtBQUNyQixRQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQix3QkFBaEIsRUFBMEMsT0FBMUMsQ0FBQSxDQUFBO0FBQUEsUUFDQSxRQUFRLENBQUMsSUFBVCxDQUFjLFFBQUEsQ0FBQSxDQUFkLENBREEsQ0FBQTtlQUVBLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLFVBQVYsQ0FBcUIsQ0FBQyxJQUF0QixDQUEyQixXQUEzQixDQUFQLENBQStDLENBQUMsSUFBaEQsQ0FBcUQsY0FBckQsRUFIcUI7TUFBQSxDQUF2QixFQU5pRDtJQUFBLENBQW5ELEVBbkZvQjtFQUFBLENBQXRCLENBSkEsQ0FBQTtBQUFBIgp9

//# sourceURL=/home/sguenther/.atom/packages/project-manager/spec/projects-list-view-spec.coffee
