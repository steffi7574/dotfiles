(function() {
  var fs, get_bib_completions;

  fs = require('fs');

  module.exports = get_bib_completions = function(bibfile) {
    var a, authors, authors_short, bib, completions, entry, error, format_author, journals, key, keywords, kp_match, kp_rx, line, multi_match, multi_rx, sep, t, titles, titles_short, value, years, _i, _len;
    completions = [];
    kp_rx = /@[^\{]+\{(.+),/;
    multi_rx = /\b(author|title|year|editor|journal|eprint)\s*=\s*(?:\{|"|\b)(.+?)(?:\}+|"|\b)\s*,?\s*$/i;
    try {
      bib = fs.readFileSync(bibfile, 'utf-8').split('\n');
    } catch (_error) {
      error = _error;
      alert("cannot read " + bibfile);
      return;
    }
    keywords = [];
    titles = [];
    authors = [];
    years = [];
    journals = [];
    authors_short = [];
    titles_short = [];
    sep = /:|\.|\?/;
    format_author = function(authors) {
      var a;
      authors = [
        (function() {
          var _i, _len, _ref, _results;
          _ref = authors.split(" and ");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            a = _ref[_i];
            _results.push(a.split(", ")[0].trim());
          }
          return _results;
        })()
      ];
      if (authors.length > 2) {
        authors = authors[0] + " et al.";
      } else {
        authors = authors.join(' & ');
      }
      return authors;
    };
    entry = {
      "keyword": "",
      "title": "",
      "author": "",
      "year": "",
      "editor": "",
      "journal": "",
      "eprint": ""
    };
    for (_i = 0, _len = bib.length; _i < _len; _i++) {
      line = bib[_i];
      line = line.trim();
      if (line === "" || line[0] === '%') {
        continue;
      }
      if (line.toLowerCase().slice(0, 8) === "@comment") {
        continue;
      }
      if (line.toLowerCase().slice(0, 7) === "@string") {
        continue;
      }
      if (line.toLowerCase().slice(0, 9) === "@preamble") {
        continue;
      }
      if (line[0] === "@") {
        if (entry["keyword"]) {
          keywords.push(entry["keyword"]);
          t = entry["title"].replace('{\\textquoteright}', '').replace(/\{/g, '').replace(/\}/g, '');
          titles.push(t);
          t = t.split(sep)[0];
          titles_short.push((t.length > 40 ? t.slice(0, 40) + '...' : t));
          years.push(entry["year"]);
          a = entry["author"] || entry["editor"] || "????";
          authors.push(a);
          authors_short.push(format_author(a));
          journals.push(entry["journal"] || entry["eprint"] || "????");
          entry["keyword"] = "";
          entry["title"] = "";
          entry["year"] = "";
          entry["author"] = "";
          entry["editor"] = "";
          entry["journal"] = "";
          entry["eprint"] = "";
        }
        kp_match = kp_rx.exec(line);
        if (kp_match) {
          entry["keyword"] = kp_match[1];
        } else {

        }
        continue;
      }
      multi_match = multi_rx.exec(line);
      if (multi_match) {
        key = multi_match[1].toLowerCase();
        value = multi_match[2];
        entry[key] = value;
      } else {

      }
      continue;
    }
    keywords.push(entry["keyword"]);
    t = entry["title"].replace('{\\textquoteright}', '').replace(/\{/g, '').replace(/\}/g, '');
    titles.push(t);
    t = t.split(sep)[0];
    titles_short.push((t.length > 40 ? t.slice(0, 40) + '...' : t));
    years.push(entry["year"]);
    a = entry["author"] || entry["editor"] || "????";
    authors.push(a);
    authors_short.push(format_author(a));
    journals.push(entry["journal"] || entry["eprint"] || "????");
    return [keywords, titles, authors, years, authors_short, titles_short, journals];
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvc2d1ZW50aGVyLy5hdG9tL3BhY2thZ2VzL2xhdGV4dG9vbHMvbGliL3BhcnNlcnMvZ2V0LWJpYi1jb21wbGV0aW9ucy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsdUJBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FBTCxDQUFBOztBQUFBLEVBRUEsTUFBTSxDQUFDLE9BQVAsR0FDQSxtQkFBQSxHQUFzQixTQUFDLE9BQUQsR0FBQTtBQUVwQixRQUFBLHFNQUFBO0FBQUEsSUFBQSxXQUFBLEdBQWMsRUFBZCxDQUFBO0FBQUEsSUFFQSxLQUFBLEdBQVEsZ0JBRlIsQ0FBQTtBQUFBLElBR0EsUUFBQSxHQUFXLDBGQUhYLENBQUE7QUFLQTtBQUNFLE1BQUEsR0FBQSxHQUFNLEVBQUUsQ0FBQyxZQUFILENBQWdCLE9BQWhCLEVBQXlCLE9BQXpCLENBQWlDLENBQUMsS0FBbEMsQ0FBd0MsSUFBeEMsQ0FBTixDQURGO0tBQUEsY0FBQTtBQUdFLE1BREksY0FDSixDQUFBO0FBQUEsTUFBQSxLQUFBLENBQU0sY0FBQSxHQUFpQixPQUF2QixDQUFBLENBQUE7QUFDQSxZQUFBLENBSkY7S0FMQTtBQUFBLElBV0EsUUFBQSxHQUFXLEVBWFgsQ0FBQTtBQUFBLElBWUEsTUFBQSxHQUFTLEVBWlQsQ0FBQTtBQUFBLElBYUEsT0FBQSxHQUFVLEVBYlYsQ0FBQTtBQUFBLElBY0EsS0FBQSxHQUFRLEVBZFIsQ0FBQTtBQUFBLElBZUEsUUFBQSxHQUFXLEVBZlgsQ0FBQTtBQUFBLElBZ0JBLGFBQUEsR0FBZ0IsRUFoQmhCLENBQUE7QUFBQSxJQWlCQSxZQUFBLEdBQWUsRUFqQmYsQ0FBQTtBQUFBLElBbUJBLEdBQUEsR0FBTSxTQW5CTixDQUFBO0FBQUEsSUFzQkEsYUFBQSxHQUFnQixTQUFDLE9B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

//# sourceURL=/home/sguenther/.atom/packages/latextools/lib/parsers/get-bib-completions.coffee
