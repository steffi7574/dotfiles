{"_id":"sugar","_rev":"66-29ee2f9d03059b83796ee6ba083fdaac","name":"sugar","description":"A Javascript library for working with native objects.","dist-tags":{"latest":"1.4.1"},"versions":{"0.9.4":{"name":"sugar","version":"0.9.4","description":"A Javascript library for working with native objects.","keywords":["functional","utility"],"homepage":"http://sugarjs.com","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Volumes/Andrew/.npm/sugar/0.9.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"sugar@0.9.4","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.23","_nodeVersion":"v0.5.4-pre","_defaultsLoaded":true,"dist":{"shasum":"f536452c952c4b13b6ea2576c26d2868ca83d218","tarball":"http://registry.npmjs.org/sugar/-/sugar-0.9.4.tgz"},"scripts":{},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"0.9.5":{"name":"sugar","version":"0.9.5","description":"A Javascript library for working with native objects.","keywords":["functional","utility"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Volumes/Andrew/.npm/sugar/0.9.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"sugar@0.9.5","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.23","_nodeVersion":"v0.5.4-pre","_defaultsLoaded":true,"dist":{"shasum":"ef07ff53ac4ff5063cd74374cc5bf6e6d9d97e48","tarball":"http://registry.npmjs.org/sugar/-/sugar-0.9.5.tgz"},"scripts":{},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.0.0":{"name":"sugar","version":"1.0.0","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Volumes/Andrew/.npm/sugar/1.0.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"sugar@1.0.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.30","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"b2629f7365a764c1bb9ed5929169dfcaf7690984","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.0.0.tgz"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.1.0":{"name":"sugar","version":"1.1.0","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.1.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"6e2e21cdec62be860901a667aa0b7301c8b073f9","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.1.0.tgz"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.1.1":{"name":"sugar","version":"1.1.1","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.1.1","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"bb55ae1d40460a58bcc52fec64cecee9b2cc17e4","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.1.1.tgz"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.1.2":{"name":"sugar","version":"1.1.2","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.1.2","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"1fde0ac7ad2fd1372090c09a6404a111e9f33085","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.1.2.tgz"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.1.3":{"name":"sugar","version":"1.1.3","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/sugar","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.1.3","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"acf249c2cb9145280ee9fbbab882b37d85668790","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.1.3.tgz"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.2.0":{"name":"sugar","version":"1.2.0","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/main","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.2.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"899e0a8d7f92ee70581341d5242c9e1e00586486","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.2.0.tgz"},"readme":"Sugar\n=====\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch will have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\nI will also include a minified version that will also have its unit tests run against it here:\n`release/sugar-edge.min.js`\n\n\nDates Only Build\n===============\n\nSugar now has a build available that has all methods on the `Date` class as a\nstandalone module. The minified version can be found in `release/dates`. Note that this build\nstill adds a number of methods to the `String`, `Number`, and `Array` classes that Sugar requires\ninternally, including all the ES5 polyfill methods that are heavily used. This build will not follow\nthe standard release schedule, but will be updated when the Sugar Date module changes significantly.\n\nCurrent build is based off `v1.1.3`.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`.\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.setFormat(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nMore documentation to come soon, but for now refer to `lib/locales.js` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept in this file.\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`. Also of note is `unit_tests/prototype.html`, however depending on various circumstances not all tests may be passing, so it's good to do a before/after. Mootools can be ignored for the time being.\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.2.1":{"name":"sugar","version":"1.2.1","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/main","ender":"./release/1.2.1/minified/sugar-1.2.1.min.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.2.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"abd4030e7776ade083f708ea188b99daaba02735","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.2.1.tgz"},"readme":"Sugar\n=====\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch will have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\nI will also include a minified version that will also have its unit tests run against it here:\n`release/sugar-edge.min.js`\n\n\nDates Only Build\n===============\n\nSugar now has a build available that has all methods on the `Date` class as a\nstandalone module. The minified version can be found in `release/dates`. Note that this build\nstill adds a number of methods to the `String`, `Number`, and `Array` classes that Sugar requires\ninternally, including all the ES5 polyfill methods that are heavily used. This build will not follow\nthe standard release schedule, but will be updated when the Sugar Date module changes significantly.\n\nCurrent build is based off `v1.1.3`.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`.\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.setFormat(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nMore documentation to come soon, but for now refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`. Also of note is `unit_tests/prototype.html`, however depending on various circumstances not all tests may be passing, so it's good to do a before/after. Mootools can be ignored for the time being.\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.2.2":{"name":"sugar","version":"1.2.2","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/main","ender":"./release/1.2.2/development/sugar-1.2.2.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.2.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"ee795f6d9076cfeb4caabe06e3e62c7a9dc05b7f","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.2.2.tgz"},"readme":"Sugar\n=====\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch will have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\nI will also include a minified version that will also have its unit tests run against it here:\n`release/sugar-edge.min.js`\n\n\nDates Only Build\n===============\n\nSugar now has a build available that has all methods on the `Date` class as a\nstandalone module. The minified version can be found in `release/dates`. Note that this build\nstill adds a number of methods to the `String`, `Number`, and `Array` classes that Sugar requires\ninternally, including all the ES5 polyfill methods that are heavily used. This build will not follow\nthe standard release schedule, but will be updated when the Sugar Date module changes significantly.\n\nCurrent build is based off `v1.1.3`.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`.\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.setFormat(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nMore documentation to come soon, but for now refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`. Also of note is `unit_tests/prototype.html`, however depending on various circumstances not all tests may be passing, so it's good to do a before/after. Mootools can be ignored for the time being.\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.2.3":{"name":"sugar","version":"1.2.3","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/main","ender":"./release/1.2.3/development/sugar-1.2.3.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.2.3","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"0640c797a8c04a0954fd85f15d88d860f336e401","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.2.3.tgz"},"readme":"Sugar\n=====\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch will have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\nI will also include a minified version that will also have its unit tests run against it here:\n`release/sugar-edge.min.js`\n\n\nDates Only Build\n===============\n\nSugar now has a build available that has all methods on the `Date` class as a\nstandalone module. The minified version can be found in `release/dates`. Note that this build\nstill adds a number of methods to the `String`, `Number`, and `Array` classes that Sugar requires\ninternally, including all the ES5 polyfill methods that are heavily used. This build will not follow\nthe standard release schedule, but will be updated when the Sugar Date module changes significantly.\n\nCurrent build is based off `v1.1.3`.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`.\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.setFormat(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nMore documentation to come soon, but for now refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`. Also of note is `unit_tests/prototype.html`, however depending on various circumstances not all tests may be passing, so it's good to do a before/after. Mootools can be ignored for the time being.\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.2.4":{"name":"sugar","version":"1.2.4","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/main","ender":"./release/1.2.4/development/sugar-1.2.4.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.2.4","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"c9812a0688b098356982706323867aef36381837","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.2.4.tgz"},"readme":"Sugar\n=====\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch will have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\nI will also include a minified version that will also have its unit tests run against it here:\n`release/sugar-edge.min.js`\n\n\nDates Only Build\n===============\n\nSugar now has a build available that has all methods on the `Date` class as a\nstandalone module. The minified version can be found in `release/dates`. Note that this build\nstill adds a number of methods to the `String`, `Number`, and `Array` classes that Sugar requires\ninternally, including all the ES5 polyfill methods that are heavily used. This build will not follow\nthe standard release schedule, but will be updated when the Sugar Date module changes significantly.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`.\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.setFormat(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nMore documentation to come soon, but for now refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`. Also of note is `unit_tests/prototype.html`, however depending on various circumstances not all tests may be passing, so it's good to do a before/after. Mootools can be ignored for the time being.\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.2.5":{"name":"sugar","version":"1.2.5","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./lib/main","ender":"./release/1.2.5/development/sugar-1.2.5.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.2.5","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"4ed2639aeb8c16381e0f598c49e1532eb71fd83c","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.2.5.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/spaghetticode/Sugar.png)](http://travis-ci.org/spaghetticode/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch will have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\nI will also include a minified version that will also have its unit tests run against it here:\n`release/sugar-edge.min.js`\n\n\nDates Only Build\n===============\n\nSugar now has a build available that has all methods on the `Date` class as a\nstandalone module. The minified version can be found in `release/dates`. Note that this build\nstill adds a number of methods to the `String`, `Number`, and `Array` classes that Sugar requires\ninternally, including all the ES5 polyfill methods that are heavily used. This build will not follow\nthe standard release schedule, but will be updated when the Sugar Date module changes significantly.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.setFormat(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nMore documentation to come soon, but for now refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`. Also of note is `unit_tests/prototype.html`, however depending on various circumstances not all tests may be passing, so it's good to do a before/after. Mootools can be ignored for the time being.\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.0":{"name":"sugar","version":"1.3.0","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3/sugar-1.3-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.3.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"105a6c1e4bf48fb8bc92454c086ffaa1dcbff59d","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.0.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.1":{"name":"sugar","version":"1.3.1","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.1/sugar-1.3.1-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.3.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"8ca093241376f3161f6ee236aca2cf6d09648780","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.1.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.2":{"name":"sugar","version":"1.3.2","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.2/sugar-1.3.2-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.3.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"73d82e8a6638f24515e3ce343ffa25ec64fadeb6","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.2.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.3":{"name":"sugar","version":"1.3.3","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.3/sugar-1.3.3-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.3.3","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"27f34320c94ce12ff778a70e37992ef7c04694e5","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.3.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.4":{"name":"sugar","version":"1.3.4","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.4/sugar-1.3.4-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.3.4","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"efe25a98d0257119b270133dbce1aa76739eacbd","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.4.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.5":{"name":"sugar","version":"1.3.5","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.5/sugar-1.3.5-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"git://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"_id":"sugar@1.3.5","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"3d00365ba622554b2e5213ff5f6d2632d7606da9","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.5.tgz"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.6":{"name":"sugar","version":"1.3.6","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.6/sugar-1.3.6-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","_id":"sugar@1.3.6","dist":{"shasum":"55bbe3e38e05f47369da2d6ce038d1406a12e2f2","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.6.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.7":{"name":"sugar","version":"1.3.7","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/1.3.7/sugar-1.3.7-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","_id":"sugar@1.3.7","dist":{"shasum":"d14f58917139d69b8efe6083b3df9097137f970a","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.7.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.8":{"name":"sugar","version":"1.3.8","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/sugar-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","readmeFilename":"README.md","_id":"sugar@1.3.8","dist":{"shasum":"3495db4ed50202107e9410a1ff9901c33819b80b","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.8.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.3.9":{"name":"sugar","version":"1.3.9","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/sugar-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"./unit_tests/node.sh"},"readme":"Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/andrewplummer/Sugar/issues"},"_id":"sugar@1.3.9","dist":{"shasum":"f879c6c87721252b51fd0b6520412d98d83cb179","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.3.9.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.4.0":{"name":"sugar","version":"1.4.0","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/sugar-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"node test/environments/node/test.js"},"readme":"# Sugar\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\n## Upgrading\n\nIf you are upgrading from an older version, please have a look at `CAUTION.md` which is a vetted changelog\nthat details the severity of what has changed, and (sometimes) strategies for migrating.\nGoing through this before you upgrade can make the process a lot less painful!\n\n\n## Edge Build\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\n## Custom Builds\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\n## Unit Tests Node\n\nUse the `npm test` command to run unit tests.\n\n\n## Date Localizations\n\nSugar has the following localizations available:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Finnish (fi)\n- Swedish (sv)\n- Danish (da)\n- Dutch (nl)\n- Polish (pl)\n- Portuguese (pt)\n- Korean (ko)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nThese files can be added separately or built into the main package on the [customize page](http://sugarjs.com/customize).\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\n\n## Timezones\n\nDealing with timezones in Javascript can be tricky. Although timezones are outside the scope of Sugar, it does provide a hook that can allow timezone shifted dates to be used internally in place of normal ones. See [the date reference](http://sugarjs.com/dates#timezones) for more.\n\n\n## Contributing Locales\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `test/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\n## Contributing Lib Comparisons\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\n## Other Contributions\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `test/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `test/default.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `npm test`.\n\nAlso note that the source code is in the `lib` directory, and `release` is automatically built, so there is no need to changes files there.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/andrewplummer/Sugar/issues"},"_id":"sugar@1.4.0","dist":{"shasum":"e0c35189ec7bc8471296edc0618f17c44ef9b96a","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.4.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]},"1.4.1":{"name":"sugar","version":"1.4.1","description":"A Javascript library for working with native objects.","keywords":["functional","utility","ender"],"homepage":"http://sugarjs.com/","author":{"name":"Andrew Plummer"},"main":"./release/sugar-full.development.js","directories":{"lib":"./lib"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"node test/environments/node/test.js"},"license":"MIT","readme":"# Sugar\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\n## Upgrading\n\nIf you are upgrading from an older version, please have a look at [`CAUTION.md`](https://github.com/andrewplummer/Sugar/blob/master/CAUTION.md) which is a vetted changelog\nthat details the severity of what has changed, and (sometimes) strategies for migrating.\nGoing through this before you upgrade can make the process a lot less painful!\nAlso please refer there for notes about a patch that applies to versions prior to v1.3.9.\n\n\n## Edge Build\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\n## Custom Builds\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\n## Unit Tests Node\n\nUse the `npm test` command to run unit tests.\n\n\n## Date Localizations\n\nSugar has the following localizations available:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Finnish (fi)\n- Swedish (sv)\n- Danish (da)\n- Dutch (nl)\n- Polish (pl)\n- Portuguese (pt)\n- Korean (ko)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nThese files can be added separately or built into the main package on the [customize page](http://sugarjs.com/customize).\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\n\n## Timezones\n\nDealing with timezones in Javascript can be tricky. Although timezones are outside the scope of Sugar, it does provide a hook that can allow timezone shifted dates to be used internally in place of normal ones. See [the date reference](http://sugarjs.com/dates#timezones) for more.\n\n\n## Contributing Locales\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `test/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\n## Contributing Lib Comparisons\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\n## Other Contributions\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `test/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `test/default.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `npm test`.\n\nAlso note that the source code is in the `lib` directory, and `release` is automatically built, so there is no need to changes files there.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/andrewplummer/Sugar/issues"},"_id":"sugar@1.4.1","dist":{"shasum":"1310d4dedc699e5a173183718541b0d7844a7598","tarball":"http://registry.npmjs.org/sugar/-/sugar-1.4.1.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}]}},"maintainers":[{"name":"l_andrew_l","email":"plummer.andrew@gmail.com"}],"time":{"modified":"2013-09-17T14:24:38.484Z","created":"2011-08-15T13:05:56.061Z","0.9.4":"2011-08-15T13:06:01.558Z","0.9.5":"2011-09-05T13:43:04.810Z","1.0.0":"2011-10-21T16:47:39.845Z","1.1.0":"2011-11-05T18:48:05.578Z","1.1.1":"2011-11-15T14:25:33.084Z","1.1.2":"2011-12-11T16:45:03.920Z","1.1.3":"2011-12-14T17:38:30.249Z","1.2.0":"2012-01-19T15:01:03.688Z","1.2.1":"2012-01-29T16:13:52.110Z","1.2.2":"2012-02-07T16:30:06.921Z","1.2.3":"2012-03-07T15:48:52.160Z","1.2.4":"2012-03-26T17:00:50.836Z","1.2.5":"2012-05-02T14:01:10.829Z","1.3.0":"2012-07-26T15:56:56.832Z","1.3.1":"2012-09-07T19:21:25.759Z","1.3.2":"2012-09-12T14:14:11.134Z","1.3.3":"2012-09-12T16:27:31.087Z","1.3.4":"2012-09-13T15:41:30.785Z","1.3.5":"2012-09-30T14:19:23.699Z","1.3.6":"2012-11-02T16:10:33.904Z","1.3.7":"2012-11-29T17:00:19.958Z","1.3.8":"2013-01-11T16:14:33.522Z","1.3.9":"2013-07-29T12:54:14.215Z","1.4.0":"2013-08-24T20:02:24.619Z","1.4.1":"2013-09-17T14:24:38.484Z"},"author":{"name":"Andrew Plummer"},"repository":{"type":"git","url":"https://github.com/andrewplummer/Sugar.git"},"users":{"fgribreau":true,"pid":true,"parmentf":true,"dbrockman":true,"vegera":true,"satans17":true,"noyobo":true,"yhnavein":true,"brentonhouse":true,"tektimmy":true,"barenko":true,"dar5hak":true,"kontrax":true},"_attachments":{},"_etag":"\"2SRRTSI1BJS21X4Z0SF81JV4B\""}