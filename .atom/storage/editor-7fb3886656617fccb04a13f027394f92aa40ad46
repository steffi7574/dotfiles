{"version":1,"windowDimensions":{"x":16,"y":22,"width":952,"height":1028,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/sguenther/Numerics/SU2"],"buffers":[{"text":"/*!\n * \\file braid_wrapper.cpp\n * \\brief Functions for XBraid integration.\n *\n * \\author S. Guenther\n *\n */\n\n #include <braid.hpp>\n\nint my_Phi( braid_App app, braid_Vector u, braid_PhiStatus status ){\n\n      // driver->Run(iteration_container, output, integration_container,\n                  // geometry_container, solver_container, numerics_container,\n                  // config_container, surface_movement, grid_movement, FFDBox,\n                  // interpolator_container, transfer_container);\n  return 0;\n}\n\nint my_Init( braid_App app, double t, braid_Vector *u_ptr ){\n\n  return 0;\n}\n\nint my_Clone( braid_App app, braid_Vector u, braid_Vector *v_ptr ){\n\n  return 0;\n}\n\nint my_Free( braid_App app, braid_Vector u ){\n\n  return 0;\n}\n\nint my_Sum( braid_App app, double alpha, braid_Vector x, double beta,\n    braid_Vector y ){\n\n  return 0;\n}\n\nint my_SpatialNorm( braid_App app, braid_Vector u, double *norm_ptr ){\n\n  return 0;\n}\n\nint my_Access( braid_App app, braid_Vector u, braid_AccessStatus astatus ){\n\n  return 0;\n}\n\nint my_BufSize ( braid_App app, int *size_ptr ){\n\n  return 0;\n}\n\nint my_BufPack( braid_App app, braid_Vector u, void *buffer,\n                braid_Int *size_ptr ){\n\n  return 0;\n}\n\nint my_BufUnpack( braid_App app, void *buffer, braid_Vector *u_ptr ){\n\n  return 0;\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":141,"id":"0","maintainHistory":false,"markersById":{"0-123":{"range":{"start":{"row":12,"column":0},"end":{"row":16,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-124":{"range":{"start":{"row":12,"column":0},"end":{"row":15,"column":65}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-131":{"range":{"start":{"row":12,"column":0},"end":{"row":16,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-132":{"range":{"start":{"row":12,"column":0},"end":{"row":15,"column":65}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-135":{"range":{"start":{"row":12,"column":0},"end":{"row":16,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-136":{"range":{"start":{"row":12,"column":0},"end":{"row":15,"column":65}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-139":{"range":{"start":{"row":12,"column":0},"end":{"row":16,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-140":{"range":{"start":{"row":12,"column":0},"end":{"row":15,"column":65}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":10,"id":"2","maintainHistory":true,"markersById":{"2-1":{"range":{"start":{"row":9,"column":0},"end":{"row":9,"column":0}},"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"nextMarkerId":0,"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"nextMarkerId":0,"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":459,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"2":{"2-1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[0,0],[0,1]],"newRange":[[0,0],[0,0]],"oldText":"a","newText":""}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[7,0]],"oldText":"","newText":"/*!\n * \\file braid_structure.hpp\n * \\brief Headers of structures and function for XBraid Integration\n *        The functions are in the <i>braid_wrapper.hpp</i> file.\n * \\author S. Guenther\n *\n */\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[1,23],[1,24]],"newRange":[[1,23],[1,23]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[1,22],[1,23]],"newRange":[[1,22],[1,22]],"oldText":"r","newText":""}},{"type":"change","content":{"oldRange":[[1,21],[1,22]],"newRange":[[1,21],[1,21]],"oldText":"u","newText":""}},{"type":"change","content":{"oldRange":[[1,20],[1,21]],"newRange":[[1,20],[1,20]],"oldText":"t","newText":""}},{"type":"change","content":{"oldRange":[[1,19],[1,20]],"newRange":[[1,19],[1,19]],"oldText":"c","newText":""}},{"type":"change","content":{"oldRange":[[1,18],[1,19]],"newRange":[[1,18],[1,18]],"oldText":"u","newText":""}},{"type":"change","content":{"oldRange":[[1,17],[1,18]],"newRange":[[1,17],[1,17]],"oldText":"r","newText":""}},{"type":"change","content":{"oldRange":[[1,16],[1,17]],"newRange":[[1,16],[1,16]],"oldText":"t","newText":""}},{"type":"change","content":{"oldRange":[[1,15],[1,16]],"newRange":[[1,15],[1,15]],"oldText":"s","newText":""}},{"type":"change","content":{"oldRange":[[1,15],[1,15]],"newRange":[[1,15],[1,16]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[1,16],[1,16]],"newRange":[[1,16],[1,17]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[1,17],[1,17]],"newRange":[[1,17],[1,18]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[1,18],[1,18]],"newRange":[[1,18],[1,19]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,19],[1,19]],"newRange":[[1,19],[1,20]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,20],[1,20]],"newRange":[[1,20],[1,21]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[1,21],[1,21]],"newRange":[[1,21],[1,22]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[1,23],[1,24]],"newRange":[[1,23],[1,23]],"oldText":"h","newText":""}},{"type":"change","content":{"oldRange":[[1,23],[1,23]],"newRange":[[1,23],[1,24]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[3,52],[3,53]],"newRange":[[3,52],[3,52]],"oldText":"h","newText":""}},{"type":"change","content":{"oldRange":[[3,52],[3,52]],"newRange":[[3,52],[3,53]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[2,10],[2,37]],"newRange":[[2,10],[2,11]],"oldText":"Headers of structures and f","newText":"M"}},{"type":"change","content":{"oldRange":[[2,11],[2,11]],"newRange":[[2,11],[2,12]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[2,12],[2,12]],"newRange":[[2,12],[2,13]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,13],[2,13]],"newRange":[[2,13],[2,14]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[2,14],[2,14]],"newRange":[[2,14],[2,15]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,15],[2,15]],"newRange":[[2,15],[2,16]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[3,0],[4,0]],"newRange":[[3,0],[3,0]],"oldText":" *        The functions are in the <i>braid_wrapper.cpp</i> file.\n","newText":""}},{"type":"change","content":{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[8,21]],"oldText":"","newText":"#pragma once\n\n #include <braid.hpp>"}},{"type":"change","content":{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[6,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[8,21],[8,21]],"newRange":[[8,21],[8,22]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[8,21],[8,22]],"newRange":[[8,21],[8,21]],"oldText":"a","newText":""}},{"type":"change","content":{"oldRange":[[8,21],[8,21]],"newRange":[[8,21],[9,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[9,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[9,1],[9,1]],"newRange":[[9,1],[10,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[10,0],[10,0]],"newRange":[[10,0],[10,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[9,0],[9,1]],"newRange":[[9,0],[9,0]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[10,1],[10,1]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[10,0],[10,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[10,1],[10,1]],"newRange":[[10,1],[91,1]],"oldText":"","newText":"/*!\n * \\brief This function tells XBraid how to take a time step. It advances the vector u from tstart to tstop.\n*/\nint my_Phi( braid_App app, braid_Vector u, braid_PhiStatus status ){\n\n  return 0;\n}\n\n/*!\n *\\brief Tells XBraid, how to initialize a vector at time t\n */\nint my_Init( braid_App app, double t, braid_Vector *u_ptr ){\n\n  return 0;\n}\n\n/*!\n *\\brief Tells XBraid, how to clone a vector u into a new vector, *v_ptr\n */\nint my_Clone( braid_App app, braid_Vector u, braid_Vector *v_ptr ){\n\n  return 0;\n}\n\n/*!\n *\\brief Tells XBraid, how to free a vector\n */\nint my_Free( braid_App app, braid_Vector u ){\n\n  return 0;\n}\n\n\n/*!\n *\\brief Tells XBraid, how to sum two vectors (y = ax + by)\n */\nint my_Sum( braid_App app, double alpha, braid_Vector x, double beta,\n    braid_Vector y ){\n\n  return 0;\n}\n\n/*!\n *\\brief Tells XBraid, how to take the norm of a braid_Vector\n */\nint my_SpatialNorm( braid_App app, braid_Vector u, double *norm_ptr ){\n\n  return 0;\n}\n\n/*!\n *\\brief Allows the user access to XBraid and the current solution vector at time t.\n */\nint my_Access( braid_App app, braid_Vector u, braid_AccessStatus astatus ){\n\n  return 0;\n}\n\n/*!\n *\\brief\n */\nint my_BufSize ( braid_App app, int *size_ptr ){\n\n  return 0;\n}\n\n/*!\n *\\brief XBraid function that packs a vector into a void * buffer for MPI communication\n */\nint my_BufPack( braid_App app, braid_Vector u, void *buffer,\n                braid_Int *size_ptr ){\n\n  return 0;\n}\n\n/*!\n *\\brief XBraid function that unpacks a void * buffer into a vector\n */\nint my_BufUnpack( braid_App app, void *buffer, braid_Vector *u_ptr ){\n\n  return 0;\n}"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[91,0],[91,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":58,"snapshot":{"2":{"2-1":{"range":[[69,8],[69,8]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[69,8],[69,8]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[69,8],[69,8]],"newRange":[[69,8],[69,9]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,9],[69,9]],"newRange":[[69,9],[69,10]],"oldText":"","newText":"C"}},{"type":"change","content":{"oldRange":[[69,9],[69,10]],"newRange":[[69,9],[69,9]],"oldText":"C","newText":""}},{"type":"change","content":{"oldRange":[[69,9],[69,9]],"newRange":[[69,9],[69,10]],"oldText":"","newText":"X"}},{"type":"change","content":{"oldRange":[[69,10],[69,10]],"newRange":[[69,10],[69,11]],"oldText":"","newText":"B"}},{"type":"change","content":{"oldRange":[[69,11],[69,11]],"newRange":[[69,11],[69,12]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[69,12],[69,12]],"newRange":[[69,12],[69,13]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[69,13],[69,13]],"newRange":[[69,13],[69,14]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[69,14],[69,14]],"newRange":[[69,14],[69,15]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[69,15],[69,15]],"newRange":[[69,15],[69,16]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,16],[69,16]],"newRange":[[69,16],[69,17]],"oldText":"","newText":"F"}},{"type":"change","content":{"oldRange":[[69,17],[69,17]],"newRange":[[69,17],[69,18]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[69,18],[69,18]],"newRange":[[69,18],[69,19]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[69,19],[69,19]],"newRange":[[69,19],[69,20]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[69,20],[69,20]],"newRange":[[69,20],[69,21]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,21],[69,21]],"newRange":[[69,21],[69,22]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[69,22],[69,22]],"newRange":[[69,22],[69,23]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,23],[69,23]],"newRange":[[69,23],[69,24]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[69,24],[69,24]],"newRange":[[69,24],[69,25]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,25],[69,25]],"newRange":[[69,25],[69,26]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,26],[69,26]],"newRange":[[69,26],[69,27]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[69,27],[69,27]],"newRange":[[69,27],[69,28]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[69,28],[69,28]],"newRange":[[69,28],[69,29]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,29],[69,29]],"newRange":[[69,29],[69,30]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,30],[69,30]],"newRange":[[69,30],[69,31]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[69,31],[69,31]],"newRange":[[69,31],[69,32]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,32],[69,32]],"newRange":[[69,32],[69,33]],"oldText":"","newText":"m"}},{"type":"change","content":{"oldRange":[[69,33],[69,33]],"newRange":[[69,33],[69,34]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[69,34],[69,34]],"newRange":[[69,34],[69,35]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[69,35],[69,35]],"newRange":[[69,35],[69,36]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,36],[69,36]],"newRange":[[69,36],[69,37]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,37],[69,37]],"newRange":[[69,37],[69,38]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[69,38],[69,38]],"newRange":[[69,38],[69,39]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,39],[69,39]],"newRange":[[69,39],[69,40]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,40],[69,40]],"newRange":[[69,40],[69,41]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[69,41],[69,41]],"newRange":[[69,41],[69,42]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,42],[69,42]],"newRange":[[69,42],[69,43]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,42],[69,43]],"newRange":[[69,42],[69,42]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[69,41],[69,42]],"newRange":[[69,41],[69,41]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[69,40],[69,41]],"newRange":[[69,40],[69,40]],"oldText":"h","newText":""}},{"type":"change","content":{"oldRange":[[69,40],[69,40]],"newRange":[[69,40],[69,41]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[69,41],[69,41]],"newRange":[[69,41],[69,42]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,42],[69,42]],"newRange":[[69,42],[69,43]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,43],[69,43]],"newRange":[[69,43],[69,44]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[69,44],[69,44]],"newRange":[[69,44],[69,45]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[69,45],[69,45]],"newRange":[[69,45],[69,46]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[69,46],[69,46]],"newRange":[[69,46],[69,47]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,47],[69,47]],"newRange":[[69,47],[69,48]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[69,48],[69,48]],"newRange":[[69,48],[69,49]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,49],[69,49]],"newRange":[[69,49],[69,50]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[69,50],[69,50]],"newRange":[[69,50],[69,51]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,51],[69,51]],"newRange":[[69,51],[69,52]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[69,52],[69,52]],"newRange":[[69,52],[69,53]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[69,53],[69,53]],"newRange":[[69,53],[69,54]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[69,54],[69,54]],"newRange":[[69,54],[69,55]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,55],[69,55]],"newRange":[[69,55],[69,56]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[69,56],[69,56]],"newRange":[[69,56],[69,57]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,57],[69,57]],"newRange":[[69,57],[69,58]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[69,58],[69,58]],"newRange":[[69,58],[69,59]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,59],[69,59]],"newRange":[[69,59],[69,60]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,60],[69,60]],"newRange":[[69,60],[69,61]],"oldText":"","newText":"h"}},{"type":"change","content":{"oldRange":[[69,61],[69,61]],"newRange":[[69,61],[69,62]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,62],[69,62]],"newRange":[[69,62],[69,63]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,63],[69,63]],"newRange":[[69,63],[69,64]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[69,64],[69,64]],"newRange":[[69,64],[69,65]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[69,65],[69,65]],"newRange":[[69,65],[69,66]],"oldText":"","newText":"z"}},{"type":"change","content":{"oldRange":[[69,66],[69,66]],"newRange":[[69,66],[69,67]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,67],[69,67]],"newRange":[[69,67],[69,68]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,68],[69,68]],"newRange":[[69,68],[69,69]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,69],[69,69]],"newRange":[[69,69],[69,70]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[69,70],[69,70]],"newRange":[[69,70],[69,71]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,71],[69,71]],"newRange":[[69,71],[69,72]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[69,72],[69,72]],"newRange":[[69,72],[69,73]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,73],[69,73]],"newRange":[[69,73],[69,74]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[69,74],[69,74]],"newRange":[[69,74],[69,75]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,75],[69,75]],"newRange":[[69,75],[69,76]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[69,76],[69,76]],"newRange":[[69,76],[69,77]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[69,77],[69,77]],"newRange":[[69,77],[69,78]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,78],[69,78]],"newRange":[[69,78],[69,79]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[69,79],[69,79]],"newRange":[[69,79],[69,80]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,80],[69,80]],"newRange":[[69,80],[69,81]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[69,81],[69,81]],"newRange":[[69,81],[69,82]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[69,82],[69,82]],"newRange":[[69,82],[69,83]],"oldText":"","newText":"v"}},{"type":"change","content":{"oldRange":[[69,83],[69,83]],"newRange":[[69,83],[69,84]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[69,84],[69,84]],"newRange":[[69,84],[69,85]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[69,85],[69,85]],"newRange":[[69,85],[69,86]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[69,86],[69,86]],"newRange":[[69,86],[69,87]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[69,87],[69,87]],"newRange":[[69,87],[69,88]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[69,88],[69,88]],"newRange":[[69,88],[69,89]],"oldText":"","newText":"."}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[69,89],[69,89]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[38,0],[38,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[91,1],[91,1]],"newRange":[[91,1],[92,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[38,0],[38,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":154,"snapshot":{"2":{"2-1":{"range":[[10,0],[10,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[10,0],[10,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[10,0],[13,0]],"newRange":[[10,0],[10,0]],"oldText":" /*!\n * \\brief This function tells XBraid how to take a time step. It advances the vector u from tstart to tstop.\n*/\n","newText":""}},{"type":"change","content":{"oldRange":[[15,0],[18,0]],"newRange":[[15,0],[15,0]],"oldText":"/*!\n *\\brief Tells XBraid, how to initialize a vector at time t\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[20,0],[23,0]],"newRange":[[20,0],[20,0]],"oldText":"/*!\n *\\brief Tells XBraid, how to clone a vector u into a new vector, *v_ptr\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[25,0],[28,0]],"newRange":[[25,0],[25,0]],"oldText":"/*!\n *\\brief Tells XBraid, how to free a vector\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[30,0],[34,0]],"newRange":[[30,0],[30,0]],"oldText":"\n/*!\n *\\brief Tells XBraid, how to sum two vectors (y = ax + by)\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[36,0],[39,0]],"newRange":[[36,0],[36,0]],"oldText":"/*!\n *\\brief Tells XBraid, how to take the norm of a braid_Vector\n */\n","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,0],[41,3]],"properties":{"type":"selection","autoscroll":false,"vim-mode-plus":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-4":{"range":[[49,0],[49,3]],"properties":{"type":"selection"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-5":{"range":[[57,0],[57,3]],"properties":{"type":"selection"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-6":{"range":[[66,0],[66,3]],"properties":{"type":"selection"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-7":{"range":[[0,0],[0,3]],"properties":{"type":"selection"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,0],[44,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-4":{"range":[[49,0],[52,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-5":{"range":[[57,0],[60,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-6":{"range":[[66,0],[69,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"2-7":{"range":[[0,0],[3,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,0],[44,0]],"newRange":[[41,0],[41,0]],"oldText":"/*!\n *\\brief Allows the user access to XBraid and the current solution vector at time t.\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[46,0],[49,0]],"newRange":[[46,0],[46,0]],"oldText":"/*!\n *\\brief XBraid Function that computes the upper bound for the size of a solution vector.\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[51,0],[54,0]],"newRange":[[51,0],[51,0]],"oldText":"/*!\n *\\brief XBraid function that packs a vector into a void * buffer for MPI communication\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[57,0],[60,0]],"newRange":[[57,0],[57,0]],"oldText":"/*!\n *\\brief XBraid function that unpacks a void * buffer into a vector\n */\n","newText":""}},{"type":"change","content":{"oldRange":[[0,0],[3,0]],"newRange":[[0,0],[0,0]],"oldText":"/*!\n * \\file braid_wrapper.cpp\n * \\brief Main function for XBraid Integration\n","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[38,0],[38,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"},"2-4":{"range":[[43,0],[43,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"},"2-5":{"range":[[48,0],[48,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"},"2-6":{"range":[[54,0],[54,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"},"2-7":{"range":[[0,1],[0,1]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":171,"snapshot":{"2":{"2-1":{"range":[[0,3],[0,3]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[0,3],[0,3]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,1],[0,1]],"newRange":[[0,1],[1,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[0,0],[0,1]],"newRange":[[0,0],[0,0]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[0,1],[0,1]],"newRange":[[0,1],[0,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[0,2],[0,2]],"newRange":[[0,2],[0,3]],"oldText":"","newText":"!"}},{"type":"change","content":{"oldRange":[[0,3],[0,3]],"newRange":[[0,3],[1,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,2]],"oldText":"","newText":"  "}},{"type":"change","content":{"oldRange":[[1,0],[1,2]],"newRange":[[1,0],[1,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[1,1],[1,1]],"newRange":[[1,1],[1,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[1,2],[1,2]],"newRange":[[1,2],[1,3]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[1,3],[1,3]],"newRange":[[1,3],[1,4]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[1,4],[1,4]],"newRange":[[1,4],[1,5]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[1,5],[1,5]],"newRange":[[1,5],[1,6]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[1,6],[1,6]],"newRange":[[1,6],[1,7]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[1,6],[1,7]],"newRange":[[1,6],[1,6]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[1,5],[1,6]],"newRange":[[1,5],[1,5]],"oldText":"l","newText":""}},{"type":"change","content":{"oldRange":[[1,4],[1,5]],"newRange":[[1,4],[1,4]],"oldText":"i","newText":""}},{"type":"change","content":{"oldRange":[[1,3],[1,4]],"newRange":[[1,3],[1,3]],"oldText":"f","newText":""}},{"type":"change","content":{"oldRange":[[1,3],[1,3]],"newRange":[[1,3],[1,4]],"oldText":"","newText":"\\"}},{"type":"change","content":{"oldRange":[[1,4],[1,4]],"newRange":[[1,4],[1,5]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[1,5],[1,5]],"newRange":[[1,5],[1,6]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[1,6],[1,6]],"newRange":[[1,6],[1,7]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[1,7],[1,7]],"newRange":[[1,7],[1,8]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[1,8],[1,8]],"newRange":[[1,8],[1,9]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[1,9],[1,9]],"newRange":[[1,9],[1,10]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[1,10],[1,10]],"newRange":[[1,10],[1,11]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[1,11],[1,11]],"newRange":[[1,11],[1,12]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[1,12],[1,12]],"newRange":[[1,12],[1,13]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[1,13],[1,13]],"newRange":[[1,13],[1,14]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[1,14],[1,14]],"newRange":[[1,14],[1,15]],"oldText":"","newText":"_"}},{"type":"change","content":{"oldRange":[[1,15],[1,15]],"newRange":[[1,15],[1,16]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[1,15],[1,16]],"newRange":[[1,15],[1,15]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[1,15],[1,15]],"newRange":[[1,15],[1,16]],"oldText":"","newText":"w"}},{"type":"change","content":{"oldRange":[[1,16],[1,16]],"newRange":[[1,16],[1,17]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,17],[1,17]],"newRange":[[1,17],[1,18]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[1,17],[1,18]],"newRange":[[1,17],[1,17]],"oldText":"r","newText":""}},{"type":"change","content":{"oldRange":[[1,16],[1,17]],"newRange":[[1,16],[1,16]],"oldText":"p","newText":""}},{"type":"change","content":{"oldRange":[[1,16],[1,16]],"newRange":[[1,16],[1,17]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[1,17],[1,17]],"newRange":[[1,17],[1,18]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[1,18],[1,18]],"newRange":[[1,18],[1,19]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,19],[1,19]],"newRange":[[1,19],[1,20]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,20],[1,20]],"newRange":[[1,20],[1,21]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[1,21],[1,21]],"newRange":[[1,21],[1,22]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[1,22],[1,22]],"newRange":[[1,22],[1,23]],"oldText":"","newText":"."}},{"type":"change","content":{"oldRange":[[1,23],[1,23]],"newRange":[[1,23],[1,24]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[1,24],[1,24]],"newRange":[[1,24],[1,25]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,25],[1,25]],"newRange":[[1,25],[1,26]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[1,26],[1,26]],"newRange":[[1,26],[2,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,1],[2,1]],"newRange":[[2,1],[2,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[2,2],[2,2]],"newRange":[[2,2],[2,3]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,3],[2,3]],"newRange":[[2,3],[2,4]],"oldText":"","newText":"\\"}},{"type":"change","content":{"oldRange":[[2,4],[2,4]],"newRange":[[2,4],[2,5]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[2,5],[2,5]],"newRange":[[2,5],[2,6]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[2,6],[2,6]],"newRange":[[2,6],[2,7]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,7],[2,7]],"newRange":[[2,7],[2,8]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[2,8],[2,8]],"newRange":[[2,8],[2,9]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[2,9],[2,9]],"newRange":[[2,9],[2,10]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,10],[2,10]],"newRange":[[2,10],[2,11]],"oldText":"","newText":"M"}},{"type":"change","content":{"oldRange":[[2,11],[2,11]],"newRange":[[2,11],[2,12]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[2,12],[2,12]],"newRange":[[2,12],[2,13]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,13],[2,13]],"newRange":[[2,13],[2,14]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[2,14],[2,14]],"newRange":[[2,14],[2,15]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,14],[2,15]],"newRange":[[2,14],[2,14]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[2,13],[2,14]],"newRange":[[2,13],[2,13]],"oldText":"n","newText":""}},{"type":"change","content":{"oldRange":[[2,12],[2,13]],"newRange":[[2,12],[2,12]],"oldText":"i","newText":""}},{"type":"change","content":{"oldRange":[[2,11],[2,12]],"newRange":[[2,11],[2,11]],"oldText":"a","newText":""}},{"type":"change","content":{"oldRange":[[2,10],[2,11]],"newRange":[[2,10],[2,10]],"oldText":"M","newText":""}},{"type":"change","content":{"oldRange":[[2,10],[2,10]],"newRange":[[2,10],[2,11]],"oldText":"","newText":"F"}},{"type":"change","content":{"oldRange":[[2,11],[2,11]],"newRange":[[2,11],[2,12]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[2,12],[2,12]],"newRange":[[2,12],[2,13]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[2,13],[2,13]],"newRange":[[2,13],[2,14]],"oldText":"","newText":"c"}},{"type":"change","content":{"oldRange":[[2,14],[2,14]],"newRange":[[2,14],[2,15]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[2,15],[2,15]],"newRange":[[2,15],[2,16]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,16],[2,16]],"newRange":[[2,16],[2,17]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[2,17],[2,17]],"newRange":[[2,17],[2,18]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[2,18],[2,18]],"newRange":[[2,18],[2,19]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[2,19],[2,19]],"newRange":[[2,19],[2,20]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,20],[2,20]],"newRange":[[2,20],[2,21]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[2,21],[2,21]],"newRange":[[2,21],[2,22]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[2,22],[2,22]],"newRange":[[2,22],[2,23]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[2,23],[2,23]],"newRange":[[2,23],[2,24]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,24],[2,24]],"newRange":[[2,24],[2,25]],"oldText":"","newText":"X"}},{"type":"change","content":{"oldRange":[[2,25],[2,25]],"newRange":[[2,25],[2,26]],"oldText":"","newText":"B"}},{"type":"change","content":{"oldRange":[[2,26],[2,26]],"newRange":[[2,26],[2,27]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[2,27],[2,27]],"newRange":[[2,27],[2,28]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[2,28],[2,28]],"newRange":[[2,28],[2,29]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,29],[2,29]],"newRange":[[2,29],[2,30]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[2,30],[2,30]],"newRange":[[2,30],[2,31]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[2,31],[2,31]],"newRange":[[2,31],[2,32]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,32],[2,32]],"newRange":[[2,32],[2,33]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[2,33],[2,33]],"newRange":[[2,33],[2,34]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[2,34],[2,34]],"newRange":[[2,34],[2,35]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[2,35],[2,35]],"newRange":[[2,35],[2,36]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[2,36],[2,36]],"newRange":[[2,36],[2,37]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[2,37],[2,37]],"newRange":[[2,37],[2,38]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[2,38],[2,38]],"newRange":[[2,38],[2,39]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[2,39],[2,39]],"newRange":[[2,39],[2,40]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[2,40],[2,40]],"newRange":[[2,40],[2,41]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[2,41],[2,41]],"newRange":[[2,41],[2,42]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[2,42],[2,42]],"newRange":[[2,42],[2,43]],"oldText":"","newText":"."}},{"type":"change","content":{"oldRange":[[2,43],[2,43]],"newRange":[[2,43],[3,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[3,1]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[3,1],[3,1]],"newRange":[[3,1],[3,2]],"oldText":"","newText":"*"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[3,2],[3,2]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":294,"snapshot":{"2":{"2-1":{"range":[[9,12],[9,12]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"checkpoint","id":295,"snapshot":{"2":{"2-1":{"range":[[9,13],[9,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[9,13],[9,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[9,13],[9,13]],"newRange":[[9,13],[9,14]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[9,14],[9,14]],"newRange":[[9,14],[9,15]],"oldText":"","newText":"t"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[9,15],[9,15]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[9,13],[9,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[9,13],[9,14]],"newRange":[[9,13],[9,13]],"oldText":"u","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[9,13],[9,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[9,13],[9,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[9,13],[9,14]],"newRange":[[9,13],[9,13]],"oldText":"t","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[9,13],[9,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[7,0],[8,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[7,0],[8,0]],"newRange":[[7,0],[7,0]],"oldText":" #pragma once\n","newText":""}},{"type":"change","content":{"oldRange":[[6,3],[7,0]],"newRange":[[6,3],[6,3]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[6,3],[6,3]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[6,3],[6,3]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[6,3],[6,3]],"newRange":[[6,3],[7,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[7,1]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[7,1],[7,1]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[40,0],[40,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[41,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[41,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[40,0],[40,0]],"newRange":[[40,0],[40,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[41,1]],"oldText":"","newText":"%"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,1],[41,1]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,1],[41,1]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,1],[41,1]],"newRange":[[41,1],[41,2]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,2],[41,2]],"newRange":[[41,2],[41,3]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,3],[41,3]],"newRange":[[41,3],[41,4]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,4],[41,4]],"newRange":[[41,4],[41,5]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,5],[41,5]],"newRange":[[41,5],[41,6]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,6],[41,6]],"newRange":[[41,6],[41,7]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,7],[41,7]],"newRange":[[41,7],[41,8]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,8],[41,8]],"newRange":[[41,8],[41,9]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,9],[41,9]],"newRange":[[41,9],[41,10]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,10],[41,10]],"newRange":[[41,10],[41,11]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,11],[41,11]],"newRange":[[41,11],[41,12]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,12],[41,12]],"newRange":[[41,12],[41,13]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,13],[41,13]],"newRange":[[41,13],[41,14]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,14],[41,14]],"newRange":[[41,14],[41,15]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,15],[41,15]],"newRange":[[41,15],[41,16]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[41,15],[41,16]],"newRange":[[41,15],[41,15]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,14],[41,15]],"newRange":[[41,14],[41,14]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,13],[41,14]],"newRange":[[41,13],[41,13]],"oldText":"%","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,13],[41,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,13],[41,13]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,12],[41,13]],"newRange":[[41,12],[41,12]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,11],[41,12]],"newRange":[[41,11],[41,11]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,10],[41,11]],"newRange":[[41,10],[41,10]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,9],[41,10]],"newRange":[[41,9],[41,9]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,8],[41,9]],"newRange":[[41,8],[41,8]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,7],[41,8]],"newRange":[[41,7],[41,7]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,6],[41,7]],"newRange":[[41,6],[41,6]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,5],[41,6]],"newRange":[[41,5],[41,5]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,4],[41,5]],"newRange":[[41,4],[41,4]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,3],[41,4]],"newRange":[[41,3],[41,3]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,2],[41,3]],"newRange":[[41,2],[41,2]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,1],[41,2]],"newRange":[[41,1],[41,1]],"oldText":"%","newText":""}},{"type":"change","content":{"oldRange":[[41,0],[41,1]],"newRange":[[41,0],[41,0]],"oldText":"%","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,0],[41,0]],"newRange":[[41,0],[41,1]],"oldText":"","newText":"/"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,1],[41,1]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,1],[41,1]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,1],[41,1]],"newRange":[[41,1],[41,2]],"oldText":"","newText":"#"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,2],[41,2]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,2],[41,2]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,2],[41,2]],"newRange":[[41,2],[41,3]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,3],[41,3]],"newRange":[[41,3],[41,4]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,4],[41,4]],"newRange":[[41,4],[41,5]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,5],[41,5]],"newRange":[[41,5],[41,6]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,6],[41,6]],"newRange":[[41,6],[41,7]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,7],[41,7]],"newRange":[[41,7],[41,8]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,8],[41,8]],"newRange":[[41,8],[41,9]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,9],[41,9]],"newRange":[[41,9],[41,10]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,10],[41,10]],"newRange":[[41,10],[41,11]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,11],[41,11]],"newRange":[[41,11],[41,12]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,12],[41,12]],"newRange":[[41,12],[41,13]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,13],[41,13]],"newRange":[[41,13],[41,14]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,14],[41,14]],"newRange":[[41,14],[41,15]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,15],[41,15]],"newRange":[[41,15],[41,16]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,16],[41,16]],"newRange":[[41,16],[41,17]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,17],[41,17]],"newRange":[[41,17],[41,18]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,18],[41,18]],"newRange":[[41,18],[41,19]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,19],[41,19]],"newRange":[[41,19],[41,20]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,20],[41,20]],"newRange":[[41,20],[41,21]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,21],[41,21]],"newRange":[[41,21],[41,22]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,22],[41,22]],"newRange":[[41,22],[41,23]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,23],[41,23]],"newRange":[[41,23],[41,24]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,24],[41,24]],"newRange":[[41,24],[41,25]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,25],[41,25]],"newRange":[[41,25],[41,26]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,26],[41,26]],"newRange":[[41,26],[41,27]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,27],[41,27]],"newRange":[[41,27],[41,28]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,28],[41,28]],"newRange":[[41,28],[41,29]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,29],[41,29]],"newRange":[[41,29],[41,30]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,30],[41,30]],"newRange":[[41,30],[41,31]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,31],[41,31]],"newRange":[[41,31],[41,32]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,32],[41,32]],"newRange":[[41,32],[41,33]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,33],[41,33]],"newRange":[[41,33],[41,34]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,34],[41,34]],"newRange":[[41,34],[41,35]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,35],[41,35]],"newRange":[[41,35],[41,36]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,36],[41,36]],"newRange":[[41,36],[41,37]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,37],[41,37]],"newRange":[[41,37],[41,38]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,38],[41,38]],"newRange":[[41,38],[41,39]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,39],[41,39]],"newRange":[[41,39],[41,40]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,40],[41,40]],"newRange":[[41,40],[41,41]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,41],[41,41]],"newRange":[[41,41],[41,42]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,42],[41,42]],"newRange":[[41,42],[41,43]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,43],[41,43]],"newRange":[[41,43],[41,44]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,44],[41,44]],"newRange":[[41,44],[41,45]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,45],[41,45]],"newRange":[[41,45],[41,46]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,46],[41,46]],"newRange":[[41,46],[41,47]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,47],[41,47]],"newRange":[[41,47],[41,48]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,48],[41,48]],"newRange":[[41,48],[41,49]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,49],[41,49]],"newRange":[[41,49],[41,50]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,50],[41,50]],"newRange":[[41,50],[41,51]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,51],[41,51]],"newRange":[[41,51],[41,52]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,52],[41,52]],"newRange":[[41,52],[41,53]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,53],[41,53]],"newRange":[[41,53],[41,54]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,54],[41,54]],"newRange":[[41,54],[41,55]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,55],[41,55]],"newRange":[[41,55],[41,56]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,56],[41,56]],"newRange":[[41,56],[41,57]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,57],[41,57]],"newRange":[[41,57],[41,58]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,58],[41,58]],"newRange":[[41,58],[41,59]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,59],[41,59]],"newRange":[[41,59],[41,60]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,60],[41,60]],"newRange":[[41,60],[41,61]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,61],[41,61]],"newRange":[[41,61],[41,62]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,62],[41,62]],"newRange":[[41,62],[41,63]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,63],[41,63]],"newRange":[[41,63],[41,64]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,64],[41,64]],"newRange":[[41,64],[41,65]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,65],[41,65]],"newRange":[[41,65],[41,66]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,66],[41,66]],"newRange":[[41,66],[41,67]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,67],[41,67]],"newRange":[[41,67],[41,68]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,68],[41,68]],"newRange":[[41,68],[41,69]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,69],[41,69]],"newRange":[[41,69],[41,70]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,70],[41,70]],"newRange":[[41,70],[41,71]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,71],[41,71]],"newRange":[[41,71],[41,72]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,72],[41,72]],"newRange":[[41,72],[41,73]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,73],[41,73]],"newRange":[[41,73],[41,74]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,74],[41,74]],"newRange":[[41,74],[41,75]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,75],[41,75]],"newRange":[[41,75],[41,76]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,76],[41,76]],"newRange":[[41,76],[41,77]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,77],[41,77]],"newRange":[[41,77],[41,78]],"oldText":"","newText":"#"}},{"type":"change","content":{"oldRange":[[41,78],[41,78]],"newRange":[[41,78],[41,79]],"oldText":"","newText":"#"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,79],[41,79]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,0],[42,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[41,0],[42,0]],"newRange":[[41,0],[41,0]],"oldText":"/##############################################################################\n","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[7,0],[7,1]],"newRange":[[7,0],[7,0]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[41,0],[41,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"checkpoint","id":451,"snapshot":{"2":{"2-1":{"range":[[11,0],[11,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"checkpoint","id":452,"snapshot":{"2":{"2-1":{"range":[[11,0],[11,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[11,0],[11,0]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[11,0],[11,0]],"newRange":[[11,0],[12,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[15,62]],"oldText":"","newText":"      driver->Run(iteration_container, output, integration_container,\n                  geometry_container, solver_container, numerics_container,\n                  config_container, surface_movement, grid_movement, FFDBox,\n                  interpolator_container, transfer_container);"}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[12,6],[12,6]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[12,6],[12,6]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[12,6],[12,6]],"newRange":[[12,6],[12,9]],"oldText":"","newText":"// "}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[12,9],[12,9]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":null,"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"2-1":{"range":[[13,8],[15,10]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":{"characterwise":{"head":{"row":13,"column":9},"tail":{"row":13,"column":8},"reversed":false}},"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[13,18],[13,18]],"newRange":[[13,18],[13,21]],"oldText":"","newText":"// "}},{"type":"change","content":{"oldRange":[[14,18],[14,18]],"newRange":[[14,18],[14,21]],"oldText":"","newText":"// "}},{"type":"change","content":{"oldRange":[[15,18],[15,18]],"newRange":[[15,18],[15,21]],"oldText":"","newText":"// "}},{"type":"group-end","snapshot":{"2":{"2-1":{"range":[[13,8],[15,10]],"properties":{"type":"selection","autoscroll":false,"preserveFolds":true,"vim-mode-plus":{"characterwise":{"head":{"row":13,"column":9},"tail":{"row":13,"column":8},"reversed":false}},"goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/braid_wrapper.cpp","digestWhenLastPersisted":"d426469c6684bef30bc0ea00a1209d418b592109","preferredLineEnding":"\n","deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file solver_structure.hpp\n * \\brief Headers of the main subroutines for solving partial differential equations.\n *        The subroutines and functions are in the <i>solver_structure.cpp</i>,\n *        <i>solution_direct.cpp</i>, <i>solution_adjoint.cpp</i>, and\n *        <i>solution_linearized.cpp</i> files.\n * \\author F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#pragma once\n\n#include \"../../Common/include/mpi_structure.hpp\"\n\n#include <cmath>\n#include <string>\n#include <fstream>\n#include <sstream>\n#include <algorithm>\n#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <complex>\n\n#include \"fluid_model.hpp\"\n#include \"numerics_structure.hpp\"\n#include \"variable_structure.hpp\"\n#include \"../../Common/include/gauss_structure.hpp\"\n#include \"../../Common/include/element_structure.hpp\"\n#include \"../../Common/include/geometry_structure.hpp\"\n#include \"../../Common/include/config_structure.hpp\"\n#include \"../../Common/include/matrix_structure.hpp\"\n#include \"../../Common/include/vector_structure.hpp\"\n#include \"../../Common/include/linear_solvers_structure.hpp\"\n#include \"../../Common/include/grid_movement_structure.hpp\"\n\nusing namespace std;\n\n/*!\n * \\class CSolver\n * \\brief Main class for defining the PDE solution, it requires\n * a child class for each particular solver (Euler, Navier-Stokes, etc.)\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CSolver {\nprotected:\n\tunsigned short IterLinSolver;\t/*!< \\brief Linear solver iterations. */\n\tunsigned short nVar,\t\t\t\t\t/*!< \\brief Number of variables of the problem. */\n  nPrimVar,                     /*!< \\brief Number of primitive variables of the problem. */\n  nPrimVarGrad,                 /*!< \\brief Number of primitive variables of the problem in the gradient computation. */\n  nSecondaryVar,                     /*!< \\brief Number of primitive variables of the problem. */\n  nSecondaryVarGrad,                 /*!< \\brief Number of primitive variables of the problem in the gradient computation. */\n\tnDim;\t\t\t\t\t\t\t\t\t\t\t\t\t/*!< \\brief Number of dimensions of the problem. */\n\tunsigned long nPoint;\t\t\t\t\t/*!< \\brief Number of points of the computational grid. */\n  unsigned long nPointDomain; \t/*!< \\brief Number of points of the computational grid. */\n\tsu2double Max_Delta_Time,\t/*!< \\brief Maximum value of the delta time for all the control volumes. */\n\tMin_Delta_Time;\t\t\t\t\t/*!< \\brief Minimum value of the delta time for all the control volumes. */\n\tsu2double *Residual_RMS,\t/*!< \\brief Vector with the mean residual for each variable. */\n  *Residual_Max,        /*!< \\brief Vector with the maximal residual for each variable. */\n\t*Residual,\t\t\t\t\t\t/*!< \\brief Auxiliary nVar vector. */\n\t*Residual_i,\t\t\t\t\t/*!< \\brief Auxiliary nVar vector for storing the residual at point i. */\n\t*Residual_j;\t\t\t\t\t/*!< \\brief Auxiliary nVar vector for storing the residual at point j. */\n  unsigned long *Point_Max; /*!< \\brief Vector with the maximal residual for each variable. */\n  su2double **Point_Max_Coord; /*!< \\brief Vector with pointers to the coords of the maximal residual for each variable. */\n\tsu2double *Solution,\t\t/*!< \\brief Auxiliary nVar vector. */\n\t*Solution_i,\t\t\t\t/*!< \\brief Auxiliary nVar vector for storing the solution at point i. */\n\t*Solution_j;\t\t\t\t/*!< \\brief Auxiliary nVar vector for storing the solution at point j. */\n\tsu2double *Vector,\t/*!< \\brief Auxiliary nDim vector. */\n\t*Vector_i,\t\t\t/*!< \\brief Auxiliary nDim vector to do the reconstruction of the variables at point i. */\n\t*Vector_j;\t\t\t/*!< \\brief Auxiliary nDim vector to do the reconstruction of the variables at point j. */\n\tsu2double *Res_Conv,\t/*!< \\brief Auxiliary nVar vector for storing the convective residual. */\n\t*Res_Visc,\t\t\t\t/*!< \\brief Auxiliary nVar vector for storing the viscous residual. */\n\t*Res_Sour,\t\t\t\t/*!< \\brief Auxiliary nVar vector for storing the viscous residual. */\n\t*Res_Conv_i,\t\t  /*!< \\brief Auxiliary vector for storing the convective residual at point i. */\n\t*Res_Visc_i,\t\t\t/*!< \\brief Auxiliary vector for storing the viscous residual at point i. */\n\t*Res_Conv_j,\t\t\t/*!< \\brief Auxiliary vector for storing the convective residual at point j. */\n\t*Res_Visc_j;\t\t\t/*!< \\brief Auxiliary vector for storing the viscous residual at point j. */\n\tsu2double **Jacobian_i,\t/*!< \\brief Auxiliary matrices for storing point to point Jacobians at point i. */\n\t**Jacobian_j;\t\t\t    /*!< \\brief Auxiliary matrices for storing point to point Jacobians at point j. */\n\tsu2double **Jacobian_ii,\t/*!< \\brief Auxiliary matrices for storing point to point Jacobians. */\n\t**Jacobian_ij,\t\t\t  /*!< \\brief Auxiliary matrices for storing point to point Jacobians. */\n\t**Jacobian_ji,\t\t\t  /*!< \\brief Auxiliary matrices for storing point to point Jacobians. */\n\t**Jacobian_jj;\t\t\t  /*!< \\brief Auxiliary matrices for storing point to point Jacobians. */\n\n\tsu2double **Smatrix,\t/*!< \\brief Auxiliary structure for computing gradients by least-squares */\n\t**cvector;\t\t\t /*!< \\brief Auxiliary structure for computing gradients by least-squares */\n\n    unsigned short nOutputVariables;  /*!< \\brief Number of variables to write. */\n\npublic:\n\n  CSysVector LinSysSol;\t\t/*!< \\brief vector to store iterative solution of implicit linear system. */\n  CSysVector LinSysRes;\t\t/*!< \\brief vector to store iterative residual of implicit linear system. */\n  CSysVector LinSysAux;\t\t/*!< \\brief vector to store iterative residual of implicit linear system. */\n  CSysMatrix Jacobian; /*!< \\brief Complete sparse Jacobian structure for implicit computations. */\n\n  CSysMatrix StiffMatrix; /*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations, and grid movement. */\n\n  CSysVector OutputVariables;\t\t/*!< \\brief vector to store the extra variables to be written. */\n  string* OutputHeadingNames; /*< \\brief vector of strings to store the headings for the exra variables */\n\n  CVariable** node;\t/*!< \\brief Vector which the define the variables for each problem. */\n  CVariable* node_infty; /*!< \\brief CVariable storing the free stream conditions. */\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCSolver(void);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CSolver(void);\n\n    /*!\n\t * \\brief Set number of linear solver iterations.\n\t * \\param[in] val_iterlinsolver - Number of linear iterations.\n\t */\n\tvoid SetIterLinSolver(unsigned short val_iterlinsolver);\n\n\t/*!\n\t * \\brief Set number of linear solver iterations.\n\t * \\param[in] val_iterlinsolver - Number of linear iterations.\n\t */\n\tvirtual void Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Set number of linear solver iterations.\n\t * \\param[in] val_iterlinsolver - Number of linear iterations.\n\t */\n\tvirtual void Set_MPI_Primitive(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief Set number of linear solver iterations.\n//\t * \\param[in] val_iterlinsolver - Number of linear iterations.\n//\t */\n//\tvirtual void Set_MPI_Secondary(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Set the value of the max residual and RMS residual.\n\t * \\param[in] val_iterlinsolver - Number of linear iterations.\n\t */\n\tvoid SetResidual_RMS(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Set number of linear solver iterations.\n\t * \\param[in] val_iterlinsolver - Number of linear iterations.\n\t */\n\tvirtual void Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition for velocities and accelerations in structural solutions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_Solution_DispOnly(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition for predicted FSI structural solutions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_Solution_Pred(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition for old predicted FSI structural solutions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_Solution_Pred_Old(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  virtual void Set_MPI_Solution_Limiter(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  virtual void Set_MPI_Primitive_Limiter(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief Impose the send-receive boundary condition.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//  virtual void Set_MPI_Secondary_Limiter(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Set the fluid solver nondimensionalization.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  virtual void SetNondimensionalization(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the pressure at the infinity.\n\t * \\return Value of the pressure at the infinity.\n\t */\n  virtual CFluidModel* GetFluidModel(void);\n\n  \t/*!\n\t * \\brief Get number of linear solver iterations.\n\t * \\return Number of linear solver iterations.\n\t */\n\tunsigned short GetIterLinSolver(void);\n\n\t/*!\n\t * \\brief Get the value of the maximum delta time.\n\t * \\return Value of the maximum delta time.\n\t */\n\tsu2double GetMax_Delta_Time(void);\n\n\t/*!\n\t * \\brief Get the value of the minimum delta time.\n\t * \\return Value of the minimum delta time.\n\t */\n\tsu2double GetMin_Delta_Time(void);\n\n    /*!\n\t * \\brief Get the value of the maximum delta time.\n\t * \\return Value of the maximum delta time.\n\t */\n\tvirtual su2double GetMax_Delta_Time(unsigned short val_Species);\n\n\t/*!\n\t * \\brief Get the value of the minimum delta time.\n\t * \\return Value of the minimum delta time.\n\t */\n\tvirtual su2double GetMin_Delta_Time(unsigned short val_Species);\n\n\t/*!\n\t * \\brief Get the number of variables of the problem.\n\t */\n\tunsigned short GetnVar(void);\n\n  /*!\n\t * \\brief Get the number of variables of the problem.\n\t */\n\tunsigned short GetnPrimVar(void);\n\n  /*!\n\t * \\brief Get the number of variables of the problem.\n\t */\n\tunsigned short GetnPrimVarGrad(void);\n\n  /*!\n\t * \\brief Get the number of variables of the problem.\n\t */\n\tunsigned short GetnSecondaryVar(void);\n\n  /*!\n\t * \\brief Get the number of variables of the problem.\n\t */\n\tunsigned short GetnSecondaryVarGrad(void);\n\n  /*!\n\t * \\brief Get the number of variables of the problem.\n\t */\n\tunsigned short GetnOutputVariables(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvirtual void SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                      unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n\t/*!\n\t * \\brief Set the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_residual - Value of the residual to store in the position <i>val_var</i>.\n\t */\n\tvoid SetRes_RMS(unsigned short val_var, su2double val_residual);\n\n\t/*!\n\t * \\brief Adds the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_residual - Value of the residual to store in the position <i>val_var</i>.\n\t */\n\tvoid AddRes_RMS(unsigned short val_var, su2double val_residual);\n\n\t/*!\n\t * \\brief Get the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the biggest residual for the variable in the position <i>val_var</i>.\n\t */\n\tsu2double GetRes_RMS(unsigned short val_var);\n\n    /*!\n\t * \\brief Set the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_residual - Value of the residual to store in the position <i>val_var</i>.\n\t */\n\tvoid SetRes_Max(unsigned short val_var, su2double val_residual, unsigned long val_point);\n\n\t/*!\n\t * \\brief Adds the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_residual - Value of the residual to store in the position <i>val_var</i>.\n   * \\param[in] val_point - Value of the point index for the max residual.\n   * \\param[in] val_coord - Location (x, y, z) of the max residual point.\n\t */\n\tvoid AddRes_Max(unsigned short val_var, su2double val_residual, unsigned long val_point, su2double* val_coord);\n\n\t/*!\n\t * \\brief Get the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the biggest residual for the variable in the position <i>val_var</i>.\n\t */\n\tsu2double GetRes_Max(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the residual for FEM structural analysis.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the residual for the variable in the position <i>val_var</i>.\n\t */\n\tvirtual su2double GetRes_FEM(unsigned short val_var);\n\n    /*!\n\t * \\brief Get the maximal residual, this is useful for the convergence history.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the biggest residual for the variable in the position <i>val_var</i>.\n\t */\n\tunsigned long GetPoint_Max(unsigned short val_var);\n\n  /*!\n   * \\brief Get the location of the maximal residual, this is useful for the convergence history.\n   * \\param[in] val_var - Index of the variable.\n   * \\return Pointer to the location (x, y, z) of the biggest residual for the variable <i>val_var</i>.\n   */\n  su2double* GetPoint_Max_Coord(unsigned short val_var);\n\n\t/*!\n\t * \\brief Set Value of the residual if there is a grid movement.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetGrid_Movement_Residual(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the Green-Gauss gradient of the auxiliary variable.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t */\n\tvoid SetAuxVar_Gradient_GG(CGeometry *geometry);\n\n\t/*!\n\t * \\brief Compute the Least Squares gradient of the auxiliary variable.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetAuxVar_Gradient_LS(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the Least Squares gradient of an auxiliar variable on the profile surface.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetAuxVar_Surface_Gradient(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the Green-Gauss gradient of the solution.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t */\n\tvoid SetSolution_Gradient_GG(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the Least Squares gradient of the solution.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetSolution_Gradient_LS(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief MPI gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  virtual void Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Compute the Least Squares gradient of the grid velocity.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetGridVel_Gradient(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute slope limiter.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetSolution_Limiter(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetPrimitive_Limiter(CGeometry *geometry, CConfig *config);\n\n//\t/*!\n//\t * \\brief A virtual member.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvirtual void SetSecondary_Limiter(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the pressure laplacian using in a incompressible solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] PressureLaplacian - Pressure laplacian.\n\t */\n\tvoid SetPressureLaplacian(CGeometry *geometry, su2double *PressureLaplacian);\n\n\t/*!\n\t * \\brief Set the old solution variables to the current solution value for Runge-Kutta iteration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t */\n\tvoid Set_OldSolution(CGeometry *geometry);\n\n\t/*!\n\t * \\brief Load the geometries at the previous time states n and nM1.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t */\n\tvoid Restart_OldGeometry(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] Iteration - Index of the current iteration.\n\t */\n\tvirtual void SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iMesh, unsigned long Iteration);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvirtual void Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                unsigned short iMesh);\n\n\t/*!\n\t * \\brief A virtual member, overloaded.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t *\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvirtual void Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, CNumerics **numerics,\n                                unsigned short iMesh);\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvirtual void Centered_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                   CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvirtual void Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                 CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvirtual void Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief A virtual member overloaded.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Container vector of the numerics of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvirtual void Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, CNumerics **numerics, unsigned short iMesh, unsigned long Iteration, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetUndivided_Laplacian(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_Undivided_Laplacian(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetMax_Eigenvalue(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_MaxEigenvalue(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetDissipation_Switch(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_Dissipation_Switch(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                               unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\n\n\tvirtual void BC_Clamped(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\n\n\tvirtual void BC_Clamped_Post(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\n\n\tvirtual void BC_Normal_Displacement(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Flow_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                             unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Normal_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\n\tvirtual void BC_Dir_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\n\tvirtual void BC_Sine_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n\t\t\t\t\t\t unsigned short val_marker);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\n\n\tvirtual void BC_Pressure(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                              unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Interface_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_NearField_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_ActDisk_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Isothermal_Wall(CGeometry *geometry,\n                                  CSolver **solver_container,\n                                  CNumerics *conv_numerics,\n                                  CNumerics *visc_numerics,\n                                  CConfig *config,\n                                  unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container,\n                                CNumerics *conv_numerics,\n                                CNumerics *visc_numerics, CConfig *config,\n                                unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Dirichlet(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Neumann(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                            unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                              unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose via the residual the Euler boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Riemann(CGeometry *geometry, CSolver **solver_container,\n                            CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_NonReflecting(CGeometry *geometry, CSolver **solver_container,\n                            CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                          CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Supersonic_Inlet(CGeometry *geometry, CSolver **solver_container,\n                                     CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n  virtual void BC_Supersonic_Outlet(CGeometry *geometry, CSolver **solver_container,\n                                   CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Custom(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                           CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                           CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Engine_Inflow(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n  virtual void BC_Engine_Bleed(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Engine_Exhaust(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Dielec(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                               CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvirtual void BC_Electrode(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                              CConfig *config, unsigned short val_marker);\n\t/*!\n\t * \\brief It performs the average value along a boundary.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n     * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the average is evaluated.\n\t */\n\tvirtual void Mixing_Process(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker);\n\n\t/*!\n\t * \\brief it performs a mixed out average of the nodes of a boundary.\n\t * \\param[in] val_init_pressure -  initial pressure value\n\t * \\param[in] val_Averaged_Flux - flux averaged values.\n     * \\param[in] val_normal - normal vector.\n     * \\param[in] pressure_mix - value of the mixed-out avaraged pressure.\n\t * \\param[in] density_miz - value of the mixed-out avaraged density.\n\t */\n\tvirtual void MixedOut_Average (su2double val_init_pressure, su2double *val_Averaged_Flux, su2double *val_normal, su2double *pressure_mix, su2double *density_mix);\n\n\t/*!\n\t * \\brief it finds the root of an implicit equation that relates pressure and density.\n\t * \\param[in] pressure - pressure value\n\t * \\param[in] val_Averaged_Flux - flux averaged values.\n     * \\param[in] val_normal - normal vector.\n     * \\param[in] valfunc - Description of the numerical method.\n\t * \\param[in] density - value of the mixed-out avaraged density.\n\t */\n\tvirtual void MixedOut_Root_Function(su2double *pressure, su2double *val_Averaged_Flux, su2double *val_normal, su2double *valfunc, su2double *density);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t * \\param[in]  c4k - Fourier transformation coefficients.\n\t * \\param[in]  nboundaryvertex - pithcwise ordered vertex.\n\t */\n\tvirtual void Boundary_Fourier(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker, vector<std::complex<su2double> > &c4k,signed long &nboundaryvertex);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t * \\param[in]  c2k - Fourier transformation coefficients.\n\t * \\param[in]  c3k - Fourier transformation coefficients.\n\t * \\param[in]  nboundaryvertex - pithcwise ordered vertex.\n\t */\n\tvirtual void Boundary_Fourier(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker, vector<std::complex<su2double> >& c2k,vector<std::complex<su2double> >& c3k,signed long& nboundaryvertex);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] intMarker - internal marker.\n\t * \\param[in] extMarker - external marker.\n\t */\n\t virtual void SetExtAveragedValue(CSolver *solver_container, unsigned short intMarker,  unsigned short extMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Density on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedDensity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Pressure on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedPressure(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Enthalpy on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedEnthalpy(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Velocity on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double* GetAveragedVelocity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Grid Velocity on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double* GetAveragedGridVelocity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Entropy on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedEntropy(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Total Temperature on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedTotTemperature(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Total Pressure on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedTotPressure(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the flow angle on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetFlowAngle(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Mach Number on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedMach(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Normal Mach Number on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedNormalMach(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Mass flow on the surface <i>val_marker</i>..\n\t  */\n\t virtual su2double GetMassFlow(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of Total Pressure Loss for turbomachinery performance.\n\t  */\n\t virtual su2double GetTotalPressureLoss(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Kinetic energy loss for turbomachinery performance.\n\t  */\n\t virtual su2double GetKineticEnergyLoss(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Total-total efficiency for turbomachinery performance.\n\t  */\n\t virtual su2double GetTotalTotalEfficiency(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Total-static efficiency for turbomachinery performance.\n\t  */\n\t virtual su2double GetTotalStaticEfficiency(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Eulerian Work for turbomachinery performance.\n\t  */\n\t virtual su2double GetEulerianWork(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Inlet Total Enthalpy for turbomachinery performance.\n\t  */\n\t virtual su2double GetTotalEnthalpyIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Inlet Flow Angle for turbomachinery performance.\n\t  */\n\t virtual su2double GetFlowAngleIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Outlet Flow Angle for turbomachinery performance.\n\t  */\n\t virtual su2double GetFlowAngleOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Inlet Mass Flow for turbomachinery performance.\n\t  */\n\t virtual su2double GetMassFlowIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Outlet Mass FlowS for turbomachinery performance.\n\t  */\n\t virtual su2double GetMassFlowOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Inlet Mach for turbomachinery performance.\n\t  */\n\t virtual su2double GetMachIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Outlet Mach for turbomachinery performance.\n\t  */\n\t virtual su2double GetMachOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the normal component of the Inlet Mach for turbomachinery performance.\n\t  */\n\t virtual su2double GetNormalMachIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the normal component of the Outlet Mach for turbomachinery performance.\n\t  */\n\t virtual su2double GetNormalMachOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Outlet Static Enthalpy for turbomachinery performance.\n\t  */\n\t virtual su2double GetEnthalpyOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Outlet Isentropic Velocity for turbomachinery performance.\n\t  */\n\t virtual su2double GetVelocityOutIs(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Outlet Pressure for turbomachinery performance.\n\t  */\n\t virtual su2double GetPressureOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Pressure ratio for turbomachinery performance.\n\t  */\n\t virtual su2double GetPressureRatio(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Normal Velocity on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedNormalVelocity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief A virtual member.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Tangent Velocity on the surface <i>val_marker</i>.\n\t  */\n\t virtual su2double GetAveragedTangVelocity(unsigned short valMarker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvirtual void ExplicitRK_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                      unsigned short iRKStep);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void ExplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void ImplicitNewmark_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void ImplicitNewmark_Update(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void ImplicitNewmark_Relaxation(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void GeneralizedAlpha_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void GeneralizedAlpha_UpdateDisp(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void GeneralizedAlpha_UpdateSolution(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void GeneralizedAlpha_UpdateLoads(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvirtual void Compute_Residual(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                  unsigned short iMesh);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Inviscid_Forces(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] solver - solver containing the outlet information.\n\t * \\param[in] inMarker - marker related to the inlet.\n\t * \\param[in] outMarker - marker related to the outlet.\n\t */\n\tvirtual void TurboPerformance(CSolver *solver,  CConfig *config, unsigned short inMarker,  unsigned short outMarker, unsigned short Kind_TurboPerf, unsigned short inMarkerTP);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] solver - solver containing the outlet information.\n\t * \\param[in] inMarker - marker related to the inlet.\n\t * \\param[in] outMarker - marker related to the outlet.\n\t */\n\tvirtual void StoreTurboPerformance(CSolver *solver, unsigned short inMarkerTP);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Inviscid_DeltaForces(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Viscous_Forces(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Viscous_DeltaForces(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Wave_Strength(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetPrimitive_Gradient_GG(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetPrimitive_Gradient_LS(CGeometry *geometry, CConfig *config);\n\n//\t/*!\n//\t * \\brief A virtual member.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvirtual void SetSecondary_Gradient_GG(CGeometry *geometry, CConfig *config);\n\n//\t/*!\n//\t * \\brief A virtual member.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvirtual void SetSecondary_Gradient_LS(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Set_MPI_Primitive_Gradient(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief A virtual member.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvirtual void Set_MPI_Secondary_Gradient(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetPrimitive_Limiter_MPI(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief A virtual member.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvirtual void SetSecondary_Limiter_MPI(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] iPoint - Index of the grid point.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetPreconditioner(CConfig *config, unsigned long iPoint);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvirtual void Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                  CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] StiffMatrix_Elem - Stiffness matrix of an element\n\t */\n\tvirtual void AddStiffMatrix(su2double **StiffMatrix_Elem, unsigned long Point_0, unsigned long Point_1, unsigned long Point_2, unsigned long Point_3 );\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvirtual void Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                                 CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvirtual void Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                 CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\param[in] val_sensitivity - Value of the sensitivity coefficient.\n\t */\n\tvirtual void SetCSensitivity(unsigned short val_marker, unsigned long val_vertex, su2double val_sensitivity);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetForceProj_Vector(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetIntBoundary_Jump(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_Total_CDrag - Value of the total drag coefficient.\n\t */\n\tvirtual void SetTotal_CDrag(su2double val_Total_CDrag);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_Total_CLift - Value of the total lift coefficient.\n\t */\n\tvirtual void SetTotal_CLift(su2double val_Total_CLift);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_Total_CT - Value of the total thrust coefficient.\n\t */\n\tvirtual void SetTotal_CT(su2double val_Total_CT);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_Total_CQ - Value of the total torque coefficient.\n\t */\n\tvirtual void SetTotal_CQ(su2double val_Total_CQ);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_Total_Heat - Value of the total heat load.\n\t */\n\tvirtual void SetTotal_HeatFlux(su2double val_Total_Heat);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_Total_MaxHeat - Value of the total heat load.\n\t */\n\tvirtual void SetTotal_MaxHeatFlux(su2double val_Total_MaxHeat);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetDistance(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Inviscid_Sensitivity(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Smooth_Sensitivity(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Viscous_Sensitivity(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the lift coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCLift_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the lift coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCLift_Visc(unsigned short val_marker);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the z moment coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCMz_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the z moment coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCMz_Visc(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the lift coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CLift(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the drag coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CDrag(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CSideForce(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CEff(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CFx(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CFy(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CFz(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x moment coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CMx(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y moment coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CMy(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z moment coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CMz(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the lift coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CLift_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the drag coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CDrag_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CSideForce_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CEff_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CFx_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CFy_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z force coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CFz_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x moment coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CMx_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y moment coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CMy_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z moment coefficient on the surface <i>val_marker</i>.\n   */\n  virtual su2double GetSurface_CMz_Inv(unsigned short val_marker);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the lift coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCSideForce_Visc(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the drag coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCDrag_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the mass flow rate on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetInflow_MassFlow(unsigned short val_marker);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the mass flow rate on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetExhaust_MassFlow(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the fan face pressure on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetInflow_Pressure(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the fan face mach on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetInflow_Mach(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the sideforce coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCSideForce_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the efficiency coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCEff_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the drag coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tvirtual su2double GetCDrag_Visc(unsigned short val_marker);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the lift coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CLift(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the sideforce coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CSideForce(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the efficiency coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CEff(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the thrust coefficient (force in the -x direction, inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CT(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the torque coefficient (moment in the -x direction, inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CQ(void);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the heat load (integrated heat flux).\n\t */\n\tvirtual su2double GetTotal_HeatFlux(void);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the heat load (integrated heat flux).\n\t */\n\tvirtual su2double GetTotal_MaxHeatFlux(void);\n\n    /*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional drag coefficient.\n\t * \\return Value of the drag coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double Get_PressureDrag(void);\n\n    /*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional drag coefficient.\n\t * \\return Value of the drag coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double Get_ViscDrag(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the rotor Figure of Merit (FM) (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CMerit(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the Equivalent Area coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CEquivArea(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the difference of the presure and the target pressure.\n\t */\n\tvirtual su2double GetTotal_CpDiff(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the difference of the heat and the target heat.\n\t */\n\tvirtual su2double GetTotal_HeatFluxDiff(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the Free Surface coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CFreeSurface(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the FEA coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CFEA(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the Near-Field Pressure coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CNearFieldOF(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_cequivarea - Value of the Equivalent Area coefficient.\n\t */\n\tvirtual void SetTotal_CEquivArea(su2double val_cequivarea);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_pressure - Value of the difference between pressure and the target pressure.\n\t */\n\tvirtual void SetTotal_CpDiff(su2double val_pressure);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_pressure - Value of the difference between heat and the target heat.\n\t */\n\tvirtual void SetTotal_HeatFluxDiff(su2double val_heat);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_cfreesurface - Value of the Free Surface coefficient.\n\t */\n\tvirtual void SetTotal_CFreeSurface(su2double val_cfreesurface);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_cfea - Value of the FEA coefficient.\n\t */\n\tvirtual void SetTotal_CFEA(su2double val_cfea);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_cnearfieldpress - Value of the Near-Field pressure coefficient.\n\t */\n\tvirtual void SetTotal_CNearFieldOF(su2double val_cnearfieldpress);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the drag coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CDrag(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the moment x coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CMx(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the moment y coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CMy(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the moment y coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CMz(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the force x coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CFx(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the force y coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CFy(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the force y coefficient (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_CFz(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the wave strength.\n\t */\n\tvirtual su2double GetTotal_CWave(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the wave strength.\n\t */\n\tvirtual su2double GetTotal_CHeat(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the lift coefficient (inviscid contribution).\n\t */\n\tvirtual su2double GetAllBound_CLift_Inv(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the drag coefficient (inviscid contribution).\n\t */\n\tvirtual su2double GetAllBound_CDrag_Inv(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the drag coefficient (inviscid contribution).\n\t */\n\tvirtual su2double GetAllBound_CSideForce_Inv(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the drag coefficient (inviscid contribution).\n\t */\n\tvirtual su2double GetAllBound_CEff_Inv(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the drag coefficient (inviscid contribution).\n   */\n  virtual su2double GetAllBound_CMx_Inv(void);\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the drag coefficient (inviscid contribution).\n   */\n  virtual su2double GetAllBound_CMy_Inv(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the drag coefficient (inviscid contribution).\n   */\n  virtual su2double GetAllBound_CMz_Inv(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the drag coefficient (inviscid contribution).\n   */\n  virtual su2double GetAllBound_CFx_Inv(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the drag coefficient (inviscid contribution).\n   */\n  virtual su2double GetAllBound_CFy_Inv(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the drag coefficient (inviscid contribution).\n   */\n  virtual su2double GetAllBound_CFz_Inv(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the lift coefficient (viscous contribution).\n\t */\n\tvirtual su2double GetAllBound_CLift_Visc(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the lift coefficient (viscous contribution).\n\t */\n\tvirtual su2double GetAllBound_CSideForce_Visc(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the drag coefficient (viscous contribution).\n\t */\n\tvirtual su2double GetAllBound_CDrag_Visc(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tvirtual su2double GetCPressure(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tvirtual su2double GetCPressureTarget(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tvirtual void SetCPressureTarget(unsigned short val_marker, unsigned long val_vertex, su2double val_pressure);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tvirtual su2double *GetCharacPrimVar(unsigned short val_marker, unsigned long val_vertex);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the skin friction coefficient.\n\t */\n\tvirtual su2double GetCSkinFriction(unsigned short val_marker, unsigned long val_vertex);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the heat transfer coefficient.\n\t */\n\tvirtual su2double GetHeatFlux(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the heat transfer coefficient.\n\t */\n\tvirtual su2double GetHeatFluxTarget(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tvirtual void SetHeatFluxTarget(unsigned short val_marker, unsigned long val_vertex, su2double val_heat);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the y plus.\n\t */\n\tvirtual su2double GetYPlus(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the StrainMag_Max\n   */\n  virtual su2double GetStrainMag_Max(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the Omega_Max\n   */\n  virtual su2double GetOmega_Max(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the StrainMag_Max\n   */\n  virtual void SetStrainMag_Max(su2double val_strainmag_max);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the Omega_Max\n   */\n  virtual void SetOmega_Max(su2double val_omega_max);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the adjoint density at the infinity.\n\t */\n\tvirtual su2double GetPsiRho_Inf(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the adjoint density at the infinity.\n\t */\n\tvirtual su2double* GetPsiRhos_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the adjoint energy at the infinity.\n\t */\n\tvirtual su2double GetPsiE_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_dim - Index of the adjoint velocity vector.\n\t * \\return Value of the adjoint velocity vector at the infinity.\n\t */\n\tvirtual su2double GetPhi_Inf(unsigned short val_dim);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the geometrical sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_Sens_Geo(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the Mach sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_Sens_Mach(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the angle of attack sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_Sens_AoA(void);\n\n\t/*!\n\t * \\brief Set the total farfield pressure sensitivity coefficient.\n\t * \\return Value of the farfield pressure sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_Sens_Press(void);\n\n\t/*!\n\t * \\brief Set the total farfield temperature sensitivity coefficient.\n\t * \\return Value of the farfield temperature sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_Sens_Temp(void);\n\n\t/*!\n\t * \\author H. Kline\n\t * \\brief Get the total back pressure sensitivity coefficient.\n\t * \\return Value of the back pressure sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tvirtual su2double GetTotal_Sens_BPress(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the density at the infinity.\n\t */\n\tvirtual su2double GetDensity_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable for the density.\n\t * \\return Value of the density at the infinity.\n\t */\n\tvirtual su2double GetDensity_Inf(unsigned short val_var);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the velocity at the infinity.\n\t */\n\tvirtual su2double GetModVelocity_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the density x energy at the infinity.\n\t */\n\tvirtual su2double GetDensity_Energy_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the pressure at the infinity.\n\t */\n\tvirtual su2double GetPressure_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_dim - Index of the adjoint velocity vector.\n\t * \\return Value of the density x velocity at the infinity.\n\t */\n\tvirtual su2double GetDensity_Velocity_Inf(unsigned short val_dim);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_dim - Index of the velocity vector.\n\t * \\param[in] val_var - Index of the variable for the velocity.\n\t * \\return Value of the density multiply by the velocity at the infinity.\n\t */\n\tvirtual su2double GetDensity_Velocity_Inf(unsigned short val_dim, unsigned short val_var);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_dim - Index of the velocity vector.\n\t * \\return Value of the velocity at the infinity.\n\t */\n\tvirtual su2double GetVelocity_Inf(unsigned short val_dim);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the velocity at the infinity.\n\t */\n\tvirtual su2double *GetVelocity_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the viscosity at the infinity.\n\t */\n\tvirtual su2double GetViscosity_Inf(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the turbulent kinetic energy.\n\t */\n\tvirtual su2double GetTke_Inf(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the sensitivity coefficient.\n\t */\n\tvirtual su2double GetCSensitivity(unsigned short val_marker, unsigned long val_vertex);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetFreeSurface_Distance(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return A pointer to an array containing a set of constants\n\t */\n\tvirtual su2double* GetConstants();\n\n  /*!\n   * \\brief A virtual member.\n   * \\return average total pressure evaluated at an exit boundary marker\n   */\n  virtual su2double GetOneD_TotalPress(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] val_exit_pt: value of the total average pressure at the exit.\n   */\n  virtual void SetOneD_TotalPress(su2double AveragePressure);\n\n  /*!\n   * \\brief A virtual member.\n   *\\return average Mach number evaluated at an exit boundary marker\n   */\n  virtual su2double GetOneD_Mach(void);\n\n  /*!\n   * \\brief A virtual member.\n   * set average Mach number evaluated at an exit boundary marker\n   */\n  virtual void SetOneD_Mach(su2double AverageMach);\n\n  /*!\n   * \\brief A virtual member.\n   *\\return average temperature evaluated at an exit boundary marker\n   */\n  virtual su2double GetOneD_Temp(void);\n\n  /*!\n   * \\brief A virtual member.\n   * set average temperature evaluated at an exit boundary marker\n   */\n  virtual void SetOneD_Temp(su2double AverageTemperature);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return average temperature evaluated at an exit boundary marker\n   */\n  virtual su2double GetOneD_MassFlowRate(void);\n\n  /*!\n   * \\brief A virtual member.\n   * set average temperature evaluated at an exit boundary marker\n   */\n  virtual void SetOneD_MassFlowRate(su2double MassFlowRate);\n\n  /*!\n   * \\brief A virtual member.\n   * \\ Get the flux averaged pressure at a marker.(same as area averaged pressure)\n   */\n  virtual su2double GetOneD_FluxAvgPress(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\ Set the flux averaged pressure at a marker. (same as area averaged pressure)\n   */\n  virtual void SetOneD_FluxAvgPress(su2double PressureRef);\n  /*!\n   * \\brief A virtual member.\n   * \\ Get the flux averaged density at a marker. (\\f$ = (gamma/(gamma-1)) / ( Pref*(href-1/2 uref^2) \\f$)\n   */\n  virtual su2double GetOneD_FluxAvgDensity(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\ Set the flux averaged density at a marker.( \\f$= (gamma/(gamma-1)) / ( Pref*(href-1/2 uref^2) \\f$)\n   */\n  virtual void SetOneD_FluxAvgDensity(su2double DensityRef);\n\n  /*!\n   * \\brief A virtual member.\n   * \\ Get the flux averaged velocity at a marker. = \\f$ \\sqrt ( \\frac{\\int((rho*u)*u^2dA)}{\\int(rho*u*dA) }) \\f$\n   */\n  virtual su2double GetOneD_FluxAvgVelocity(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\ Set the flux averaged velocity at a marker. = \\f$ \\sqrt (  \\frac{\\int((rho*u)*u^2dA)}{\\int(rho*u*dA) }) \\f$\n   */\n  virtual void SetOneD_FluxAvgVelocity(su2double VelocityRef);\n\n  /*!\n   * \\brief A virtual member.\n   * \\ Get the flux averaged enthalpy at a marker. =\\f$ \\frac{ \\int(rho*u*h dA) }{ \\int(rho *u *dA )} \\f$\n   */\n  virtual su2double GetOneD_FluxAvgEntalpy(void);\n  /*!\n   * \\brief A virtual member.\n   * \\ Set the flux averaged enthalpy at a marker. =\\f$ \\frac{ \\int(rho*u*h dA) }{ \\int(rho *u *dA ) }\\f$\n   */\n  virtual void SetOneD_FluxAvgEntalpy(su2double EnthalpyRef);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  virtual void GetSurface_Pressure(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_solution - Container vector with all the solutions.\n\t * \\param[in] fea_config - Definition of the particular problem.\n\t */\n\tvirtual void SetFEA_Load(CSolver ***flow_solution, CGeometry **fea_geometry,\n                           CGeometry **flow_geometry, CConfig *fea_config,\n                           CConfig *flow_config, CNumerics *fea_numerics);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_solution - Container vector with all the solutions.\n\t * \\param[in] fea_config - Definition of the particular problem.\n\t */\n\tvirtual void SetFEA_Load_Int(CSolver ***flow_solution, CGeometry **fea_geometry,\n                           CGeometry **flow_geometry, CConfig *fea_config,\n                           CConfig *flow_config, CNumerics *fea_numerics);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] solver1_geometry - Geometrical definition of the problem.\n\t * \\param[in] solver1_solution - Container vector with all the solutions.\n\t * \\param[in] solver1_config - Definition of the particular problem.\n\t * \\param[in] solver2_geometry - Geometrical definition of the problem.\n\t * \\param[in] solver2_solution - Container vector with all the solutions.\n\t * \\param[in] solver2_config - Definition of the particular problem.\n\t */\n\tvirtual void Copy_Zone_Solution(CSolver ***solver1_solution,\n                                  CGeometry **solver1_geometry,\n                                  CConfig *solver1_config,\n                                  CSolver ***solver2_solution,\n                                  CGeometry **solver2_geometry,\n                                  CConfig *solver2_config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvirtual void SetInitialCondition(CGeometry **geometry,\n                                   CSolver ***solver_container,\n                                   CConfig *config, unsigned long ExtIter);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvirtual void ResetInitialCondition(CGeometry **geometry,\n                                   \t   CSolver ***solver_container,\n\t\t\t\t\t\t\t\t\t   CConfig *config, unsigned long ExtIter);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] flow_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] flow_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void SetFlow_Displacement(CGeometry **flow_geometry,\n                                    CVolumetricMovement *flow_grid_movement,\n                                    CConfig *flow_config, CConfig *fea_config,\n                                    CGeometry **fea_geometry,\n                                    CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] flow_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] flow_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void SetFlow_Displacement_Int(CGeometry **flow_geometry,\n                                    CVolumetricMovement *flow_grid_movement,\n                                    CConfig *flow_config, CConfig *fea_config,\n                                    CGeometry **fea_geometry,\n                                    CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void SetStruct_Displacement(CGeometry **fea_geometry,\n            \t\t\t\t\t\t\tCConfig *fea_config,\n            \t\t\t\t\t\t\tCSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void PredictStruct_Displacement(CGeometry **fea_geometry,\n            \t\t\t\t\t\t\t\tCConfig *fea_config,\n            \t\t\t\t\t\t\t\tCSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void ComputeAitken_Coefficient(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution,\n            \t\t\t\t  unsigned long iFSIIter);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void SetAitken_Relaxation(CGeometry **fea_geometry,\n            \t\t\t\t\t\t  CConfig *fea_config,\n            \t\t\t\t\t\t  CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvirtual void Update_StructSolution(CGeometry **fea_geometry,\n            \t\t\t\t\t\t  CConfig *fea_config,\n            \t\t\t\t\t\t  CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvirtual void LoadRestart(CGeometry **geometry, CSolver ***solver,\n                           CConfig *config, int val_iter);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n     * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvirtual void LoadRestart_FSI(CGeometry *geometry, CSolver ***solver,\n                           \t   CConfig *config, int val_iter);\n\n\t/*!\n\t * \\brief Gauss method for solving a linear system.\n\t * \\param[in] A - Matrix Ax = b.\n\t * \\param[in] rhs - Right hand side.\n\t * \\param[in] nVar - Number of variables.\n\t */\n\tvoid Gauss_Elimination(su2double** A, su2double* rhs, unsigned short nVar);\n\n  /*!\n  * \\brief Get the number of Species present in the flow.\n  */\n\tvirtual unsigned short GetnSpecies(void);\n\n  /*!\n  * \\brief A virtual member.\n  * \\param[in] geometry - Geometrical definition of the problem.\n  * \\param[in] solution - Container vector with all the solutions.\n  * \\param[in] Output - boolean to determine whether to print output.\n  */\n\tvirtual void GetEngine_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solution - Container vector with all the solutions.\n   * \\param[in] Output - boolean to determine whether to print output.\n   */\n  virtual void GetActuatorDisk_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output);\n\n  /*!\n   * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - current mesh level for the multigrid.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n  virtual void SetFarfield_AoA(CGeometry *geometry, CSolver **solver_container,\n                               CConfig *config, unsigned short iMesh, bool Output);\n\n  /*!\n  * \\brief Prepares and solves the aeroelastic equations.\n  * \\param[in] surface_movement - Surface movement classes of the problem.\n  * \\param[in] geometry - Geometrical definition of the problem.\n  * \\param[in] config - Definition of the particular problem.\n  * \\param[in] ExtIter - Physical iteration number.\n  */\n\tvoid Aeroelastic(CSurfaceMovement *surface_movement, CGeometry *geometry, CConfig *config, unsigned long ExtIter);\n\n  /*!\n  * \\brief Sets up the generalized eigenvectors and eigenvalues needed to solve the aeroelastic equations.\n  * \\param[in] PHI - Matrix of the generalized eigenvectors.\n  * \\param[in] lambda - The eigenvalues of the generalized eigensystem.\n  * \\param[in] config - Definition of the particular problem.\n  */\n  void SetUpTypicalSectionWingModel(vector<vector<su2double> >& PHI, vector<su2double>& w, CConfig *config);\n\n  /*!\n  * \\brief Solve the typical section wing model.\n  * \\param[in] geometry - Geometrical definition of the problem.\n  * \\param[in] Cl - Coefficient of lift at particular iteration.\n  * \\param[in] Cm - Moment coefficient about z-axis at particular iteration.\n\t* \\param[in] config - Definition of the particular problem.\n  * \\param[in] val_Marker - Surface that is being monitored.\n  * \\param[in] displacements - solution of typical section wing model.\n\t*/\n\n  void SolveTypicalSectionWingModel(CGeometry *geometry, su2double Cl, su2double Cm, CConfig *config, unsigned short val_Marker, vector<su2double>& displacements);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config_container - The particular config.\n   */\n  virtual void RegisterSolution(CGeometry *geometry, CConfig *config);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config_container - The particular config.\n   */\n  virtual void RegisterOutput(CGeometry *geometry, CConfig *config);\n\n   /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - The geometrical definition of the problem.\n   * \\param[in] config - The particular config.\n   */\n  virtual void SetAdjoint_Output(CGeometry *geometry, CConfig *config);\n\n   /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - The geometrical definition of the problem.\n   * \\param[in] solver_container - The solver container holding all solutions.\n   * \\param[in] config - The particular config.\n   */\n  virtual void ExtractAdjoint_Solution(CGeometry *geometry,  CConfig *config);\n\n  /*!\n  * \\brief A virtual member\n  * \\param[in] geometry - The geometrical definition of the problem.\n  */\n  virtual void RegisterObj_Func(CConfig *config);\n\n  /*!\n   * \\brief  A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  virtual void SetSurface_Sensitivity(CGeometry *geometry, CConfig* config);\n\n  /*!\n   * \\brief  A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  virtual void SetSensitivity(CGeometry *geometry, CConfig *config);\n\n  virtual void SetAdj_ObjFunc(CGeometry *geometry, CConfig* config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Set value of interest: 0 - Initial value, 1 - Current value.\n\t */\n\tvirtual void SetFSI_ConvValue(unsigned short val_index, su2double val_criteria);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in]  Value of interest: 0 - Initial value, 1 - Current value.\n\t * \\return Values to compare\n\t */\n\tvirtual su2double GetFSI_ConvValue(unsigned short val_index);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_StiffMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_StiffMatrix_NodalStressRes(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_MassMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_NodalStressRes(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\n\tvirtual void Compute_NodalStress(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_StiffMassMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_StiffMassDampMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Solve_System(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Initialize_SystemMatrix(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void Compute_IntegrationConstants(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t */\n\tvirtual void SetSolution_time_n(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the dynamic Aitken relaxation factor\n\t */\n\tvirtual su2double GetWAitken_Dyn(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the last Aitken relaxation factor in the previous time step.\n\t */\n\tvirtual su2double GetWAitken_Dyn_tn1(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Value of the dynamic Aitken relaxation factor\n\t */\n\tvirtual void SetWAitken_Dyn(su2double waitk);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Value of the last Aitken relaxation factor in the previous time step.\n\t */\n\tvirtual void SetWAitken_Dyn_tn1(su2double waitk_tn1);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Value of the load increment for nonlinear structural analysis\n\t */\n\tvirtual void SetLoad_Increment(su2double val_loadIncrement);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] Output - boolean to determine whether to print output.\n   */\n  virtual unsigned long SetPrimitive_Variables(CSolver **solver_container, CConfig *config, bool Output);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] Value of freestream pressure.\n   */\n  virtual void SetPressure_Inf(su2double p_inf);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] Value of freestream temperature.\n   */\n  virtual void SetTemperature_Inf(su2double t_inf);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] kind_recording - Kind of AD recording.\n   */\n  virtual void SetRecording(CGeometry *geometry, CConfig *config, unsigned short kind_recording);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  virtual void RegisterVariables(CGeometry *geometry, CConfig *config, bool reset = false);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  virtual void ExtractAdjoint_Variables(CGeometry *geometry, CConfig *config);\n};\n\n/*!\n * \\class CBaselineSolver\n * \\brief Main class for defining a baseline solution from a restart file (for output).\n * \\author F. Palacios, T. Economon.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CBaselineSolver : public CSolver {\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCBaselineSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCBaselineSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Load a solution from a restart file.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvoid LoadRestart(CGeometry **geometry, CSolver ***solver, CConfig *config, int val_iter);\n\n\t/*!\n\t * \\brief Load a FSI solution from a restart file.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n     * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvoid LoadRestart_FSI(CGeometry *geometry, CSolver ***solver, CConfig *config, int val_iter);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CBaselineSolver(void);\n\n};\n\n/*!\n * \\class CEulerSolver\n * \\brief Main class for defining the Euler's flow solver.\n * \\ingroup Euler_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CEulerSolver : public CSolver {\nprotected:\n\n  su2double\n  Mach_Inf,\t/*!< \\brief Mach number at the infinity. */\n\tDensity_Inf,\t/*!< \\brief Density at the infinity. */\n\tEnergy_Inf,\t\t\t/*!< \\brief Energy at the infinity. */\n  Temperature_Inf,\t\t\t/*!< \\brief Energy at the infinity. */\n\tPressure_Inf,\t\t/*!< \\brief Pressure at the infinity. */\n\t*Velocity_Inf;\t\t/*!< \\brief Flow Velocity vector at the infinity. */\n\n  su2double\n  *CDrag_Inv,\t/*!< \\brief Drag coefficient (inviscid contribution) for each boundary. */\n\t*CLift_Inv,\t\t\t/*!< \\brief Lift coefficient (inviscid contribution) for each boundary. */\n\t*CSideForce_Inv,\t\t/*!< \\brief Sideforce coefficient (inviscid contribution) for each boundary. */\n\t*CMx_Inv,\t\t\t/*!< \\brief x Moment coefficient (inviscid contribution) for each boundary. */\n\t*CMy_Inv,\t\t\t/*!< \\brief y Moment coefficient (inviscid contribution) for each boundary. */\n\t*CMz_Inv,\t\t\t/*!< \\brief z Moment coefficient (inviscid contribution) for each boundary. */\n\t*CFx_Inv,\t\t\t/*!< \\brief x Force coefficient (inviscid contribution) for each boundary. */\n\t*CFy_Inv,\t\t\t/*!< \\brief y Force coefficient (inviscid contribution) for each boundary. */\n\t*CFz_Inv,\t\t\t/*!< \\brief z Force coefficient (inviscid contribution) for each boundary. */\n  *Surface_CLift_Inv, /*!< \\brief Lift coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CDrag_Inv, /*!< \\brief Drag coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CSideForce_Inv, /*!< \\brief Side-force coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CEff_Inv, /*!< \\brief Side-force coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CFx_Inv,   /*!< \\brief x Force coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CFy_Inv,   /*!< \\brief y Force coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CFz_Inv,   /*!< \\brief z Force coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CMx_Inv,   /*!< \\brief x Moment coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CMy_Inv,   /*!< \\brief y Moment coefficient (inviscid contribution) for each monitoring surface. */\n  *Surface_CMz_Inv,   /*!< \\brief z Moment coefficient (inviscid contribution) for each monitoring surface. */\n\t*CEff_Inv,\t\t\t\t/*!< \\brief Efficiency (Cl/Cd) (inviscid contribution) for each boundary. */\n\t*CMerit_Inv,\t\t\t\t/*!< \\brief Rotor Figure of Merit (inviscid contribution) for each boundary. */\n\t*CT_Inv,\t\t\t/*!< \\brief Thrust coefficient (force in -x direction, inviscid contribution) for each boundary. */\n\t*CQ_Inv,\t\t\t/*!< \\brief Torque coefficient (moment in -x direction, inviscid contribution) for each boundary. */\n\t*CEquivArea_Inv,\t\t\t\t/*!< \\brief Equivalent area (inviscid contribution) for each boundary. */\n\t*CNearFieldOF_Inv,\t\t\t\t/*!< \\brief Near field pressure (inviscid contribution) for each boundary. */\n\t**CPressure,\t\t/*!< \\brief Pressure coefficient for each boundary and vertex. */\n\t**CPressureTarget,\t\t/*!< \\brief Target Pressure coefficient for each boundary and vertex. */\n\t**HeatFlux,\t\t/*!< \\brief Heat transfer coefficient for each boundary and vertex. */\n  **HeatFluxTarget,\t\t/*!< \\brief Heat transfer coefficient for each boundary and vertex. */\n  **YPlus,\t\t/*!< \\brief Yplus for each boundary and vertex. */\n  ***CharacPrimVar,\t\t/*!< \\brief Value of the characteristic variables at each boundary. */\n\t*ForceInviscid,\t\t/*!< \\brief Inviscid force for each boundary. */\n\t*MomentInviscid,\t/*!< \\brief Inviscid moment for each boundary. */\n\t*Inflow_MassFlow,\t/*!< \\brief Mass flow rate for each boundary. */\n  *Bleed_MassFlow,\t/*!< \\brief Mass flow rate for each boundary. */\n\t*Exhaust_MassFlow,\t/*!< \\brief Mass flow rate for each boundary. */\n\t*Inflow_Pressure,\t/*!< \\brief Fan face pressure for each boundary. */\n\t*Inflow_Mach,\t/*!< \\brief Fan face mach number for each boundary. */\n\t*Inflow_Area,\t/*!< \\brief Boundary total area. */\n  *Bleed_Pressure,\t/*!< \\brief Fan face pressure for each boundary. */\n  *Bleed_Temperature,\t/*!< \\brief Fan face mach number for each boundary. */\n  *Bleed_Area,\t/*!< \\brief Boundary total area. */\n  *Exhaust_Area,\t/*!< \\brief Boundary total area. */\n  *Exhaust_Pressure,\t/*!< \\brief Fan face pressure for each boundary. */\n  *Exhaust_Temperature,\t/*!< \\brief Fan face mach number for each boundary. */\n  Inflow_MassFlow_Total,\t/*!< \\brief Mass flow rate for each boundary. */\n  Bleed_MassFlow_Total,\t/*!< \\brief Mass flow rate for each boundary. */\n  Exhaust_MassFlow_Total,\t/*!< \\brief Mass flow rate for each boundary. */\n\tInflow_Pressure_Total,\t/*!< \\brief Fan face pressure for each boundary. */\n\tInflow_Mach_Total,\t/*!< \\brief Fan face mach number for each boundary. */\n  Bleed_Pressure_Total,\t/*!< \\brief Fan face pressure for each boundary. */\n  Bleed_Temperature_Total,\t/*!< \\brief Fan face mach number for each boundary. */\n\tInverseDesign;\t/*!< \\brief Inverse design functional for each boundary. */\n\n  su2double\n  AllBound_CDrag_Inv,\t/*!< \\brief Total drag coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CLift_Inv,\t\t\t/*!< \\brief Total lift coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CSideForce_Inv,\t\t\t/*!< \\brief Total sideforce coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMx_Inv,\t\t\t/*!< \\brief Total x moment coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMy_Inv,\t\t\t/*!< \\brief Total y moment coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMz_Inv,\t\t\t/*!< \\brief Total z moment coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CFx_Inv,\t\t\t/*!< \\brief Total x force coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CFy_Inv,\t\t\t/*!< \\brief Total y force coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CFz_Inv,\t\t\t/*!< \\brief Total z force coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CEff_Inv,\t\t\t/*!< \\brief Efficient coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMerit_Inv,\t\t\t/*!< \\brief Rotor Figure of Merit (inviscid contribution) for all the boundaries. */\n\tAllBound_CT_Inv,\t\t\t/*!< \\brief Total thrust coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CQ_Inv,\t\t\t/*!< \\brief Total torque coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CEquivArea_Inv,\t\t\t/*!< \\brief equivalent area coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CNearFieldOF_Inv;\t\t\t/*!< \\brief Near-Field press coefficient (inviscid contribution) for all the boundaries. */\n\n  su2double\n  OneD_TotalPress, /*!< \\brief average total pressure evaluated at an exit */\n  OneD_Mach, /*!< \\brief area average Mach evaluated at an exit */\n  OneD_Temp, /*!< \\brief area average Temperature evaluated at an exit */\n  OneD_PressureRef, /*!< \\brief area average Pressure evaluated at an exit */\n  OneD_MassFlowRate, /*!< \\brief Mass flow rate at an exit */\n  OneD_DensityRef, /*!< \\brief flux average density evaluated at an exit */\n  OneD_EnthalpyRef, /*!< \\brief flux average enthalpy evaluated at an exit */\n  OneD_VelocityRef, /*!< \\brief flux average velocity evaluated at an exit */\n  Total_CDrag, /*!< \\brief Total drag coefficient for all the boundaries. */\n\tTotal_CLift,\t\t/*!< \\brief Total lift coefficient for all the boundaries. */\n\tTotal_CSideForce,\t\t/*!< \\brief Total sideforce coefficient for all the boundaries. */\n\tTotal_CMx,\t\t\t/*!< \\brief Total x moment coefficient for all the boundaries. */\n\tTotal_CMy,\t\t\t/*!< \\brief Total y moment coefficient for all the boundaries. */\n\tTotal_CMz,\t\t\t/*!< \\brief Total z moment coefficient for all the boundaries. */\n\tTotal_CFx,\t\t\t/*!< \\brief Total x force coefficient for all the boundaries. */\n\tTotal_CFy,\t\t\t/*!< \\brief Total y force coefficient for all the boundaries. */\n\tTotal_CFz,\t\t\t/*!< \\brief Total z force coefficient for all the boundaries. */\n\tTotal_CEff,\t\t\t/*!< \\brief Total efficiency coefficient for all the boundaries. */\n\tTotal_CMerit,\t\t\t/*!< \\brief Total rotor Figure of Merit for all the boundaries. */\n\tTotal_CT,\t\t/*!< \\brief Total thrust coefficient for all the boundaries. */\n\tTotal_CQ,\t\t/*!< \\brief Total torque coefficient for all the boundaries. */\n  Total_Heat,    /*!< \\brief Total heat load for all the boundaries. */\n  Total_MaxHeat, /*!< \\brief Maximum heat flux on all boundaries. */\n\tTotal_CEquivArea,\t\t\t/*!< \\brief Total Equivalent Area coefficient for all the boundaries. */\n\tTotal_CNearFieldOF,\t\t\t/*!< \\brief Total Near-Field Pressure coefficient for all the boundaries. */\n  Total_CFreeSurface,\t\t\t/*!< \\brief Total Free Surface coefficient for all the boundaries. */\n  Total_CpDiff,\t\t\t/*!< \\brief Total Equivalent Area coefficient for all the boundaries. */\n\tTotal_HeatFluxDiff,\t\t\t/*!< \\brief Total Equivalent Area coefficient for all the boundaries. */\n  Total_MassFlowRate;     /*!< \\brief Total Mass Flow Rate on monitored boundaries. */\n  su2double *Surface_CLift,   /*!< \\brief Lift coefficient for each monitoring surface. */\n  *Surface_CDrag,          /*!< \\brief Drag coefficient for each monitoring surface. */\n  *Surface_CSideForce,     /*!< \\brief Side-force coefficient for each monitoring surface. */\n  *Surface_CEff,     /*!< \\brief Side-force coefficient for each monitoring surface. */\n  *Surface_CFx,            /*!< \\brief x Force coefficient for each monitoring surface. */\n  *Surface_CFy,            /*!< \\brief y Force coefficient for each monitoring surface. */\n  *Surface_CFz,            /*!< \\brief z Force coefficient for each monitoring surface. */\n  *Surface_CMx,            /*!< \\brief x Moment coefficient for each monitoring surface. */\n  *Surface_CMy,            /*!< \\brief y Moment coefficient for each monitoring surface. */\n  *Surface_CMz;            /*!< \\brief z Moment coefficient for each monitoring surface. */\n\tsu2double *iPoint_UndLapl,\t/*!< \\brief Auxiliary variable for the undivided Laplacians. */\n\t*jPoint_UndLapl;\t\t\t/*!< \\brief Auxiliary variable for the undivided Laplacians. */\n\tsu2double *SecondaryVar_i,\t/*!< \\brief Auxiliary vector for storing the solution at point i. */\n\t*SecondaryVar_j;\t\t\t/*!< \\brief Auxiliary vector for storing the solution at point j. */\n\tsu2double *PrimVar_i,\t/*!< \\brief Auxiliary vector for storing the solution at point i. */\n\t*PrimVar_j;\t\t\t/*!< \\brief Auxiliary vector for storing the solution at point j. */\n\tsu2double **LowMach_Precontioner; /*!< \\brief Auxiliary vector for storing the inverse of Roe-turkel preconditioner. */\n\tunsigned long nMarker;\t\t\t\t/*!< \\brief Total number of markers using the grid information. */\n\tbool space_centered,  /*!< \\brief True if space centered scheeme used. */\n\teuler_implicit,\t\t\t/*!< \\brief True if euler implicit scheme used. */\n\tleast_squares;        /*!< \\brief True if computing gradients by least squares. */\n\tsu2double Gamma;\t\t\t\t\t\t\t\t\t/*!< \\brief Fluid's Gamma constant (ratio of specific heats). */\n\tsu2double Gamma_Minus_One;\t\t\t\t/*!< \\brief Fluids's Gamma - 1.0  . */\n\n  su2double *Primitive,\t\t/*!< \\brief Auxiliary nPrimVar vector. */\n\t*Primitive_i,\t\t\t\t/*!< \\brief Auxiliary nPrimVar vector for storing the primitive at point i. */\n\t*Primitive_j;\t\t\t\t/*!< \\brief Auxiliary nPrimVar vector for storing the primitive at point j. */\n\n  su2double *Secondary,\t\t/*!< \\brief Auxiliary nPrimVar vector. */\n\t*Secondary_i,\t\t\t\t/*!< \\brief Auxiliary nPrimVar vector for storing the primitive at point i. */\n\t*Secondary_j;\t\t\t\t/*!< \\brief Auxiliary nPrimVar vector for storing the primitive at point j. */\n\n  su2double Cauchy_Value,\t/*!< \\brief Summed value of the convergence indicator. */\n\tCauchy_Func;\t\t\t/*!< \\brief Current value of the convergence indicator at one iteration. */\n\tunsigned short Cauchy_Counter;\t/*!< \\brief Number of elements of the Cauchy serial. */\n\tsu2double *Cauchy_Serie;\t\t\t/*!< \\brief Complete Cauchy serial. */\n\tsu2double Old_Func,\t/*!< \\brief Old value of the objective function (the function which is monitored). */\n\tNew_Func;\t\t\t/*!< \\brief Current value of the objective function (the function which is monitored). */\n  su2double AoA_old;  /*!< \\brief Old value of the angle of attack (monitored). */\n\n  CFluidModel  *FluidModel;  /*!< \\brief fluid model used in the solver */\n  su2double **AveragedVelocity,\n  \t  \t **AveragedNormal,\n\t\t **AveragedGridVel,\n  \t  \t  **AveragedFlux,\n\t\t  **TotalFlux,\n\t\t  *TotalArea,\n\t\t  *AveragedNormalVelocity,\n\t\t  *ExtAveragedNormalVelocity,\n\t\t  *AveragedTangVelocity,\n\t\t  *ExtAveragedTangVelocity,\n\t\t  *AveragedTangGridVelocity,\n\t\t  *AveragedMach,\n\t\t  *AveragedNormalMach,\n\t\t  *AveragedTangMach,\n\t\t  *AveragedEnthalpy,\n\t\t  *AveragedPressure,\n\t\t  *AveragedTotTemperature,\n\t\t  *AveragedTotPressure,\n\t\t  *ExtAveragedPressure,\n\t\t  *ExtAveragedTotTemperature,\n\t\t  *ExtAveragedTotPressure,\n\t\t  *AveragedDensity,\n\t\t  *ExtAveragedDensity,\n\t\t  *AveragedSoundSpeed,\n\t\t  *AveragedEntropy,\n\t\t  *MassFlow,\n\t\t  *FlowAngle;\n  su2double *TotalStaticEfficiency,\n  \t  \t  \t*TotalTotalEfficiency,\n\t\t\t*KineticEnergyLoss,\n\t\t\t*TotalPressureLoss,\n  \t  \t  \t*MassFlowIn,\n\t\t\t*MassFlowOut,\n\t\t\t*FlowAngleIn,\n\t\t\t*FlowAngleOut,\n\t\t\t*EulerianWork,\n\t\t\t*TotalEnthalpyIn,\n\t\t\t*PressureRatio,\n\t\t\t*PressureOut,\n\t\t\t*EnthalpyOut,\n\t\t\t*MachIn,\n\t\t\t*MachOut,\n\t\t\t*NormalMachIn,\n\t\t\t*NormalMachOut,\n\t\t\t*VelocityOutIs;\n\n\n\npublic:\n\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCEulerSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCEulerSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CEulerSolver(void);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  void Set_MPI_Solution_Limiter(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  void Set_MPI_Primitive_Limiter(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief Impose the send-receive boundary condition.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//  void Set_MPI_Secondary_Limiter(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Set the fluid solver nondimensionalization.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  void SetNondimensionalization(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the pressure at the infinity.\n\t * \\return Value of the pressure at the infinity.\n\t */\n\tCFluidModel* GetFluidModel(void);\n\n\n    /*!\n\t * \\brief Compute the density at the infinity.\n\t * \\return Value of the density at the infinity.\n\t */\n\tsu2double GetDensity_Inf(void);\n\n\t/*!\n\t * \\brief Compute 2-norm of the velocity at the infinity.\n\t * \\return Value of the 2-norm of the velocity at the infinity.\n\t */\n\tsu2double GetModVelocity_Inf(void);\n\n\t/*!\n\t * \\brief Compute the density multiply by energy at the infinity.\n\t * \\return Value of the density multiply by  energy at the infinity.\n\t */\n\tsu2double GetDensity_Energy_Inf(void);\n\n\t/*!\n\t * \\brief Compute the pressure at the infinity.\n\t * \\return Value of the pressure at the infinity.\n\t */\n\tsu2double GetPressure_Inf(void);\n\n\t/*!\n\t * \\brief Compute the density multiply by velocity at the infinity.\n\t * \\param[in] val_dim - Index of the velocity vector.\n\t * \\return Value of the density multiply by the velocity at the infinity.\n\t */\n\tsu2double GetDensity_Velocity_Inf(unsigned short val_dim);\n\n\t/*!\n\t * \\brief Get the velocity at the infinity.\n\t * \\param[in] val_dim - Index of the velocity vector.\n\t * \\return Value of the velocity at the infinity.\n\t */\n\tsu2double GetVelocity_Inf(unsigned short val_dim);\n\n  /*!\n\t * \\brief Get the velocity at the infinity.\n\t * \\return Value of the velocity at the infinity.\n\t */\n\tsu2double *GetVelocity_Inf(void);\n\n\t/*!\n\t * \\brief Compute the time step for solving the Euler equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] Iteration - Value of the current iteration.\n\t */\n\tvoid SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                      unsigned short iMesh, unsigned long Iteration);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a centered scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Centered_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                           CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the extrapolated quantities, for MUSCL upwind 2nd reconstruction,\n\t * in a more thermodynamic consistent way\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ComputeConsExtrapolation(CConfig *config);\n\t/*!\n\t * \\brief Source term integration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term integration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n   * \\brief Compute primitive variables and their gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh);\n\n  /*!\n   * \\brief Compute the velocity^2, SoundSpeed, Pressure, Enthalpy, Viscosity.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] Output - boolean to determine whether to print output.\n   * \\return - The number of non-physical points.\n   */\n  unsigned long SetPrimitive_Variables(CSolver **solver_container, CConfig *config, bool Output);\n\n\t/*!\n\t * \\brief Compute a pressure sensor switch.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetDissipation_Switch(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Parallelization of SetDissipation_Switch.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Dissipation_Switch(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the gradient of the primitive variables using Green-Gauss method,\n\t *        and stores the result in the <i>Gradient_Primitive</i> variable.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetPrimitive_Gradient_GG(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the gradient of the primitive variables using a Least-Squares method,\n\t *        and stores the result in the <i>Gradient_Primitive</i> variable.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetPrimitive_Gradient_LS(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief Compute the gradient of the primitive variables using Green-Gauss method,\n//\t *        and stores the result in the <i>Gradient_Primitive</i> variable.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvoid SetSecondary_Gradient_GG(CGeometry *geometry, CConfig *config);\n\n//\t/*!\n//\t * \\brief Compute the gradient of the primitive variables using a Least-Squares method,\n//\t *        and stores the result in the <i>Gradient_Primitive</i> variable.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvoid SetSecondary_Gradient_LS(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Compute the gradient of the primitive variables using a Least-Squares method,\n\t *        and stores the result in the <i>Gradient_Primitive</i> variable.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Primitive_Gradient(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the limiter of the primitive variables.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetPrimitive_Limiter(CGeometry *geometry, CConfig *config);\n\n//  /*!\n//\t * \\brief Compute the gradient of the primitive variables using a Least-Squares method,\n//\t *        and stores the result in the <i>Gradient_Primitive</i> variable.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvoid Set_MPI_Secondary_Gradient(CGeometry *geometry, CConfig *config);\n\n//\t/*!\n//\t * \\brief Compute the limiter of the primitive variables.\n//\t * \\param[in] geometry - Geometrical definition of the problem.\n//\t * \\param[in] config - Definition of the particular problem.\n//\t */\n//\tvoid SetSecondary_Limiter(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the preconditioner for convergence acceleration by Roe-Turkel method.\n\t * \\param[in] iPoint - Index of the grid point\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetPreconditioner(CConfig *config, unsigned long iPoint);\n\n\t/*!\n\t * \\brief Compute the undivided laplacian for the solution, except the energy equation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetUndivided_Laplacian(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Parallelization of Undivided Laplacian.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Undivided_Laplacian(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Compute the max eigenvalue.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetMax_Eigenvalue(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Parallelization of the Max eigenvalue.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_MaxEigenvalue(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\author: G.Gori, S.Vitale, M.Pini, A.Guardone, P.Colonna\n\t *\n\t * \\brief Impose via the residual the Euler wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the far-field boundary condition using characteristics.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                      CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the symmetry boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the interface boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Interface_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                               CConfig *config);\n\n\t/*!\n\t * \\brief Impose the near-field boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_NearField_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                               CConfig *config);\n\n  /*!\n\t * \\brief Impose the actuator disk boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_ActDisk_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                 CConfig *config);\n\n\t/*!\n\t * \\brief Impose the dirichlet boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Dirichlet(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\author: G.Gori, S.Vitale, M.Pini, A.Guardone, P.Colonna\n\t *\n\t * \\brief Impose the boundary condition using characteristic recostruction.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Riemann(CGeometry *geometry, CSolver **solver_container,\n                            CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\author: G.Gori, S.Vitale, M.Pini, A.Guardone, P.Colonna\n\t *\n\t * \\brief Impose the boundary condition using characteristic recostruction.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_NonReflecting(CGeometry *geometry, CSolver **solver_container,\n                            CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\n\t/*!\n\t * \\brief Impose a subsonic inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                  CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a supersonic inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Supersonic_Inlet(CGeometry *geometry, CSolver **solver_container,\n                             CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n  /*!\n   * \\brief Impose a supersonic outlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n  void BC_Supersonic_Outlet(CGeometry *geometry, CSolver **solver_container,\n                           CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the dirichlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Custom(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                   CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the outlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                   CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the nacelle inflow boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Engine_Inflow(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                          CConfig *config, unsigned short val_marker);\n\n   /*!\n    * \\brief Impose the nacelle bleed boundary condition.\n    * \\param[in] geometry - Geometrical definition of the problem.\n    * \\param[in] solver_container - Container vector with all the solutions.\n    * \\param[in] conv_numerics - Description of the numerical method.\n    * \\param[in] visc_numerics - Description of the numerical method.\n    * \\param[in] config - Definition of the particular problem.\n    * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n    */\n  void BC_Engine_Bleed(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                        CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the ancelle exhaust boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n     * \\param[in] conv_numerics - Description of the numerical method.\n     * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Engine_Exhaust(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                           CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief It avarage the fluxes value along a boundary.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n     * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid Mixing_Process(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker);\n\n\t/*!\n\t * \\brief it performs a mixed out average of the nodes of a boundary.\n\t * \\param[in] val_init_pressure -  initial pressure value\n\t * \\param[in] val_Averaged_Flux - flux averaged values.\n     * \\param[in] val_normal - normal vector.\n     * \\param[in] pressure_mix - value of the mixed-out avaraged pressure.\n\t * \\param[in] density_miz - value of the mixed-out avaraged density.\n\t */\n\tvoid MixedOut_Average (su2double val_init_pressure, su2double *val_Averaged_Flux, su2double *val_normal, su2double *pressure_mix, su2double *density_mix);\n\n\t/*!\n\t * \\brief it finds the root of an implicit equation that relates pressure and density.\n\t * \\param[in] pressure - pressure value\n\t * \\param[in] val_Averaged_Flux - flux averaged values.\n     * \\param[in] val_normal - normal vector.\n     * \\param[in] valfunc - Description of the numerical method.\n\t * \\param[in] density - value of the mixed-out avaraged density.\n\t */\n\tvoid MixedOut_Root_Function(su2double *pressure, su2double *val_Averaged_Flux, su2double *val_normal, su2double *valfunc, su2double *density);\n\n\t/*!\n\t * \\brief it performs a fourier transformation of a characteristic value.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t * \\param[in]  c4k - Fourier transformation coefficients.\n\t * \\param[in]  nboundaryvertex - pithcwise ordered vertex.\n\t */\n\tvoid Boundary_Fourier(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker, vector<std::complex<su2double> > &c4k,signed long &nboundaryvertex);\n\n\t/*!\n\t * \\brief it performs a fourier transformation of a characteristic value.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t * \\param[in]  c2k - Fourier transformation coefficients.\n\t * \\param[in]  c3k - Fourier transformation coefficients.\n\t * \\param[in]  nboundaryvertex - pithcwise ordered vertex.\n\t */\n\tvoid Boundary_Fourier(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker, vector<std::complex<su2double> >& c2k,vector<std::complex<su2double> >& c3k,signed long& nboundaryvertex);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] intMarker - internal marker.\n\t * \\param[in] extMarker - external marker.\n\t */\n\t void SetExtAveragedValue(CSolver *solver_container, unsigned short intMarker,  unsigned short extMarker);\n\n\t /*!\n\t  * \\brief Provide the average density at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Density on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedDensity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the average pressure at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Pressure on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedTotPressure(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide Total Pressure Losses (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of Total Pressure Losses.\n\t  */\n\t su2double GetTotalPressureLoss(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide Kinetic Energy Losses (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Kinetic Energy Losses.\n\t  */\n\t su2double GetKineticEnergyLoss(unsigned short inMarkerTP);\n\n\t /*!\n\t\t* \\brief Provide Total-Total Efficiency (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Total-Total Efficiency.\n\t  */\n\t su2double GetTotalTotalEfficiency(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide Total-Static Efficiency (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Total-Static Efficiency.\n\t  */\n\t su2double GetTotalStaticEfficiency(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Eulerian Work (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Eulerian Work.\n\t  */\n\t su2double GetEulerianWork(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Inlet Total Enthalpy (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Inlet Total Enthalpy.\n\t  */\n\t su2double GetTotalEnthalpyIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Inlet Flow Angle (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Inlet Flow Angle.\n\t  */\n\t su2double GetFlowAngleIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Outlet Flow Angle (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Outlet FLow Angle.\n\t  */\n\t su2double GetFlowAngleOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Inlet Mass Flow (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Inlet Mass Flow.\n\t  */\n\t su2double GetMassFlowIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Outlet Mass Flow (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Outlet Mass Flow.\n\t  */\n\t su2double GetMassFlowOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Inlet Mach number (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Inlet Mach number.\n\t  */\n\t su2double GetMachIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Outlet Mach number (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Outlet Mach number.\n\t  */\n\t su2double GetMachOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the normal component of the Inlet Mach number (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the normal component of the Inlet Mach number.\n\t  */\n\t su2double GetNormalMachIn(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the normal component of the Outlet Mach number (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the normal component of the Outlet Mach number.\n\t  */\n\t su2double GetNormalMachOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Outlet Enthalpy (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Outlet Enthalpy.\n\t  */\n\t su2double GetEnthalpyOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Isentropic Outlet Velocity (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Isentropic Outlet Velocity.\n\t  */\n\t su2double GetVelocityOutIs(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide the Outlet Pressure (turbomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Outlet Pressure.\n\t  */\n\t su2double GetPressureOut(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide Pressure Ratio (tubomachinery performance).\n\t  * \\param[in] inMarkerTP - turboperformance marker.\n\t  * \\return Value of the Pressure Ratio.\n\t  */\n\t su2double GetPressureRatio(unsigned short inMarkerTP);\n\n\t /*!\n\t  * \\brief Provide Averaged Total Temperature at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Density on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedTotTemperature(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the Average pressure at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Pressure on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedPressure(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the MassFlow at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the MassFLow on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetMassFlow(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the Flow Angle at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Flow Angle on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetFlowAngle(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the Mach number at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Mach number on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedMach(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the Normal Mach number at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Normal Mach number on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedNormalMach(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the average enthalpy at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Enthalpy on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedEnthalpy(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the average pressure at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Entropy on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedEntropy(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the average pressure at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Components of the Average Velocity on the surface <i>val_marker</i>.\n\t  */\n\t su2double* GetAveragedVelocity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the average grid velocity at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Grid Velocity on the surface <i>val_marker</i>.\n\t  */\n\t su2double* GetAveragedGridVelocity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the Average Normal Velocity at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Normal Velocity on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedNormalVelocity(unsigned short valMarker);\n\n\t /*!\n\t  * \\brief Provide the Tangent Velocity at the boundary of interest.\n\t  * \\param[in] val_marker - bound marker.\n\t  * \\return Value of the Average Tangent Velocity on the surface <i>val_marker</i>.\n\t  */\n\t su2double GetAveragedTangVelocity(unsigned short valMarker);\n\n\t /*!\n\t * \\brief compare to values.\n\t * \\param[in] a - value 1.\n\t * \\param[in] b - value 2.\n\t */\n     static bool Compareval(std::vector<su2double> a,std::vector<su2double> b);\n\n     /*!\n\t * \\brief Update the solution using a Runge-Kutta scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid ExplicitRK_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep);\n\n    /*!\n\t * \\brief Compute the Fan face Mach number.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solution - Container vector with all the solutions.\n\t * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid GetEngine_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output);\n\n  /*!\n   * \\brief Compute the Fan face Mach number.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solution - Container vector with all the solutions.\n   * \\param[in] Output - boolean to determine whether to print output.\n   */\n  void GetActuatorDisk_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output);\n\n  /*!\n\t * \\brief Update the AoA and freestream velocity at the farfield.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - current mesh level for the multigrid.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n  void SetFarfield_AoA(CGeometry *geometry, CSolver **solver_container,\n                                     CConfig *config, unsigned short iMesh, bool Output);\n\n\t/*!\n\t * \\brief Update the solution using the explicit Euler scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ExplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Euler scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the pressure forces and all the adimensional coefficients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Inviscid_Forces(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute turbomachinery performance.\n\t * \\param[in] solver - solver containing the outlet information.\n\t * \\param[in] inMarker - marker related to the inlet.\n\t * \\param[in] outMarker - marker related to the outlet.\n\t */\n\tvoid TurboPerformance(CSolver *solver,  CConfig *config, unsigned short inMarker,  unsigned short outMarker, unsigned short Kind_TurboPerf , unsigned short inMarkerTP );\n\n\t/*!\n\t * \\brief Compute turbomachinery performance.\n\t * \\param[in] solver - solver containing the outlet information.\n\t * \\param[in] inMarker - marker related to the inlet.\n\t * \\param[in] outMarker - marker related to the outlet.\n\t */\n\tvoid StoreTurboPerformance(CSolver *solver,  unsigned short inMarkerTP );\n\n\t/*!\n\t * \\brief Provide the non dimensional lift coefficient (inviscid contribution).\n\t * \\param val_marker Surface where the coefficient is going to be computed.\n\t * \\return Value of the lift coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCLift_Inv(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the non dimensional z moment coefficient (inviscid contribution).\n\t * \\param val_marker Surface where the coefficient is going to be computed.\n\t * \\return Value of the z moment coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCMz_Inv(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the non dimensional lift coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the lift coefficient on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetSurface_CLift(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the non dimensional drag coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the drag coefficient on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetSurface_CDrag(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional side-force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side-force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CSideForce(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional side-force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side-force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CEff(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional x force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CFx(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional y force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CFy(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional z force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CFz(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the non dimensional x moment coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the x moment coefficient on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetSurface_CMx(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the non dimensional y moment coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the y moment coefficient on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetSurface_CMy(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the non dimensional z moment coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the z moment coefficient on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetSurface_CMz(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional lift coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the lift coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CLift_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional drag coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the drag coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CDrag_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional side-force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side-force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CSideForce_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional side-force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the side-force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CEff_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional x force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CFx_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional y force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CFy_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional z force coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z force coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CFz_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional x moment coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the x moment coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CMx_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional y moment coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the y moment coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CMy_Inv(unsigned short val_marker);\n\n  /*!\n   * \\brief Provide the non dimensional z moment coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\return Value of the z moment coefficient on the surface <i>val_marker</i>.\n   */\n  su2double GetSurface_CMz_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the non dimensional drag coefficient (inviscid contribution).\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the drag coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCDrag_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the mass flow rate.\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the mass flow rate on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetInflow_MassFlow(unsigned short val_marker);\n\n    /*!\n\t * \\brief Provide the mass flow rate.\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the mass flow rate on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetExhaust_MassFlow(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the mass flow rate.\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the fan face pressure on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetInflow_Pressure(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the mass flow rate.\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the fan face mach on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetInflow_Mach(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the non dimensional sideforce coefficient (inviscid contribution).\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the sideforce coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCSideForce_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the non dimensional efficiency coefficient (inviscid contribution).\n\t * \\param val_marker Surface where the coeficient is going to be computed.\n\t * \\return Value of the efficiency coefficient (inviscid contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCEff_Inv(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional sideforce coefficient.\n\t * \\return Value of the sideforce coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CSideForce(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional efficiency coefficient.\n\t * \\return Value of the efficiency coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CEff(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional Equivalent Area coefficient.\n\t * \\return Value of the Equivalent Area coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CEquivArea(void);\n\n  /*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional Equivalent Area coefficient.\n\t * \\return Value of the Equivalent Area coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CpDiff(void);\n\n  /*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional Equivalent Area coefficient.\n\t * \\return Value of the Equivalent Area coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_HeatFluxDiff(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional Near-Field pressure coefficient.\n\t * \\return Value of the NearField pressure coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CNearFieldOF(void);\n\n\t/*!\n\t * \\brief Set the value of the Equivalent Area coefficient.\n\t * \\param[in] val_cequivarea - Value of the Equivalent Area coefficient.\n\t */\n\tvoid SetTotal_CEquivArea(su2double val_cequivarea);\n\n  /*!\n\t * \\brief Set the value of the Equivalent Area coefficient.\n\t * \\param[in] val_cequivarea - Value of the Equivalent Area coefficient.\n\t */\n\tvoid SetTotal_CpDiff(su2double val_pressure);\n\n  /*!\n\t * \\brief Set the value of the Equivalent Area coefficient.\n\t * \\param[in] val_cequivarea - Value of the Equivalent Area coefficient.\n\t */\n\tvoid SetTotal_HeatFluxDiff(su2double val_heat);\n\n\t/*!\n\t * \\brief Set the value of the Near-Field pressure oefficient.\n\t * \\param[in] val_cnearfieldpress - Value of the Near-Field pressure coefficient.\n\t */\n\tvoid SetTotal_CNearFieldOF(su2double val_cnearfieldpress);\n\n\t/*!\n\t * \\brief Store the total (inviscid + viscous) non dimensional lift coefficient.\n\t * \\param[in] val_Total_CLift - Value of the total lift coefficient.\n\t */\n\tvoid SetTotal_CLift(su2double val_Total_CLift);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional lift coefficient.\n\t * \\return Value of the lift coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CLift(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional drag coefficient.\n\t * \\return Value of the drag coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CDrag(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional x moment coefficient.\n\t * \\return Value of the moment x coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CMx(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional y moment coefficient.\n\t * \\return Value of the moment y coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CMy(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional z moment coefficient.\n\t * \\return Value of the moment z coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CMz(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional x force coefficient.\n\t * \\return Value of the force x coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CFx(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional y force coefficient.\n\t * \\return Value of the force y coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CFy(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional z force coefficient.\n\t * \\return Value of the force z coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CFz(void);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional thrust coefficient.\n\t * \\return Value of the rotor efficiency coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CT(void);\n\n\t/*!\n\t * \\brief Store the total (inviscid + viscous) non dimensional thrust coefficient.\n\t * \\param[in] val_Total_CT - Value of the total thrust coefficient.\n\t */\n\tvoid SetTotal_CT(su2double val_Total_CT);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional torque coefficient.\n\t * \\return Value of the rotor efficiency coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CQ(void);\n\n    /*!\n\t * \\brief Provide the total heat load.\n\t * \\return Value of the heat load (viscous contribution).\n\t */\n\tsu2double GetTotal_HeatFlux(void);\n\n    /*!\n\t * \\brief Provide the total heat load.\n\t * \\return Value of the heat load (viscous contribution).\n\t */\n\tsu2double GetTotal_MaxHeatFlux(void);\n\n\t/*!\n\t * \\brief Store the total (inviscid + viscous) non dimensional torque coefficient.\n\t * \\param[in] val_Total_CQ - Value of the total torque coefficient.\n\t */\n\tvoid SetTotal_CQ(su2double val_Total_CQ);\n\n    /*!\n\t * \\brief Store the total heat load.\n\t * \\param[in] val_Total_Heat - Value of the heat load.\n\t */\n\tvoid SetTotal_HeatFlux(su2double val_Total_Heat);\n\n    /*!\n\t * \\brief Store the total heat load.\n\t * \\param[in] val_Total_Heat - Value of the heat load.\n\t */\n\tvoid SetTotal_MaxHeatFlux(su2double val_Total_MaxHeat);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional rotor Figure of Merit.\n\t * \\return Value of the rotor efficiency coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CMerit(void);\n\n\t/*!\n\t * \\brief Store the total (inviscid + viscous) non dimensional drag coefficient.\n\t * \\param[in] val_Total_CDrag - Value of the total drag coefficient.\n\t */\n\tvoid SetTotal_CDrag(su2double val_Total_CDrag);\n\n\t/*!\n\t * \\brief Get the inviscid contribution to the lift coefficient.\n\t * \\return Value of the lift coefficient (inviscid contribution).\n\t */\n\tsu2double GetAllBound_CLift_Inv(void);\n\n\t/*!\n\t * \\brief Get the inviscid contribution to the drag coefficient.\n\t * \\return Value of the drag coefficient (inviscid contribution).\n\t */\n\tsu2double GetAllBound_CDrag_Inv(void);\n\n\t/*!\n\t * \\brief Get the inviscid contribution to the sideforce coefficient.\n\t * \\return Value of the sideforce coefficient (inviscid contribution).\n\t */\n\tsu2double GetAllBound_CSideForce_Inv(void);\n\n\t/*!\n\t * \\brief Get the inviscid contribution to the efficiency coefficient.\n\t * \\return Value of the efficiency coefficient (inviscid contribution).\n\t */\n\tsu2double GetAllBound_CEff_Inv(void);\n\n  /*!\n   * \\brief Get the inviscid contribution to the efficiency coefficient.\n   * \\return Value of the efficiency coefficient (inviscid contribution).\n   */\n  su2double GetAllBound_CMx_Inv(void);\n\n  /*!\n   * \\brief Get the inviscid contribution to the efficiency coefficient.\n   * \\return Value of the efficiency coefficient (inviscid contribution).\n   */\n  su2double GetAllBound_CMy_Inv(void);\n\n  /*!\n   * \\brief Get the inviscid contribution to the efficiency coefficient.\n   * \\return Value of the efficiency coefficient (inviscid contribution).\n   */\n  su2double GetAllBound_CMz_Inv(void);\n\n  /*!\n   * \\brief Get the inviscid contribution to the efficiency coefficient.\n   * \\return Value of the efficiency coefficient (inviscid contribution).\n   */\n  su2double GetAllBound_CFx_Inv(void);\n\n  /*!\n   * \\brief Get the inviscid contribution to the efficiency coefficient.\n   * \\return Value of the efficiency coefficient (inviscid contribution).\n   */\n  su2double GetAllBound_CFy_Inv(void);\n\n  /*!\n   * \\brief Get the inviscid contribution to the efficiency coefficient.\n   * \\return Value of the efficiency coefficient (inviscid contribution).\n   */\n  su2double GetAllBound_CFz_Inv(void);\n\n\t/*!\n\t * \\brief Provide the Pressure coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tsu2double GetCPressure(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief Provide the Target Pressure coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tsu2double GetCPressureTarget(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief Set the value of the target Pressure coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n  void SetCPressureTarget(unsigned short val_marker, unsigned long val_vertex, su2double val_pressure);\n\n  /*!\n\t * \\brief Value of the characteristic variables at the boundaries.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n\tsu2double *GetCharacPrimVar(unsigned short val_marker, unsigned long val_vertex);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional Free Surface coefficient.\n\t * \\return Value of the Free Surface coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CFreeSurface(void);\n\n\t/*!\n\t * \\brief Set the value of the Free Surface coefficient.\n\t * \\param[in] val_cfreesurface - Value of the Free Surface coefficient.\n\t */\n\tvoid SetTotal_CFreeSurface(su2double val_cfreesurface);\n\n\t/*!\n   * \\brief Provide the averaged total pressure at a marker.\n   */\n\tsu2double GetOneD_TotalPress(void);\n\n\t/*!\n   * \\brief Set the value of averaged total pressure\n   * \\param[in] val_exit_pt - value of the averaged pressure\n   */\n\tvoid SetOneD_TotalPress(su2double AveragePressure);\n\n  /*!\n   * \\brief Provide the averaged Mach number at a marker.\n   */\n  su2double GetOneD_Mach(void);\n\n  /*!\n   * \\brief Set the averaged Mach number at a marker.\n   */\n  void SetOneD_Mach(su2double AverageMach);\n\n  /*!\n   * \\brief Provide the averaged Mach number at a marker.\n   */\n  su2double GetOneD_Temp(void);\n\n  /*!\n   * \\brief Set the averaged Temperature at a marker.\n   */\n  void SetOneD_Temp(su2double AverageTemperature);\n\n  /*!\n   * \\brief Provide the averaged Mach number at a marker.\n   */\n  su2double GetOneD_MassFlowRate(void);\n\n  /*!\n   * \\brief Set the averaged Temperature at a marker.\n   */\n  void SetOneD_MassFlowRate(su2double MassFlowRate);\n\n  /*!\n   * \\brief Get the flux averaged pressure at a marker.(same as area averaged pressure)\n   */\n  su2double GetOneD_FluxAvgPress(void);\n\n  /*!\n   * \\brief Set the flux averaged pressure at a marker. (same as area averaged pressure)\n   */\n  void SetOneD_FluxAvgPress(su2double PressureRef);\n\n  /*!\n   * \\brief Get the flux averaged density at a marker. ( = (gamma/(gamma-1)) / ( Pref*(href-1/2 uref^2) )\n   */\n  su2double GetOneD_FluxAvgDensity(void);\n\n  /*!\n   * \\brief Set the flux averaged density at a marker.( = (gamma/(gamma-1)) / ( Pref*(href-1/2 uref^2) )\n   */\n  void SetOneD_FluxAvgDensity(su2double DensityRef);\n\n  /*!\n   * \\brief Get the flux averaged velocity at a marker. = \\f$ \\sqrt ( \\int((rho*u)*u^2dA)/\\int(rho*u*dA) )\\f$\n   */\n  su2double GetOneD_FluxAvgVelocity(void);\n\n  /*!\n   * \\brief Set the flux averaged velocity at a marker. =\\f$ sqrt ( \\int((rho*u)*u^2dA)/\\int(rho*u*dA) ) \\f$\n   */\n  void SetOneD_FluxAvgVelocity(su2double VelocityRef);\n\n  /*!\n   * \\brief Get the flux averaged enthalpy at a marker. = \\f$ \\int(rho*u*h dA) / \\int(rho *u *dA ) \\f$\n   */\n  su2double GetOneD_FluxAvgEntalpy(void);\n\n  /*!\n   * \\brief Set the flux averaged enthalpy at a marker. =\\f$ \\int(rho*u*h dA) / \\int(rho *u *dA ) \\f$\n   */\n  void SetOneD_FluxAvgEntalpy(su2double EnthalpyRef);\n\n\t/*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time Strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] flow_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] flow_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid SetFlow_Displacement(CGeometry **flow_geometry, CVolumetricMovement *flow_grid_movement, CConfig *flow_config, CConfig *fea_config,\n                              CGeometry **fea_geometry, CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] flow_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] flow_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid SetFlow_Displacement_Int(CGeometry **flow_geometry, CVolumetricMovement *flow_grid_movement, CConfig *flow_config, CConfig *fea_config,\n                              CGeometry **fea_geometry, CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Load a solution from a restart file.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvoid LoadRestart(CGeometry **geometry, CSolver ***solver, CConfig *config, int val_iter);\n\n\t/*!\n\t * \\brief Set the initial condition for the Euler Equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvoid SetInitialCondition(CGeometry **geometry, CSolver ***solver_container, CConfig *config, unsigned long ExtIter);\n\n\t/*!\n\t * \\brief Recompute distance to the level set 0.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetFreeSurface_Distance(CGeometry *geometry, CConfig *config);\n\n\n  /*!\n   * \\brief Set the freestream pressure.\n   * \\param[in] Value of freestream pressure.\n   */\n  void SetPressure_Inf(su2double p_inf);\n\n  /*!\n   * \\brief Set the freestream temperature.\n   * \\param[in] Value of freestream temperature.\n   */\n  void SetTemperature_Inf(su2double t_inf);\n};\n\n/*!\n * \\class CNSSolver\n * \\brief Main class for defining the Navier-Stokes flow solver.\n * \\ingroup Navier_Stokes_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CNSSolver : public CEulerSolver {\nprivate:\n\tsu2double Viscosity_Inf;\t/*!< \\brief Viscosity at the infinity. */\n  su2double Tke_Inf;\t/*!< \\brief Turbulent kinetic energy at the infinity. */\n\tsu2double Prandtl_Lam,   /*!< \\brief Laminar Prandtl number. */\n\tPrandtl_Turb;         /*!< \\brief Turbulent Prandtl number. */\n\tsu2double *CDrag_Visc,\t/*!< \\brief Drag coefficient (viscous contribution) for each boundary. */\n\t*CLift_Visc,\t\t/*!< \\brief Lift coefficient (viscous contribution) for each boundary. */\n\t*CSideForce_Visc,\t\t/*!< \\brief Side force coefficient (viscous contribution) for each boundary. */\n\t*CMx_Visc,\t\t\t/*!< \\brief Moment x coefficient (viscous contribution) for each boundary. */\n\t*CMy_Visc,\t\t\t/*!< \\brief Moment y coefficient (viscous contribution) for each boundary. */\n\t*CMz_Visc,\t\t\t/*!< \\brief Moment z coefficient (viscous contribution) for each boundary. */\n\t*CFx_Visc,\t\t\t/*!< \\brief Force x coefficient (viscous contribution) for each boundary. */\n\t*CFy_Visc,\t\t\t/*!< \\brief Force y coefficient (viscous contribution) for each boundary. */\n\t*CFz_Visc,\t\t\t/*!< \\brief Force z coefficient (viscous contribution) for each boundary. */\n  *Surface_CLift_Visc,/*!< \\brief Lift coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CDrag_Visc,/*!< \\brief Drag coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CSideForce_Visc,/*!< \\brief Side-force coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CEff_Visc,/*!< \\brief Side-force coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CFx_Visc,  /*!< \\brief Force x coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CFy_Visc,  /*!< \\brief Force y coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CFz_Visc,  /*!< \\brief Force z coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CMx_Visc,  /*!< \\brief Moment x coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CMy_Visc,  /*!< \\brief Moment y coefficient (viscous contribution) for each monitoring surface. */\n  *Surface_CMz_Visc,  /*!< \\brief Moment z coefficient (viscous contribution) for each monitoring surface. */\n\t*CEff_Visc,\t\t\t/*!< \\brief Efficiency (Cl/Cd) (Viscous contribution) for each boundary. */\n\t*CMerit_Visc,\t\t\t/*!< \\brief Rotor Figure of Merit (Viscous contribution) for each boundary. */\n\t*CT_Visc,\t\t/*!< \\brief Thrust coefficient (viscous contribution) for each boundary. */\n\t*CQ_Visc,\t\t/*!< \\brief Torque coefficient (viscous contribution) for each boundary. */\n  *Heat_Visc,\t\t/*!< \\brief Heat load (viscous contribution) for each boundary. */\n  *MaxHeatFlux_Visc, /*!< \\brief Maximum heat flux (viscous contribution) for each boundary. */\n\t**CSkinFriction;\t/*!< \\brief Skin friction coefficient for each boundary and vertex. */\n\tsu2double *ForceViscous,\t/*!< \\brief Viscous force for each boundary. */\n\t*MomentViscous;\t\t\t/*!< \\brief Inviscid moment for each boundary. */\n\tsu2double AllBound_CDrag_Visc, /*!< \\brief Drag coefficient (viscous contribution) for all the boundaries. */\n\tAllBound_CLift_Visc,\t\t/*!< \\brief Lift coefficient (viscous contribution) for all the boundaries. */\n\tAllBound_CSideForce_Visc,\t\t/*!< \\brief Sideforce coefficient (viscous contribution) for all the boundaries. */\n\tAllBound_CMx_Visc,\t\t\t/*!< \\brief Moment x coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMy_Visc,\t\t\t/*!< \\brief Moment y coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMz_Visc,\t\t\t/*!< \\brief Moment z coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CEff_Visc,\t\t\t/*!< \\brief Efficient coefficient (Viscous contribution) for all the boundaries. */\n\tAllBound_CFx_Visc,\t\t\t/*!< \\brief Force x coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CFy_Visc,\t\t\t/*!< \\brief Force y coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CFz_Visc,\t\t\t/*!< \\brief Force z coefficient (inviscid contribution) for all the boundaries. */\n\tAllBound_CMerit_Visc,\t\t\t/*!< \\brief Rotor Figure of Merit coefficient (Viscous contribution) for all the boundaries. */\n\tAllBound_CT_Visc,\t\t/*!< \\brief Thrust coefficient (viscous contribution) for all the boundaries. */\n\tAllBound_CQ_Visc,\t\t/*!< \\brief Torque coefficient (viscous contribution) for all the boundaries. */\n  AllBound_HeatFlux_Visc,\t\t/*!< \\brief Heat load (viscous contribution) for all the boundaries. */\n  AllBound_MaxHeatFlux_Visc; /*!< \\brief Maximum heat flux (viscous contribution) for all boundaries. */\n  su2double StrainMag_Max, Omega_Max; /*!< \\brief Maximum Strain Rate magnitude and Omega. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCNSSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCNSSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CNSSolver(void);\n\n\t/*!\n\t * \\brief Compute the viscosity at the infinity.\n\t * \\return Value of the viscosity at the infinity.\n\t */\n\tsu2double GetViscosity_Inf(void);\n\n  /*!\n\t * \\brief Get the turbulent kinetic energy at the infinity.\n\t * \\return Value of the turbulent kinetic energy at the infinity.\n\t */\n\tsu2double GetTke_Inf(void);\n\n\t/*!\n\t * \\brief Compute the time step for solving the Navier-Stokes equations with turbulence model.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] Iteration - Index of the current iteration.\n\t */\n\tvoid SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                      unsigned short iMesh, unsigned long Iteration);\n\n\t/*!\n\t * \\brief Restart residual and compute gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n  /*!\n   * \\brief Compute the velocity^2, SoundSpeed, Pressure, Enthalpy, Viscosity.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] Output - boolean to determine whether to print output.\n   * \\return - The number of non-physical points.\n   */\n  unsigned long SetPrimitive_Variables(CSolver **solver_container, CConfig *config, bool Output);\n\n    /*!\n\t * \\brief Impose a constant heat-flux condition at the wall.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose the Navier-Stokes boundary condition (strong).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                            unsigned short val_marker);\n\n\t/*!\n\t * \\brief Compute the viscous forces and all the addimensional coefficients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Viscous_Forces(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Get the non dimensional lift coefficient (viscous contribution).\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the lift coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCLift_Visc(unsigned short val_marker);\n\n    /*!\n\t * \\brief Get the non dimensional z moment coefficient (viscous contribution).\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the z moment coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCMz_Visc(unsigned short val_marker);\n\n  /*!\n\t * \\brief Get the non dimensional sideforce coefficient (viscous contribution).\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the sideforce coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCSideForce_Visc(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Get the non dimensional drag coefficient (viscous contribution).\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\return Value of the drag coefficient (viscous contribution) on the surface <i>val_marker</i>.\n\t */\n\tsu2double GetCDrag_Visc(unsigned short val_marker);\n\n\t/*!\n\t * \\brief Get the total non dimensional lift coefficient (viscous contribution).\n\t * \\return Value of the lift coefficient (viscous contribution).\n\t */\n\tsu2double GetAllBound_CLift_Visc(void);\n\n  /*!\n\t * \\brief Get the total non dimensional sideforce coefficient (viscous contribution).\n\t * \\return Value of the lift coefficient (viscous contribution).\n\t */\n\tsu2double GetAllBound_CSideForce_Visc(void);\n\n\t/*!\n\t * \\brief Get the total non dimensional drag coefficient (viscous contribution).\n\t * \\return Value of the drag coefficient (viscous contribution).\n\t */\n\tsu2double GetAllBound_CDrag_Visc(void);\n\n\t/*!\n\t * \\brief Compute the viscous residuals.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                          CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Get the skin friction coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the skin friction coefficient.\n\t */\n\tsu2double GetCSkinFriction(unsigned short val_marker, unsigned long val_vertex);\n\n\t/*!\n\t * \\brief Get the skin friction coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the heat transfer coefficient.\n\t */\n\tsu2double GetHeatFlux(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief Get the skin friction coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the heat transfer coefficient.\n\t */\n\tsu2double GetHeatFluxTarget(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n\t * \\brief Set the value of the target Pressure coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the pressure coefficient.\n\t */\n  void SetHeatFluxTarget(unsigned short val_marker, unsigned long val_vertex, su2double val_heat);\n\n\t/*!\n\t * \\brief Get the y plus.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the y plus.\n\t */\n\tsu2double GetYPlus(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n   * \\brief Get the max Omega.\n   * \\return Value of the max Omega.\n   */\n  su2double GetOmega_Max(void);\n\n  /*!\n   * \\brief Get the max Strain rate magnitude.\n   * \\return Value of the max Strain rate magnitude.\n   */\n  su2double GetStrainMag_Max(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the StrainMag_Max\n   */\n  void SetStrainMag_Max(su2double val_strainmag_max);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the Omega_Max\n   */\n  void SetOmega_Max(su2double val_omega_max);\n\n};\n\n/*!\n * \\class CTurbSolver\n * \\brief Main class for defining the turbulence model solver.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CTurbSolver : public CSolver {\nprotected:\n\tsu2double *FlowPrimVar_i,  /*!< \\brief Store the flow solution at point i. */\n\t*FlowPrimVar_j,         /*!< \\brief Store the flow solution at point j. */\n\t*lowerlimit,            /*!< \\brief contains lower limits for turbulence variables. */\n\t*upperlimit;            /*!< \\brief contains upper limits for turbulence variables. */\n\tsu2double Gamma;           /*!< \\brief Fluid's Gamma constant (ratio of specific heats). */\n\tsu2double Gamma_Minus_One; /*!< \\brief Fluids's Gamma - 1.0  . */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbSolver(void);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CTurbSolver(void);\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbSolver(CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Limiter(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the viscous residuals for the turbulent equation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                        CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Impose the Symmetry Plane boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose via the residual the Euler wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short val_marker);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n  /*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time-Stepping Strategy.\n\t * \\param[in] geometry - Geometric definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                            unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n};\n\n/*!\n * \\class CTurbSASolver\n * \\brief Main class for defining the turbulence model solver.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTurbSASolver: public CTurbSolver {\nprivate:\n\tsu2double nu_tilde_Inf, nu_tilde_Engine;\n\npublic:\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbSASolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] FluidModel\n\t */\n\tCTurbSASolver(CGeometry *geometry, CConfig *config, unsigned short iMesh, CFluidModel* FluidModel);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CTurbSASolver(void);\n\n\t/*!\n\t * \\brief Restart residual and compute gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                        unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Impose the Navier-Stokes wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose the Navier-Stokes wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                            unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Far Field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                  unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the outlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                   unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose the engine inflow boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Engine_Inflow(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                          CConfig *config, unsigned short val_marker);\n\n  /*!\n   * \\brief Impose the engine bleed boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n  void BC_Engine_Bleed(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                        CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the engine exhaust boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Engine_Exhaust(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                           CConfig *config, unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose the interface boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid BC_Interface_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                               CConfig *config);\n\n\t/*!\n\t * \\brief Impose the near-field boundary condition using the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid BC_NearField_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                               CConfig *config);\n\n  /*!\n\t * \\brief Load a solution from a restart file.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvoid LoadRestart(CGeometry **geometry, CSolver ***solver, CConfig *config, int val_iter);\n\n\n};\n\n/*!\n * \\class CTransLMSolver\n * \\brief Main class for defining the turbulence model solver.\n * \\ingroup Turbulence_Model\n * \\author A. Aranake.\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTransLMSolver: public CTurbSolver {\nprivate:\n\tsu2double Intermittency_Inf, REth_Inf;\npublic:\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTransLMSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tCTransLMSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CTransLMSolver(void);\n\n\t/*!\n\t * \\brief Restart residual and compute gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                        unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container,\n                       CNumerics *numerics, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the viscous residuals for the turbulent equation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                        CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Impose the Navier-Stokes wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Far Field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                  unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the outlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                   unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the symmetry condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t// Another set of matrix structures for the Lm equations\n\tCSysMatrix JacobianItmc; /*!< \\brief Complete sparse Jacobian structure for implicit computations. */\n\tsu2double *LinSysSolItmc;\t\t/*!< \\brief vector to store iterative solution of implicit linear system. */\n\tsu2double *LinSysResItmc;\t\t/*!< \\brief vector to store iterative residual of implicit linear system. */\n\tsu2double *rhsItmc;\t\t/*!< \\brief right hand side of implicit linear system. */\n\tCSysMatrix JacobianReth; /*!< \\brief Complete sparse Jacobian structure for implicit computations. */\n\tsu2double *LinSysSolReth;\t\t/*!< \\brief vector to store iterative solution of implicit linear system. */\n\tsu2double *LinSysResReth;\t\t/*!< \\brief vector to store iterative residual of implicit linear system. */\n\tsu2double *rhsReth;\t\t/*!< \\brief right hand side of implicit linear system. */\n};\n\n/*!\n * \\class CTurbSSTSolver\n * \\brief Main class for defining the turbulence model solver.\n * \\ingroup Turbulence_Model\n * \\author A. Campos, F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTurbSSTSolver: public CTurbSolver {\nprivate:\n\tsu2double *constants,  /*!< \\brief Constants for the model. */\n\tkine_Inf,           /*!< \\brief Free-stream turbulent kinetic energy. */\n\tomega_Inf;          /*!< \\brief Free-stream specific dissipation. */\n\npublic:\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbSSTSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tCTurbSSTSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CTurbSSTSolver(void);\n\n\t/*!\n\t * \\brief Restart residual and compute gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Computes the eddy viscosity.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                        unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Impose the Navier-Stokes wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose the Navier-Stokes wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                            unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Far Field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                  unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the outlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                   unsigned short val_marker);\n\n\t/*!\n\t * \\brief Get the constants for the SST model.\n\t * \\return A pointer to an array containing a set of constants\n\t */\n\tsu2double* GetConstants();\n\n};\n\n/*!\n * \\class CAdjEulerSolver\n * \\brief Main class for defining the Euler's adjoint flow solver.\n * \\ingroup Euler_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjEulerSolver : public CSolver {\nprotected:\n\tsu2double PsiRho_Inf,\t/*!< \\brief PsiRho variable at the infinity. */\n\tPsiE_Inf,\t\t\t/*!< \\brief PsiE variable at the infinity. */\n\t*Phi_Inf;\t\t\t/*!< \\brief Phi vector at the infinity. */\n\tsu2double *Sens_Mach, /*!< \\brief Mach sensitivity coefficient for each boundary. */\n\t*Sens_AoA,\t\t\t/*!< \\brief Angle of attack sensitivity coefficient for each boundary. */\n\t*Sens_Geo,\t\t\t/*!< \\brief Shape sensitivity coefficient for each boundary. */\n\t*Sens_Press,\t\t\t/*!< \\brief Pressure sensitivity coefficient for each boundary. */\n\t*Sens_Temp,\t\t\t/*!< \\brief Temperature sensitivity coefficient for each boundary. */\n\t*Sens_BPress,     /*!< \\brief Back pressure sensitivity coefficient for each boundary. */\n\t**CSensitivity;\t\t/*!< \\brief Shape sensitivity coefficient for each boundary and vertex. */\n\tsu2double Total_Sens_Mach;\t/*!< \\brief Total mach sensitivity coefficient for all the boundaries. */\n\tsu2double Total_Sens_AoA;\t\t/*!< \\brief Total angle of attack sensitivity coefficient for all the boundaries. */\n\tsu2double Total_Sens_Geo;\t\t/*!< \\brief Total shape sensitivity coefficient for all the boundaries. */\n\tsu2double Total_Sens_Press;    /*!< \\brief Total farfield sensitivity to pressure. */\n\tsu2double Total_Sens_Temp;    /*!< \\brief Total farfield sensitivity to temperature. */\n\tsu2double Total_Sens_BPress;    /*!< \\brief Total sensitivity to back pressure. */\n\tsu2double *iPoint_UndLapl,\t/*!< \\brief Auxiliary variable for the undivided Laplacians. */\n\t*jPoint_UndLapl;\t\t\t/*!< \\brief Auxiliary variable for the undivided Laplacians. */\n\tbool space_centered;  /*!< \\brief True if space centered scheeme used. */\n    su2double **Jacobian_Axisymmetric; /*!< \\brief Storage for axisymmetric Jacobian. */\n\tunsigned long nMarker;\t\t\t\t/*!< \\brief Total number of markers using the grid information. */\n\tsu2double Gamma;\t\t\t\t\t\t\t\t\t/*!< \\brief Fluid's Gamma constant (ratio of specific heats). */\n\tsu2double Gamma_Minus_One;\t\t\t\t/*!< \\brief Fluids's Gamma - 1.0  . */\n  su2double *FlowPrimVar_i,\t/*!< \\brief Store the flow solution at point i. */\n\t*FlowPrimVar_j;        /*!< \\brief Store the flow solution at point j. */\n\n  su2double pnorm,\n  Area_Monitored; /*!< \\brief Store the total area of the monitored outflow surface (used for normalization in continuous adjoint outflow conditions) */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCAdjEulerSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n     * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tCAdjEulerSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CAdjEulerSolver(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] iMesh - Index of the mesh in multigrid computations.\n   * \\param[in] Iteration - Index of the current iteration.\n   */\n  void SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iMesh, unsigned long Iteration);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Limiter(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Compute the Fan face Mach number.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solution - Container vector with all the solutions.\n\t * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid GetEngine_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output);\n\n\t/*!\n\t * \\brief Created the force projection vector for adjoint boundary conditions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetForceProj_Vector(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the jump for the interior boundary problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetIntBoundary_Jump(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Compute adjoint density at the infinity.\n\t * \\return Value of the adjoint density at the infinity.\n\t */\n\tsu2double GetPsiRho_Inf(void);\n\n\t/*!\n\t * \\brief Compute the adjoint energy at the infinity.\n\t * \\return Value of the adjoint energy at the infinity.\n\t */\n\tsu2double GetPsiE_Inf(void);\n\n\t/*!\n\t * \\brief Compute Phi (adjoint velocity) at the infinity.\n\t * \\param[in] val_dim - Index of the adjoint velocity vector.\n\t * \\return Value of the adjoint velocity vector at the infinity.\n\t */\n\tsu2double GetPhi_Inf(unsigned short val_dim);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a centered scheme for the adjoint equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Centered_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                           unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term integration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term integration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the undivided laplacian for the adjoint solution.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetUndivided_Laplacian(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Parallelization of Undivided Laplacian.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Undivided_Laplacian(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the sensor for higher order dissipation control in rotating problems.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetDissipation_Switch(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Dissipation_Switch(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose via the residual the adjoint Euler wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose via the residual the interface adjoint boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Interface_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Impose via the residual the near-field adjoint boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_NearField_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Impose via the residual the adjoint symmetry boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the boundary condition to the far field using characteristics.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                  unsigned short val_marker);\n\n\n  /*!\n   * \\brief Impose the supersonic inlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] solver - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n\tvoid BC_Supersonic_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n\t              unsigned short val_marker);\n\n  /*!\n   * \\brief Impose the supersonic outlet boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] solver - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n  void BC_Supersonic_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                           unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the outlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                   unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the engine inflow adjoint boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Engine_Inflow(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                          CConfig *config, unsigned short val_marker);\n\n  /*!\n   * \\brief Impose the engine bleed adjoint boundary condition.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] conv_numerics - Description of the numerical method.\n   * \\param[in] visc_numerics - Description of the numerical method.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n   */\n  void BC_Engine_Bleed(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                        CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the engine exhaust boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Engine_Exhaust(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                           CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Update the solution using a Runge-Kutta strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid ExplicitRK_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Update the solution using a explicit Euler scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ExplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Initialize the residual vectors.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Compute the inviscid sensitivity of the functional.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Inviscid_Sensitivity(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Smooth the inviscid sensitivity of the functional.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Smooth_Sensitivity(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Get the shape sensitivity coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\return Value of the sensitivity coefficient.\n\t */\n\tsu2double GetCSensitivity(unsigned short val_marker, unsigned long val_vertex);\n\n\t/*!\n\t * \\brief Set the shape sensitivity coefficient.\n\t * \\param[in] val_marker - Surface marker where the coefficient is computed.\n\t * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n\t * \\param[in] val_sensitivity - Value of the sensitivity coefficient.\n\t */\n\tvoid SetCSensitivity(unsigned short val_marker, unsigned long val_vertex, su2double val_sensitivity);\n\n\t/*!\n\t * \\brief Provide the total shape sensitivity coefficient.\n\t * \\return Value of the geometrical sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_Sens_Geo(void);\n\n\t/*!\n\t * \\brief Set the total Mach number sensitivity coefficient.\n\t * \\return Value of the Mach sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_Sens_Mach(void);\n\n\t/*!\n\t * \\brief Set the total angle of attack sensitivity coefficient.\n\t * \\return Value of the angle of attack sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_Sens_AoA(void);\n\n\t/*!\n\t * \\brief Set the total farfield pressure sensitivity coefficient.\n\t * \\return Value of the farfield pressure sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_Sens_Press(void);\n\n\t/*!\n\t * \\brief Set the total farfield temperature sensitivity coefficient.\n\t * \\return Value of the farfield temperature sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_Sens_Temp(void);\n\n\t/*!\n\t * \\author H. Kline\n\t * \\brief Get the total Back pressure number sensitivity coefficient.\n\t * \\return Value of the Back sensitivity coefficient\n\t *         (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_Sens_BPress(void);\n\n\t/*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time Strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n    /*!\n\t * \\brief Set the initial condition for the Euler Equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvoid SetInitialCondition(CGeometry **geometry, CSolver ***solver_container, CConfig *config, unsigned long ExtIter);\n\n\n};\n\n/*!\n * \\class CAdjNSSolver\n * \\brief Main class for defining the Navier-Stokes' adjoint flow solver.\n * \\ingroup Navier_Stokes_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjNSSolver : public CAdjEulerSolver {\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCAdjNSSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n     * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tCAdjNSSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CAdjNSSolver(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver_container - Container vector with all the solutions.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] iMesh - Index of the mesh in multigrid computations.\n   * \\param[in] Iteration - Index of the current iteration.\n   */\n  void SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iMesh, unsigned long Iteration);\n\n\n\t/*!\n\t * \\brief Impose via the residual or brute force the Navier-Stokes adjoint boundary condition (heat flux).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n    /*!\n\t * \\brief Impose via the residual or brute force the Navier-Stokes adjoint boundary condition (heat flux).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Restart residual and compute gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Compute the viscous sensitivity of the functional.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Viscous_Sensitivity(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the viscous residuals for the adjoint equation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                          CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n};\n\n/*!\n * \\class CAdjTurbSolver\n * \\brief Main class for defining the adjoint turbulence model solver.\n * \\ingroup Turbulence_Model\n * \\author F. Palacios, A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjTurbSolver : public CSolver {\nprivate:\n\tsu2double PsiNu_Inf,\t/*!< \\brief PsiNu variable at the infinity. */\n\t*FlowSolution_i,\t/*!< \\brief Store the flow solution at point i. */\n\t*FlowSolution_j;\t/*!< \\brief Store the flow solution at point j. */\n\n\tsu2double Gamma;\t\t\t\t\t\t\t\t\t/*!< \\brief Fluid's Gamma constant (ratio of specific heats). */\n\tsu2double Gamma_Minus_One;\t\t\t\t/*!< \\brief Fluids's Gamma - 1.0  . */\n\npublic:\n\n\t/*!\n\t * \\brief Default constructor of the class.\n\t */\n\tCAdjTurbSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCAdjTurbSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Default destructor of the class.\n\t */\n\tvirtual ~CAdjTurbSolver(void);\n\n\t/*!\n\t * \\brief Impose the Navier-Stokes turbulent adjoint boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n  /*!\n\t * \\brief Impose an isothermal wall boundary condition (no-slip).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the boundary condition to the far field using characteristics.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Initializate the residual vectors.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh);\n\n\t/*!\n\t * \\brief Compute the viscous residuals for the turbulent adjoint equation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                          unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n};\n\n/*! \\class CPoissonSolver\n *  \\brief Main class for defining the poisson potential solver.\n *  \\author F. Palacios\n *  \\version 4.1.0 \"Cardinal\"\n *  \\date May 3, 2010.\n */\nclass CPoissonSolver : public CSolver {\nprivate:\n\tsu2double *Source_Vector;\t\t  /*!< \\brief Auxiliary vector for storing element source vector. */\n  su2double **StiffMatrix_Elem; /*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\tsu2double **StiffMatrix_Node;\t/*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCPoissonSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCPoissonSolver(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] solver1_geometry - Geometrical definition of the problem.\n\t * \\param[in] solver1_solution - Container vector with all the solutions.\n\t * \\param[in] solver1_config - Definition of the particular problem.\n\t * \\param[in] solver2_geometry - Geometrical definition of the problem.\n\t * \\param[in] solver2_solution - Container vector with all the solutions.\n\t * \\param[in] solver2_config - Definition of the particular problem.\n\t */\n\tvoid Copy_Zone_Solution(CSolver ***solver1_solution, CGeometry **solver1_geometry, CConfig *solver1_config, CSolver ***solver2_solution, CGeometry **solver2_geometry, CConfig *solver2_config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CPoissonSolver(void);\n\n\t/*!\n\t * \\brief Integrate the Poisson equation using a Galerkin method.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Integrate the Poisson equation using a Galerkin method.\n\t * \\param[in] StiffMatrix_Elem - Element stiffness matrix\n\t */\n\tvoid AddStiffMatrix(su2double **StiffMatrix_Elem, unsigned long Point_0, unsigned long Point_1, unsigned long Point_2, unsigned long Point_3);\n\n\t/*!\n\t * \\brief Compute the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Compute_Residual(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                          unsigned short iMesh);\n\n  /*!\n\t * \\brief Impose via the residual the Dirichlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n  void BC_Dirichlet(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_marker);\n\n  /*!\n\t * \\brief Impose via the residual the Neumann boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n  void BC_Neumann(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Set residuals to zero.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n};\n\n/*! \\class CWaveSolver\n *  \\brief Main class for defining the wave solver.\n *  \\author F. Palacios\n *  \\version 4.1.0 \"Cardinal\"\n *  \\date May 3, 2010.\n */\nclass CWaveSolver : public CSolver {\nprivate:\n\tsu2double *CWave;\t/*!< \\brief Wave strength for each boundary. */\n\tsu2double AllBound_CWave;\t/*!< \\brief Total wave strength for all the boundaries. */\n\tsu2double Total_CWave; /*!< \\brief Total wave strength for all the boundaries. */\n\n    CSysMatrix StiffMatrixSpace; /*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations. */\n\tCSysMatrix StiffMatrixTime;\t/*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations. */\n\n    su2double **StiffMatrix_Elem,\t\t\t/*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\t**StiffMatrix_Node;\t\t\t\t\t\t\t/*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCWaveSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCWaveSolver(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CWaveSolver(void);\n\n\t/*!\n\t * \\brief Integrate the Poisson equation using a Galerkin method.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Impose via the residual the Euler wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a Dirichlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Set residuals to zero.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n   * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time Strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n  /*!\n\t * \\brief Load a solution from a restart file.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] solver - Container vector with all of the solvers.\n\t * \\param[in] config - Definition of the particular problem.\n   * \\param[in] val_iter - Current external iteration number.\n\t */\n\tvoid LoadRestart(CGeometry **geometry, CSolver ***solver, CConfig *config, int val_iter);\n\n\t/*!\n\t * \\brief Compute the total wave strength coefficient.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Wave_Strength(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Build stiffness matrix in space.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid SetSpace_Matrix(CGeometry *geometry,\n                         CConfig   *config);\n\n\t/*!\n\t * \\brief Provide the total wave strength.\n\t * \\return Value of the wave strength.\n\t */\n\tsu2double GetTotal_CWave(void);\n\n};\n\n/*! \\class CHeatSolver\n *  \\brief Main class for defining the heat solver.\n *  \\author F. Palacios\n *  \\version 4.1.0 \"Cardinal\"\n *  \\date May 3, 2010.\n */\nclass CHeatSolver : public CSolver {\nprivate:\n\tsu2double *CHeat;\t     /*!< \\brief Heat strength for each boundary. */\n\tsu2double Total_CHeat; /*!< \\brief Total Heat strength for all the boundaries. */\n\n  CSysMatrix StiffMatrixSpace; /*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations. */\n\tCSysMatrix StiffMatrixTime;\t /*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations. */\n\n  su2double **StiffMatrix_Elem; /*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\tsu2double **StiffMatrix_Node;\t /*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCHeatSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCHeatSolver(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CHeatSolver(void);\n\n\t/*!\n\t * \\brief Integrate the Poisson equation using a Galerkin method.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh, unsigned short iRKStep);\n\n  /*!\n\t * \\brief Impose via the residual or brute force the Navier-Stokes adjoint boundary condition (heat flux).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                        unsigned short val_marker);\n\n  /*!\n\t * \\brief Impose via the residual or brute force the Navier-Stokes adjoint boundary condition (heat flux).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Set residuals to zero.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time Strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n\t/*!\n\t * \\brief Provide the total heat strength.\n\t * \\return Value of the heat strength.\n\t */\n\tsu2double GetTotal_CHeat(void);\n\n};\n\n/*! \\class CFEASolver\n *  \\brief Main class for defining the FEA solver.\n *  \\author F. Palacios, R. Sanchez.\n *  \\version 4.1.0 \"Cardinal\"\n *  \\date May 3, 2010.\n */\nclass CFEASolver : public CSolver {\nprivate:\n\n\tsu2double  Total_CFEA;\t\t\t/*!< \\brief Total FEA coefficient for all the boundaries. */\n    CSysMatrix StiffMatrixSpace; /*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations. */\n\tCSysMatrix StiffMatrixTime;\t/*!< \\brief Sparse structure for storing the stiffness matrix in Galerkin computations. */\n\n    CSysMatrix MassMatrix; \t\t/*!< \\brief Sparse structure for storing the mass matrix in Galerkin computations. */\n\tCSysMatrix DampMatrix;\t/*!< \\brief Sparse structure for storing the damping matrix in Galerkin computations. */\n\n\tCSysVector TimeRes_Aux;\t\t\t\t/*!< \\brief Auxiliary vector for adding mass and damping contributions to the residual. */\n\tCSysVector TimeRes;\t\t\t\t\t/*!< \\brief Vector for adding mass and damping contributions to the residual */\n\n  su2double **StiffMatrix_Elem,\t\t\t/*!< \\brief Auxiliary matrices for storing elem to elem Stiffness Matrices. */\n\t**StiffMatrix_Node,\t\t\t\t\t/*!< \\brief Auxiliary matrices for storing point to point Stiffness Matrices. */\n\t**MassMatrix_Elem,\t\t\t\t\t/*!< \\brief Auxiliary matrices for storing elem to elem Mass Matrices. */\n\t**MassMatrix_Node,\t\t\t\t\t/*!< \\brief Auxiliary matrices for storing point to point Mass Matrices. */\n\t**MassMatrix_Node_Int,\t\t\t\t/*!< \\brief Auxiliary matrices for storing point to point Mass Matrices * a0. */\n\t**DampMatrix_Elem,\t\t\t\t\t/*!< \\brief Auxiliary matrices for storing elem to elem Damping Matrices. */\n\t**DampMatrix_Node,\t\t\t\t\t/*!< \\brief Auxiliary matrices for storing point to point Damping Matrices. */\n\t*DeadLoadVector_Elem,\t\t\t\t/*!< \\brief Auxiliary vector for storing point to point Dead Loads. */\n\t*DeadLoadVector_Node;\t\t\t\t/*!< \\brief Auxiliary vector for storing point to point Dead Loads. */\n\n  su2double a_dt[8];\t\t\t\t/*!< \\brief Integration constants. */\n\n  su2double WAitken_Dyn;\t\t\t/*!< \\brief Aitken's dynamic coefficient */\n  su2double WAitken_Dyn_tn1;\t\t/*!< \\brief Aitken's dynamic coefficient in the previous iteration */\n\n  su2double FSI_Conv[2];\t\t/*!< \\brief Values to check the convergence of the FSI problem. */\n\n\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCFEASolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCFEASolver(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CFEASolver(void);\n\n\t/*!\n\t * \\brief Integrate the Poisson equation using a Galerkin method.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Impose a displacement (constraint) boundary condition --> Clamped boundary.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Clamped(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\t/*!\n\t * \\brief Impose a displacement (constraint) boundary condition --> Clamped boundary.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Clamped_Post(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a displacement (constraint) boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Normal_Displacement(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a load boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Flow_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                     unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a load boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Normal_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a load boundary condition in cartesian coordinates.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Dir_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a sine-wave load boundary condition in cartesian coordinates.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sine_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                 unsigned short val_marker);\n\n\n  /*!\n\t * \\brief Impose a load boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Pressure(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Set residuals to zero.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, CNumerics **numerics, unsigned short iMesh, unsigned long Iteration, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Postprocessing.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,  CNumerics **numerics,\n\t\t\tunsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Newmark solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitNewmark_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time Strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n  /*!\n\t * \\brief Get the surface pressure from a file.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  void GetSurface_Pressure(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Set the the tractions in the in the FEA solver (matching mesh).\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_solution - Container vector with all the solutions.\n\t * \\param[in] fea_config - Definition of the particular problem.\n\t */\n\tvoid SetFEA_Load(CSolver ***flow_solution, CGeometry **fea_geometry, CGeometry **flow_geometry, CConfig *fea_config, CConfig *flow_config, CNumerics *fea_numerics);\n\n\t/*!\n\t * \\brief Set the the tractions in the in the FEA solver (non-matching mesh).\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_solution - Container vector with all the solutions.\n\t * \\param[in] fea_config - Definition of the particular problem.\n\t */\n\tvoid SetFEA_Load_Int(CSolver ***flow_solution, CGeometry **fea_geometry, CGeometry **flow_geometry, CConfig *fea_config, CConfig *flow_config, CNumerics *fea_numerics);\n\n\t/*!\n\t * \\brief Set the initial condition for the FEA Equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvoid SetInitialCondition(CGeometry **geometry, CSolver ***solver_container, CConfig *config, unsigned long ExtIter);\n\n\t/*!\n\t * \\brief Provide the total (inviscid + viscous) non dimensional FEA coefficient.\n\t * \\return Value of the FEA coefficient (inviscid + viscous contribution).\n\t */\n\tsu2double GetTotal_CFEA(void);\n\n\t/*!\n\t * \\brief Set the value of the FEA coefficient.\n\t * \\param[in] val_cfea - Value of the FEA coefficient.\n\t */\n\tvoid SetTotal_CFEA(su2double val_cfea);\n\n\t/*!\n\t * \\brief Set the displacement for the nodes in the structural mesh\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] flow_geometry - Definition of the particular problem.\n\t */\n\tvoid SetStruct_Displacement(CGeometry **fea_geometry,\n                                CConfig *fea_config,\n                                CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Predictor for structural displacements based on previous iterations\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] flow_geometry - Definition of the particular problem.\n\t */\n\tvoid PredictStruct_Displacement(CGeometry **fea_geometry,\n                                \tCConfig *fea_config,\n                                \tCSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Computation of Aitken's coefficient.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid ComputeAitken_Coefficient(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution,\n            \t\t\t\t  unsigned long iFSIIter);\n\n\t/*!\n\t * \\brief Aitken's relaxation of the solution.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid SetAitken_Relaxation(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Aitken's relaxation of the solution.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid Update_StructSolution(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Get the value of the FSI convergence.\n\t * \\param[in] Set value of interest: 0 - Initial value, 1 - Current value.\n\t */\n\tvoid SetFSI_ConvValue(unsigned short val_index, su2double val_criteria);\n\n\t/*!\n\t * \\brief Get the value of the FSI convergence.\n\t * \\param[in]  Value of interest: 0 - Initial value, 1 - Current value.\n\t * \\return Values to compare\n\t */\n\tsu2double GetFSI_ConvValue(unsigned short val_index);\n\n\t/*!\n\t * \\brief Compute the stiffness matrix of the problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_StiffMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the stiffness and mass matrices of the problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_StiffMassMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_StiffMassDampMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Initialize_SystemMatrix(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_IntegrationConstants(CConfig *config);\n\n\t/*!\n\t * \\brief Set the solution variables at time n to the current solution.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t */\n\tvoid SetSolution_time_n(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Retrieve the value of the dynamic Aitken relaxation factor.\n\t * \\return Value of the dynamic Aitken relaxation factor.\n\t */\n\tsu2double GetWAitken_Dyn(void);\n\n\t/*!\n\t * \\brief Retrieve the value of the last Aitken relaxation factor in the previous time step.\n\t * \\return Value of the last Aitken relaxation factor in the previous time step.\n\t */\n\tsu2double GetWAitken_Dyn_tn1(void);\n\n\t/*!\n\t * \\brief Set the value of the dynamic Aitken relaxation factor\n\t * \\param[in] Value of the dynamic Aitken relaxation factor\n\t */\n\tvoid SetWAitken_Dyn(su2double waitk);\n\n\t/*!\n\t * \\brief Set the value of the last Aitken relaxation factor in the current time step.\n\t * \\param[in] Value of the last Aitken relaxation factor in the current time step.\n\t */\n\tvoid SetWAitken_Dyn_tn1(su2double waitk_tn1);\n\n\n};\n\n/*! \\class CFEM_ElasticitySolver\n *  \\brief Main class for defining a FEM solver for elastic structural problems.\n *  \\author R. Sanchez.\n *  \\version 4.0.0 \"Cardinal\"\n *  \\date July 10, 2015.\n */\nclass CFEM_ElasticitySolver : public CSolver {\nprivate:\n\n\tsu2double  Total_CFEA;\t\t\t\t/*!< \\brief Total FEA coefficient for all the boundaries. */\n\t\t\t\t\t\t\t\t\t/*!< We maintain the name to avoid defining a new function... */\n\n\tunsigned long nElement;\n\tunsigned short nMarker;\n\n\tsu2double *GradN_X,\n\t*GradN_x;\n\n\tsu2double **Jacobian_c_ij;\t\t\t/*!< \\brief Submatrix to store the constitutive term for node ij. */\n\tsu2double **Jacobian_s_ij;\t\t\t/*!< \\brief Submatrix to store the stress contribution of node ij (diagonal). */\n\tsu2double **Jacobian_k_ij;\t\t\t/*!< \\brief Submatrix to store the pressure contribution of node ij. */\n\tsu2double **MassMatrix_ij;\t\t\t/*!< \\brief Submatrix to store the term ij of the mass matrix. */\n\tsu2double *Res_Stress_i;\t\t\t/*!< \\brief Submatrix to store the nodal stress contribution of node i. */\n\n\tsu2double *Res_Ext_Surf;\t\t\t/*!< \\brief Auxiliary vector to store the surface load contribution to the residual */\n\tsu2double *Res_Time_Cont;\t\t\t/*!< \\brief Auxiliary vector to store the surface load contribution to the residual */\n\tsu2double *Res_FSI_Cont;\t\t\t/*!< \\brief Auxiliary vector to store the surface load contribution to the residual */\n\n\tsu2double *solutionPredictor;\t\t/*!< \\brief Auxiliary vector to store the solution predictor */\n\n\tsu2double *Solution_Interm;\t\t/*!< \\brief Auxiliary vector to store the intermediate solution */\n\n\tsu2double *SolRest;\t\t\t/*!< \\brief Auxiliary vector to restart the solution */\n\n\tsu2double *nodeReactions;\t\t\t/*!< \\brief Auxiliary vector to store the reactions */\n\n\tsu2double *normalVertex;\t\t\t/*!< \\brief Auxiliary vector to store the normals to a certain vertex */\n\tsu2double **stressTensor;\t\t\t/*!< \\brief Auxiliary matrix to rebuild the stress tensor and compute reactions */\n\n\tsu2double **mZeros_Aux;\t\t\t/*!< \\brief Submatrix to make zeros and impose clamped boundary conditions. */\n\tsu2double **mId_Aux;\t\t\t\t/*!< \\brief Diagonal submatrix to impose clamped boundary conditions. */\n\n\tsu2double a_dt[9];\t\t\t\t\t/*!< \\brief Integration constants. */\n\n\tsu2double Conv_Ref[3];\t\t\t\t/*!< \\brief Reference values for convergence check: DTOL, RTOL, ETOL */\n\tsu2double Conv_Check[3];\t\t\t/*!< \\brief Current values for convergence check: DTOL, RTOL, ETOL */\n\tsu2double FSI_Conv[2];\t\t\t\t/*!< \\brief Values to check the convergence of the FSI problem. */\n\n\tsu2double loadIncrement;\t\t\t/*!< \\brief Coefficient that determines the amount of load which is applied */\n\n\tsu2double WAitken_Dyn;\t\t\t\t/*!< \\brief Aitken's dynamic coefficient */\n\tsu2double WAitken_Dyn_tn1;\t\t\t/*!< \\brief Aitken's dynamic coefficient in the previous iteration */\n\n\tCSysMatrix MassMatrix; \t\t\t/*!< \\brief Sparse structure for storing the mass matrix. */\n\tCSysVector TimeRes_Aux;\t\t\t/*!< \\brief Auxiliary vector for adding mass and damping contributions to the residual. */\n\tCSysVector TimeRes;\t\t\t\t/*!< \\brief Vector for adding mass and damping contributions to the residual */\n\tCSysVector LinSysReact;\t\t\t/*!< \\brief Vector to store the residual before applying the BCs */\n\n\npublic:\n\n\tCElement** element_container; \t/*!< \\brief Vector which the define the finite element structure for each problem. */\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCFEM_ElasticitySolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCFEM_ElasticitySolver(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CFEM_ElasticitySolver(void);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition only for displacements in structural solutions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_DispOnly(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition for predicted FSI structural solutions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Pred(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the send-receive boundary condition for old predicted FSI structural solutions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Pred_Old(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Set residuals to zero.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n     * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, CNumerics **numerics, unsigned short iMesh, unsigned long Iteration, unsigned short RunTime_EqSystem, bool Output);\n\n\n\t/*!\n\t * \\brief Set the initial condition for the FEM structural problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvoid SetInitialCondition(CGeometry **geometry, CSolver ***solver_container, CConfig *config, unsigned long ExtIter);\n\n\t/*!\n\t * \\brief Reset the initial condition for the FEM structural problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] ExtIter - External iteration.\n\t */\n\tvoid ResetInitialCondition(CGeometry **geometry, CSolver ***solver_container, CConfig *config, unsigned long ExtIter);\n\n\t/*!\n\t * \\brief Compute the time step for solving the FEM equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] Iteration - Index of the current iteration.\n\t */\n\tvoid SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                      unsigned short iMesh, unsigned long Iteration);\n\n\t/*!\n\t * \\brief Compute the stiffness matrix of the problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_StiffMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the stiffness matrix of the problem and the nodal stress terms at the same time (more efficient if full Newton Raphson).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_StiffMatrix_NodalStressRes(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the mass matrix of the problem.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_MassMatrix(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the nodal stress terms and add them to the residual.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_NodalStressRes(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\t/*!\n\t * \\brief Compute the stress at the nodes for output purposes.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\n\tvoid Compute_NodalStress(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config);\n\n\n\t/*!\n\t * \\brief Initializes the matrices/residuals in the solution process (avoids adding over previous values).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Initialize_SystemMatrix(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Compute_IntegrationConstants(CConfig *config);\n\n\t/*!\n\t * \\brief Clamped boundary conditions.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid BC_Clamped(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Enforce the solution to be 0 in the clamped nodes - Avoids accumulation of numerical error.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] solver - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Clamped_Post(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a displacement (constraint) boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Normal_Displacement(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short val_marker);\n\n\n\t/*!\n\t * \\brief Impose a load boundary condition normal to the boundary.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Normal_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a load boundary condition in cartesian coordinates.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Dir_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                 unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose a sine-wave load boundary condition in cartesian coordinates.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sine_Load(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                 unsigned short val_marker);\n\n\n  /*!\n\t * \\brief Impose a load boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Pressure(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Iterate using an implicit Newmark solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitNewmark_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Newmark solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitNewmark_Update(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitNewmark_Relaxation(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Iterate using an implicit Generalized Alpha solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid GeneralizedAlpha_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Generalized Alpha solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid GeneralizedAlpha_UpdateDisp(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Generalized Alpha solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid GeneralizedAlpha_UpdateSolution(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Generalized Alpha solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid GeneralizedAlpha_UpdateLoads(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Postprocessing.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,  CNumerics **numerics,\n\t\t\tunsigned short iMesh);\n\n\t/*!\n\t * \\brief Routine to solve the Jacobian-Residual linearized system.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Solve_System(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Get the residual for FEM structural analysis.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the residual for the variable in the position <i>val_var</i>.\n\t */\n\tsu2double GetRes_FEM(unsigned short val_var);\n\n\t/*!\n\t * \\brief Provide the maximum Von Mises Stress for structural analysis.\n\t * \\return Value of the maximum Von Mises Stress.\n\t */\n\tsu2double GetTotal_CFEA(void);\n\n\t/*!\n\t * \\brief Set the value of the FEA coefficient.\n\t * \\param[in] val_cfea - Value of the FEA coefficient.\n\t */\n\tvoid SetTotal_CFEA(su2double val_cfea);\n\n\t/*!\n\t * \\brief Set the the tractions in the in the FEA solver (matching mesh).\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_solution - Container vector with all the solutions.\n\t * \\param[in] fea_config - Definition of the particular problem.\n\t */\n\tvoid SetFEA_Load(CSolver ***flow_solution, CGeometry **fea_geometry, CGeometry **flow_geometry, CConfig *fea_config, CConfig *flow_config, CNumerics *fea_numerics);\n\n\t/*!\n\t * \\brief Set the the tractions in the in the FEA solver (non-matching mesh).\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] flow_solution - Container vector with all the solutions.\n\t * \\param[in] fea_config - Definition of the particular problem.\n\t */\n\tvoid SetFEA_Load_Int(CSolver ***flow_solution, CGeometry **fea_geometry, CGeometry **flow_geometry, CConfig *fea_config, CConfig *flow_config, CNumerics *fea_numerics);\n\n\t/*!\n\t * \\brief Predictor for structural displacements based on previous iterations\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_grid_movement - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] flow_geometry - Definition of the particular problem.\n\t */\n\tvoid PredictStruct_Displacement(CGeometry **fea_geometry,\n                                \tCConfig *fea_config,\n                                \tCSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Computation of Aitken's coefficient.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid ComputeAitken_Coefficient(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution,\n            \t\t\t\t  unsigned long iFSIIter);\n\n\t/*!\n\t * \\brief Aitken's relaxation of the solution.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid SetAitken_Relaxation(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Aitken's relaxation of the solution.\n\t * \\param[in] fea_geometry - Geometrical definition of the problem.\n\t * \\param[in] fea_config - Geometrical definition of the problem.\n\t * \\param[in] fea_geometry - Definition of the particular problem.\n\t */\n\tvoid Update_StructSolution(CGeometry **fea_geometry,\n            \t\t\t\t  CConfig *fea_config,\n            \t\t\t\t  CSolver ***fea_solution);\n\n\t/*!\n\t * \\brief Get the value of the FSI convergence.\n\t * \\param[in] Set value of interest: 0 - Initial value, 1 - Current value.\n\t */\n\tvoid SetFSI_ConvValue(unsigned short val_index, su2double val_criteria);\n\n\t/*!\n\t * \\brief Get the value of the FSI convergence.\n\t * \\param[in]  Value of interest: 0 - Initial value, 1 - Current value.\n\t * \\return Values to compare\n\t */\n\tsu2double GetFSI_ConvValue(unsigned short val_index);\n\n\t/*!\n\t * \\brief Retrieve the value of the dynamic Aitken relaxation factor.\n\t * \\return Value of the dynamic Aitken relaxation factor.\n\t */\n\tsu2double GetWAitken_Dyn(void);\n\n\t/*!\n\t * \\brief Retrieve the value of the last Aitken relaxation factor in the previous time step.\n\t * \\return Value of the last Aitken relaxation factor in the previous time step.\n\t */\n\tsu2double GetWAitken_Dyn_tn1(void);\n\n\t/*!\n\t * \\brief Set the value of the dynamic Aitken relaxation factor\n\t * \\param[in] Value of the dynamic Aitken relaxation factor\n\t */\n\tvoid SetWAitken_Dyn(su2double waitk);\n\n\t/*!\n\t * \\brief Set the value of the last Aitken relaxation factor in the current time step.\n\t * \\param[in] Value of the last Aitken relaxation factor in the current time step.\n\t */\n\tvoid SetWAitken_Dyn_tn1(su2double waitk_tn1);\n\n\t/*!\n\t * \\brief Set the value of the load increment for nonlinear structural analysis\n\t * \\param[in] Value of the coefficient\n\t */\n\tvoid SetLoad_Increment(su2double val_loadIncrement);\n\n\n};\n\n/*!\n * \\class CAdjLevelSetSolver\n * \\brief Main class for defining the level set solver.\n * \\ingroup LevelSet_Model\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjLevelSetSolver : public CSolver {\nprotected:\n\tsu2double *FlowSolution_i,\t/*!< \\brief Store the flow solution at point i. */\n\t*FlowSolution_j,\t\t/*!< \\brief Store the flow solution at point j. */\n\tTotal_CFreeSurface;\t\t\t/*!< \\brief Total Free Surface coefficient for all the boundaries. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCAdjLevelSetSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CAdjLevelSetSolver(void);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution(CGeometry *geometry, CConfig *config);\n\n    /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config);\n\n  /*!\n\t * \\brief Impose the send-receive boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n  void Set_MPI_Solution_Limiter(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Impose the Symmetry Plane boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Update the solution using an implicit solver.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Restart residual and compute gradients.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                         unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term computation.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Impose via the residual the Euler wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Navier-Stokes wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Far Field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Far Field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                  unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Far Field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                   unsigned short val_marker);\n\n\t/*!\n\t * \\brief Set the total residual adding the term that comes from the Dual Time Strategy.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n\t */\n\tvoid SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem);\n\n};\n\n/*!\n * \\class CTemplateSolver\n * \\brief Main class for defining the template model solver.\n * \\ingroup Template_Flow_Equation\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CTemplateSolver : public CSolver {\nprivate:\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTemplateSolver(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCTemplateSolver(CGeometry *geometry, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CTemplateSolver(void);\n\n\t/*!\n\t * \\brief Compute the velocity^2, SoundSpeed, Pressure.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n   * \\param[in] RunTime_EqSystem - System of equations which is going to be solved.\n   * \\param[in] Output - boolean to determine whether to print output.\n\t */\n\tvoid Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output);\n\n\t/*!\n\t * \\brief Compute the time step for solving the Euler equations.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] Iteration - Index of the current iteration.\n\t */\n\tvoid SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                      unsigned short iMesh, unsigned long Iteration);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a centered scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid Centered_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                           CConfig *config, unsigned short iMesh, unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Compute the spatial integration using a upwind scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term integration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] second_numerics - Description of the second numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Source term integration.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iMesh - Index of the mesh in multigrid computations.\n\t */\n\tvoid Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                         CConfig *config, unsigned short iMesh);\n\n\t/*!\n\t * \\brief Impose via the residual the Euler wall boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config,\n                       unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the Navier-Stokes boundary condition (strong).\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                          unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the far-field boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the inlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Inlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                  unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the outlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Outlet(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                   unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the symmetry plane boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] conv_numerics - Description of the numerical method.\n\t * \\param[in] visc_numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config,\n                      unsigned short val_marker);\n\n\t/*!\n\t * \\brief Impose the dirichlet boundary condition.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] numerics - Description of the numerical method.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] val_marker - Surface marker where the boundary condition is applied.\n\t */\n\tvoid BC_Custom(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                   CConfig *config, unsigned short val_marker);\n\n\t/*!\n\t * \\brief Update the solution using a Runge-Kutta scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t * \\param[in] iRKStep - Current step of the Runge-Kutta iteration.\n\t */\n\tvoid ExplicitRK_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                              unsigned short iRKStep);\n\n\t/*!\n\t * \\brief Update the solution using the explicit Euler scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ExplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n\t/*!\n\t * \\brief Update the solution using an implicit Euler scheme.\n\t * \\param[in] geometry - Geometrical definition of the problem.\n\t * \\param[in] solver_container - Container vector with all the solutions.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvoid ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config);\n\n};\n\n/*!\n * \\class CDiscAdjSolver\n * \\brief Main class for defining the discrete adjoint solver.\n * \\ingroup Discrete_Adjoint\n * \\author T. Albring\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CDiscAdjSolver : public CSolver {\nprivate:\n  unsigned short KindDirect_Solver;\n  CSolver *direct_solver;\n  su2double *Sens_Mach, /*!< \\brief Mach sensitivity coefficient for each boundary. */\n  *Sens_AoA,\t\t\t/*!< \\brief Angle of attack sensitivity coefficient for each boundary. */\n  *Sens_Geo,\t\t\t/*!< \\brief Shape sensitivity coefficient for each boundary. */\n  *Sens_Press,\t\t\t/*!< \\brief Pressure sensitivity coefficient for each boundary. */\n  *Sens_Temp,\t\t\t/*!< \\brief Temperature sensitivity coefficient for each boundary. */\n  **CSensitivity;\t/*!< \\brief Shape sensitivity coefficient for each boundary and vertex. */\n  su2double Total_Sens_Mach;\t/*!< \\brief Total mach sensitivity coefficient for all the boundaries. */\n  su2double Total_Sens_AoA;\t\t/*!< \\brief Total angle of attack sensitivity coefficient for all the boundaries. */\n  su2double Total_Sens_Geo;\t\t/*!< \\brief Total shape sensitivity coefficient for all the boundaries. */\n  su2double Total_Sens_Press;    /*!< \\brief Total farfield sensitivity to pressure. */\n  su2double Total_Sens_Temp;    /*!< \\brief Total farfield sensitivity to temperature. */\n  su2double Total_Sens_BPress;    /*!< \\brief Total sensitivity to outlet pressure. */\n  su2double ObjFunc_Value;        /*!< \\brief Value of the objective function. */\n  su2double Mach, Alpha, Beta, Pressure, Temperature;\n  unsigned long nMarker;\t\t\t\t/*!< \\brief Total number of markers using the grid information. */\n\npublic:\n\n  /*!\n   * \\brief Constructor of the class.\n   */\n  CDiscAdjSolver(void);\n\n  /*!\n   * \\overload\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] iMesh - Index of the mesh in multigrid computations.\n   */\n  CDiscAdjSolver(CGeometry *geometry, CConfig *config);\n\n  /*!\n   * \\overload\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   * \\param[in] solver - Initialize the discrete adjoint solver with the corresponding direct solver.\n   * \\param[in] Kind_Solver - The kind of direct solver.\n   */\n  CDiscAdjSolver(CGeometry *geometry, CConfig *config, CSolver* solver, unsigned short Kind_Solver, unsigned short iMesh);\n\n  /*!\n   * \\brief Performs the preprocessing of the adjoint AD-based solver.\n   *        Registers all necessary variables on the tape. Called while tape is active.\n   * \\param[in] geometry_container - The geometry container holding all grid levels.\n   * \\param[in] config_container - The particular config.\n   */\n  void RegisterSolution(CGeometry *geometry, CConfig *config);\n\n  /*!\n   * \\brief Performs the preprocessing of the adjoint AD-based solver.\n   *        Registers all necessary variables that are output variables on the tape.\n   *        Called while tape is active.\n   * \\param[in] geometry_container - The geometry container holding all grid levels.\n   * \\param[in] config_container - The particular config.\n   */\n  void RegisterOutput(CGeometry *geometry, CConfig *config);\n\n  /*!\n  * \\brief Sets the adjoint values of the output of the flow (+turb.) iteration\n  *         before evaluation of the tape.\n  * \\param[in] geometry - The geometrical definition of the problem.\n  * \\param[in] config - The particular config.\n  */\n  void SetAdjoint_Output(CGeometry *geometry, CConfig *config);\n\n  /*!\n  * \\brief Sets the adjoint values of the input variables of the flow (+turb.) iteration\n  *        after tape has been evaluated.\n  * \\param[in] geometry - The geometrical definition of the problem.\n  * \\param[in] config - The particular config.\n  */\n  void ExtractAdjoint_Solution(CGeometry *geometry, CConfig *config);\n\n  /*!\n  * \\brief Register the objective function as output.\n  * \\param[in] geometry - The geometrical definition of the problem.\n  */\n  void RegisterObj_Func(CConfig *config);\n\n  /*!\n   * \\brief Set the surface sensitivity.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  void SetSurface_Sensitivity(CGeometry *geometry, CConfig* config);\n\n  /*!\n   * \\brief Extract and set the geometrical sensitivity.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  void SetSensitivity(CGeometry *geometry, CConfig *config);\n\n  /*!\n   * \\brief Set the objective function.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  void SetAdj_ObjFunc(CGeometry *geometry, CConfig* config);\n\n\n  /*!\n   * \\brief Provide the total shape sensitivity coefficient.\n   * \\return Value of the geometrical sensitivity coefficient\n   *         (inviscid + viscous contribution).\n   */\n  su2double GetTotal_Sens_Geo(void);\n\n  /*!\n   * \\brief Set the total Mach number sensitivity coefficient.\n   * \\return Value of the Mach sensitivity coefficient\n   *         (inviscid + viscous contribution).\n   */\n  su2double GetTotal_Sens_Mach(void);\n\n  /*!\n   * \\brief Set the total angle of attack sensitivity coefficient.\n   * \\return Value of the angle of attack sensitivity coefficient\n   *         (inviscid + viscous contribution).\n   */\n  su2double GetTotal_Sens_AoA(void);\n\n  /*!\n   * \\brief Set the total farfield pressure sensitivity coefficient.\n   * \\return Value of the farfield pressure sensitivity coefficient\n   *         (inviscid + viscous contribution).\n   */\n  su2double GetTotal_Sens_Press(void);\n\n  /*!\n   * \\brief Set the total farfield temperature sensitivity coefficient.\n   * \\return Value of the farfield temperature sensitivity coefficient\n   *         (inviscid + viscous contribution).\n   */\n  su2double GetTotal_Sens_Temp(void);\n\n  /*!\n   * \\author H. Kline\n   * \\brief Get the total Back pressure number sensitivity coefficient.\n   * \\return Value of the Back sensitivity coefficient\n   *         (inviscid + viscous contribution).\n   */\n  su2double GetTotal_Sens_BPress(void);\n\n  /*!\n   * \\brief Get the shape sensitivity coefficient.\n   * \\param[in] val_marker - Surface marker where the coefficient is computed.\n   * \\param[in] val_vertex - Vertex of the marker <i>val_marker</i> where the coefficient is evaluated.\n   * \\return Value of the sensitivity coefficient.\n   */\n  su2double GetCSensitivity(unsigned short val_marker, unsigned long val_vertex);\n\n  /*!\n   * \\brief Prepare the solver for a new recording.\n   * \\param[in] kind_recording - Kind of AD recording.\n   */\n  void SetRecording(CGeometry *geometry, CConfig *config, unsigned short kind_recording);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  void RegisterVariables(CGeometry *geometry, CConfig *config, bool reset = false);\n\n  /*!\n   * \\brief A virtual member.\n   * \\param[in] geometry - Geometrical definition of the problem.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  void ExtractAdjoint_Variables(CGeometry *geometry, CConfig *config);\n};\n#include \"solver_structure.inl\"\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":26861,"id":"0","maintainHistory":false,"markersById":{"0-8129":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8130":{"range":{"start":{"row":115,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8131":{"range":{"start":{"row":120,"column":0},"end":{"row":121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8132":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8133":{"range":{"start":{"row":128,"column":0},"end":{"row":129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8134":{"range":{"start":{"row":133,"column":0},"end":{"row":134,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8135":{"range":{"start":{"row":138,"column":0},"end":{"row":139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8136":{"range":{"start":{"row":144,"column":0},"end":{"row":145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8137":{"range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8138":{"range":{"start":{"row":168,"column":0},"end":{"row":169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8139":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8140":{"range":{"start":{"row":202,"column":0},"end":{"row":203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8141":{"range":{"start":{"row":209,"column":0},"end":{"row":210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8142":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8143":{"range":{"start":{"row":235,"column":0},"end":{"row":236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8144":{"range":{"start":{"row":241,"column":0},"end":{"row":242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8145":{"range":{"start":{"row":247,"column":0},"end":{"row":248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8146":{"range":{"start":{"row":253,"column":0},"end":{"row":254,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8147":{"range":{"start":{"row":259,"column":0},"end":{"row":260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8148":{"range":{"start":{"row":264,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8149":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8150":{"range":{"start":{"row":274,"column":0},"end":{"row":275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8151":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8152":{"range":{"start":{"row":284,"column":0},"end":{"row":285,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8153":{"range":{"start":{"row":289,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8154":{"range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8155":{"range":{"start":{"row":308,"column":0},"end":{"row":309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8156":{"range":{"start":{"row":315,"column":0},"end":{"row":316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8157":{"range":{"start":{"row":322,"column":0},"end":{"row":323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8158":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8159":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8160":{"range":{"start":{"row":352,"column":0},"end":{"row":353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8161":{"range":{"start":{"row":359,"column":0},"end":{"row":360,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8162":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8163":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8164":{"range":{"start":{"row":379,"column":0},"end":{"row":380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8165":{"range":{"start":{"row":386,"column":0},"end":{"row":387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8166":{"range":{"start":{"row":393,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8167":{"range":{"start":{"row":399,"column":0},"end":{"row":400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8168":{"range":{"start":{"row":406,"column":0},"end":{"row":407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8169":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8170":{"range":{"start":{"row":420,"column":0},"end":{"row":421,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8171":{"range":{"start":{"row":427,"column":0},"end":{"row":428,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8172":{"range":{"start":{"row":434,"column":0},"end":{"row":435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8173":{"range":{"start":{"row":441,"column":0},"end":{"row":442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8174":{"range":{"start":{"row":448,"column":0},"end":{"row":449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8175":{"range":{"start":{"row":471,"column":0},"end":{"row":472,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8176":{"range":{"start":{"row":481,"column":0},"end":{"row":482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8177":{"range":{"start":{"row":503,"column":0},"end":{"row":504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8178":{"range":{"start":{"row":514,"column":0},"end":{"row":515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8179":{"range":{"start":{"row":525,"column":0},"end":{"row":526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8180":{"range":{"start":{"row":544,"column":0},"end":{"row":545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8181":{"range":{"start":{"row":551,"column":0},"end":{"row":552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8182":{"range":{"start":{"row":558,"column":0},"end":{"row":559,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8183":{"range":{"start":{"row":565,"column":0},"end":{"row":566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8184":{"range":{"start":{"row":573,"column":0},"end":{"row":574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8185":{"range":{"start":{"row":581,"column":0},"end":{"row":582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8186":{"range":{"start":{"row":592,"column":0},"end":{"row":593,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8187":{"range":{"start":{"row":631,"column":0},"end":{"row":632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8188":{"range":{"start":{"row":642,"column":0},"end":{"row":643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8189":{"range":{"start":{"row":653,"column":0},"end":{"row":654,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8190":{"range":{"start":{"row":690,"column":0},"end":{"row":691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8191":{"range":{"start":{"row":700,"column":0},"end":{"row":701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8192":{"range":{"start":{"row":710,"column":0},"end":{"row":711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8193":{"range":{"start":{"row":720,"column":0},"end":{"row":721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8194":{"range":{"start":{"row":736,"column":0},"end":{"row":737,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8195":{"range":{"start":{"row":750,"column":0},"end":{"row":751,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8196":{"range":{"start":{"row":771,"column":0},"end":{"row":772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8197":{"range":{"start":{"row":783,"column":0},"end":{"row":784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8198":{"range":{"start":{"row":794,"column":0},"end":{"row":795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8199":{"range":{"start":{"row":819,"column":0},"end":{"row":820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8200":{"range":{"start":{"row":831,"column":0},"end":{"row":832,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8201":{"range":{"start":{"row":843,"column":0},"end":{"row":844,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8202":{"range":{"start":{"row":866,"column":0},"end":{"row":867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8203":{"range":{"start":{"row":878,"column":0},"end":{"row":879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8204":{"range":{"start":{"row":889,"column":0},"end":{"row":890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8205":{"range":{"start":{"row":900,"column":0},"end":{"row":901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8206":{"range":{"start":{"row":911,"column":0},"end":{"row":912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8207":{"range":{"start":{"row":922,"column":0},"end":{"row":923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8208":{"range":{"start":{"row":1226,"column":0},"end":{"row":1227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8209":{"range":{"start":{"row":1234,"column":0},"end":{"row":1235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8210":{"range":{"start":{"row":1309,"column":0},"end":{"row":1310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8211":{"range":{"start":{"row":1341,"column":0},"end":{"row":1342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8212":{"range":{"start":{"row":1348,"column":0},"end":{"row":1349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8213":{"range":{"start":{"row":1355,"column":0},"end":{"row":1356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8214":{"range":{"start":{"row":1362,"column":0},"end":{"row":1363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8215":{"range":{"start":{"row":1369,"column":0},"end":{"row":1370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8216":{"range":{"start":{"row":1376,"column":0},"end":{"row":1377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8217":{"range":{"start":{"row":1383,"column":0},"end":{"row":1384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8218":{"range":{"start":{"row":1390,"column":0},"end":{"row":1391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8219":{"range":{"start":{"row":1397,"column":0},"end":{"row":1398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8220":{"range":{"start":{"row":1404,"column":0},"end":{"row":1405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8221":{"range":{"start":{"row":1411,"column":0},"end":{"row":1412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8222":{"range":{"start":{"row":1418,"column":0},"end":{"row":1419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8223":{"range":{"start":{"row":1425,"column":0},"end":{"row":1426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8224":{"range":{"start":{"row":1437,"column":0},"end":{"row":1438,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8225":{"range":{"start":{"row":1443,"column":0},"end":{"row":1444,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8226":{"range":{"start":{"row":1455,"column":0},"end":{"row":1456,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8227":{"range":{"start":{"row":1466,"column":0},"end":{"row":1467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8228":{"range":{"start":{"row":1474,"column":0},"end":{"row":1475,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8229":{"range":{"start":{"row":1482,"column":0},"end":{"row":1483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8230":{"range":{"start":{"row":1490,"column":0},"end":{"row":1491,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8231":{"range":{"start":{"row":1496,"column":0},"end":{"row":1497,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8232":{"range":{"start":{"row":1502,"column":0},"end":{"row":1503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8233":{"range":{"start":{"row":1508,"column":0},"end":{"row":1509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8234":{"range":{"start":{"row":1514,"column":0},"end":{"row":1515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8235":{"range":{"start":{"row":1520,"column":0},"end":{"row":1521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8236":{"range":{"start":{"row":1526,"column":0},"end":{"row":1527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8237":{"range":{"start":{"row":1533,"column":0},"end":{"row":1534,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8238":{"range":{"start":{"row":1542,"column":0},"end":{"row":1543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8239":{"range":{"start":{"row":1551,"column":0},"end":{"row":1552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8240":{"range":{"start":{"row":1560,"column":0},"end":{"row":1561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8241":{"range":{"start":{"row":1567,"column":0},"end":{"row":1568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8242":{"range":{"start":{"row":1581,"column":0},"end":{"row":1582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8243":{"range":{"start":{"row":1588,"column":0},"end":{"row":1589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8244":{"range":{"start":{"row":1595,"column":0},"end":{"row":1596,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8245":{"range":{"start":{"row":1602,"column":0},"end":{"row":1603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8246":{"range":{"start":{"row":1609,"column":0},"end":{"row":1610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8247":{"range":{"start":{"row":1616,"column":0},"end":{"row":1617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8248":{"range":{"start":{"row":1623,"column":0},"end":{"row":1624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8249":{"range":{"start":{"row":1630,"column":0},"end":{"row":1631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8250":{"range":{"start":{"row":1637,"column":0},"end":{"row":1638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8251":{"range":{"start":{"row":1644,"column":0},"end":{"row":1645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8252":{"range":{"start":{"row":1651,"column":0},"end":{"row":1652,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8253":{"range":{"start":{"row":1658,"column":0},"end":{"row":1659,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8254":{"range":{"start":{"row":1665,"column":0},"end":{"row":1666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8255":{"range":{"start":{"row":1672,"column":0},"end":{"row":1673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8256":{"range":{"start":{"row":1679,"column":0},"end":{"row":1680,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8257":{"range":{"start":{"row":1686,"column":0},"end":{"row":1687,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8258":{"range":{"start":{"row":1693,"column":0},"end":{"row":1694,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8259":{"range":{"start":{"row":1700,"column":0},"end":{"row":1701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8260":{"range":{"start":{"row":1707,"column":0},"end":{"row":1708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8261":{"range":{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8262":{"range":{"start":{"row":1721,"column":0},"end":{"row":1722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8263":{"range":{"start":{"row":1728,"column":0},"end":{"row":1729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8264":{"range":{"start":{"row":1735,"column":0},"end":{"row":1736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8265":{"range":{"start":{"row":1742,"column":0},"end":{"row":1743,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8266":{"range":{"start":{"row":1749,"column":0},"end":{"row":1750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8267":{"range":{"start":{"row":1756,"column":0},"end":{"row":1757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8268":{"range":{"start":{"row":1763,"column":0},"end":{"row":1764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8269":{"range":{"start":{"row":1770,"column":0},"end":{"row":1771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8270":{"range":{"start":{"row":1777,"column":0},"end":{"row":1778,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8271":{"range":{"start":{"row":1784,"column":0},"end":{"row":1785,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8272":{"range":{"start":{"row":1791,"column":0},"end":{"row":1792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8273":{"range":{"start":{"row":1797,"column":0},"end":{"row":1798,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8274":{"range":{"start":{"row":1803,"column":0},"end":{"row":1804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8275":{"range":{"start":{"row":1809,"column":0},"end":{"row":1810,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8276":{"range":{"start":{"row":1815,"column":0},"end":{"row":1816,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8277":{"range":{"start":{"row":1821,"column":0},"end":{"row":1822,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8278":{"range":{"start":{"row":1827,"column":0},"end":{"row":1828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8279":{"range":{"start":{"row":1833,"column":0},"end":{"row":1834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8280":{"range":{"start":{"row":1839,"column":0},"end":{"row":1840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8281":{"range":{"start":{"row":1845,"column":0},"end":{"row":1846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8282":{"range":{"start":{"row":1851,"column":0},"end":{"row":1852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8283":{"range":{"start":{"row":1857,"column":0},"end":{"row":1858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8284":{"range":{"start":{"row":1863,"column":0},"end":{"row":1864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8285":{"range":{"start":{"row":1869,"column":0},"end":{"row":1870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8286":{"range":{"start":{"row":1875,"column":0},"end":{"row":1876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8287":{"range":{"start":{"row":1881,"column":0},"end":{"row":1882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8288":{"range":{"start":{"row":1887,"column":0},"end":{"row":1888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8289":{"range":{"start":{"row":1893,"column":0},"end":{"row":1894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8290":{"range":{"start":{"row":1899,"column":0},"end":{"row":1900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8291":{"range":{"start":{"row":1905,"column":0},"end":{"row":1906,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8292":{"range":{"start":{"row":1911,"column":0},"end":{"row":1912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8293":{"range":{"start":{"row":1917,"column":0},"end":{"row":1918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8294":{"range":{"start":{"row":1923,"column":0},"end":{"row":1924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8295":{"range":{"start":{"row":1929,"column":0},"end":{"row":1930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8296":{"range":{"start":{"row":1935,"column":0},"end":{"row":1936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8297":{"range":{"start":{"row":1941,"column":0},"end":{"row":1942,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8298":{"range":{"start":{"row":1947,"column":0},"end":{"row":1948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8299":{"range":{"start":{"row":1953,"column":0},"end":{"row":1954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8300":{"range":{"start":{"row":1959,"column":0},"end":{"row":1960,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8301":{"range":{"start":{"row":1965,"column":0},"end":{"row":1966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8302":{"range":{"start":{"row":1971,"column":0},"end":{"row":1972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8303":{"range":{"start":{"row":1977,"column":0},"end":{"row":1978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8304":{"range":{"start":{"row":1983,"column":0},"end":{"row":1984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8305":{"range":{"start":{"row":1989,"column":0},"end":{"row":1990,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8306":{"range":{"start":{"row":1995,"column":0},"end":{"row":1996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8307":{"range":{"start":{"row":2001,"column":0},"end":{"row":2002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8308":{"range":{"start":{"row":2036,"column":0},"end":{"row":2037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8309":{"range":{"start":{"row":2042,"column":0},"end":{"row":2043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8310":{"range":{"start":{"row":2048,"column":0},"end":{"row":2049,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8311":{"range":{"start":{"row":2054,"column":0},"end":{"row":2055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8312":{"range":{"start":{"row":2062,"column":0},"end":{"row":2063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8313":{"range":{"start":{"row":2070,"column":0},"end":{"row":2071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8314":{"range":{"start":{"row":2078,"column":0},"end":{"row":2079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8315":{"range":{"start":{"row":2086,"column":0},"end":{"row":2087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8316":{"range":{"start":{"row":2094,"column":0},"end":{"row":2095,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8317":{"range":{"start":{"row":2102,"column":0},"end":{"row":2103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8318":{"range":{"start":{"row":2110,"column":0},"end":{"row":2111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8319":{"range":{"start":{"row":2118,"column":0},"end":{"row":2119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8320":{"range":{"start":{"row":2138,"column":0},"end":{"row":2139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8321":{"range":{"start":{"row":2144,"column":0},"end":{"row":2145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8322":{"range":{"start":{"row":2150,"column":0},"end":{"row":2151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8323":{"range":{"start":{"row":2156,"column":0},"end":{"row":2157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8324":{"range":{"start":{"row":2162,"column":0},"end":{"row":2163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8325":{"range":{"start":{"row":2168,"column":0},"end":{"row":2169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8326":{"range":{"start":{"row":2175,"column":0},"end":{"row":2176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8327":{"range":{"start":{"row":2182,"column":0},"end":{"row":2183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8328":{"range":{"start":{"row":2189,"column":0},"end":{"row":2190,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8329":{"range":{"start":{"row":2196,"column":0},"end":{"row":2197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8330":{"range":{"start":{"row":2203,"column":0},"end":{"row":2204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8331":{"range":{"start":{"row":2218,"column":0},"end":{"row":2219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8332":{"range":{"start":{"row":2224,"column":0},"end":{"row":2225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8333":{"range":{"start":{"row":2231,"column":0},"end":{"row":2232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8334":{"range":{"start":{"row":2237,"column":0},"end":{"row":2238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8335":{"range":{"start":{"row":2243,"column":0},"end":{"row":2244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8336":{"range":{"start":{"row":2249,"column":0},"end":{"row":2250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8337":{"range":{"start":{"row":2256,"column":0},"end":{"row":2257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8338":{"range":{"start":{"row":2264,"column":0},"end":{"row":2265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8339":{"range":{"start":{"row":2271,"column":0},"end":{"row":2272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8340":{"range":{"start":{"row":2277,"column":0},"end":{"row":2278,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8341":{"range":{"start":{"row":2283,"column":0},"end":{"row":2284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8342":{"range":{"start":{"row":2289,"column":0},"end":{"row":2290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8343":{"range":{"start":{"row":2297,"column":0},"end":{"row":2298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8344":{"range":{"start":{"row":2304,"column":0},"end":{"row":2305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8345":{"range":{"start":{"row":2334,"column":0},"end":{"row":2335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8346":{"range":{"start":{"row":2340,"column":0},"end":{"row":2341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8347":{"range":{"start":{"row":2346,"column":0},"end":{"row":2347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8348":{"range":{"start":{"row":2352,"column":0},"end":{"row":2353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8349":{"range":{"start":{"row":2358,"column":0},"end":{"row":2359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8350":{"range":{"start":{"row":2364,"column":0},"end":{"row":2365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8351":{"range":{"start":{"row":2375,"column":0},"end":{"row":2376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8352":{"range":{"start":{"row":2381,"column":0},"end":{"row":2382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8353":{"range":{"start":{"row":2387,"column":0},"end":{"row":2388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8354":{"range":{"start":{"row":2393,"column":0},"end":{"row":2394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8355":{"range":{"start":{"row":2404,"column":0},"end":{"row":2405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8356":{"range":{"start":{"row":2431,"column":0},"end":{"row":2432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8357":{"range":{"start":{"row":2447,"column":0},"end":{"row":2448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8358":{"range":{"start":{"row":2469,"column":0},"end":{"row":2470,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8359":{"range":{"start":{"row":2495,"column":0},"end":{"row":2496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8360":{"range":{"start":{"row":2567,"column":0},"end":{"row":2568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8361":{"range":{"start":{"row":2575,"column":0},"end":{"row":2576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8362":{"range":{"start":{"row":2580,"column":0},"end":{"row":2581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8363":{"range":{"start":{"row":2588,"column":0},"end":{"row":2589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8364":{"range":{"start":{"row":2607,"column":0},"end":{"row":2608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8365":{"range":{"start":{"row":2616,"column":0},"end":{"row":2617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8366":{"range":{"start":{"row":2624,"column":0},"end":{"row":2625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8367":{"range":{"start":{"row":2634,"column":0},"end":{"row":2635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8368":{"range":{"start":{"row":2875,"column":0},"end":{"row":2876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8369":{"range":{"start":{"row":2880,"column":0},"end":{"row":2881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8370":{"range":{"start":{"row":2887,"column":0},"end":{"row":2888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8371":{"range":{"start":{"row":2894,"column":0},"end":{"row":2895,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8372":{"range":{"start":{"row":2917,"column":0},"end":{"row":2918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8373":{"range":{"start":{"row":2929,"column":0},"end":{"row":2930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8374":{"range":{"start":{"row":2937,"column":0},"end":{"row":2938,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8375":{"range":{"start":{"row":2992,"column":0},"end":{"row":2993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8376":{"range":{"start":{"row":3009,"column":0},"end":{"row":3010,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8377":{"range":{"start":{"row":3063,"column":0},"end":{"row":3064,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8378":{"range":{"start":{"row":3067,"column":0},"end":{"row":3068,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8379":{"range":{"start":{"row":3136,"column":0},"end":{"row":3137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8380":{"range":{"start":{"row":3143,"column":0},"end":{"row":3144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8381":{"range":{"start":{"row":3148,"column":0},"end":{"row":3149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8382":{"range":{"start":{"row":3155,"column":0},"end":{"row":3156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8383":{"range":{"start":{"row":3162,"column":0},"end":{"row":3163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8384":{"range":{"start":{"row":3169,"column":0},"end":{"row":3170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8385":{"range":{"start":{"row":3176,"column":0},"end":{"row":3177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8386":{"range":{"start":{"row":3183,"column":0},"end":{"row":3184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8387":{"range":{"start":{"row":3197,"column":0},"end":{"row":3198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8388":{"range":{"start":{"row":3210,"column":0},"end":{"row":3211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8389":{"range":{"start":{"row":3216,"column":0},"end":{"row":3217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8390":{"range":{"start":{"row":3222,"column":0},"end":{"row":3223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8391":{"range":{"start":{"row":3235,"column":0},"end":{"row":3236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8392":{"range":{"start":{"row":3242,"column":0},"end":{"row":3243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8393":{"range":{"start":{"row":3248,"column":0},"end":{"row":3249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8394":{"range":{"start":{"row":3259,"column":0},"end":{"row":3260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8395":{"range":{"start":{"row":3271,"column":0},"end":{"row":3272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8396":{"range":{"start":{"row":3282,"column":0},"end":{"row":3283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8397":{"range":{"start":{"row":3300,"column":0},"end":{"row":3301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8398":{"range":{"start":{"row":3311,"column":0},"end":{"row":3312,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8399":{"range":{"start":{"row":3322,"column":0},"end":{"row":3323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8400":{"range":{"start":{"row":3331,"column":0},"end":{"row":3332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8401":{"range":{"start":{"row":3348,"column":0},"end":{"row":3349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8402":{"range":{"start":{"row":3356,"column":0},"end":{"row":3357,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8403":{"range":{"start":{"row":3364,"column":0},"end":{"row":3365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8404":{"range":{"start":{"row":3372,"column":0},"end":{"row":3373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8405":{"range":{"start":{"row":3380,"column":0},"end":{"row":3381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8406":{"range":{"start":{"row":3388,"column":0},"end":{"row":3389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8407":{"range":{"start":{"row":3396,"column":0},"end":{"row":3397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8408":{"range":{"start":{"row":3403,"column":0},"end":{"row":3404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8409":{"range":{"start":{"row":3411,"column":0},"end":{"row":3412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8410":{"range":{"start":{"row":3418,"column":0},"end":{"row":3419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8411":{"range":{"start":{"row":3425,"column":0},"end":{"row":3426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8412":{"range":{"start":{"row":3432,"column":0},"end":{"row":3433,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8413":{"range":{"start":{"row":3439,"column":0},"end":{"row":3440,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8414":{"range":{"start":{"row":3446,"column":0},"end":{"row":3447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8415":{"range":{"start":{"row":3453,"column":0},"end":{"row":3454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8416":{"range":{"start":{"row":3466,"column":0},"end":{"row":3467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8417":{"range":{"start":{"row":3478,"column":0},"end":{"row":3479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8418":{"range":{"start":{"row":3489,"column":0},"end":{"row":3490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8419":{"range":{"start":{"row":3500,"column":0},"end":{"row":3501,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8420":{"range":{"start":{"row":3511,"column":0},"end":{"row":3512,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8421":{"range":{"start":{"row":3522,"column":0},"end":{"row":3523,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8422":{"range":{"start":{"row":3532,"column":0},"end":{"row":3533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8423":{"range":{"start":{"row":3573,"column":0},"end":{"row":3574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8424":{"range":{"start":{"row":3585,"column":0},"end":{"row":3586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8425":{"range":{"start":{"row":3608,"column":0},"end":{"row":3609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8426":{"range":{"start":{"row":3620,"column":0},"end":{"row":3621,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8427":{"range":{"start":{"row":3632,"column":0},"end":{"row":3633,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8428":{"range":{"start":{"row":3644,"column":0},"end":{"row":3645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8429":{"range":{"start":{"row":3957,"column":0},"end":{"row":3958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8430":{"range":{"start":{"row":3965,"column":0},"end":{"row":3966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8431":{"range":{"start":{"row":3973,"column":0},"end":{"row":3974,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8432":{"range":{"start":{"row":3984,"column":0},"end":{"row":3985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8433":{"range":{"start":{"row":3992,"column":0},"end":{"row":3993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8434":{"range":{"start":{"row":4000,"column":0},"end":{"row":4001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8435":{"range":{"start":{"row":4030,"column":0},"end":{"row":4031,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8436":{"range":{"start":{"row":4037,"column":0},"end":{"row":4038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8437":{"range":{"start":{"row":4044,"column":0},"end":{"row":4045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8438":{"range":{"start":{"row":4051,"column":0},"end":{"row":4052,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8439":{"range":{"start":{"row":4058,"column":0},"end":{"row":4059,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8440":{"range":{"start":{"row":4065,"column":0},"end":{"row":4066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8441":{"range":{"start":{"row":4072,"column":0},"end":{"row":4073,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8442":{"range":{"start":{"row":4079,"column":0},"end":{"row":4080,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8443":{"range":{"start":{"row":4086,"column":0},"end":{"row":4087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8444":{"range":{"start":{"row":4093,"column":0},"end":{"row":4094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8445":{"range":{"start":{"row":4100,"column":0},"end":{"row":4101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8446":{"range":{"start":{"row":4107,"column":0},"end":{"row":4108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8447":{"range":{"start":{"row":4114,"column":0},"end":{"row":4115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8448":{"range":{"start":{"row":4121,"column":0},"end":{"row":4122,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8449":{"range":{"start":{"row":4128,"column":0},"end":{"row":4129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8450":{"range":{"start":{"row":4135,"column":0},"end":{"row":4136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8451":{"range":{"start":{"row":4142,"column":0},"end":{"row":4143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8452":{"range":{"start":{"row":4149,"column":0},"end":{"row":4150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8453":{"range":{"start":{"row":4156,"column":0},"end":{"row":4157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8454":{"range":{"start":{"row":4163,"column":0},"end":{"row":4164,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8455":{"range":{"start":{"row":4170,"column":0},"end":{"row":4171,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8456":{"range":{"start":{"row":4177,"column":0},"end":{"row":4178,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8457":{"range":{"start":{"row":4184,"column":0},"end":{"row":4185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8458":{"range":{"start":{"row":4191,"column":0},"end":{"row":4192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8459":{"range":{"start":{"row":4198,"column":0},"end":{"row":4199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8460":{"range":{"start":{"row":4205,"column":0},"end":{"row":4206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8461":{"range":{"start":{"row":4212,"column":0},"end":{"row":4213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8462":{"range":{"start":{"row":4219,"column":0},"end":{"row":4220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8463":{"range":{"start":{"row":4226,"column":0},"end":{"row":4227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8464":{"range":{"start":{"row":4232,"column":0},"end":{"row":4233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8465":{"range":{"start":{"row":4238,"column":0},"end":{"row":4239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8466":{"range":{"start":{"row":4244,"column":0},"end":{"row":4245,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8467":{"range":{"start":{"row":4250,"column":0},"end":{"row":4251,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8468":{"range":{"start":{"row":4256,"column":0},"end":{"row":4257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8469":{"range":{"start":{"row":4262,"column":0},"end":{"row":4263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8470":{"range":{"start":{"row":4268,"column":0},"end":{"row":4269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8471":{"range":{"start":{"row":4274,"column":0},"end":{"row":4275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8472":{"range":{"start":{"row":4280,"column":0},"end":{"row":4281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8473":{"range":{"start":{"row":4286,"column":0},"end":{"row":4287,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8474":{"range":{"start":{"row":4292,"column":0},"end":{"row":4293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8475":{"range":{"start":{"row":4298,"column":0},"end":{"row":4299,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8476":{"range":{"start":{"row":4304,"column":0},"end":{"row":4305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8477":{"range":{"start":{"row":4310,"column":0},"end":{"row":4311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8478":{"range":{"start":{"row":4316,"column":0},"end":{"row":4317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8479":{"range":{"start":{"row":4322,"column":0},"end":{"row":4323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8480":{"range":{"start":{"row":4328,"column":0},"end":{"row":4329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8481":{"range":{"start":{"row":4334,"column":0},"end":{"row":4335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8482":{"range":{"start":{"row":4340,"column":0},"end":{"row":4341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8483":{"range":{"start":{"row":4346,"column":0},"end":{"row":4347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8484":{"range":{"start":{"row":4352,"column":0},"end":{"row":4353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8485":{"range":{"start":{"row":4358,"column":0},"end":{"row":4359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8486":{"range":{"start":{"row":4364,"column":0},"end":{"row":4365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8487":{"range":{"start":{"row":4370,"column":0},"end":{"row":4371,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8488":{"range":{"start":{"row":4376,"column":0},"end":{"row":4377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8489":{"range":{"start":{"row":4382,"column":0},"end":{"row":4383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8490":{"range":{"start":{"row":4388,"column":0},"end":{"row":4389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8491":{"range":{"start":{"row":4394,"column":0},"end":{"row":4395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8492":{"range":{"start":{"row":4400,"column":0},"end":{"row":4401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8493":{"range":{"start":{"row":4406,"column":0},"end":{"row":4407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8494":{"range":{"start":{"row":4412,"column":0},"end":{"row":4413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8495":{"range":{"start":{"row":4418,"column":0},"end":{"row":4419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8496":{"range":{"start":{"row":4424,"column":0},"end":{"row":4425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8497":{"range":{"start":{"row":4430,"column":0},"end":{"row":4431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8498":{"range":{"start":{"row":4436,"column":0},"end":{"row":4437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8499":{"range":{"start":{"row":4442,"column":0},"end":{"row":4443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8500":{"range":{"start":{"row":4448,"column":0},"end":{"row":4449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8501":{"range":{"start":{"row":4454,"column":0},"end":{"row":4455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8502":{"range":{"start":{"row":4460,"column":0},"end":{"row":4461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8503":{"range":{"start":{"row":4468,"column":0},"end":{"row":4469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8504":{"range":{"start":{"row":4476,"column":0},"end":{"row":4477,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8505":{"range":{"start":{"row":4492,"column":0},"end":{"row":4493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8506":{"range":{"start":{"row":4498,"column":0},"end":{"row":4499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8507":{"range":{"start":{"row":4504,"column":0},"end":{"row":4505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8508":{"range":{"start":{"row":4509,"column":0},"end":{"row":4510,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8509":{"range":{"start":{"row":4515,"column":0},"end":{"row":4516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8510":{"range":{"start":{"row":4520,"column":0},"end":{"row":4521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8511":{"range":{"start":{"row":4525,"column":0},"end":{"row":4526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8512":{"range":{"start":{"row":4530,"column":0},"end":{"row":4531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8513":{"range":{"start":{"row":4535,"column":0},"end":{"row":4536,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8514":{"range":{"start":{"row":4540,"column":0},"end":{"row":4541,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8515":{"range":{"start":{"row":4545,"column":0},"end":{"row":4546,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8516":{"range":{"start":{"row":4550,"column":0},"end":{"row":4551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8517":{"range":{"start":{"row":4555,"column":0},"end":{"row":4556,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8518":{"range":{"start":{"row":4560,"column":0},"end":{"row":4561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8519":{"range":{"start":{"row":4565,"column":0},"end":{"row":4566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8520":{"range":{"start":{"row":4570,"column":0},"end":{"row":4571,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8521":{"range":{"start":{"row":4575,"column":0},"end":{"row":4576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8522":{"range":{"start":{"row":4580,"column":0},"end":{"row":4581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8523":{"range":{"start":{"row":4585,"column":0},"end":{"row":4586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8524":{"range":{"start":{"row":4597,"column":0},"end":{"row":4598,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8525":{"range":{"start":{"row":4617,"column":0},"end":{"row":4618,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8526":{"range":{"start":{"row":4626,"column":0},"end":{"row":4627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8527":{"range":{"start":{"row":4635,"column":0},"end":{"row":4636,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8528":{"range":{"start":{"row":4642,"column":0},"end":{"row":4643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8529":{"range":{"start":{"row":4714,"column":0},"end":{"row":4715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8530":{"range":{"start":{"row":4716,"column":0},"end":{"row":4717,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8531":{"range":{"start":{"row":4721,"column":0},"end":{"row":4722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8532":{"range":{"start":{"row":4728,"column":0},"end":{"row":4729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8533":{"range":{"start":{"row":4733,"column":0},"end":{"row":4734,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8534":{"range":{"start":{"row":4739,"column":0},"end":{"row":4740,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8535":{"range":{"start":{"row":4745,"column":0},"end":{"row":4746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8536":{"range":{"start":{"row":4756,"column":0},"end":{"row":4757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8537":{"range":{"start":{"row":4767,"column":0},"end":{"row":4768,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8538":{"range":{"start":{"row":4787,"column":0},"end":{"row":4788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8539":{"range":{"start":{"row":4799,"column":0},"end":{"row":4800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8540":{"range":{"start":{"row":4806,"column":0},"end":{"row":4807,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8541":{"range":{"start":{"row":4813,"column":0},"end":{"row":4814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8542":{"range":{"start":{"row":4820,"column":0},"end":{"row":4821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8543":{"range":{"start":{"row":4827,"column":0},"end":{"row":4828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8544":{"range":{"start":{"row":4834,"column":0},"end":{"row":4835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8545":{"range":{"start":{"row":4840,"column":0},"end":{"row":4841,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8546":{"range":{"start":{"row":4846,"column":0},"end":{"row":4847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8547":{"range":{"start":{"row":4852,"column":0},"end":{"row":4853,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8548":{"range":{"start":{"row":4864,"column":0},"end":{"row":4865,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8549":{"range":{"start":{"row":4872,"column":0},"end":{"row":4873,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8550":{"range":{"start":{"row":4880,"column":0},"end":{"row":4881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8551":{"range":{"start":{"row":4888,"column":0},"end":{"row":4889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8552":{"range":{"start":{"row":4896,"column":0},"end":{"row":4897,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8553":{"range":{"start":{"row":4904,"column":0},"end":{"row":4905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8554":{"range":{"start":{"row":4910,"column":0},"end":{"row":4911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8555":{"range":{"start":{"row":4916,"column":0},"end":{"row":4917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8556":{"range":{"start":{"row":4922,"column":0},"end":{"row":4923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8557":{"range":{"start":{"row":4928,"column":0},"end":{"row":4929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8558":{"range":{"start":{"row":4946,"column":0},"end":{"row":4947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8559":{"range":{"start":{"row":4948,"column":0},"end":{"row":4949,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8560":{"range":{"start":{"row":4953,"column":0},"end":{"row":4954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8561":{"range":{"start":{"row":4958,"column":0},"end":{"row":4959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8562":{"range":{"start":{"row":4963,"column":0},"end":{"row":4964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8563":{"range":{"start":{"row":4970,"column":0},"end":{"row":4971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8564":{"range":{"start":{"row":4977,"column":0},"end":{"row":4978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8565":{"range":{"start":{"row":4984,"column":0},"end":{"row":4985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8566":{"range":{"start":{"row":5000,"column":0},"end":{"row":5001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8567":{"range":{"start":{"row":5003,"column":0},"end":{"row":5004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8568":{"range":{"start":{"row":5015,"column":0},"end":{"row":5016,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8569":{"range":{"start":{"row":5026,"column":0},"end":{"row":5027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8570":{"range":{"start":{"row":5037,"column":0},"end":{"row":5038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8571":{"range":{"start":{"row":5045,"column":0},"end":{"row":5046,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8572":{"range":{"start":{"row":5057,"column":0},"end":{"row":5058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8573":{"range":{"start":{"row":5071,"column":0},"end":{"row":5072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8574":{"range":{"start":{"row":5077,"column":0},"end":{"row":5078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8575":{"range":{"start":{"row":5086,"column":0},"end":{"row":5087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8576":{"range":{"start":{"row":5091,"column":0},"end":{"row":5092,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8577":{"range":{"start":{"row":5103,"column":0},"end":{"row":5104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8578":{"range":{"start":{"row":5113,"column":0},"end":{"row":5114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8579":{"range":{"start":{"row":5125,"column":0},"end":{"row":5126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8580":{"range":{"start":{"row":5136,"column":0},"end":{"row":5137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8581":{"range":{"start":{"row":5148,"column":0},"end":{"row":5149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8582":{"range":{"start":{"row":5160,"column":0},"end":{"row":5161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8583":{"range":{"start":{"row":5172,"column":0},"end":{"row":5173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8584":{"range":{"start":{"row":5184,"column":0},"end":{"row":5185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8585":{"range":{"start":{"row":5196,"column":0},"end":{"row":5197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8586":{"range":{"start":{"row":5208,"column":0},"end":{"row":5209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8587":{"range":{"start":{"row":5232,"column":0},"end":{"row":5233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8588":{"range":{"start":{"row":5242,"column":0},"end":{"row":5243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8589":{"range":{"start":{"row":5252,"column":0},"end":{"row":5253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8590":{"range":{"start":{"row":5262,"column":0},"end":{"row":5263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8591":{"range":{"start":{"row":5281,"column":0},"end":{"row":5282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8592":{"range":{"start":{"row":5289,"column":0},"end":{"row":5290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8593":{"range":{"start":{"row":5294,"column":0},"end":{"row":5295,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8594":{"range":{"start":{"row":5306,"column":0},"end":{"row":5307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8595":{"range":{"start":{"row":5316,"column":0},"end":{"row":5317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8596":{"range":{"start":{"row":5327,"column":0},"end":{"row":5328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8597":{"range":{"start":{"row":5339,"column":0},"end":{"row":5340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8598":{"range":{"start":{"row":5351,"column":0},"end":{"row":5352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8599":{"range":{"start":{"row":5362,"column":0},"end":{"row":5363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8600":{"range":{"start":{"row":5374,"column":0},"end":{"row":5375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8601":{"range":{"start":{"row":5386,"column":0},"end":{"row":5387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8602":{"range":{"start":{"row":5398,"column":0},"end":{"row":5399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8603":{"range":{"start":{"row":5410,"column":0},"end":{"row":5411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8604":{"range":{"start":{"row":5429,"column":0},"end":{"row":5430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8605":{"range":{"start":{"row":5454,"column":0},"end":{"row":5455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8606":{"range":{"start":{"row":5460,"column":0},"end":{"row":5461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8607":{"range":{"start":{"row":5468,"column":0},"end":{"row":5469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8608":{"range":{"start":{"row":5473,"column":0},"end":{"row":5474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8609":{"range":{"start":{"row":5485,"column":0},"end":{"row":5486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8610":{"range":{"start":{"row":5495,"column":0},"end":{"row":5496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8611":{"range":{"start":{"row":5507,"column":0},"end":{"row":5508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8612":{"range":{"start":{"row":5518,"column":0},"end":{"row":5519,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8613":{"range":{"start":{"row":5530,"column":0},"end":{"row":5531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8614":{"range":{"start":{"row":5542,"column":0},"end":{"row":5543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8615":{"range":{"start":{"row":5554,"column":0},"end":{"row":5555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8616":{"range":{"start":{"row":5566,"column":0},"end":{"row":5567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8617":{"range":{"start":{"row":5578,"column":0},"end":{"row":5579,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8618":{"range":{"start":{"row":5584,"column":0},"end":{"row":5585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8619":{"range":{"start":{"row":5624,"column":0},"end":{"row":5625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8620":{"range":{"start":{"row":5626,"column":0},"end":{"row":5627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8621":{"range":{"start":{"row":5631,"column":0},"end":{"row":5632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8622":{"range":{"start":{"row":5639,"column":0},"end":{"row":5640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8623":{"range":{"start":{"row":5644,"column":0},"end":{"row":5645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8624":{"range":{"start":{"row":5662,"column":0},"end":{"row":5663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8625":{"range":{"start":{"row":5669,"column":0},"end":{"row":5670,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8626":{"range":{"start":{"row":5676,"column":0},"end":{"row":5677,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8627":{"range":{"start":{"row":5683,"column":0},"end":{"row":5684,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8628":{"range":{"start":{"row":5691,"column":0},"end":{"row":5692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8629":{"range":{"start":{"row":5699,"column":0},"end":{"row":5700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8630":{"range":{"start":{"row":5707,"column":0},"end":{"row":5708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8631":{"range":{"start":{"row":5713,"column":0},"end":{"row":5714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8632":{"range":{"start":{"row":5719,"column":0},"end":{"row":5720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8633":{"range":{"start":{"row":5726,"column":0},"end":{"row":5727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8634":{"range":{"start":{"row":5738,"column":0},"end":{"row":5739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8635":{"range":{"start":{"row":5749,"column":0},"end":{"row":5750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8636":{"range":{"start":{"row":5761,"column":0},"end":{"row":5762,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8637":{"range":{"start":{"row":5772,"column":0},"end":{"row":5773,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8638":{"range":{"start":{"row":5779,"column":0},"end":{"row":5780,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8639":{"range":{"start":{"row":5786,"column":0},"end":{"row":5787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8640":{"range":{"start":{"row":5794,"column":0},"end":{"row":5795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8641":{"range":{"start":{"row":5802,"column":0},"end":{"row":5803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8642":{"range":{"start":{"row":5813,"column":0},"end":{"row":5814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8643":{"range":{"start":{"row":5823,"column":0},"end":{"row":5824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8644":{"range":{"start":{"row":5833,"column":0},"end":{"row":5834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8645":{"range":{"start":{"row":5845,"column":0},"end":{"row":5846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8646":{"range":{"start":{"row":5857,"column":0},"end":{"row":5858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8647":{"range":{"start":{"row":5869,"column":0},"end":{"row":5870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8648":{"range":{"start":{"row":5881,"column":0},"end":{"row":5882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8649":{"range":{"start":{"row":5904,"column":0},"end":{"row":5905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8650":{"range":{"start":{"row":5916,"column":0},"end":{"row":5917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8651":{"range":{"start":{"row":5928,"column":0},"end":{"row":5929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8652":{"range":{"start":{"row":5940,"column":0},"end":{"row":5941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8653":{"range":{"start":{"row":5950,"column":0},"end":{"row":5951,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8654":{"range":{"start":{"row":5958,"column":0},"end":{"row":5959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8655":{"range":{"start":{"row":5966,"column":0},"end":{"row":5967,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8656":{"range":{"start":{"row":5977,"column":0},"end":{"row":5978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8657":{"range":{"start":{"row":5986,"column":0},"end":{"row":5987,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8658":{"range":{"start":{"row":5995,"column":0},"end":{"row":5996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8659":{"range":{"start":{"row":6003,"column":0},"end":{"row":6004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8660":{"range":{"start":{"row":6011,"column":0},"end":{"row":6012,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8661":{"range":{"start":{"row":6018,"column":0},"end":{"row":6019,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8662":{"range":{"start":{"row":6025,"column":0},"end":{"row":6026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8663":{"range":{"start":{"row":6032,"column":0},"end":{"row":6033,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8664":{"range":{"start":{"row":6039,"column":0},"end":{"row":6040,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8665":{"range":{"start":{"row":6054,"column":0},"end":{"row":6055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8666":{"range":{"start":{"row":6066,"column":0},"end":{"row":6067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8667":{"range":{"start":{"row":6088,"column":0},"end":{"row":6089,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8668":{"range":{"start":{"row":6093,"column":0},"end":{"row":6094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8669":{"range":{"start":{"row":6101,"column":0},"end":{"row":6102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8670":{"range":{"start":{"row":6118,"column":0},"end":{"row":6119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8671":{"range":{"start":{"row":6130,"column":0},"end":{"row":6131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8672":{"range":{"start":{"row":6141,"column":0},"end":{"row":6142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8673":{"range":{"start":{"row":6152,"column":0},"end":{"row":6153,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8674":{"range":{"start":{"row":6161,"column":0},"end":{"row":6162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8675":{"range":{"start":{"row":6173,"column":0},"end":{"row":6174,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8676":{"range":{"start":{"row":6185,"column":0},"end":{"row":6186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8677":{"range":{"start":{"row":6203,"column":0},"end":{"row":6204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8678":{"range":{"start":{"row":6205,"column":0},"end":{"row":6206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8679":{"range":{"start":{"row":6210,"column":0},"end":{"row":6211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8680":{"range":{"start":{"row":6217,"column":0},"end":{"row":6218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8681":{"range":{"start":{"row":6224,"column":0},"end":{"row":6225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8682":{"range":{"start":{"row":6231,"column":0},"end":{"row":6232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8683":{"range":{"start":{"row":6238,"column":0},"end":{"row":6239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8684":{"range":{"start":{"row":6243,"column":0},"end":{"row":6244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8685":{"range":{"start":{"row":6255,"column":0},"end":{"row":6256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8686":{"range":{"start":{"row":6267,"column":0},"end":{"row":6268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8687":{"range":{"start":{"row":6279,"column":0},"end":{"row":6280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8688":{"range":{"start":{"row":6290,"column":0},"end":{"row":6291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8689":{"range":{"start":{"row":6301,"column":0},"end":{"row":6302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8690":{"range":{"start":{"row":6313,"column":0},"end":{"row":6314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8691":{"range":{"start":{"row":6325,"column":0},"end":{"row":6326,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8692":{"range":{"start":{"row":6333,"column":0},"end":{"row":6334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8693":{"range":{"start":{"row":6347,"column":0},"end":{"row":6348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8694":{"range":{"start":{"row":6349,"column":0},"end":{"row":6350,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8695":{"range":{"start":{"row":6354,"column":0},"end":{"row":6355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8696":{"range":{"start":{"row":6361,"column":0},"end":{"row":6362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8697":{"range":{"start":{"row":6372,"column":0},"end":{"row":6373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8698":{"range":{"start":{"row":6377,"column":0},"end":{"row":6378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8699":{"range":{"start":{"row":6388,"column":0},"end":{"row":6389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8700":{"range":{"start":{"row":6404,"column":0},"end":{"row":6405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8701":{"range":{"start":{"row":6413,"column":0},"end":{"row":6414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8702":{"range":{"start":{"row":6423,"column":0},"end":{"row":6424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8703":{"range":{"start":{"row":6434,"column":0},"end":{"row":6435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8704":{"range":{"start":{"row":6446,"column":0},"end":{"row":6447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8705":{"range":{"start":{"row":6457,"column":0},"end":{"row":6458,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8706":{"range":{"start":{"row":6465,"column":0},"end":{"row":6466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8707":{"range":{"start":{"row":6479,"column":0},"end":{"row":6480,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8708":{"range":{"start":{"row":6482,"column":0},"end":{"row":6483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8709":{"range":{"start":{"row":6485,"column":0},"end":{"row":6486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8710":{"range":{"start":{"row":6487,"column":0},"end":{"row":6488,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8711":{"range":{"start":{"row":6492,"column":0},"end":{"row":6493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8712":{"range":{"start":{"row":6499,"column":0},"end":{"row":6500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8713":{"range":{"start":{"row":6504,"column":0},"end":{"row":6505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8714":{"range":{"start":{"row":6516,"column":0},"end":{"row":6517,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8715":{"range":{"start":{"row":6527,"column":0},"end":{"row":6528,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8716":{"range":{"start":{"row":6539,"column":0},"end":{"row":6540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8717":{"range":{"start":{"row":6551,"column":0},"end":{"row":6552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8718":{"range":{"start":{"row":6563,"column":0},"end":{"row":6564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8719":{"range":{"start":{"row":6574,"column":0},"end":{"row":6575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8720":{"range":{"start":{"row":6582,"column":0},"end":{"row":6583,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8721":{"range":{"start":{"row":6594,"column":0},"end":{"row":6595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8722":{"range":{"start":{"row":6603,"column":0},"end":{"row":6604,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8723":{"range":{"start":{"row":6610,"column":0},"end":{"row":6611,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8724":{"range":{"start":{"row":6624,"column":0},"end":{"row":6625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8725":{"range":{"start":{"row":6637,"column":0},"end":{"row":6638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8726":{"range":{"start":{"row":6640,"column":0},"end":{"row":6641,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8727":{"range":{"start":{"row":6643,"column":0},"end":{"row":6644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8728":{"range":{"start":{"row":6645,"column":0},"end":{"row":6646,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8729":{"range":{"start":{"row":6650,"column":0},"end":{"row":6651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8730":{"range":{"start":{"row":6657,"column":0},"end":{"row":6658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8731":{"range":{"start":{"row":6662,"column":0},"end":{"row":6663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8732":{"range":{"start":{"row":6673,"column":0},"end":{"row":6674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8733":{"range":{"start":{"row":6685,"column":0},"end":{"row":6686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8734":{"range":{"start":{"row":6696,"column":0},"end":{"row":6697,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8735":{"range":{"start":{"row":6707,"column":0},"end":{"row":6708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8736":{"range":{"start":{"row":6719,"column":0},"end":{"row":6720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8737":{"range":{"start":{"row":6727,"column":0},"end":{"row":6728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8738":{"range":{"start":{"row":6745,"column":0},"end":{"row":6746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8739":{"range":{"start":{"row":6756,"column":0},"end":{"row":6757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8740":{"range":{"start":{"row":6766,"column":0},"end":{"row":6767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8741":{"range":{"start":{"row":6787,"column":0},"end":{"row":6788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8742":{"range":{"start":{"row":6792,"column":0},"end":{"row":6793,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8743":{"range":{"start":{"row":6799,"column":0},"end":{"row":6800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8744":{"range":{"start":{"row":6804,"column":0},"end":{"row":6805,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8745":{"range":{"start":{"row":6836,"column":0},"end":{"row":6837,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8746":{"range":{"start":{"row":6847,"column":0},"end":{"row":6848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8747":{"range":{"start":{"row":6858,"column":0},"end":{"row":6859,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8748":{"range":{"start":{"row":6869,"column":0},"end":{"row":6870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8749":{"range":{"start":{"row":6903,"column":0},"end":{"row":6904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8750":{"range":{"start":{"row":6924,"column":0},"end":{"row":6925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8751":{"range":{"start":{"row":6936,"column":0},"end":{"row":6937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8752":{"range":{"start":{"row":6952,"column":0},"end":{"row":6953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8753":{"range":{"start":{"row":6964,"column":0},"end":{"row":6965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8754":{"range":{"start":{"row":6971,"column":0},"end":{"row":6972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8755":{"range":{"start":{"row":6996,"column":0},"end":{"row":6997,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8756":{"range":{"start":{"row":7002,"column":0},"end":{"row":7003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8757":{"range":{"start":{"row":7150,"column":0},"end":{"row":7151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8758":{"range":{"start":{"row":7664,"column":0},"end":{"row":7665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8759":{"range":{"start":{"row":7666,"column":0},"end":{"row":7667,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8760":{"range":{"start":{"row":7673,"column":0},"end":{"row":7674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8761":{"range":{"start":{"row":7678,"column":0},"end":{"row":7679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8762":{"range":{"start":{"row":7685,"column":0},"end":{"row":7686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8763":{"range":{"start":{"row":7692,"column":0},"end":{"row":7693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8764":{"range":{"start":{"row":7699,"column":0},"end":{"row":7700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8765":{"range":{"start":{"row":7711,"column":0},"end":{"row":7712,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8766":{"range":{"start":{"row":7719,"column":0},"end":{"row":7720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8767":{"range":{"start":{"row":7730,"column":0},"end":{"row":7731,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8768":{"range":{"start":{"row":7741,"column":0},"end":{"row":7742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8769":{"range":{"start":{"row":7753,"column":0},"end":{"row":7754,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8770":{"range":{"start":{"row":7764,"column":0},"end":{"row":7765,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8771":{"range":{"start":{"row":7775,"column":0},"end":{"row":7776,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8772":{"range":{"start":{"row":7787,"column":0},"end":{"row":7788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8773":{"range":{"start":{"row":7799,"column":0},"end":{"row":7800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8774":{"range":{"start":{"row":7811,"column":0},"end":{"row":7812,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8775":{"range":{"start":{"row":7823,"column":0},"end":{"row":7824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8776":{"range":{"start":{"row":7835,"column":0},"end":{"row":7836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8777":{"range":{"start":{"row":7847,"column":0},"end":{"row":7848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8778":{"range":{"start":{"row":7849,"column":0},"end":{"row":7850,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8779":{"range":{"start":{"row":7854,"column":0},"end":{"row":7855,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8780":{"range":{"start":{"row":7861,"column":0},"end":{"row":7862,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8781":{"range":{"start":{"row":7866,"column":0},"end":{"row":7867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8782":{"range":{"start":{"row":7878,"column":0},"end":{"row":7879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8783":{"range":{"start":{"row":7889,"column":0},"end":{"row":7890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8784":{"range":{"start":{"row":7901,"column":0},"end":{"row":7902,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8785":{"range":{"start":{"row":7912,"column":0},"end":{"row":7913,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8786":{"range":{"start":{"row":7924,"column":0},"end":{"row":7925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8787":{"range":{"start":{"row":7935,"column":0},"end":{"row":7936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8788":{"range":{"start":{"row":7946,"column":0},"end":{"row":7947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8789":{"range":{"start":{"row":7958,"column":0},"end":{"row":7959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8790":{"range":{"start":{"row":7970,"column":0},"end":{"row":7971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8791":{"range":{"start":{"row":7982,"column":0},"end":{"row":7983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8792":{"range":{"start":{"row":7994,"column":0},"end":{"row":7995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8793":{"range":{"start":{"row":8006,"column":0},"end":{"row":8007,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8794":{"range":{"start":{"row":8017,"column":0},"end":{"row":8018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8795":{"range":{"start":{"row":8027,"column":0},"end":{"row":8028,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8796":{"range":{"start":{"row":8035,"column":0},"end":{"row":8036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8797":{"range":{"start":{"row":8043,"column":0},"end":{"row":8044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8798":{"range":{"start":{"row":108,"column":0},"end":{"row":108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8799":{"range":{"start":{"row":115,"column":0},"end":{"row":115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8800":{"range":{"start":{"row":120,"column":0},"end":{"row":120,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8801":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8802":{"range":{"start":{"row":128,"column":0},"end":{"row":128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8803":{"range":{"start":{"row":133,"column":0},"end":{"row":133,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8804":{"range":{"start":{"row":138,"column":0},"end":{"row":138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8805":{"range":{"start":{"row":144,"column":0},"end":{"row":144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8806":{"range":{"start":{"row":156,"column":0},"end":{"row":156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8807":{"range":{"start":{"row":168,"column":0},"end":{"row":168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8808":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8809":{"range":{"start":{"row":202,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8810":{"range":{"start":{"row":209,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8811":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8812":{"range":{"start":{"row":235,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8813":{"range":{"start":{"row":241,"column":0},"end":{"row":241,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8814":{"range":{"start":{"row":247,"column":0},"end":{"row":247,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8815":{"range":{"start":{"row":253,"column":0},"end":{"row":253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8816":{"range":{"start":{"row":259,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8817":{"range":{"start":{"row":264,"column":0},"end":{"row":264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8818":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8819":{"range":{"start":{"row":274,"column":0},"end":{"row":274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8820":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8821":{"range":{"start":{"row":284,"column":0},"end":{"row":284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8822":{"range":{"start":{"row":289,"column":0},"end":{"row":289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8823":{"range":{"start":{"row":301,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8824":{"range":{"start":{"row":308,"column":0},"end":{"row":308,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8825":{"range":{"start":{"row":315,"column":0},"end":{"row":315,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8826":{"range":{"start":{"row":322,"column":0},"end":{"row":322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8827":{"range":{"start":{"row":329,"column":0},"end":{"row":329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8828":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8829":{"range":{"start":{"row":352,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8830":{"range":{"start":{"row":359,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8831":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8832":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8833":{"range":{"start":{"row":379,"column":0},"end":{"row":379,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8834":{"range":{"start":{"row":386,"column":0},"end":{"row":386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8835":{"range":{"start":{"row":393,"column":0},"end":{"row":393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8836":{"range":{"start":{"row":399,"column":0},"end":{"row":399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8837":{"range":{"start":{"row":406,"column":0},"end":{"row":406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8838":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8839":{"range":{"start":{"row":420,"column":0},"end":{"row":420,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8840":{"range":{"start":{"row":427,"column":0},"end":{"row":427,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8841":{"range":{"start":{"row":434,"column":0},"end":{"row":434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8842":{"range":{"start":{"row":441,"column":0},"end":{"row":441,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8843":{"range":{"start":{"row":448,"column":0},"end":{"row":448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8844":{"range":{"start":{"row":471,"column":0},"end":{"row":471,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8845":{"range":{"start":{"row":481,"column":0},"end":{"row":481,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8846":{"range":{"start":{"row":503,"column":0},"end":{"row":503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8847":{"range":{"start":{"row":514,"column":0},"end":{"row":514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8848":{"range":{"start":{"row":525,"column":0},"end":{"row":525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8849":{"range":{"start":{"row":544,"column":0},"end":{"row":544,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8850":{"range":{"start":{"row":551,"column":0},"end":{"row":551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8851":{"range":{"start":{"row":558,"column":0},"end":{"row":558,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8852":{"range":{"start":{"row":565,"column":0},"end":{"row":565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8853":{"range":{"start":{"row":573,"column":0},"end":{"row":573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8854":{"range":{"start":{"row":581,"column":0},"end":{"row":581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8855":{"range":{"start":{"row":592,"column":0},"end":{"row":592,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8856":{"range":{"start":{"row":631,"column":0},"end":{"row":631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8857":{"range":{"start":{"row":642,"column":0},"end":{"row":642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8858":{"range":{"start":{"row":653,"column":0},"end":{"row":653,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8859":{"range":{"start":{"row":690,"column":0},"end":{"row":690,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8860":{"range":{"start":{"row":700,"column":0},"end":{"row":700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8861":{"range":{"start":{"row":710,"column":0},"end":{"row":710,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8862":{"range":{"start":{"row":720,"column":0},"end":{"row":720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8863":{"range":{"start":{"row":736,"column":0},"end":{"row":736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8864":{"range":{"start":{"row":750,"column":0},"end":{"row":750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8865":{"range":{"start":{"row":771,"column":0},"end":{"row":771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8866":{"range":{"start":{"row":783,"column":0},"end":{"row":783,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8867":{"range":{"start":{"row":794,"column":0},"end":{"row":794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8868":{"range":{"start":{"row":819,"column":0},"end":{"row":819,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8869":{"range":{"start":{"row":831,"column":0},"end":{"row":831,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8870":{"range":{"start":{"row":843,"column":0},"end":{"row":843,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8871":{"range":{"start":{"row":866,"column":0},"end":{"row":866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8872":{"range":{"start":{"row":878,"column":0},"end":{"row":878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8873":{"range":{"start":{"row":889,"column":0},"end":{"row":889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8874":{"range":{"start":{"row":900,"column":0},"end":{"row":900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8875":{"range":{"start":{"row":911,"column":0},"end":{"row":911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8876":{"range":{"start":{"row":922,"column":0},"end":{"row":922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8877":{"range":{"start":{"row":1226,"column":0},"end":{"row":1226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8878":{"range":{"start":{"row":1234,"column":0},"end":{"row":1234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8879":{"range":{"start":{"row":1309,"column":0},"end":{"row":1309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8880":{"range":{"start":{"row":1341,"column":0},"end":{"row":1341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8881":{"range":{"start":{"row":1348,"column":0},"end":{"row":1348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8882":{"range":{"start":{"row":1355,"column":0},"end":{"row":1355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8883":{"range":{"start":{"row":1362,"column":0},"end":{"row":1362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8884":{"range":{"start":{"row":1369,"column":0},"end":{"row":1369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8885":{"range":{"start":{"row":1376,"column":0},"end":{"row":1376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8886":{"range":{"start":{"row":1383,"column":0},"end":{"row":1383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8887":{"range":{"start":{"row":1390,"column":0},"end":{"row":1390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8888":{"range":{"start":{"row":1397,"column":0},"end":{"row":1397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8889":{"range":{"start":{"row":1404,"column":0},"end":{"row":1404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8890":{"range":{"start":{"row":1411,"column":0},"end":{"row":1411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8891":{"range":{"start":{"row":1418,"column":0},"end":{"row":1418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8892":{"range":{"start":{"row":1425,"column":0},"end":{"row":1425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8893":{"range":{"start":{"row":1437,"column":0},"end":{"row":1437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8894":{"range":{"start":{"row":1443,"column":0},"end":{"row":1443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8895":{"range":{"start":{"row":1455,"column":0},"end":{"row":1455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8896":{"range":{"start":{"row":1466,"column":0},"end":{"row":1466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8897":{"range":{"start":{"row":1474,"column":0},"end":{"row":1474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8898":{"range":{"start":{"row":1482,"column":0},"end":{"row":1482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8899":{"range":{"start":{"row":1490,"column":0},"end":{"row":1490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8900":{"range":{"start":{"row":1496,"column":0},"end":{"row":1496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8901":{"range":{"start":{"row":1502,"column":0},"end":{"row":1502,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8902":{"range":{"start":{"row":1508,"column":0},"end":{"row":1508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8903":{"range":{"start":{"row":1514,"column":0},"end":{"row":1514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8904":{"range":{"start":{"row":1520,"column":0},"end":{"row":1520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8905":{"range":{"start":{"row":1526,"column":0},"end":{"row":1526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8906":{"range":{"start":{"row":1533,"column":0},"end":{"row":1533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8907":{"range":{"start":{"row":1542,"column":0},"end":{"row":1542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8908":{"range":{"start":{"row":1551,"column":0},"end":{"row":1551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8909":{"range":{"start":{"row":1560,"column":0},"end":{"row":1560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8910":{"range":{"start":{"row":1567,"column":0},"end":{"row":1567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8911":{"range":{"start":{"row":1581,"column":0},"end":{"row":1581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8912":{"range":{"start":{"row":1588,"column":0},"end":{"row":1588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8913":{"range":{"start":{"row":1595,"column":0},"end":{"row":1595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8914":{"range":{"start":{"row":1602,"column":0},"end":{"row":1602,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8915":{"range":{"start":{"row":1609,"column":0},"end":{"row":1609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8916":{"range":{"start":{"row":1616,"column":0},"end":{"row":1616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8917":{"range":{"start":{"row":1623,"column":0},"end":{"row":1623,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8918":{"range":{"start":{"row":1630,"column":0},"end":{"row":1630,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8919":{"range":{"start":{"row":1637,"column":0},"end":{"row":1637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8920":{"range":{"start":{"row":1644,"column":0},"end":{"row":1644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8921":{"range":{"start":{"row":1651,"column":0},"end":{"row":1651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8922":{"range":{"start":{"row":1658,"column":0},"end":{"row":1658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8923":{"range":{"start":{"row":1665,"column":0},"end":{"row":1665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8924":{"range":{"start":{"row":1672,"column":0},"end":{"row":1672,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8925":{"range":{"start":{"row":1679,"column":0},"end":{"row":1679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8926":{"range":{"start":{"row":1686,"column":0},"end":{"row":1686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8927":{"range":{"start":{"row":1693,"column":0},"end":{"row":1693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8928":{"range":{"start":{"row":1700,"column":0},"end":{"row":1700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8929":{"range":{"start":{"row":1707,"column":0},"end":{"row":1707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8930":{"range":{"start":{"row":1714,"column":0},"end":{"row":1714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8931":{"range":{"start":{"row":1721,"column":0},"end":{"row":1721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8932":{"range":{"start":{"row":1728,"column":0},"end":{"row":1728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8933":{"range":{"start":{"row":1735,"column":0},"end":{"row":1735,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8934":{"range":{"start":{"row":1742,"column":0},"end":{"row":1742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8935":{"range":{"start":{"row":1749,"column":0},"end":{"row":1749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8936":{"range":{"start":{"row":1756,"column":0},"end":{"row":1756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8937":{"range":{"start":{"row":1763,"column":0},"end":{"row":1763,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8938":{"range":{"start":{"row":1770,"column":0},"end":{"row":1770,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8939":{"range":{"start":{"row":1777,"column":0},"end":{"row":1777,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8940":{"range":{"start":{"row":1784,"column":0},"end":{"row":1784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8941":{"range":{"start":{"row":1791,"column":0},"end":{"row":1791,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8942":{"range":{"start":{"row":1797,"column":0},"end":{"row":1797,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8943":{"range":{"start":{"row":1803,"column":0},"end":{"row":1803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8944":{"range":{"start":{"row":1809,"column":0},"end":{"row":1809,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8945":{"range":{"start":{"row":1815,"column":0},"end":{"row":1815,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8946":{"range":{"start":{"row":1821,"column":0},"end":{"row":1821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8947":{"range":{"start":{"row":1827,"column":0},"end":{"row":1827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8948":{"range":{"start":{"row":1833,"column":0},"end":{"row":1833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8949":{"range":{"start":{"row":1839,"column":0},"end":{"row":1839,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8950":{"range":{"start":{"row":1845,"column":0},"end":{"row":1845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8951":{"range":{"start":{"row":1851,"column":0},"end":{"row":1851,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8952":{"range":{"start":{"row":1857,"column":0},"end":{"row":1857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8953":{"range":{"start":{"row":1863,"column":0},"end":{"row":1863,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8954":{"range":{"start":{"row":1869,"column":0},"end":{"row":1869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8955":{"range":{"start":{"row":1875,"column":0},"end":{"row":1875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8956":{"range":{"start":{"row":1881,"column":0},"end":{"row":1881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8957":{"range":{"start":{"row":1887,"column":0},"end":{"row":1887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8958":{"range":{"start":{"row":1893,"column":0},"end":{"row":1893,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8959":{"range":{"start":{"row":1899,"column":0},"end":{"row":1899,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8960":{"range":{"start":{"row":1905,"column":0},"end":{"row":1905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8961":{"range":{"start":{"row":1911,"column":0},"end":{"row":1911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8962":{"range":{"start":{"row":1917,"column":0},"end":{"row":1917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8963":{"range":{"start":{"row":1923,"column":0},"end":{"row":1923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8964":{"range":{"start":{"row":1929,"column":0},"end":{"row":1929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8965":{"range":{"start":{"row":1935,"column":0},"end":{"row":1935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8966":{"range":{"start":{"row":1941,"column":0},"end":{"row":1941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8967":{"range":{"start":{"row":1947,"column":0},"end":{"row":1947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8968":{"range":{"start":{"row":1953,"column":0},"end":{"row":1953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8969":{"range":{"start":{"row":1959,"column":0},"end":{"row":1959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8970":{"range":{"start":{"row":1965,"column":0},"end":{"row":1965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8971":{"range":{"start":{"row":1971,"column":0},"end":{"row":1971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8972":{"range":{"start":{"row":1977,"column":0},"end":{"row":1977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8973":{"range":{"start":{"row":1983,"column":0},"end":{"row":1983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8974":{"range":{"start":{"row":1989,"column":0},"end":{"row":1989,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8975":{"range":{"start":{"row":1995,"column":0},"end":{"row":1995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8976":{"range":{"start":{"row":2001,"column":0},"end":{"row":2001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8977":{"range":{"start":{"row":2036,"column":0},"end":{"row":2036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8978":{"range":{"start":{"row":2042,"column":0},"end":{"row":2042,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8979":{"range":{"start":{"row":2048,"column":0},"end":{"row":2048,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8980":{"range":{"start":{"row":2054,"column":0},"end":{"row":2054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8981":{"range":{"start":{"row":2062,"column":0},"end":{"row":2062,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8982":{"range":{"start":{"row":2070,"column":0},"end":{"row":2070,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8983":{"range":{"start":{"row":2078,"column":0},"end":{"row":2078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8984":{"range":{"start":{"row":2086,"column":0},"end":{"row":2086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8985":{"range":{"start":{"row":2094,"column":0},"end":{"row":2094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8986":{"range":{"start":{"row":2102,"column":0},"end":{"row":2102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8987":{"range":{"start":{"row":2110,"column":0},"end":{"row":2110,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8988":{"range":{"start":{"row":2118,"column":0},"end":{"row":2118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8989":{"range":{"start":{"row":2138,"column":0},"end":{"row":2138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8990":{"range":{"start":{"row":2144,"column":0},"end":{"row":2144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8991":{"range":{"start":{"row":2150,"column":0},"end":{"row":2150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8992":{"range":{"start":{"row":2156,"column":0},"end":{"row":2156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8993":{"range":{"start":{"row":2162,"column":0},"end":{"row":2162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8994":{"range":{"start":{"row":2168,"column":0},"end":{"row":2168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8995":{"range":{"start":{"row":2175,"column":0},"end":{"row":2175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8996":{"range":{"start":{"row":2182,"column":0},"end":{"row":2182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8997":{"range":{"start":{"row":2189,"column":0},"end":{"row":2189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8998":{"range":{"start":{"row":2196,"column":0},"end":{"row":2196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8999":{"range":{"start":{"row":2203,"column":0},"end":{"row":2203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9000":{"range":{"start":{"row":2218,"column":0},"end":{"row":2218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9001":{"range":{"start":{"row":2224,"column":0},"end":{"row":2224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9002":{"range":{"start":{"row":2231,"column":0},"end":{"row":2231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9003":{"range":{"start":{"row":2237,"column":0},"end":{"row":2237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9004":{"range":{"start":{"row":2243,"column":0},"end":{"row":2243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9005":{"range":{"start":{"row":2249,"column":0},"end":{"row":2249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9006":{"range":{"start":{"row":2256,"column":0},"end":{"row":2256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9007":{"range":{"start":{"row":2264,"column":0},"end":{"row":2264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9008":{"range":{"start":{"row":2271,"column":0},"end":{"row":2271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9009":{"range":{"start":{"row":2277,"column":0},"end":{"row":2277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9010":{"range":{"start":{"row":2283,"column":0},"end":{"row":2283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9011":{"range":{"start":{"row":2289,"column":0},"end":{"row":2289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9012":{"range":{"start":{"row":2297,"column":0},"end":{"row":2297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9013":{"range":{"start":{"row":2304,"column":0},"end":{"row":2304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9014":{"range":{"start":{"row":2334,"column":0},"end":{"row":2334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9015":{"range":{"start":{"row":2340,"column":0},"end":{"row":2340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9016":{"range":{"start":{"row":2346,"column":0},"end":{"row":2346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9017":{"range":{"start":{"row":2352,"column":0},"end":{"row":2352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9018":{"range":{"start":{"row":2358,"column":0},"end":{"row":2358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9019":{"range":{"start":{"row":2364,"column":0},"end":{"row":2364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9020":{"range":{"start":{"row":2375,"column":0},"end":{"row":2375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9021":{"range":{"start":{"row":2381,"column":0},"end":{"row":2381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9022":{"range":{"start":{"row":2387,"column":0},"end":{"row":2387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9023":{"range":{"start":{"row":2393,"column":0},"end":{"row":2393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9024":{"range":{"start":{"row":2404,"column":0},"end":{"row":2404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9025":{"range":{"start":{"row":2431,"column":0},"end":{"row":2431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9026":{"range":{"start":{"row":2447,"column":0},"end":{"row":2447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9027":{"range":{"start":{"row":2469,"column":0},"end":{"row":2469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9028":{"range":{"start":{"row":2495,"column":0},"end":{"row":2495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9029":{"range":{"start":{"row":2567,"column":0},"end":{"row":2567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9030":{"range":{"start":{"row":2575,"column":0},"end":{"row":2575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9031":{"range":{"start":{"row":2580,"column":0},"end":{"row":2580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9032":{"range":{"start":{"row":2588,"column":0},"end":{"row":2588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9033":{"range":{"start":{"row":2607,"column":0},"end":{"row":2607,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9034":{"range":{"start":{"row":2616,"column":0},"end":{"row":2616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9035":{"range":{"start":{"row":2624,"column":0},"end":{"row":2624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9036":{"range":{"start":{"row":2634,"column":0},"end":{"row":2634,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9037":{"range":{"start":{"row":2875,"column":0},"end":{"row":2875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9038":{"range":{"start":{"row":2880,"column":0},"end":{"row":2880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9039":{"range":{"start":{"row":2887,"column":0},"end":{"row":2887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9040":{"range":{"start":{"row":2894,"column":0},"end":{"row":2894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9041":{"range":{"start":{"row":2917,"column":0},"end":{"row":2917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9042":{"range":{"start":{"row":2929,"column":0},"end":{"row":2929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9043":{"range":{"start":{"row":2937,"column":0},"end":{"row":2937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9044":{"range":{"start":{"row":2992,"column":0},"end":{"row":2992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9045":{"range":{"start":{"row":3009,"column":0},"end":{"row":3009,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9046":{"range":{"start":{"row":3063,"column":0},"end":{"row":3063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9047":{"range":{"start":{"row":3067,"column":0},"end":{"row":3067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9048":{"range":{"start":{"row":3136,"column":0},"end":{"row":3136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9049":{"range":{"start":{"row":3143,"column":0},"end":{"row":3143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9050":{"range":{"start":{"row":3148,"column":0},"end":{"row":3148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9051":{"range":{"start":{"row":3155,"column":0},"end":{"row":3155,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9052":{"range":{"start":{"row":3162,"column":0},"end":{"row":3162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9053":{"range":{"start":{"row":3169,"column":0},"end":{"row":3169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9054":{"range":{"start":{"row":3176,"column":0},"end":{"row":3176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9055":{"range":{"start":{"row":3183,"column":0},"end":{"row":3183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9056":{"range":{"start":{"row":3197,"column":0},"end":{"row":3197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9057":{"range":{"start":{"row":3210,"column":0},"end":{"row":3210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9058":{"range":{"start":{"row":3216,"column":0},"end":{"row":3216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9059":{"range":{"start":{"row":3222,"column":0},"end":{"row":3222,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9060":{"range":{"start":{"row":3235,"column":0},"end":{"row":3235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9061":{"range":{"start":{"row":3242,"column":0},"end":{"row":3242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9062":{"range":{"start":{"row":3248,"column":0},"end":{"row":3248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9063":{"range":{"start":{"row":3259,"column":0},"end":{"row":3259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9064":{"range":{"start":{"row":3271,"column":0},"end":{"row":3271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9065":{"range":{"start":{"row":3282,"column":0},"end":{"row":3282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9066":{"range":{"start":{"row":3300,"column":0},"end":{"row":3300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9067":{"range":{"start":{"row":3311,"column":0},"end":{"row":3311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9068":{"range":{"start":{"row":3322,"column":0},"end":{"row":3322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9069":{"range":{"start":{"row":3331,"column":0},"end":{"row":3331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9070":{"range":{"start":{"row":3348,"column":0},"end":{"row":3348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9071":{"range":{"start":{"row":3356,"column":0},"end":{"row":3356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9072":{"range":{"start":{"row":3364,"column":0},"end":{"row":3364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9073":{"range":{"start":{"row":3372,"column":0},"end":{"row":3372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9074":{"range":{"start":{"row":3380,"column":0},"end":{"row":3380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9075":{"range":{"start":{"row":3388,"column":0},"end":{"row":3388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9076":{"range":{"start":{"row":3396,"column":0},"end":{"row":3396,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9077":{"range":{"start":{"row":3403,"column":0},"end":{"row":3403,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9078":{"range":{"start":{"row":3411,"column":0},"end":{"row":3411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9079":{"range":{"start":{"row":3418,"column":0},"end":{"row":3418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9080":{"range":{"start":{"row":3425,"column":0},"end":{"row":3425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9081":{"range":{"start":{"row":3432,"column":0},"end":{"row":3432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9082":{"range":{"start":{"row":3439,"column":0},"end":{"row":3439,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9083":{"range":{"start":{"row":3446,"column":0},"end":{"row":3446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9084":{"range":{"start":{"row":3453,"column":0},"end":{"row":3453,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9085":{"range":{"start":{"row":3466,"column":0},"end":{"row":3466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9086":{"range":{"start":{"row":3478,"column":0},"end":{"row":3478,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9087":{"range":{"start":{"row":3489,"column":0},"end":{"row":3489,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9088":{"range":{"start":{"row":3500,"column":0},"end":{"row":3500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9089":{"range":{"start":{"row":3511,"column":0},"end":{"row":3511,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9090":{"range":{"start":{"row":3522,"column":0},"end":{"row":3522,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9091":{"range":{"start":{"row":3532,"column":0},"end":{"row":3532,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9092":{"range":{"start":{"row":3573,"column":0},"end":{"row":3573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9093":{"range":{"start":{"row":3585,"column":0},"end":{"row":3585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9094":{"range":{"start":{"row":3608,"column":0},"end":{"row":3608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9095":{"range":{"start":{"row":3620,"column":0},"end":{"row":3620,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9096":{"range":{"start":{"row":3632,"column":0},"end":{"row":3632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9097":{"range":{"start":{"row":3644,"column":0},"end":{"row":3644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9098":{"range":{"start":{"row":3957,"column":0},"end":{"row":3957,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9099":{"range":{"start":{"row":3965,"column":0},"end":{"row":3965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9100":{"range":{"start":{"row":3973,"column":0},"end":{"row":3973,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9101":{"range":{"start":{"row":3984,"column":0},"end":{"row":3984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9102":{"range":{"start":{"row":3992,"column":0},"end":{"row":3992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9103":{"range":{"start":{"row":4000,"column":0},"end":{"row":4000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9104":{"range":{"start":{"row":4030,"column":0},"end":{"row":4030,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9105":{"range":{"start":{"row":4037,"column":0},"end":{"row":4037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9106":{"range":{"start":{"row":4044,"column":0},"end":{"row":4044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9107":{"range":{"start":{"row":4051,"column":0},"end":{"row":4051,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9108":{"range":{"start":{"row":4058,"column":0},"end":{"row":4058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9109":{"range":{"start":{"row":4065,"column":0},"end":{"row":4065,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9110":{"range":{"start":{"row":4072,"column":0},"end":{"row":4072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9111":{"range":{"start":{"row":4079,"column":0},"end":{"row":4079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9112":{"range":{"start":{"row":4086,"column":0},"end":{"row":4086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9113":{"range":{"start":{"row":4093,"column":0},"end":{"row":4093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9114":{"range":{"start":{"row":4100,"column":0},"end":{"row":4100,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9115":{"range":{"start":{"row":4107,"column":0},"end":{"row":4107,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9116":{"range":{"start":{"row":4114,"column":0},"end":{"row":4114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9117":{"range":{"start":{"row":4121,"column":0},"end":{"row":4121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9118":{"range":{"start":{"row":4128,"column":0},"end":{"row":4128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9119":{"range":{"start":{"row":4135,"column":0},"end":{"row":4135,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9120":{"range":{"start":{"row":4142,"column":0},"end":{"row":4142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9121":{"range":{"start":{"row":4149,"column":0},"end":{"row":4149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9122":{"range":{"start":{"row":4156,"column":0},"end":{"row":4156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9123":{"range":{"start":{"row":4163,"column":0},"end":{"row":4163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9124":{"range":{"start":{"row":4170,"column":0},"end":{"row":4170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9125":{"range":{"start":{"row":4177,"column":0},"end":{"row":4177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9126":{"range":{"start":{"row":4184,"column":0},"end":{"row":4184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9127":{"range":{"start":{"row":4191,"column":0},"end":{"row":4191,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9128":{"range":{"start":{"row":4198,"column":0},"end":{"row":4198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9129":{"range":{"start":{"row":4205,"column":0},"end":{"row":4205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9130":{"range":{"start":{"row":4212,"column":0},"end":{"row":4212,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9131":{"range":{"start":{"row":4219,"column":0},"end":{"row":4219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9132":{"range":{"start":{"row":4226,"column":0},"end":{"row":4226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9133":{"range":{"start":{"row":4232,"column":0},"end":{"row":4232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9134":{"range":{"start":{"row":4238,"column":0},"end":{"row":4238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9135":{"range":{"start":{"row":4244,"column":0},"end":{"row":4244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9136":{"range":{"start":{"row":4250,"column":0},"end":{"row":4250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9137":{"range":{"start":{"row":4256,"column":0},"end":{"row":4256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9138":{"range":{"start":{"row":4262,"column":0},"end":{"row":4262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9139":{"range":{"start":{"row":4268,"column":0},"end":{"row":4268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9140":{"range":{"start":{"row":4274,"column":0},"end":{"row":4274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9141":{"range":{"start":{"row":4280,"column":0},"end":{"row":4280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9142":{"range":{"start":{"row":4286,"column":0},"end":{"row":4286,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9143":{"range":{"start":{"row":4292,"column":0},"end":{"row":4292,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9144":{"range":{"start":{"row":4298,"column":0},"end":{"row":4298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9145":{"range":{"start":{"row":4304,"column":0},"end":{"row":4304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9146":{"range":{"start":{"row":4310,"column":0},"end":{"row":4310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9147":{"range":{"start":{"row":4316,"column":0},"end":{"row":4316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9148":{"range":{"start":{"row":4322,"column":0},"end":{"row":4322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9149":{"range":{"start":{"row":4328,"column":0},"end":{"row":4328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9150":{"range":{"start":{"row":4334,"column":0},"end":{"row":4334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9151":{"range":{"start":{"row":4340,"column":0},"end":{"row":4340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9152":{"range":{"start":{"row":4346,"column":0},"end":{"row":4346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9153":{"range":{"start":{"row":4352,"column":0},"end":{"row":4352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9154":{"range":{"start":{"row":4358,"column":0},"end":{"row":4358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9155":{"range":{"start":{"row":4364,"column":0},"end":{"row":4364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9156":{"range":{"start":{"row":4370,"column":0},"end":{"row":4370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9157":{"range":{"start":{"row":4376,"column":0},"end":{"row":4376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9158":{"range":{"start":{"row":4382,"column":0},"end":{"row":4382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9159":{"range":{"start":{"row":4388,"column":0},"end":{"row":4388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9160":{"range":{"start":{"row":4394,"column":0},"end":{"row":4394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9161":{"range":{"start":{"row":4400,"column":0},"end":{"row":4400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9162":{"range":{"start":{"row":4406,"column":0},"end":{"row":4406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9163":{"range":{"start":{"row":4412,"column":0},"end":{"row":4412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9164":{"range":{"start":{"row":4418,"column":0},"end":{"row":4418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9165":{"range":{"start":{"row":4424,"column":0},"end":{"row":4424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9166":{"range":{"start":{"row":4430,"column":0},"end":{"row":4430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9167":{"range":{"start":{"row":4436,"column":0},"end":{"row":4436,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9168":{"range":{"start":{"row":4442,"column":0},"end":{"row":4442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9169":{"range":{"start":{"row":4448,"column":0},"end":{"row":4448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9170":{"range":{"start":{"row":4454,"column":0},"end":{"row":4454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9171":{"range":{"start":{"row":4460,"column":0},"end":{"row":4460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9172":{"range":{"start":{"row":4468,"column":0},"end":{"row":4468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9173":{"range":{"start":{"row":4476,"column":0},"end":{"row":4476,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9174":{"range":{"start":{"row":4492,"column":0},"end":{"row":4492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9175":{"range":{"start":{"row":4498,"column":0},"end":{"row":4498,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9176":{"range":{"start":{"row":4504,"column":0},"end":{"row":4504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9177":{"range":{"start":{"row":4509,"column":0},"end":{"row":4509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9178":{"range":{"start":{"row":4515,"column":0},"end":{"row":4515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9179":{"range":{"start":{"row":4520,"column":0},"end":{"row":4520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9180":{"range":{"start":{"row":4525,"column":0},"end":{"row":4525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9181":{"range":{"start":{"row":4530,"column":0},"end":{"row":4530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9182":{"range":{"start":{"row":4535,"column":0},"end":{"row":4535,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9183":{"range":{"start":{"row":4540,"column":0},"end":{"row":4540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9184":{"range":{"start":{"row":4545,"column":0},"end":{"row":4545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9185":{"range":{"start":{"row":4550,"column":0},"end":{"row":4550,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9186":{"range":{"start":{"row":4555,"column":0},"end":{"row":4555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9187":{"range":{"start":{"row":4560,"column":0},"end":{"row":4560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9188":{"range":{"start":{"row":4565,"column":0},"end":{"row":4565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9189":{"range":{"start":{"row":4570,"column":0},"end":{"row":4570,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9190":{"range":{"start":{"row":4575,"column":0},"end":{"row":4575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9191":{"range":{"start":{"row":4580,"column":0},"end":{"row":4580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9192":{"range":{"start":{"row":4585,"column":0},"end":{"row":4585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9193":{"range":{"start":{"row":4597,"column":0},"end":{"row":4597,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9194":{"range":{"start":{"row":4617,"column":0},"end":{"row":4617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9195":{"range":{"start":{"row":4626,"column":0},"end":{"row":4626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9196":{"range":{"start":{"row":4635,"column":0},"end":{"row":4635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9197":{"range":{"start":{"row":4642,"column":0},"end":{"row":4642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9198":{"range":{"start":{"row":4714,"column":0},"end":{"row":4714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9199":{"range":{"start":{"row":4716,"column":0},"end":{"row":4716,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9200":{"range":{"start":{"row":4721,"column":0},"end":{"row":4721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9201":{"range":{"start":{"row":4728,"column":0},"end":{"row":4728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9202":{"range":{"start":{"row":4733,"column":0},"end":{"row":4733,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9203":{"range":{"start":{"row":4739,"column":0},"end":{"row":4739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9204":{"range":{"start":{"row":4745,"column":0},"end":{"row":4745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9205":{"range":{"start":{"row":4756,"column":0},"end":{"row":4756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9206":{"range":{"start":{"row":4767,"column":0},"end":{"row":4767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9207":{"range":{"start":{"row":4787,"column":0},"end":{"row":4787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9208":{"range":{"start":{"row":4799,"column":0},"end":{"row":4799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9209":{"range":{"start":{"row":4806,"column":0},"end":{"row":4806,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9210":{"range":{"start":{"row":4813,"column":0},"end":{"row":4813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9211":{"range":{"start":{"row":4820,"column":0},"end":{"row":4820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9212":{"range":{"start":{"row":4827,"column":0},"end":{"row":4827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9213":{"range":{"start":{"row":4834,"column":0},"end":{"row":4834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9214":{"range":{"start":{"row":4840,"column":0},"end":{"row":4840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9215":{"range":{"start":{"row":4846,"column":0},"end":{"row":4846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9216":{"range":{"start":{"row":4852,"column":0},"end":{"row":4852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9217":{"range":{"start":{"row":4864,"column":0},"end":{"row":4864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9218":{"range":{"start":{"row":4872,"column":0},"end":{"row":4872,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9219":{"range":{"start":{"row":4880,"column":0},"end":{"row":4880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9220":{"range":{"start":{"row":4888,"column":0},"end":{"row":4888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9221":{"range":{"start":{"row":4896,"column":0},"end":{"row":4896,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9222":{"range":{"start":{"row":4904,"column":0},"end":{"row":4904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9223":{"range":{"start":{"row":4910,"column":0},"end":{"row":4910,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9224":{"range":{"start":{"row":4916,"column":0},"end":{"row":4916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9225":{"range":{"start":{"row":4922,"column":0},"end":{"row":4922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9226":{"range":{"start":{"row":4928,"column":0},"end":{"row":4928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9227":{"range":{"start":{"row":4946,"column":0},"end":{"row":4946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9228":{"range":{"start":{"row":4948,"column":0},"end":{"row":4948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9229":{"range":{"start":{"row":4953,"column":0},"end":{"row":4953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9230":{"range":{"start":{"row":4958,"column":0},"end":{"row":4958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9231":{"range":{"start":{"row":4963,"column":0},"end":{"row":4963,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9232":{"range":{"start":{"row":4970,"column":0},"end":{"row":4970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9233":{"range":{"start":{"row":4977,"column":0},"end":{"row":4977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9234":{"range":{"start":{"row":4984,"column":0},"end":{"row":4984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9235":{"range":{"start":{"row":5000,"column":0},"end":{"row":5000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9236":{"range":{"start":{"row":5003,"column":0},"end":{"row":5003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9237":{"range":{"start":{"row":5015,"column":0},"end":{"row":5015,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9238":{"range":{"start":{"row":5026,"column":0},"end":{"row":5026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9239":{"range":{"start":{"row":5037,"column":0},"end":{"row":5037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9240":{"range":{"start":{"row":5045,"column":0},"end":{"row":5045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9241":{"range":{"start":{"row":5057,"column":0},"end":{"row":5057,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9242":{"range":{"start":{"row":5071,"column":0},"end":{"row":5071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9243":{"range":{"start":{"row":5077,"column":0},"end":{"row":5077,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9244":{"range":{"start":{"row":5086,"column":0},"end":{"row":5086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9245":{"range":{"start":{"row":5091,"column":0},"end":{"row":5091,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9246":{"range":{"start":{"row":5103,"column":0},"end":{"row":5103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9247":{"range":{"start":{"row":5113,"column":0},"end":{"row":5113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9248":{"range":{"start":{"row":5125,"column":0},"end":{"row":5125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9249":{"range":{"start":{"row":5136,"column":0},"end":{"row":5136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9250":{"range":{"start":{"row":5148,"column":0},"end":{"row":5148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9251":{"range":{"start":{"row":5160,"column":0},"end":{"row":5160,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9252":{"range":{"start":{"row":5172,"column":0},"end":{"row":5172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9253":{"range":{"start":{"row":5184,"column":0},"end":{"row":5184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9254":{"range":{"start":{"row":5196,"column":0},"end":{"row":5196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9255":{"range":{"start":{"row":5208,"column":0},"end":{"row":5208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9256":{"range":{"start":{"row":5232,"column":0},"end":{"row":5232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9257":{"range":{"start":{"row":5242,"column":0},"end":{"row":5242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9258":{"range":{"start":{"row":5252,"column":0},"end":{"row":5252,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9259":{"range":{"start":{"row":5262,"column":0},"end":{"row":5262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9260":{"range":{"start":{"row":5281,"column":0},"end":{"row":5281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9261":{"range":{"start":{"row":5289,"column":0},"end":{"row":5289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9262":{"range":{"start":{"row":5294,"column":0},"end":{"row":5294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9263":{"range":{"start":{"row":5306,"column":0},"end":{"row":5306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9264":{"range":{"start":{"row":5316,"column":0},"end":{"row":5316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9265":{"range":{"start":{"row":5327,"column":0},"end":{"row":5327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9266":{"range":{"start":{"row":5339,"column":0},"end":{"row":5339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9267":{"range":{"start":{"row":5351,"column":0},"end":{"row":5351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9268":{"range":{"start":{"row":5362,"column":0},"end":{"row":5362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9269":{"range":{"start":{"row":5374,"column":0},"end":{"row":5374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9270":{"range":{"start":{"row":5386,"column":0},"end":{"row":5386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9271":{"range":{"start":{"row":5398,"column":0},"end":{"row":5398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9272":{"range":{"start":{"row":5410,"column":0},"end":{"row":5410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9273":{"range":{"start":{"row":5429,"column":0},"end":{"row":5429,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9274":{"range":{"start":{"row":5454,"column":0},"end":{"row":5454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9275":{"range":{"start":{"row":5460,"column":0},"end":{"row":5460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9276":{"range":{"start":{"row":5468,"column":0},"end":{"row":5468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9277":{"range":{"start":{"row":5473,"column":0},"end":{"row":5473,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9278":{"range":{"start":{"row":5485,"column":0},"end":{"row":5485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9279":{"range":{"start":{"row":5495,"column":0},"end":{"row":5495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9280":{"range":{"start":{"row":5507,"column":0},"end":{"row":5507,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9281":{"range":{"start":{"row":5518,"column":0},"end":{"row":5518,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9282":{"range":{"start":{"row":5530,"column":0},"end":{"row":5530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9283":{"range":{"start":{"row":5542,"column":0},"end":{"row":5542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9284":{"range":{"start":{"row":5554,"column":0},"end":{"row":5554,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9285":{"range":{"start":{"row":5566,"column":0},"end":{"row":5566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9286":{"range":{"start":{"row":5578,"column":0},"end":{"row":5578,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9287":{"range":{"start":{"row":5584,"column":0},"end":{"row":5584,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9288":{"range":{"start":{"row":5624,"column":0},"end":{"row":5624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9289":{"range":{"start":{"row":5626,"column":0},"end":{"row":5626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9290":{"range":{"start":{"row":5631,"column":0},"end":{"row":5631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9291":{"range":{"start":{"row":5639,"column":0},"end":{"row":5639,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9292":{"range":{"start":{"row":5644,"column":0},"end":{"row":5644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9293":{"range":{"start":{"row":5662,"column":0},"end":{"row":5662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9294":{"range":{"start":{"row":5669,"column":0},"end":{"row":5669,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9295":{"range":{"start":{"row":5676,"column":0},"end":{"row":5676,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9296":{"range":{"start":{"row":5683,"column":0},"end":{"row":5683,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9297":{"range":{"start":{"row":5691,"column":0},"end":{"row":5691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9298":{"range":{"start":{"row":5699,"column":0},"end":{"row":5699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9299":{"range":{"start":{"row":5707,"column":0},"end":{"row":5707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9300":{"range":{"start":{"row":5713,"column":0},"end":{"row":5713,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9301":{"range":{"start":{"row":5719,"column":0},"end":{"row":5719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9302":{"range":{"start":{"row":5726,"column":0},"end":{"row":5726,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9303":{"range":{"start":{"row":5738,"column":0},"end":{"row":5738,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9304":{"range":{"start":{"row":5749,"column":0},"end":{"row":5749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9305":{"range":{"start":{"row":5761,"column":0},"end":{"row":5761,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9306":{"range":{"start":{"row":5772,"column":0},"end":{"row":5772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9307":{"range":{"start":{"row":5779,"column":0},"end":{"row":5779,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9308":{"range":{"start":{"row":5786,"column":0},"end":{"row":5786,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9309":{"range":{"start":{"row":5794,"column":0},"end":{"row":5794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9310":{"range":{"start":{"row":5802,"column":0},"end":{"row":5802,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9311":{"range":{"start":{"row":5813,"column":0},"end":{"row":5813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9312":{"range":{"start":{"row":5823,"column":0},"end":{"row":5823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9313":{"range":{"start":{"row":5833,"column":0},"end":{"row":5833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9314":{"range":{"start":{"row":5845,"column":0},"end":{"row":5845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9315":{"range":{"start":{"row":5857,"column":0},"end":{"row":5857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9316":{"range":{"start":{"row":5869,"column":0},"end":{"row":5869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9317":{"range":{"start":{"row":5881,"column":0},"end":{"row":5881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9318":{"range":{"start":{"row":5904,"column":0},"end":{"row":5904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9319":{"range":{"start":{"row":5916,"column":0},"end":{"row":5916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9320":{"range":{"start":{"row":5928,"column":0},"end":{"row":5928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9321":{"range":{"start":{"row":5940,"column":0},"end":{"row":5940,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9322":{"range":{"start":{"row":5950,"column":0},"end":{"row":5950,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9323":{"range":{"start":{"row":5958,"column":0},"end":{"row":5958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9324":{"range":{"start":{"row":5966,"column":0},"end":{"row":5966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9325":{"range":{"start":{"row":5977,"column":0},"end":{"row":5977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9326":{"range":{"start":{"row":5986,"column":0},"end":{"row":5986,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9327":{"range":{"start":{"row":5995,"column":0},"end":{"row":5995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9328":{"range":{"start":{"row":6003,"column":0},"end":{"row":6003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9329":{"range":{"start":{"row":6011,"column":0},"end":{"row":6011,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9330":{"range":{"start":{"row":6018,"column":0},"end":{"row":6018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9331":{"range":{"start":{"row":6025,"column":0},"end":{"row":6025,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9332":{"range":{"start":{"row":6032,"column":0},"end":{"row":6032,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9333":{"range":{"start":{"row":6039,"column":0},"end":{"row":6039,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9334":{"range":{"start":{"row":6054,"column":0},"end":{"row":6054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9335":{"range":{"start":{"row":6066,"column":0},"end":{"row":6066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9336":{"range":{"start":{"row":6088,"column":0},"end":{"row":6088,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9337":{"range":{"start":{"row":6093,"column":0},"end":{"row":6093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9338":{"range":{"start":{"row":6101,"column":0},"end":{"row":6101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9339":{"range":{"start":{"row":6118,"column":0},"end":{"row":6118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9340":{"range":{"start":{"row":6130,"column":0},"end":{"row":6130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9341":{"range":{"start":{"row":6141,"column":0},"end":{"row":6141,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9342":{"range":{"start":{"row":6152,"column":0},"end":{"row":6152,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9343":{"range":{"start":{"row":6161,"column":0},"end":{"row":6161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9344":{"range":{"start":{"row":6173,"column":0},"end":{"row":6173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9345":{"range":{"start":{"row":6185,"column":0},"end":{"row":6185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9346":{"range":{"start":{"row":6203,"column":0},"end":{"row":6203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9347":{"range":{"start":{"row":6205,"column":0},"end":{"row":6205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9348":{"range":{"start":{"row":6210,"column":0},"end":{"row":6210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9349":{"range":{"start":{"row":6217,"column":0},"end":{"row":6217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9350":{"range":{"start":{"row":6224,"column":0},"end":{"row":6224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9351":{"range":{"start":{"row":6231,"column":0},"end":{"row":6231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9352":{"range":{"start":{"row":6238,"column":0},"end":{"row":6238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9353":{"range":{"start":{"row":6243,"column":0},"end":{"row":6243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9354":{"range":{"start":{"row":6255,"column":0},"end":{"row":6255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9355":{"range":{"start":{"row":6267,"column":0},"end":{"row":6267,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9356":{"range":{"start":{"row":6279,"column":0},"end":{"row":6279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9357":{"range":{"start":{"row":6290,"column":0},"end":{"row":6290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9358":{"range":{"start":{"row":6301,"column":0},"end":{"row":6301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9359":{"range":{"start":{"row":6313,"column":0},"end":{"row":6313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9360":{"range":{"start":{"row":6325,"column":0},"end":{"row":6325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9361":{"range":{"start":{"row":6333,"column":0},"end":{"row":6333,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9362":{"range":{"start":{"row":6347,"column":0},"end":{"row":6347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9363":{"range":{"start":{"row":6349,"column":0},"end":{"row":6349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9364":{"range":{"start":{"row":6354,"column":0},"end":{"row":6354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9365":{"range":{"start":{"row":6361,"column":0},"end":{"row":6361,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9366":{"range":{"start":{"row":6372,"column":0},"end":{"row":6372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9367":{"range":{"start":{"row":6377,"column":0},"end":{"row":6377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9368":{"range":{"start":{"row":6388,"column":0},"end":{"row":6388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9369":{"range":{"start":{"row":6404,"column":0},"end":{"row":6404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9370":{"range":{"start":{"row":6413,"column":0},"end":{"row":6413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9371":{"range":{"start":{"row":6423,"column":0},"end":{"row":6423,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9372":{"range":{"start":{"row":6434,"column":0},"end":{"row":6434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9373":{"range":{"start":{"row":6446,"column":0},"end":{"row":6446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9374":{"range":{"start":{"row":6457,"column":0},"end":{"row":6457,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9375":{"range":{"start":{"row":6465,"column":0},"end":{"row":6465,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9376":{"range":{"start":{"row":6479,"column":0},"end":{"row":6479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9377":{"range":{"start":{"row":6482,"column":0},"end":{"row":6482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9378":{"range":{"start":{"row":6485,"column":0},"end":{"row":6485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9379":{"range":{"start":{"row":6487,"column":0},"end":{"row":6487,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9380":{"range":{"start":{"row":6492,"column":0},"end":{"row":6492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9381":{"range":{"start":{"row":6499,"column":0},"end":{"row":6499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9382":{"range":{"start":{"row":6504,"column":0},"end":{"row":6504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9383":{"range":{"start":{"row":6516,"column":0},"end":{"row":6516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9384":{"range":{"start":{"row":6527,"column":0},"end":{"row":6527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9385":{"range":{"start":{"row":6539,"column":0},"end":{"row":6539,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9386":{"range":{"start":{"row":6551,"column":0},"end":{"row":6551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9387":{"range":{"start":{"row":6563,"column":0},"end":{"row":6563,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9388":{"range":{"start":{"row":6574,"column":0},"end":{"row":6574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9389":{"range":{"start":{"row":6582,"column":0},"end":{"row":6582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9390":{"range":{"start":{"row":6594,"column":0},"end":{"row":6594,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9391":{"range":{"start":{"row":6603,"column":0},"end":{"row":6603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9392":{"range":{"start":{"row":6610,"column":0},"end":{"row":6610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9393":{"range":{"start":{"row":6624,"column":0},"end":{"row":6624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9394":{"range":{"start":{"row":6637,"column":0},"end":{"row":6637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9395":{"range":{"start":{"row":6640,"column":0},"end":{"row":6640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9396":{"range":{"start":{"row":6643,"column":0},"end":{"row":6643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9397":{"range":{"start":{"row":6645,"column":0},"end":{"row":6645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9398":{"range":{"start":{"row":6650,"column":0},"end":{"row":6650,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9399":{"range":{"start":{"row":6657,"column":0},"end":{"row":6657,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9400":{"range":{"start":{"row":6662,"column":0},"end":{"row":6662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9401":{"range":{"start":{"row":6673,"column":0},"end":{"row":6673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9402":{"range":{"start":{"row":6685,"column":0},"end":{"row":6685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9403":{"range":{"start":{"row":6696,"column":0},"end":{"row":6696,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9404":{"range":{"start":{"row":6707,"column":0},"end":{"row":6707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9405":{"range":{"start":{"row":6719,"column":0},"end":{"row":6719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9406":{"range":{"start":{"row":6727,"column":0},"end":{"row":6727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9407":{"range":{"start":{"row":6745,"column":0},"end":{"row":6745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9408":{"range":{"start":{"row":6756,"column":0},"end":{"row":6756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9409":{"range":{"start":{"row":6766,"column":0},"end":{"row":6766,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9410":{"range":{"start":{"row":6787,"column":0},"end":{"row":6787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9411":{"range":{"start":{"row":6792,"column":0},"end":{"row":6792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9412":{"range":{"start":{"row":6799,"column":0},"end":{"row":6799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9413":{"range":{"start":{"row":6804,"column":0},"end":{"row":6804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9414":{"range":{"start":{"row":6836,"column":0},"end":{"row":6836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9415":{"range":{"start":{"row":6847,"column":0},"end":{"row":6847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9416":{"range":{"start":{"row":6858,"column":0},"end":{"row":6858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9417":{"range":{"start":{"row":6869,"column":0},"end":{"row":6869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9418":{"range":{"start":{"row":6903,"column":0},"end":{"row":6903,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9419":{"range":{"start":{"row":6924,"column":0},"end":{"row":6924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9420":{"range":{"start":{"row":6936,"column":0},"end":{"row":6936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9421":{"range":{"start":{"row":6952,"column":0},"end":{"row":6952,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9422":{"range":{"start":{"row":6964,"column":0},"end":{"row":6964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9423":{"range":{"start":{"row":6971,"column":0},"end":{"row":6971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9424":{"range":{"start":{"row":6996,"column":0},"end":{"row":6996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9425":{"range":{"start":{"row":7002,"column":0},"end":{"row":7002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9426":{"range":{"start":{"row":7150,"column":0},"end":{"row":7150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9427":{"range":{"start":{"row":7664,"column":0},"end":{"row":7664,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9428":{"range":{"start":{"row":7666,"column":0},"end":{"row":7666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9429":{"range":{"start":{"row":7673,"column":0},"end":{"row":7673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9430":{"range":{"start":{"row":7678,"column":0},"end":{"row":7678,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9431":{"range":{"start":{"row":7685,"column":0},"end":{"row":7685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9432":{"range":{"start":{"row":7692,"column":0},"end":{"row":7692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9433":{"range":{"start":{"row":7699,"column":0},"end":{"row":7699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9434":{"range":{"start":{"row":7711,"column":0},"end":{"row":7711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9435":{"range":{"start":{"row":7719,"column":0},"end":{"row":7719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9436":{"range":{"start":{"row":7730,"column":0},"end":{"row":7730,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9437":{"range":{"start":{"row":7741,"column":0},"end":{"row":7741,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9438":{"range":{"start":{"row":7753,"column":0},"end":{"row":7753,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9439":{"range":{"start":{"row":7764,"column":0},"end":{"row":7764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9440":{"range":{"start":{"row":7775,"column":0},"end":{"row":7775,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9441":{"range":{"start":{"row":7787,"column":0},"end":{"row":7787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9442":{"range":{"start":{"row":7799,"column":0},"end":{"row":7799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9443":{"range":{"start":{"row":7811,"column":0},"end":{"row":7811,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9444":{"range":{"start":{"row":7823,"column":0},"end":{"row":7823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9445":{"range":{"start":{"row":7835,"column":0},"end":{"row":7835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9446":{"range":{"start":{"row":7847,"column":0},"end":{"row":7847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9447":{"range":{"start":{"row":7849,"column":0},"end":{"row":7849,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9448":{"range":{"start":{"row":7854,"column":0},"end":{"row":7854,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9449":{"range":{"start":{"row":7861,"column":0},"end":{"row":7861,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9450":{"range":{"start":{"row":7866,"column":0},"end":{"row":7866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9451":{"range":{"start":{"row":7878,"column":0},"end":{"row":7878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9452":{"range":{"start":{"row":7889,"column":0},"end":{"row":7889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9453":{"range":{"start":{"row":7901,"column":0},"end":{"row":7901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9454":{"range":{"start":{"row":7912,"column":0},"end":{"row":7912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9455":{"range":{"start":{"row":7924,"column":0},"end":{"row":7924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9456":{"range":{"start":{"row":7935,"column":0},"end":{"row":7935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9457":{"range":{"start":{"row":7946,"column":0},"end":{"row":7946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9458":{"range":{"start":{"row":7958,"column":0},"end":{"row":7958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9459":{"range":{"start":{"row":7970,"column":0},"end":{"row":7970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9460":{"range":{"start":{"row":7982,"column":0},"end":{"row":7982,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9461":{"range":{"start":{"row":7994,"column":0},"end":{"row":7994,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9462":{"range":{"start":{"row":8006,"column":0},"end":{"row":8006,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9463":{"range":{"start":{"row":8017,"column":0},"end":{"row":8017,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9464":{"range":{"start":{"row":8027,"column":0},"end":{"row":8027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9465":{"range":{"start":{"row":8035,"column":0},"end":{"row":8035,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9466":{"range":{"start":{"row":8043,"column":0},"end":{"row":8043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14819":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14820":{"range":{"start":{"row":115,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14821":{"range":{"start":{"row":120,"column":0},"end":{"row":121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14822":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14823":{"range":{"start":{"row":128,"column":0},"end":{"row":129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14824":{"range":{"start":{"row":133,"column":0},"end":{"row":134,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14825":{"range":{"start":{"row":138,"column":0},"end":{"row":139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14826":{"range":{"start":{"row":144,"column":0},"end":{"row":145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14827":{"range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14828":{"range":{"start":{"row":168,"column":0},"end":{"row":169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14829":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14830":{"range":{"start":{"row":202,"column":0},"end":{"row":203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14831":{"range":{"start":{"row":209,"column":0},"end":{"row":210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14832":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14833":{"range":{"start":{"row":235,"column":0},"end":{"row":236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14834":{"range":{"start":{"row":241,"column":0},"end":{"row":242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14835":{"range":{"start":{"row":247,"column":0},"end":{"row":248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14836":{"range":{"start":{"row":253,"column":0},"end":{"row":254,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14837":{"range":{"start":{"row":259,"column":0},"end":{"row":260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14838":{"range":{"start":{"row":264,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14839":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14840":{"range":{"start":{"row":274,"column":0},"end":{"row":275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14841":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14842":{"range":{"start":{"row":284,"column":0},"end":{"row":285,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14843":{"range":{"start":{"row":289,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14844":{"range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14845":{"range":{"start":{"row":308,"column":0},"end":{"row":309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14846":{"range":{"start":{"row":315,"column":0},"end":{"row":316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14847":{"range":{"start":{"row":322,"column":0},"end":{"row":323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14848":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14849":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14850":{"range":{"start":{"row":352,"column":0},"end":{"row":353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14851":{"range":{"start":{"row":359,"column":0},"end":{"row":360,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14852":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14853":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14854":{"range":{"start":{"row":379,"column":0},"end":{"row":380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14855":{"range":{"start":{"row":386,"column":0},"end":{"row":387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14856":{"range":{"start":{"row":393,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14857":{"range":{"start":{"row":399,"column":0},"end":{"row":400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14858":{"range":{"start":{"row":406,"column":0},"end":{"row":407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14859":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14860":{"range":{"start":{"row":420,"column":0},"end":{"row":421,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14861":{"range":{"start":{"row":427,"column":0},"end":{"row":428,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14862":{"range":{"start":{"row":434,"column":0},"end":{"row":435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14863":{"range":{"start":{"row":441,"column":0},"end":{"row":442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14864":{"range":{"start":{"row":448,"column":0},"end":{"row":449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14865":{"range":{"start":{"row":471,"column":0},"end":{"row":472,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14866":{"range":{"start":{"row":481,"column":0},"end":{"row":482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14867":{"range":{"start":{"row":503,"column":0},"end":{"row":504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14868":{"range":{"start":{"row":514,"column":0},"end":{"row":515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14869":{"range":{"start":{"row":525,"column":0},"end":{"row":526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14870":{"range":{"start":{"row":544,"column":0},"end":{"row":545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14871":{"range":{"start":{"row":551,"column":0},"end":{"row":552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14872":{"range":{"start":{"row":558,"column":0},"end":{"row":559,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14873":{"range":{"start":{"row":565,"column":0},"end":{"row":566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14874":{"range":{"start":{"row":573,"column":0},"end":{"row":574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14875":{"range":{"start":{"row":581,"column":0},"end":{"row":582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14876":{"range":{"start":{"row":592,"column":0},"end":{"row":593,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14877":{"range":{"start":{"row":631,"column":0},"end":{"row":632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14878":{"range":{"start":{"row":642,"column":0},"end":{"row":643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14879":{"range":{"start":{"row":653,"column":0},"end":{"row":654,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14880":{"range":{"start":{"row":690,"column":0},"end":{"row":691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14881":{"range":{"start":{"row":700,"column":0},"end":{"row":701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14882":{"range":{"start":{"row":710,"column":0},"end":{"row":711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14883":{"range":{"start":{"row":720,"column":0},"end":{"row":721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14884":{"range":{"start":{"row":736,"column":0},"end":{"row":737,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14885":{"range":{"start":{"row":750,"column":0},"end":{"row":751,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14886":{"range":{"start":{"row":771,"column":0},"end":{"row":772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14887":{"range":{"start":{"row":783,"column":0},"end":{"row":784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14888":{"range":{"start":{"row":794,"column":0},"end":{"row":795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14889":{"range":{"start":{"row":819,"column":0},"end":{"row":820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14890":{"range":{"start":{"row":831,"column":0},"end":{"row":832,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14891":{"range":{"start":{"row":843,"column":0},"end":{"row":844,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14892":{"range":{"start":{"row":866,"column":0},"end":{"row":867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14893":{"range":{"start":{"row":878,"column":0},"end":{"row":879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14894":{"range":{"start":{"row":889,"column":0},"end":{"row":890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14895":{"range":{"start":{"row":900,"column":0},"end":{"row":901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14896":{"range":{"start":{"row":911,"column":0},"end":{"row":912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14897":{"range":{"start":{"row":922,"column":0},"end":{"row":923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14898":{"range":{"start":{"row":1226,"column":0},"end":{"row":1227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14899":{"range":{"start":{"row":1234,"column":0},"end":{"row":1235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14900":{"range":{"start":{"row":1309,"column":0},"end":{"row":1310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14901":{"range":{"start":{"row":1341,"column":0},"end":{"row":1342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14902":{"range":{"start":{"row":1348,"column":0},"end":{"row":1349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14903":{"range":{"start":{"row":1355,"column":0},"end":{"row":1356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14904":{"range":{"start":{"row":1362,"column":0},"end":{"row":1363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14905":{"range":{"start":{"row":1369,"column":0},"end":{"row":1370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14906":{"range":{"start":{"row":1376,"column":0},"end":{"row":1377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14907":{"range":{"start":{"row":1383,"column":0},"end":{"row":1384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14908":{"range":{"start":{"row":1390,"column":0},"end":{"row":1391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14909":{"range":{"start":{"row":1397,"column":0},"end":{"row":1398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14910":{"range":{"start":{"row":1404,"column":0},"end":{"row":1405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14911":{"range":{"start":{"row":1411,"column":0},"end":{"row":1412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14912":{"range":{"start":{"row":1418,"column":0},"end":{"row":1419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14913":{"range":{"start":{"row":1425,"column":0},"end":{"row":1426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14914":{"range":{"start":{"row":1437,"column":0},"end":{"row":1438,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14915":{"range":{"start":{"row":1443,"column":0},"end":{"row":1444,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14916":{"range":{"start":{"row":1455,"column":0},"end":{"row":1456,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14917":{"range":{"start":{"row":1466,"column":0},"end":{"row":1467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14918":{"range":{"start":{"row":1474,"column":0},"end":{"row":1475,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14919":{"range":{"start":{"row":1482,"column":0},"end":{"row":1483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14920":{"range":{"start":{"row":1490,"column":0},"end":{"row":1491,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14921":{"range":{"start":{"row":1496,"column":0},"end":{"row":1497,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14922":{"range":{"start":{"row":1502,"column":0},"end":{"row":1503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14923":{"range":{"start":{"row":1508,"column":0},"end":{"row":1509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14924":{"range":{"start":{"row":1514,"column":0},"end":{"row":1515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14925":{"range":{"start":{"row":1520,"column":0},"end":{"row":1521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14926":{"range":{"start":{"row":1526,"column":0},"end":{"row":1527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14927":{"range":{"start":{"row":1533,"column":0},"end":{"row":1534,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14928":{"range":{"start":{"row":1542,"column":0},"end":{"row":1543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14929":{"range":{"start":{"row":1551,"column":0},"end":{"row":1552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14930":{"range":{"start":{"row":1560,"column":0},"end":{"row":1561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14931":{"range":{"start":{"row":1567,"column":0},"end":{"row":1568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14932":{"range":{"start":{"row":1581,"column":0},"end":{"row":1582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14933":{"range":{"start":{"row":1588,"column":0},"end":{"row":1589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14934":{"range":{"start":{"row":1595,"column":0},"end":{"row":1596,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14935":{"range":{"start":{"row":1602,"column":0},"end":{"row":1603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14936":{"range":{"start":{"row":1609,"column":0},"end":{"row":1610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14937":{"range":{"start":{"row":1616,"column":0},"end":{"row":1617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14938":{"range":{"start":{"row":1623,"column":0},"end":{"row":1624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14939":{"range":{"start":{"row":1630,"column":0},"end":{"row":1631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14940":{"range":{"start":{"row":1637,"column":0},"end":{"row":1638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14941":{"range":{"start":{"row":1644,"column":0},"end":{"row":1645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14942":{"range":{"start":{"row":1651,"column":0},"end":{"row":1652,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14943":{"range":{"start":{"row":1658,"column":0},"end":{"row":1659,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14944":{"range":{"start":{"row":1665,"column":0},"end":{"row":1666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14945":{"range":{"start":{"row":1672,"column":0},"end":{"row":1673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14946":{"range":{"start":{"row":1679,"column":0},"end":{"row":1680,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14947":{"range":{"start":{"row":1686,"column":0},"end":{"row":1687,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14948":{"range":{"start":{"row":1693,"column":0},"end":{"row":1694,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14949":{"range":{"start":{"row":1700,"column":0},"end":{"row":1701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14950":{"range":{"start":{"row":1707,"column":0},"end":{"row":1708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14951":{"range":{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14952":{"range":{"start":{"row":1721,"column":0},"end":{"row":1722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14953":{"range":{"start":{"row":1728,"column":0},"end":{"row":1729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14954":{"range":{"start":{"row":1735,"column":0},"end":{"row":1736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14955":{"range":{"start":{"row":1742,"column":0},"end":{"row":1743,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14956":{"range":{"start":{"row":1749,"column":0},"end":{"row":1750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14957":{"range":{"start":{"row":1756,"column":0},"end":{"row":1757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14958":{"range":{"start":{"row":1763,"column":0},"end":{"row":1764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14959":{"range":{"start":{"row":1770,"column":0},"end":{"row":1771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14960":{"range":{"start":{"row":1777,"column":0},"end":{"row":1778,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14961":{"range":{"start":{"row":1784,"column":0},"end":{"row":1785,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14962":{"range":{"start":{"row":1791,"column":0},"end":{"row":1792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14963":{"range":{"start":{"row":1797,"column":0},"end":{"row":1798,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14964":{"range":{"start":{"row":1803,"column":0},"end":{"row":1804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14965":{"range":{"start":{"row":1809,"column":0},"end":{"row":1810,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14966":{"range":{"start":{"row":1815,"column":0},"end":{"row":1816,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14967":{"range":{"start":{"row":1821,"column":0},"end":{"row":1822,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14968":{"range":{"start":{"row":1827,"column":0},"end":{"row":1828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14969":{"range":{"start":{"row":1833,"column":0},"end":{"row":1834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14970":{"range":{"start":{"row":1839,"column":0},"end":{"row":1840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14971":{"range":{"start":{"row":1845,"column":0},"end":{"row":1846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14972":{"range":{"start":{"row":1851,"column":0},"end":{"row":1852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14973":{"range":{"start":{"row":1857,"column":0},"end":{"row":1858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14974":{"range":{"start":{"row":1863,"column":0},"end":{"row":1864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14975":{"range":{"start":{"row":1869,"column":0},"end":{"row":1870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14976":{"range":{"start":{"row":1875,"column":0},"end":{"row":1876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14977":{"range":{"start":{"row":1881,"column":0},"end":{"row":1882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14978":{"range":{"start":{"row":1887,"column":0},"end":{"row":1888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14979":{"range":{"start":{"row":1893,"column":0},"end":{"row":1894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14980":{"range":{"start":{"row":1899,"column":0},"end":{"row":1900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14981":{"range":{"start":{"row":1905,"column":0},"end":{"row":1906,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14982":{"range":{"start":{"row":1911,"column":0},"end":{"row":1912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14983":{"range":{"start":{"row":1917,"column":0},"end":{"row":1918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14984":{"range":{"start":{"row":1923,"column":0},"end":{"row":1924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14985":{"range":{"start":{"row":1929,"column":0},"end":{"row":1930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14986":{"range":{"start":{"row":1935,"column":0},"end":{"row":1936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14987":{"range":{"start":{"row":1941,"column":0},"end":{"row":1942,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14988":{"range":{"start":{"row":1947,"column":0},"end":{"row":1948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14989":{"range":{"start":{"row":1953,"column":0},"end":{"row":1954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14990":{"range":{"start":{"row":1959,"column":0},"end":{"row":1960,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14991":{"range":{"start":{"row":1965,"column":0},"end":{"row":1966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14992":{"range":{"start":{"row":1971,"column":0},"end":{"row":1972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14993":{"range":{"start":{"row":1977,"column":0},"end":{"row":1978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14994":{"range":{"start":{"row":1983,"column":0},"end":{"row":1984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14995":{"range":{"start":{"row":1989,"column":0},"end":{"row":1990,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14996":{"range":{"start":{"row":1995,"column":0},"end":{"row":1996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14997":{"range":{"start":{"row":2001,"column":0},"end":{"row":2002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14998":{"range":{"start":{"row":2036,"column":0},"end":{"row":2037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14999":{"range":{"start":{"row":2042,"column":0},"end":{"row":2043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15000":{"range":{"start":{"row":2048,"column":0},"end":{"row":2049,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15001":{"range":{"start":{"row":2054,"column":0},"end":{"row":2055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15002":{"range":{"start":{"row":2062,"column":0},"end":{"row":2063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15003":{"range":{"start":{"row":2070,"column":0},"end":{"row":2071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15004":{"range":{"start":{"row":2078,"column":0},"end":{"row":2079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15005":{"range":{"start":{"row":2086,"column":0},"end":{"row":2087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15006":{"range":{"start":{"row":2094,"column":0},"end":{"row":2095,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15007":{"range":{"start":{"row":2102,"column":0},"end":{"row":2103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15008":{"range":{"start":{"row":2110,"column":0},"end":{"row":2111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15009":{"range":{"start":{"row":2118,"column":0},"end":{"row":2119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15010":{"range":{"start":{"row":2138,"column":0},"end":{"row":2139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15011":{"range":{"start":{"row":2144,"column":0},"end":{"row":2145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15012":{"range":{"start":{"row":2150,"column":0},"end":{"row":2151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15013":{"range":{"start":{"row":2156,"column":0},"end":{"row":2157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15014":{"range":{"start":{"row":2162,"column":0},"end":{"row":2163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15015":{"range":{"start":{"row":2168,"column":0},"end":{"row":2169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15016":{"range":{"start":{"row":2175,"column":0},"end":{"row":2176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15017":{"range":{"start":{"row":2182,"column":0},"end":{"row":2183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15018":{"range":{"start":{"row":2189,"column":0},"end":{"row":2190,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15019":{"range":{"start":{"row":2196,"column":0},"end":{"row":2197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15020":{"range":{"start":{"row":2203,"column":0},"end":{"row":2204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15021":{"range":{"start":{"row":2218,"column":0},"end":{"row":2219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15022":{"range":{"start":{"row":2224,"column":0},"end":{"row":2225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15023":{"range":{"start":{"row":2231,"column":0},"end":{"row":2232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15024":{"range":{"start":{"row":2237,"column":0},"end":{"row":2238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15025":{"range":{"start":{"row":2243,"column":0},"end":{"row":2244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15026":{"range":{"start":{"row":2249,"column":0},"end":{"row":2250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15027":{"range":{"start":{"row":2256,"column":0},"end":{"row":2257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15028":{"range":{"start":{"row":2264,"column":0},"end":{"row":2265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15029":{"range":{"start":{"row":2271,"column":0},"end":{"row":2272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15030":{"range":{"start":{"row":2277,"column":0},"end":{"row":2278,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15031":{"range":{"start":{"row":2283,"column":0},"end":{"row":2284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15032":{"range":{"start":{"row":2289,"column":0},"end":{"row":2290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15033":{"range":{"start":{"row":2297,"column":0},"end":{"row":2298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15034":{"range":{"start":{"row":2304,"column":0},"end":{"row":2305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15035":{"range":{"start":{"row":2334,"column":0},"end":{"row":2335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15036":{"range":{"start":{"row":2340,"column":0},"end":{"row":2341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15037":{"range":{"start":{"row":2346,"column":0},"end":{"row":2347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15038":{"range":{"start":{"row":2352,"column":0},"end":{"row":2353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15039":{"range":{"start":{"row":2358,"column":0},"end":{"row":2359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15040":{"range":{"start":{"row":2364,"column":0},"end":{"row":2365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15041":{"range":{"start":{"row":2375,"column":0},"end":{"row":2376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15042":{"range":{"start":{"row":2381,"column":0},"end":{"row":2382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15043":{"range":{"start":{"row":2387,"column":0},"end":{"row":2388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15044":{"range":{"start":{"row":2393,"column":0},"end":{"row":2394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15045":{"range":{"start":{"row":2404,"column":0},"end":{"row":2405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15046":{"range":{"start":{"row":2431,"column":0},"end":{"row":2432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15047":{"range":{"start":{"row":2447,"column":0},"end":{"row":2448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15048":{"range":{"start":{"row":2469,"column":0},"end":{"row":2470,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15049":{"range":{"start":{"row":2495,"column":0},"end":{"row":2496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15050":{"range":{"start":{"row":2567,"column":0},"end":{"row":2568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15051":{"range":{"start":{"row":2575,"column":0},"end":{"row":2576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15052":{"range":{"start":{"row":2580,"column":0},"end":{"row":2581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15053":{"range":{"start":{"row":2588,"column":0},"end":{"row":2589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15054":{"range":{"start":{"row":2607,"column":0},"end":{"row":2608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15055":{"range":{"start":{"row":2616,"column":0},"end":{"row":2617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15056":{"range":{"start":{"row":2624,"column":0},"end":{"row":2625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15057":{"range":{"start":{"row":2634,"column":0},"end":{"row":2635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15058":{"range":{"start":{"row":2875,"column":0},"end":{"row":2876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15059":{"range":{"start":{"row":2880,"column":0},"end":{"row":2881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15060":{"range":{"start":{"row":2887,"column":0},"end":{"row":2888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15061":{"range":{"start":{"row":2894,"column":0},"end":{"row":2895,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15062":{"range":{"start":{"row":2917,"column":0},"end":{"row":2918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15063":{"range":{"start":{"row":2929,"column":0},"end":{"row":2930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15064":{"range":{"start":{"row":2937,"column":0},"end":{"row":2938,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15065":{"range":{"start":{"row":2992,"column":0},"end":{"row":2993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15066":{"range":{"start":{"row":3009,"column":0},"end":{"row":3010,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15067":{"range":{"start":{"row":3063,"column":0},"end":{"row":3064,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15068":{"range":{"start":{"row":3067,"column":0},"end":{"row":3068,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15069":{"range":{"start":{"row":3136,"column":0},"end":{"row":3137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15070":{"range":{"start":{"row":3143,"column":0},"end":{"row":3144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15071":{"range":{"start":{"row":3148,"column":0},"end":{"row":3149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15072":{"range":{"start":{"row":3155,"column":0},"end":{"row":3156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15073":{"range":{"start":{"row":3162,"column":0},"end":{"row":3163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15074":{"range":{"start":{"row":3169,"column":0},"end":{"row":3170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15075":{"range":{"start":{"row":3176,"column":0},"end":{"row":3177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15076":{"range":{"start":{"row":3183,"column":0},"end":{"row":3184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15077":{"range":{"start":{"row":3197,"column":0},"end":{"row":3198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15078":{"range":{"start":{"row":3210,"column":0},"end":{"row":3211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15079":{"range":{"start":{"row":3216,"column":0},"end":{"row":3217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15080":{"range":{"start":{"row":3222,"column":0},"end":{"row":3223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15081":{"range":{"start":{"row":3235,"column":0},"end":{"row":3236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15082":{"range":{"start":{"row":3242,"column":0},"end":{"row":3243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15083":{"range":{"start":{"row":3248,"column":0},"end":{"row":3249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15084":{"range":{"start":{"row":3259,"column":0},"end":{"row":3260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15085":{"range":{"start":{"row":3271,"column":0},"end":{"row":3272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15086":{"range":{"start":{"row":3282,"column":0},"end":{"row":3283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15087":{"range":{"start":{"row":3300,"column":0},"end":{"row":3301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15088":{"range":{"start":{"row":3311,"column":0},"end":{"row":3312,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15089":{"range":{"start":{"row":3322,"column":0},"end":{"row":3323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15090":{"range":{"start":{"row":3331,"column":0},"end":{"row":3332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15091":{"range":{"start":{"row":3348,"column":0},"end":{"row":3349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15092":{"range":{"start":{"row":3356,"column":0},"end":{"row":3357,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15093":{"range":{"start":{"row":3364,"column":0},"end":{"row":3365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15094":{"range":{"start":{"row":3372,"column":0},"end":{"row":3373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15095":{"range":{"start":{"row":3380,"column":0},"end":{"row":3381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15096":{"range":{"start":{"row":3388,"column":0},"end":{"row":3389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15097":{"range":{"start":{"row":3396,"column":0},"end":{"row":3397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15098":{"range":{"start":{"row":3403,"column":0},"end":{"row":3404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15099":{"range":{"start":{"row":3411,"column":0},"end":{"row":3412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15100":{"range":{"start":{"row":3418,"column":0},"end":{"row":3419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15101":{"range":{"start":{"row":3425,"column":0},"end":{"row":3426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15102":{"range":{"start":{"row":3432,"column":0},"end":{"row":3433,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15103":{"range":{"start":{"row":3439,"column":0},"end":{"row":3440,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15104":{"range":{"start":{"row":3446,"column":0},"end":{"row":3447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15105":{"range":{"start":{"row":3453,"column":0},"end":{"row":3454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15106":{"range":{"start":{"row":3466,"column":0},"end":{"row":3467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15107":{"range":{"start":{"row":3478,"column":0},"end":{"row":3479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15108":{"range":{"start":{"row":3489,"column":0},"end":{"row":3490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15109":{"range":{"start":{"row":3500,"column":0},"end":{"row":3501,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15110":{"range":{"start":{"row":3511,"column":0},"end":{"row":3512,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15111":{"range":{"start":{"row":3522,"column":0},"end":{"row":3523,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15112":{"range":{"start":{"row":3532,"column":0},"end":{"row":3533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15113":{"range":{"start":{"row":3573,"column":0},"end":{"row":3574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15114":{"range":{"start":{"row":3585,"column":0},"end":{"row":3586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15115":{"range":{"start":{"row":3608,"column":0},"end":{"row":3609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15116":{"range":{"start":{"row":3620,"column":0},"end":{"row":3621,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15117":{"range":{"start":{"row":3632,"column":0},"end":{"row":3633,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15118":{"range":{"start":{"row":3644,"column":0},"end":{"row":3645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15119":{"range":{"start":{"row":3957,"column":0},"end":{"row":3958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15120":{"range":{"start":{"row":3965,"column":0},"end":{"row":3966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15121":{"range":{"start":{"row":3973,"column":0},"end":{"row":3974,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15122":{"range":{"start":{"row":3984,"column":0},"end":{"row":3985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15123":{"range":{"start":{"row":3992,"column":0},"end":{"row":3993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15124":{"range":{"start":{"row":4000,"column":0},"end":{"row":4001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15125":{"range":{"start":{"row":4030,"column":0},"end":{"row":4031,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15126":{"range":{"start":{"row":4037,"column":0},"end":{"row":4038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15127":{"range":{"start":{"row":4044,"column":0},"end":{"row":4045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15128":{"range":{"start":{"row":4051,"column":0},"end":{"row":4052,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15129":{"range":{"start":{"row":4058,"column":0},"end":{"row":4059,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15130":{"range":{"start":{"row":4065,"column":0},"end":{"row":4066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15131":{"range":{"start":{"row":4072,"column":0},"end":{"row":4073,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15132":{"range":{"start":{"row":4079,"column":0},"end":{"row":4080,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15133":{"range":{"start":{"row":4086,"column":0},"end":{"row":4087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15134":{"range":{"start":{"row":4093,"column":0},"end":{"row":4094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15135":{"range":{"start":{"row":4100,"column":0},"end":{"row":4101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15136":{"range":{"start":{"row":4107,"column":0},"end":{"row":4108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15137":{"range":{"start":{"row":4114,"column":0},"end":{"row":4115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15138":{"range":{"start":{"row":4121,"column":0},"end":{"row":4122,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15139":{"range":{"start":{"row":4128,"column":0},"end":{"row":4129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15140":{"range":{"start":{"row":4135,"column":0},"end":{"row":4136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15141":{"range":{"start":{"row":4142,"column":0},"end":{"row":4143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15142":{"range":{"start":{"row":4149,"column":0},"end":{"row":4150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15143":{"range":{"start":{"row":4156,"column":0},"end":{"row":4157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15144":{"range":{"start":{"row":4163,"column":0},"end":{"row":4164,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15145":{"range":{"start":{"row":4170,"column":0},"end":{"row":4171,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15146":{"range":{"start":{"row":4177,"column":0},"end":{"row":4178,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15147":{"range":{"start":{"row":4184,"column":0},"end":{"row":4185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15148":{"range":{"start":{"row":4191,"column":0},"end":{"row":4192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15149":{"range":{"start":{"row":4198,"column":0},"end":{"row":4199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15150":{"range":{"start":{"row":4205,"column":0},"end":{"row":4206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15151":{"range":{"start":{"row":4212,"column":0},"end":{"row":4213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15152":{"range":{"start":{"row":4219,"column":0},"end":{"row":4220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15153":{"range":{"start":{"row":4226,"column":0},"end":{"row":4227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15154":{"range":{"start":{"row":4232,"column":0},"end":{"row":4233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15155":{"range":{"start":{"row":4238,"column":0},"end":{"row":4239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15156":{"range":{"start":{"row":4244,"column":0},"end":{"row":4245,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15157":{"range":{"start":{"row":4250,"column":0},"end":{"row":4251,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15158":{"range":{"start":{"row":4256,"column":0},"end":{"row":4257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15159":{"range":{"start":{"row":4262,"column":0},"end":{"row":4263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15160":{"range":{"start":{"row":4268,"column":0},"end":{"row":4269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15161":{"range":{"start":{"row":4274,"column":0},"end":{"row":4275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15162":{"range":{"start":{"row":4280,"column":0},"end":{"row":4281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15163":{"range":{"start":{"row":4286,"column":0},"end":{"row":4287,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15164":{"range":{"start":{"row":4292,"column":0},"end":{"row":4293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15165":{"range":{"start":{"row":4298,"column":0},"end":{"row":4299,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15166":{"range":{"start":{"row":4304,"column":0},"end":{"row":4305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15167":{"range":{"start":{"row":4310,"column":0},"end":{"row":4311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15168":{"range":{"start":{"row":4316,"column":0},"end":{"row":4317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15169":{"range":{"start":{"row":4322,"column":0},"end":{"row":4323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15170":{"range":{"start":{"row":4328,"column":0},"end":{"row":4329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15171":{"range":{"start":{"row":4334,"column":0},"end":{"row":4335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15172":{"range":{"start":{"row":4340,"column":0},"end":{"row":4341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15173":{"range":{"start":{"row":4346,"column":0},"end":{"row":4347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15174":{"range":{"start":{"row":4352,"column":0},"end":{"row":4353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15175":{"range":{"start":{"row":4358,"column":0},"end":{"row":4359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15176":{"range":{"start":{"row":4364,"column":0},"end":{"row":4365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15177":{"range":{"start":{"row":4370,"column":0},"end":{"row":4371,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15178":{"range":{"start":{"row":4376,"column":0},"end":{"row":4377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15179":{"range":{"start":{"row":4382,"column":0},"end":{"row":4383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15180":{"range":{"start":{"row":4388,"column":0},"end":{"row":4389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15181":{"range":{"start":{"row":4394,"column":0},"end":{"row":4395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15182":{"range":{"start":{"row":4400,"column":0},"end":{"row":4401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15183":{"range":{"start":{"row":4406,"column":0},"end":{"row":4407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15184":{"range":{"start":{"row":4412,"column":0},"end":{"row":4413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15185":{"range":{"start":{"row":4418,"column":0},"end":{"row":4419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15186":{"range":{"start":{"row":4424,"column":0},"end":{"row":4425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15187":{"range":{"start":{"row":4430,"column":0},"end":{"row":4431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15188":{"range":{"start":{"row":4436,"column":0},"end":{"row":4437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15189":{"range":{"start":{"row":4442,"column":0},"end":{"row":4443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15190":{"range":{"start":{"row":4448,"column":0},"end":{"row":4449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15191":{"range":{"start":{"row":4454,"column":0},"end":{"row":4455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15192":{"range":{"start":{"row":4460,"column":0},"end":{"row":4461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15193":{"range":{"start":{"row":4468,"column":0},"end":{"row":4469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15194":{"range":{"start":{"row":4476,"column":0},"end":{"row":4477,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15195":{"range":{"start":{"row":4492,"column":0},"end":{"row":4493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15196":{"range":{"start":{"row":4498,"column":0},"end":{"row":4499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15197":{"range":{"start":{"row":4504,"column":0},"end":{"row":4505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15198":{"range":{"start":{"row":4509,"column":0},"end":{"row":4510,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15199":{"range":{"start":{"row":4515,"column":0},"end":{"row":4516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15200":{"range":{"start":{"row":4520,"column":0},"end":{"row":4521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15201":{"range":{"start":{"row":4525,"column":0},"end":{"row":4526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15202":{"range":{"start":{"row":4530,"column":0},"end":{"row":4531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15203":{"range":{"start":{"row":4535,"column":0},"end":{"row":4536,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15204":{"range":{"start":{"row":4540,"column":0},"end":{"row":4541,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15205":{"range":{"start":{"row":4545,"column":0},"end":{"row":4546,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15206":{"range":{"start":{"row":4550,"column":0},"end":{"row":4551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15207":{"range":{"start":{"row":4555,"column":0},"end":{"row":4556,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15208":{"range":{"start":{"row":4560,"column":0},"end":{"row":4561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15209":{"range":{"start":{"row":4565,"column":0},"end":{"row":4566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15210":{"range":{"start":{"row":4570,"column":0},"end":{"row":4571,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15211":{"range":{"start":{"row":4575,"column":0},"end":{"row":4576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15212":{"range":{"start":{"row":4580,"column":0},"end":{"row":4581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15213":{"range":{"start":{"row":4585,"column":0},"end":{"row":4586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15214":{"range":{"start":{"row":4597,"column":0},"end":{"row":4598,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15215":{"range":{"start":{"row":4617,"column":0},"end":{"row":4618,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15216":{"range":{"start":{"row":4626,"column":0},"end":{"row":4627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15217":{"range":{"start":{"row":4635,"column":0},"end":{"row":4636,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15218":{"range":{"start":{"row":4642,"column":0},"end":{"row":4643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15219":{"range":{"start":{"row":4714,"column":0},"end":{"row":4715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15220":{"range":{"start":{"row":4716,"column":0},"end":{"row":4717,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15221":{"range":{"start":{"row":4721,"column":0},"end":{"row":4722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15222":{"range":{"start":{"row":4728,"column":0},"end":{"row":4729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15223":{"range":{"start":{"row":4733,"column":0},"end":{"row":4734,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15224":{"range":{"start":{"row":4739,"column":0},"end":{"row":4740,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15225":{"range":{"start":{"row":4745,"column":0},"end":{"row":4746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15226":{"range":{"start":{"row":4756,"column":0},"end":{"row":4757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15227":{"range":{"start":{"row":4767,"column":0},"end":{"row":4768,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15228":{"range":{"start":{"row":4787,"column":0},"end":{"row":4788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15229":{"range":{"start":{"row":4799,"column":0},"end":{"row":4800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15230":{"range":{"start":{"row":4806,"column":0},"end":{"row":4807,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15231":{"range":{"start":{"row":4813,"column":0},"end":{"row":4814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15232":{"range":{"start":{"row":4820,"column":0},"end":{"row":4821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15233":{"range":{"start":{"row":4827,"column":0},"end":{"row":4828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15234":{"range":{"start":{"row":4834,"column":0},"end":{"row":4835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15235":{"range":{"start":{"row":4840,"column":0},"end":{"row":4841,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15236":{"range":{"start":{"row":4846,"column":0},"end":{"row":4847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15237":{"range":{"start":{"row":4852,"column":0},"end":{"row":4853,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15238":{"range":{"start":{"row":4864,"column":0},"end":{"row":4865,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15239":{"range":{"start":{"row":4872,"column":0},"end":{"row":4873,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15240":{"range":{"start":{"row":4880,"column":0},"end":{"row":4881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15241":{"range":{"start":{"row":4888,"column":0},"end":{"row":4889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15242":{"range":{"start":{"row":4896,"column":0},"end":{"row":4897,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15243":{"range":{"start":{"row":4904,"column":0},"end":{"row":4905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15244":{"range":{"start":{"row":4910,"column":0},"end":{"row":4911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15245":{"range":{"start":{"row":4916,"column":0},"end":{"row":4917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15246":{"range":{"start":{"row":4922,"column":0},"end":{"row":4923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15247":{"range":{"start":{"row":4928,"column":0},"end":{"row":4929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15248":{"range":{"start":{"row":4946,"column":0},"end":{"row":4947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15249":{"range":{"start":{"row":4948,"column":0},"end":{"row":4949,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15250":{"range":{"start":{"row":4953,"column":0},"end":{"row":4954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15251":{"range":{"start":{"row":4958,"column":0},"end":{"row":4959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15252":{"range":{"start":{"row":4963,"column":0},"end":{"row":4964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15253":{"range":{"start":{"row":4970,"column":0},"end":{"row":4971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15254":{"range":{"start":{"row":4977,"column":0},"end":{"row":4978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15255":{"range":{"start":{"row":4984,"column":0},"end":{"row":4985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15256":{"range":{"start":{"row":5000,"column":0},"end":{"row":5001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15257":{"range":{"start":{"row":5003,"column":0},"end":{"row":5004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15258":{"range":{"start":{"row":5015,"column":0},"end":{"row":5016,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15259":{"range":{"start":{"row":5026,"column":0},"end":{"row":5027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15260":{"range":{"start":{"row":5037,"column":0},"end":{"row":5038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15261":{"range":{"start":{"row":5045,"column":0},"end":{"row":5046,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15262":{"range":{"start":{"row":5057,"column":0},"end":{"row":5058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15263":{"range":{"start":{"row":5071,"column":0},"end":{"row":5072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15264":{"range":{"start":{"row":5077,"column":0},"end":{"row":5078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15265":{"range":{"start":{"row":5086,"column":0},"end":{"row":5087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15266":{"range":{"start":{"row":5091,"column":0},"end":{"row":5092,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15267":{"range":{"start":{"row":5103,"column":0},"end":{"row":5104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15268":{"range":{"start":{"row":5113,"column":0},"end":{"row":5114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15269":{"range":{"start":{"row":5125,"column":0},"end":{"row":5126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15270":{"range":{"start":{"row":5136,"column":0},"end":{"row":5137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15271":{"range":{"start":{"row":5148,"column":0},"end":{"row":5149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15272":{"range":{"start":{"row":5160,"column":0},"end":{"row":5161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15273":{"range":{"start":{"row":5172,"column":0},"end":{"row":5173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15274":{"range":{"start":{"row":5184,"column":0},"end":{"row":5185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15275":{"range":{"start":{"row":5196,"column":0},"end":{"row":5197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15276":{"range":{"start":{"row":5208,"column":0},"end":{"row":5209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15277":{"range":{"start":{"row":5232,"column":0},"end":{"row":5233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15278":{"range":{"start":{"row":5242,"column":0},"end":{"row":5243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15279":{"range":{"start":{"row":5252,"column":0},"end":{"row":5253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15280":{"range":{"start":{"row":5262,"column":0},"end":{"row":5263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15281":{"range":{"start":{"row":5281,"column":0},"end":{"row":5282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15282":{"range":{"start":{"row":5289,"column":0},"end":{"row":5290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15283":{"range":{"start":{"row":5294,"column":0},"end":{"row":5295,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15284":{"range":{"start":{"row":5306,"column":0},"end":{"row":5307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15285":{"range":{"start":{"row":5316,"column":0},"end":{"row":5317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15286":{"range":{"start":{"row":5327,"column":0},"end":{"row":5328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15287":{"range":{"start":{"row":5339,"column":0},"end":{"row":5340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15288":{"range":{"start":{"row":5351,"column":0},"end":{"row":5352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15289":{"range":{"start":{"row":5362,"column":0},"end":{"row":5363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15290":{"range":{"start":{"row":5374,"column":0},"end":{"row":5375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15291":{"range":{"start":{"row":5386,"column":0},"end":{"row":5387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15292":{"range":{"start":{"row":5398,"column":0},"end":{"row":5399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15293":{"range":{"start":{"row":5410,"column":0},"end":{"row":5411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15294":{"range":{"start":{"row":5429,"column":0},"end":{"row":5430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15295":{"range":{"start":{"row":5454,"column":0},"end":{"row":5455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15296":{"range":{"start":{"row":5460,"column":0},"end":{"row":5461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15297":{"range":{"start":{"row":5468,"column":0},"end":{"row":5469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15298":{"range":{"start":{"row":5473,"column":0},"end":{"row":5474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15299":{"range":{"start":{"row":5485,"column":0},"end":{"row":5486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15300":{"range":{"start":{"row":5495,"column":0},"end":{"row":5496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15301":{"range":{"start":{"row":5507,"column":0},"end":{"row":5508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15302":{"range":{"start":{"row":5518,"column":0},"end":{"row":5519,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15303":{"range":{"start":{"row":5530,"column":0},"end":{"row":5531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15304":{"range":{"start":{"row":5542,"column":0},"end":{"row":5543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15305":{"range":{"start":{"row":5554,"column":0},"end":{"row":5555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15306":{"range":{"start":{"row":5566,"column":0},"end":{"row":5567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15307":{"range":{"start":{"row":5578,"column":0},"end":{"row":5579,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15308":{"range":{"start":{"row":5584,"column":0},"end":{"row":5585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15309":{"range":{"start":{"row":5624,"column":0},"end":{"row":5625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15310":{"range":{"start":{"row":5626,"column":0},"end":{"row":5627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15311":{"range":{"start":{"row":5631,"column":0},"end":{"row":5632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15312":{"range":{"start":{"row":5639,"column":0},"end":{"row":5640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15313":{"range":{"start":{"row":5644,"column":0},"end":{"row":5645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15314":{"range":{"start":{"row":5662,"column":0},"end":{"row":5663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15315":{"range":{"start":{"row":5669,"column":0},"end":{"row":5670,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15316":{"range":{"start":{"row":5676,"column":0},"end":{"row":5677,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15317":{"range":{"start":{"row":5683,"column":0},"end":{"row":5684,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15318":{"range":{"start":{"row":5691,"column":0},"end":{"row":5692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15319":{"range":{"start":{"row":5699,"column":0},"end":{"row":5700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15320":{"range":{"start":{"row":5707,"column":0},"end":{"row":5708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15321":{"range":{"start":{"row":5713,"column":0},"end":{"row":5714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15322":{"range":{"start":{"row":5719,"column":0},"end":{"row":5720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15323":{"range":{"start":{"row":5726,"column":0},"end":{"row":5727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15324":{"range":{"start":{"row":5738,"column":0},"end":{"row":5739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15325":{"range":{"start":{"row":5749,"column":0},"end":{"row":5750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15326":{"range":{"start":{"row":5761,"column":0},"end":{"row":5762,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15327":{"range":{"start":{"row":5772,"column":0},"end":{"row":5773,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15328":{"range":{"start":{"row":5779,"column":0},"end":{"row":5780,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15329":{"range":{"start":{"row":5786,"column":0},"end":{"row":5787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15330":{"range":{"start":{"row":5794,"column":0},"end":{"row":5795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15331":{"range":{"start":{"row":5802,"column":0},"end":{"row":5803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15332":{"range":{"start":{"row":5813,"column":0},"end":{"row":5814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15333":{"range":{"start":{"row":5823,"column":0},"end":{"row":5824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15334":{"range":{"start":{"row":5833,"column":0},"end":{"row":5834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15335":{"range":{"start":{"row":5845,"column":0},"end":{"row":5846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15336":{"range":{"start":{"row":5857,"column":0},"end":{"row":5858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15337":{"range":{"start":{"row":5869,"column":0},"end":{"row":5870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15338":{"range":{"start":{"row":5881,"column":0},"end":{"row":5882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15339":{"range":{"start":{"row":5904,"column":0},"end":{"row":5905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15340":{"range":{"start":{"row":5916,"column":0},"end":{"row":5917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15341":{"range":{"start":{"row":5928,"column":0},"end":{"row":5929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15342":{"range":{"start":{"row":5940,"column":0},"end":{"row":5941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15343":{"range":{"start":{"row":5950,"column":0},"end":{"row":5951,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15344":{"range":{"start":{"row":5958,"column":0},"end":{"row":5959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15345":{"range":{"start":{"row":5966,"column":0},"end":{"row":5967,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15346":{"range":{"start":{"row":5977,"column":0},"end":{"row":5978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15347":{"range":{"start":{"row":5986,"column":0},"end":{"row":5987,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15348":{"range":{"start":{"row":5995,"column":0},"end":{"row":5996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15349":{"range":{"start":{"row":6003,"column":0},"end":{"row":6004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15350":{"range":{"start":{"row":6011,"column":0},"end":{"row":6012,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15351":{"range":{"start":{"row":6018,"column":0},"end":{"row":6019,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15352":{"range":{"start":{"row":6025,"column":0},"end":{"row":6026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15353":{"range":{"start":{"row":6032,"column":0},"end":{"row":6033,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15354":{"range":{"start":{"row":6039,"column":0},"end":{"row":6040,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15355":{"range":{"start":{"row":6054,"column":0},"end":{"row":6055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15356":{"range":{"start":{"row":6066,"column":0},"end":{"row":6067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15357":{"range":{"start":{"row":6088,"column":0},"end":{"row":6089,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15358":{"range":{"start":{"row":6093,"column":0},"end":{"row":6094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15359":{"range":{"start":{"row":6101,"column":0},"end":{"row":6102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15360":{"range":{"start":{"row":6118,"column":0},"end":{"row":6119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15361":{"range":{"start":{"row":6130,"column":0},"end":{"row":6131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15362":{"range":{"start":{"row":6141,"column":0},"end":{"row":6142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15363":{"range":{"start":{"row":6152,"column":0},"end":{"row":6153,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15364":{"range":{"start":{"row":6161,"column":0},"end":{"row":6162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15365":{"range":{"start":{"row":6173,"column":0},"end":{"row":6174,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15366":{"range":{"start":{"row":6185,"column":0},"end":{"row":6186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15367":{"range":{"start":{"row":6203,"column":0},"end":{"row":6204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15368":{"range":{"start":{"row":6205,"column":0},"end":{"row":6206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15369":{"range":{"start":{"row":6210,"column":0},"end":{"row":6211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15370":{"range":{"start":{"row":6217,"column":0},"end":{"row":6218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15371":{"range":{"start":{"row":6224,"column":0},"end":{"row":6225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15372":{"range":{"start":{"row":6231,"column":0},"end":{"row":6232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15373":{"range":{"start":{"row":6238,"column":0},"end":{"row":6239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15374":{"range":{"start":{"row":6243,"column":0},"end":{"row":6244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15375":{"range":{"start":{"row":6255,"column":0},"end":{"row":6256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15376":{"range":{"start":{"row":6267,"column":0},"end":{"row":6268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15377":{"range":{"start":{"row":6279,"column":0},"end":{"row":6280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15378":{"range":{"start":{"row":6290,"column":0},"end":{"row":6291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15379":{"range":{"start":{"row":6301,"column":0},"end":{"row":6302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15380":{"range":{"start":{"row":6313,"column":0},"end":{"row":6314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15381":{"range":{"start":{"row":6325,"column":0},"end":{"row":6326,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15382":{"range":{"start":{"row":6333,"column":0},"end":{"row":6334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15383":{"range":{"start":{"row":6347,"column":0},"end":{"row":6348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15384":{"range":{"start":{"row":6349,"column":0},"end":{"row":6350,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15385":{"range":{"start":{"row":6354,"column":0},"end":{"row":6355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15386":{"range":{"start":{"row":6361,"column":0},"end":{"row":6362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15387":{"range":{"start":{"row":6372,"column":0},"end":{"row":6373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15388":{"range":{"start":{"row":6377,"column":0},"end":{"row":6378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15389":{"range":{"start":{"row":6388,"column":0},"end":{"row":6389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15390":{"range":{"start":{"row":6404,"column":0},"end":{"row":6405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15391":{"range":{"start":{"row":6413,"column":0},"end":{"row":6414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15392":{"range":{"start":{"row":6423,"column":0},"end":{"row":6424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15393":{"range":{"start":{"row":6434,"column":0},"end":{"row":6435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15394":{"range":{"start":{"row":6446,"column":0},"end":{"row":6447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15395":{"range":{"start":{"row":6457,"column":0},"end":{"row":6458,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15396":{"range":{"start":{"row":6465,"column":0},"end":{"row":6466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15397":{"range":{"start":{"row":6479,"column":0},"end":{"row":6480,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15398":{"range":{"start":{"row":6482,"column":0},"end":{"row":6483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15399":{"range":{"start":{"row":6485,"column":0},"end":{"row":6486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15400":{"range":{"start":{"row":6487,"column":0},"end":{"row":6488,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15401":{"range":{"start":{"row":6492,"column":0},"end":{"row":6493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15402":{"range":{"start":{"row":6499,"column":0},"end":{"row":6500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15403":{"range":{"start":{"row":6504,"column":0},"end":{"row":6505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15404":{"range":{"start":{"row":6516,"column":0},"end":{"row":6517,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15405":{"range":{"start":{"row":6527,"column":0},"end":{"row":6528,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15406":{"range":{"start":{"row":6539,"column":0},"end":{"row":6540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15407":{"range":{"start":{"row":6551,"column":0},"end":{"row":6552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15408":{"range":{"start":{"row":6563,"column":0},"end":{"row":6564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15409":{"range":{"start":{"row":6574,"column":0},"end":{"row":6575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15410":{"range":{"start":{"row":6582,"column":0},"end":{"row":6583,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15411":{"range":{"start":{"row":6594,"column":0},"end":{"row":6595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15412":{"range":{"start":{"row":6603,"column":0},"end":{"row":6604,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15413":{"range":{"start":{"row":6610,"column":0},"end":{"row":6611,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15414":{"range":{"start":{"row":6624,"column":0},"end":{"row":6625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15415":{"range":{"start":{"row":6637,"column":0},"end":{"row":6638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15416":{"range":{"start":{"row":6640,"column":0},"end":{"row":6641,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15417":{"range":{"start":{"row":6643,"column":0},"end":{"row":6644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15418":{"range":{"start":{"row":6645,"column":0},"end":{"row":6646,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15419":{"range":{"start":{"row":6650,"column":0},"end":{"row":6651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15420":{"range":{"start":{"row":6657,"column":0},"end":{"row":6658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15421":{"range":{"start":{"row":6662,"column":0},"end":{"row":6663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15422":{"range":{"start":{"row":6673,"column":0},"end":{"row":6674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15423":{"range":{"start":{"row":6685,"column":0},"end":{"row":6686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15424":{"range":{"start":{"row":6696,"column":0},"end":{"row":6697,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15425":{"range":{"start":{"row":6707,"column":0},"end":{"row":6708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15426":{"range":{"start":{"row":6719,"column":0},"end":{"row":6720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15427":{"range":{"start":{"row":6727,"column":0},"end":{"row":6728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15428":{"range":{"start":{"row":6745,"column":0},"end":{"row":6746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15429":{"range":{"start":{"row":6756,"column":0},"end":{"row":6757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15430":{"range":{"start":{"row":6766,"column":0},"end":{"row":6767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15431":{"range":{"start":{"row":6787,"column":0},"end":{"row":6788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15432":{"range":{"start":{"row":6792,"column":0},"end":{"row":6793,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15433":{"range":{"start":{"row":6799,"column":0},"end":{"row":6800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15434":{"range":{"start":{"row":6804,"column":0},"end":{"row":6805,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15435":{"range":{"start":{"row":6836,"column":0},"end":{"row":6837,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15436":{"range":{"start":{"row":6847,"column":0},"end":{"row":6848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15437":{"range":{"start":{"row":6858,"column":0},"end":{"row":6859,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15438":{"range":{"start":{"row":6869,"column":0},"end":{"row":6870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15439":{"range":{"start":{"row":6903,"column":0},"end":{"row":6904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15440":{"range":{"start":{"row":6924,"column":0},"end":{"row":6925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15441":{"range":{"start":{"row":6936,"column":0},"end":{"row":6937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15442":{"range":{"start":{"row":6952,"column":0},"end":{"row":6953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15443":{"range":{"start":{"row":6964,"column":0},"end":{"row":6965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15444":{"range":{"start":{"row":6971,"column":0},"end":{"row":6972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15445":{"range":{"start":{"row":6996,"column":0},"end":{"row":6997,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15446":{"range":{"start":{"row":7002,"column":0},"end":{"row":7003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15447":{"range":{"start":{"row":7150,"column":0},"end":{"row":7151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15448":{"range":{"start":{"row":7664,"column":0},"end":{"row":7665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15449":{"range":{"start":{"row":7666,"column":0},"end":{"row":7667,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15450":{"range":{"start":{"row":7673,"column":0},"end":{"row":7674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15451":{"range":{"start":{"row":7678,"column":0},"end":{"row":7679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15452":{"range":{"start":{"row":7685,"column":0},"end":{"row":7686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15453":{"range":{"start":{"row":7692,"column":0},"end":{"row":7693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15454":{"range":{"start":{"row":7699,"column":0},"end":{"row":7700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15455":{"range":{"start":{"row":7711,"column":0},"end":{"row":7712,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15456":{"range":{"start":{"row":7719,"column":0},"end":{"row":7720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15457":{"range":{"start":{"row":7730,"column":0},"end":{"row":7731,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15458":{"range":{"start":{"row":7741,"column":0},"end":{"row":7742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15459":{"range":{"start":{"row":7753,"column":0},"end":{"row":7754,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15460":{"range":{"start":{"row":7764,"column":0},"end":{"row":7765,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15461":{"range":{"start":{"row":7775,"column":0},"end":{"row":7776,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15462":{"range":{"start":{"row":7787,"column":0},"end":{"row":7788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15463":{"range":{"start":{"row":7799,"column":0},"end":{"row":7800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15464":{"range":{"start":{"row":7811,"column":0},"end":{"row":7812,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15465":{"range":{"start":{"row":7823,"column":0},"end":{"row":7824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15466":{"range":{"start":{"row":7835,"column":0},"end":{"row":7836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15467":{"range":{"start":{"row":7847,"column":0},"end":{"row":7848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15468":{"range":{"start":{"row":7849,"column":0},"end":{"row":7850,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15469":{"range":{"start":{"row":7854,"column":0},"end":{"row":7855,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15470":{"range":{"start":{"row":7861,"column":0},"end":{"row":7862,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15471":{"range":{"start":{"row":7866,"column":0},"end":{"row":7867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15472":{"range":{"start":{"row":7878,"column":0},"end":{"row":7879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15473":{"range":{"start":{"row":7889,"column":0},"end":{"row":7890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15474":{"range":{"start":{"row":7901,"column":0},"end":{"row":7902,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15475":{"range":{"start":{"row":7912,"column":0},"end":{"row":7913,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15476":{"range":{"start":{"row":7924,"column":0},"end":{"row":7925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15477":{"range":{"start":{"row":7935,"column":0},"end":{"row":7936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15478":{"range":{"start":{"row":7946,"column":0},"end":{"row":7947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15479":{"range":{"start":{"row":7958,"column":0},"end":{"row":7959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15480":{"range":{"start":{"row":7970,"column":0},"end":{"row":7971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15481":{"range":{"start":{"row":7982,"column":0},"end":{"row":7983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15482":{"range":{"start":{"row":7994,"column":0},"end":{"row":7995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15483":{"range":{"start":{"row":8006,"column":0},"end":{"row":8007,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15484":{"range":{"start":{"row":8017,"column":0},"end":{"row":8018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15485":{"range":{"start":{"row":8027,"column":0},"end":{"row":8028,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15486":{"range":{"start":{"row":8035,"column":0},"end":{"row":8036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15487":{"range":{"start":{"row":8043,"column":0},"end":{"row":8044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15488":{"range":{"start":{"row":108,"column":0},"end":{"row":108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15489":{"range":{"start":{"row":115,"column":0},"end":{"row":115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15490":{"range":{"start":{"row":120,"column":0},"end":{"row":120,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15491":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15492":{"range":{"start":{"row":128,"column":0},"end":{"row":128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15493":{"range":{"start":{"row":133,"column":0},"end":{"row":133,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15494":{"range":{"start":{"row":138,"column":0},"end":{"row":138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15495":{"range":{"start":{"row":144,"column":0},"end":{"row":144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15496":{"range":{"start":{"row":156,"column":0},"end":{"row":156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15497":{"range":{"start":{"row":168,"column":0},"end":{"row":168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15498":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15499":{"range":{"start":{"row":202,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15500":{"range":{"start":{"row":209,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15501":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15502":{"range":{"start":{"row":235,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15503":{"range":{"start":{"row":241,"column":0},"end":{"row":241,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15504":{"range":{"start":{"row":247,"column":0},"end":{"row":247,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15505":{"range":{"start":{"row":253,"column":0},"end":{"row":253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15506":{"range":{"start":{"row":259,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15507":{"range":{"start":{"row":264,"column":0},"end":{"row":264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15508":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15509":{"range":{"start":{"row":274,"column":0},"end":{"row":274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15510":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15511":{"range":{"start":{"row":284,"column":0},"end":{"row":284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15512":{"range":{"start":{"row":289,"column":0},"end":{"row":289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15513":{"range":{"start":{"row":301,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15514":{"range":{"start":{"row":308,"column":0},"end":{"row":308,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15515":{"range":{"start":{"row":315,"column":0},"end":{"row":315,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15516":{"range":{"start":{"row":322,"column":0},"end":{"row":322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15517":{"range":{"start":{"row":329,"column":0},"end":{"row":329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15518":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15519":{"range":{"start":{"row":352,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15520":{"range":{"start":{"row":359,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15521":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15522":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15523":{"range":{"start":{"row":379,"column":0},"end":{"row":379,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15524":{"range":{"start":{"row":386,"column":0},"end":{"row":386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15525":{"range":{"start":{"row":393,"column":0},"end":{"row":393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15526":{"range":{"start":{"row":399,"column":0},"end":{"row":399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15527":{"range":{"start":{"row":406,"column":0},"end":{"row":406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15528":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15529":{"range":{"start":{"row":420,"column":0},"end":{"row":420,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15530":{"range":{"start":{"row":427,"column":0},"end":{"row":427,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15531":{"range":{"start":{"row":434,"column":0},"end":{"row":434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15532":{"range":{"start":{"row":441,"column":0},"end":{"row":441,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15533":{"range":{"start":{"row":448,"column":0},"end":{"row":448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15534":{"range":{"start":{"row":471,"column":0},"end":{"row":471,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15535":{"range":{"start":{"row":481,"column":0},"end":{"row":481,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15536":{"range":{"start":{"row":503,"column":0},"end":{"row":503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15537":{"range":{"start":{"row":514,"column":0},"end":{"row":514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15538":{"range":{"start":{"row":525,"column":0},"end":{"row":525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15539":{"range":{"start":{"row":544,"column":0},"end":{"row":544,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15540":{"range":{"start":{"row":551,"column":0},"end":{"row":551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15541":{"range":{"start":{"row":558,"column":0},"end":{"row":558,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15542":{"range":{"start":{"row":565,"column":0},"end":{"row":565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15543":{"range":{"start":{"row":573,"column":0},"end":{"row":573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15544":{"range":{"start":{"row":581,"column":0},"end":{"row":581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15545":{"range":{"start":{"row":592,"column":0},"end":{"row":592,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15546":{"range":{"start":{"row":631,"column":0},"end":{"row":631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15547":{"range":{"start":{"row":642,"column":0},"end":{"row":642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15548":{"range":{"start":{"row":653,"column":0},"end":{"row":653,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15549":{"range":{"start":{"row":690,"column":0},"end":{"row":690,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15550":{"range":{"start":{"row":700,"column":0},"end":{"row":700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15551":{"range":{"start":{"row":710,"column":0},"end":{"row":710,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15552":{"range":{"start":{"row":720,"column":0},"end":{"row":720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15553":{"range":{"start":{"row":736,"column":0},"end":{"row":736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15554":{"range":{"start":{"row":750,"column":0},"end":{"row":750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15555":{"range":{"start":{"row":771,"column":0},"end":{"row":771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15556":{"range":{"start":{"row":783,"column":0},"end":{"row":783,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15557":{"range":{"start":{"row":794,"column":0},"end":{"row":794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15558":{"range":{"start":{"row":819,"column":0},"end":{"row":819,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15559":{"range":{"start":{"row":831,"column":0},"end":{"row":831,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15560":{"range":{"start":{"row":843,"column":0},"end":{"row":843,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15561":{"range":{"start":{"row":866,"column":0},"end":{"row":866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15562":{"range":{"start":{"row":878,"column":0},"end":{"row":878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15563":{"range":{"start":{"row":889,"column":0},"end":{"row":889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15564":{"range":{"start":{"row":900,"column":0},"end":{"row":900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15565":{"range":{"start":{"row":911,"column":0},"end":{"row":911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15566":{"range":{"start":{"row":922,"column":0},"end":{"row":922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15567":{"range":{"start":{"row":1226,"column":0},"end":{"row":1226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15568":{"range":{"start":{"row":1234,"column":0},"end":{"row":1234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15569":{"range":{"start":{"row":1309,"column":0},"end":{"row":1309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15570":{"range":{"start":{"row":1341,"column":0},"end":{"row":1341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15571":{"range":{"start":{"row":1348,"column":0},"end":{"row":1348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15572":{"range":{"start":{"row":1355,"column":0},"end":{"row":1355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15573":{"range":{"start":{"row":1362,"column":0},"end":{"row":1362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15574":{"range":{"start":{"row":1369,"column":0},"end":{"row":1369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15575":{"range":{"start":{"row":1376,"column":0},"end":{"row":1376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15576":{"range":{"start":{"row":1383,"column":0},"end":{"row":1383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15577":{"range":{"start":{"row":1390,"column":0},"end":{"row":1390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15578":{"range":{"start":{"row":1397,"column":0},"end":{"row":1397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15579":{"range":{"start":{"row":1404,"column":0},"end":{"row":1404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15580":{"range":{"start":{"row":1411,"column":0},"end":{"row":1411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15581":{"range":{"start":{"row":1418,"column":0},"end":{"row":1418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15582":{"range":{"start":{"row":1425,"column":0},"end":{"row":1425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15583":{"range":{"start":{"row":1437,"column":0},"end":{"row":1437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15584":{"range":{"start":{"row":1443,"column":0},"end":{"row":1443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15585":{"range":{"start":{"row":1455,"column":0},"end":{"row":1455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15586":{"range":{"start":{"row":1466,"column":0},"end":{"row":1466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15587":{"range":{"start":{"row":1474,"column":0},"end":{"row":1474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15588":{"range":{"start":{"row":1482,"column":0},"end":{"row":1482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15589":{"range":{"start":{"row":1490,"column":0},"end":{"row":1490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15590":{"range":{"start":{"row":1496,"column":0},"end":{"row":1496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15591":{"range":{"start":{"row":1502,"column":0},"end":{"row":1502,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15592":{"range":{"start":{"row":1508,"column":0},"end":{"row":1508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15593":{"range":{"start":{"row":1514,"column":0},"end":{"row":1514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15594":{"range":{"start":{"row":1520,"column":0},"end":{"row":1520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15595":{"range":{"start":{"row":1526,"column":0},"end":{"row":1526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15596":{"range":{"start":{"row":1533,"column":0},"end":{"row":1533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15597":{"range":{"start":{"row":1542,"column":0},"end":{"row":1542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15598":{"range":{"start":{"row":1551,"column":0},"end":{"row":1551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15599":{"range":{"start":{"row":1560,"column":0},"end":{"row":1560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15600":{"range":{"start":{"row":1567,"column":0},"end":{"row":1567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15601":{"range":{"start":{"row":1581,"column":0},"end":{"row":1581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15602":{"range":{"start":{"row":1588,"column":0},"end":{"row":1588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15603":{"range":{"start":{"row":1595,"column":0},"end":{"row":1595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15604":{"range":{"start":{"row":1602,"column":0},"end":{"row":1602,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15605":{"range":{"start":{"row":1609,"column":0},"end":{"row":1609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15606":{"range":{"start":{"row":1616,"column":0},"end":{"row":1616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15607":{"range":{"start":{"row":1623,"column":0},"end":{"row":1623,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15608":{"range":{"start":{"row":1630,"column":0},"end":{"row":1630,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15609":{"range":{"start":{"row":1637,"column":0},"end":{"row":1637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15610":{"range":{"start":{"row":1644,"column":0},"end":{"row":1644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15611":{"range":{"start":{"row":1651,"column":0},"end":{"row":1651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15612":{"range":{"start":{"row":1658,"column":0},"end":{"row":1658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15613":{"range":{"start":{"row":1665,"column":0},"end":{"row":1665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15614":{"range":{"start":{"row":1672,"column":0},"end":{"row":1672,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15615":{"range":{"start":{"row":1679,"column":0},"end":{"row":1679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15616":{"range":{"start":{"row":1686,"column":0},"end":{"row":1686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15617":{"range":{"start":{"row":1693,"column":0},"end":{"row":1693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15618":{"range":{"start":{"row":1700,"column":0},"end":{"row":1700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15619":{"range":{"start":{"row":1707,"column":0},"end":{"row":1707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15620":{"range":{"start":{"row":1714,"column":0},"end":{"row":1714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15621":{"range":{"start":{"row":1721,"column":0},"end":{"row":1721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15622":{"range":{"start":{"row":1728,"column":0},"end":{"row":1728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15623":{"range":{"start":{"row":1735,"column":0},"end":{"row":1735,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15624":{"range":{"start":{"row":1742,"column":0},"end":{"row":1742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15625":{"range":{"start":{"row":1749,"column":0},"end":{"row":1749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15626":{"range":{"start":{"row":1756,"column":0},"end":{"row":1756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15627":{"range":{"start":{"row":1763,"column":0},"end":{"row":1763,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15628":{"range":{"start":{"row":1770,"column":0},"end":{"row":1770,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15629":{"range":{"start":{"row":1777,"column":0},"end":{"row":1777,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15630":{"range":{"start":{"row":1784,"column":0},"end":{"row":1784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15631":{"range":{"start":{"row":1791,"column":0},"end":{"row":1791,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15632":{"range":{"start":{"row":1797,"column":0},"end":{"row":1797,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15633":{"range":{"start":{"row":1803,"column":0},"end":{"row":1803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15634":{"range":{"start":{"row":1809,"column":0},"end":{"row":1809,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15635":{"range":{"start":{"row":1815,"column":0},"end":{"row":1815,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15636":{"range":{"start":{"row":1821,"column":0},"end":{"row":1821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15637":{"range":{"start":{"row":1827,"column":0},"end":{"row":1827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15638":{"range":{"start":{"row":1833,"column":0},"end":{"row":1833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15639":{"range":{"start":{"row":1839,"column":0},"end":{"row":1839,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15640":{"range":{"start":{"row":1845,"column":0},"end":{"row":1845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15641":{"range":{"start":{"row":1851,"column":0},"end":{"row":1851,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15642":{"range":{"start":{"row":1857,"column":0},"end":{"row":1857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15643":{"range":{"start":{"row":1863,"column":0},"end":{"row":1863,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15644":{"range":{"start":{"row":1869,"column":0},"end":{"row":1869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15645":{"range":{"start":{"row":1875,"column":0},"end":{"row":1875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15646":{"range":{"start":{"row":1881,"column":0},"end":{"row":1881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15647":{"range":{"start":{"row":1887,"column":0},"end":{"row":1887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15648":{"range":{"start":{"row":1893,"column":0},"end":{"row":1893,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15649":{"range":{"start":{"row":1899,"column":0},"end":{"row":1899,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15650":{"range":{"start":{"row":1905,"column":0},"end":{"row":1905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15651":{"range":{"start":{"row":1911,"column":0},"end":{"row":1911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15652":{"range":{"start":{"row":1917,"column":0},"end":{"row":1917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15653":{"range":{"start":{"row":1923,"column":0},"end":{"row":1923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15654":{"range":{"start":{"row":1929,"column":0},"end":{"row":1929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15655":{"range":{"start":{"row":1935,"column":0},"end":{"row":1935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15656":{"range":{"start":{"row":1941,"column":0},"end":{"row":1941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15657":{"range":{"start":{"row":1947,"column":0},"end":{"row":1947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15658":{"range":{"start":{"row":1953,"column":0},"end":{"row":1953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15659":{"range":{"start":{"row":1959,"column":0},"end":{"row":1959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15660":{"range":{"start":{"row":1965,"column":0},"end":{"row":1965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15661":{"range":{"start":{"row":1971,"column":0},"end":{"row":1971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15662":{"range":{"start":{"row":1977,"column":0},"end":{"row":1977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15663":{"range":{"start":{"row":1983,"column":0},"end":{"row":1983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15664":{"range":{"start":{"row":1989,"column":0},"end":{"row":1989,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15665":{"range":{"start":{"row":1995,"column":0},"end":{"row":1995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15666":{"range":{"start":{"row":2001,"column":0},"end":{"row":2001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15667":{"range":{"start":{"row":2036,"column":0},"end":{"row":2036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15668":{"range":{"start":{"row":2042,"column":0},"end":{"row":2042,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15669":{"range":{"start":{"row":2048,"column":0},"end":{"row":2048,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15670":{"range":{"start":{"row":2054,"column":0},"end":{"row":2054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15671":{"range":{"start":{"row":2062,"column":0},"end":{"row":2062,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15672":{"range":{"start":{"row":2070,"column":0},"end":{"row":2070,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15673":{"range":{"start":{"row":2078,"column":0},"end":{"row":2078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15674":{"range":{"start":{"row":2086,"column":0},"end":{"row":2086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15675":{"range":{"start":{"row":2094,"column":0},"end":{"row":2094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15676":{"range":{"start":{"row":2102,"column":0},"end":{"row":2102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15677":{"range":{"start":{"row":2110,"column":0},"end":{"row":2110,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15678":{"range":{"start":{"row":2118,"column":0},"end":{"row":2118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15679":{"range":{"start":{"row":2138,"column":0},"end":{"row":2138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15680":{"range":{"start":{"row":2144,"column":0},"end":{"row":2144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15681":{"range":{"start":{"row":2150,"column":0},"end":{"row":2150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15682":{"range":{"start":{"row":2156,"column":0},"end":{"row":2156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15683":{"range":{"start":{"row":2162,"column":0},"end":{"row":2162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15684":{"range":{"start":{"row":2168,"column":0},"end":{"row":2168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15685":{"range":{"start":{"row":2175,"column":0},"end":{"row":2175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15686":{"range":{"start":{"row":2182,"column":0},"end":{"row":2182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15687":{"range":{"start":{"row":2189,"column":0},"end":{"row":2189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15688":{"range":{"start":{"row":2196,"column":0},"end":{"row":2196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15689":{"range":{"start":{"row":2203,"column":0},"end":{"row":2203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15690":{"range":{"start":{"row":2218,"column":0},"end":{"row":2218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15691":{"range":{"start":{"row":2224,"column":0},"end":{"row":2224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15692":{"range":{"start":{"row":2231,"column":0},"end":{"row":2231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15693":{"range":{"start":{"row":2237,"column":0},"end":{"row":2237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15694":{"range":{"start":{"row":2243,"column":0},"end":{"row":2243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15695":{"range":{"start":{"row":2249,"column":0},"end":{"row":2249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15696":{"range":{"start":{"row":2256,"column":0},"end":{"row":2256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15697":{"range":{"start":{"row":2264,"column":0},"end":{"row":2264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15698":{"range":{"start":{"row":2271,"column":0},"end":{"row":2271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15699":{"range":{"start":{"row":2277,"column":0},"end":{"row":2277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15700":{"range":{"start":{"row":2283,"column":0},"end":{"row":2283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15701":{"range":{"start":{"row":2289,"column":0},"end":{"row":2289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15702":{"range":{"start":{"row":2297,"column":0},"end":{"row":2297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15703":{"range":{"start":{"row":2304,"column":0},"end":{"row":2304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15704":{"range":{"start":{"row":2334,"column":0},"end":{"row":2334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15705":{"range":{"start":{"row":2340,"column":0},"end":{"row":2340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15706":{"range":{"start":{"row":2346,"column":0},"end":{"row":2346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15707":{"range":{"start":{"row":2352,"column":0},"end":{"row":2352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15708":{"range":{"start":{"row":2358,"column":0},"end":{"row":2358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15709":{"range":{"start":{"row":2364,"column":0},"end":{"row":2364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15710":{"range":{"start":{"row":2375,"column":0},"end":{"row":2375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15711":{"range":{"start":{"row":2381,"column":0},"end":{"row":2381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15712":{"range":{"start":{"row":2387,"column":0},"end":{"row":2387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15713":{"range":{"start":{"row":2393,"column":0},"end":{"row":2393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15714":{"range":{"start":{"row":2404,"column":0},"end":{"row":2404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15715":{"range":{"start":{"row":2431,"column":0},"end":{"row":2431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15716":{"range":{"start":{"row":2447,"column":0},"end":{"row":2447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15717":{"range":{"start":{"row":2469,"column":0},"end":{"row":2469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15718":{"range":{"start":{"row":2495,"column":0},"end":{"row":2495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15719":{"range":{"start":{"row":2567,"column":0},"end":{"row":2567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15720":{"range":{"start":{"row":2575,"column":0},"end":{"row":2575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15721":{"range":{"start":{"row":2580,"column":0},"end":{"row":2580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15722":{"range":{"start":{"row":2588,"column":0},"end":{"row":2588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15723":{"range":{"start":{"row":2607,"column":0},"end":{"row":2607,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15724":{"range":{"start":{"row":2616,"column":0},"end":{"row":2616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15725":{"range":{"start":{"row":2624,"column":0},"end":{"row":2624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15726":{"range":{"start":{"row":2634,"column":0},"end":{"row":2634,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15727":{"range":{"start":{"row":2875,"column":0},"end":{"row":2875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15728":{"range":{"start":{"row":2880,"column":0},"end":{"row":2880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15729":{"range":{"start":{"row":2887,"column":0},"end":{"row":2887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15730":{"range":{"start":{"row":2894,"column":0},"end":{"row":2894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15731":{"range":{"start":{"row":2917,"column":0},"end":{"row":2917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15732":{"range":{"start":{"row":2929,"column":0},"end":{"row":2929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15733":{"range":{"start":{"row":2937,"column":0},"end":{"row":2937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15734":{"range":{"start":{"row":2992,"column":0},"end":{"row":2992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15735":{"range":{"start":{"row":3009,"column":0},"end":{"row":3009,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15736":{"range":{"start":{"row":3063,"column":0},"end":{"row":3063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15737":{"range":{"start":{"row":3067,"column":0},"end":{"row":3067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15738":{"range":{"start":{"row":3136,"column":0},"end":{"row":3136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15739":{"range":{"start":{"row":3143,"column":0},"end":{"row":3143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15740":{"range":{"start":{"row":3148,"column":0},"end":{"row":3148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15741":{"range":{"start":{"row":3155,"column":0},"end":{"row":3155,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15742":{"range":{"start":{"row":3162,"column":0},"end":{"row":3162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15743":{"range":{"start":{"row":3169,"column":0},"end":{"row":3169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15744":{"range":{"start":{"row":3176,"column":0},"end":{"row":3176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15745":{"range":{"start":{"row":3183,"column":0},"end":{"row":3183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15746":{"range":{"start":{"row":3197,"column":0},"end":{"row":3197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15747":{"range":{"start":{"row":3210,"column":0},"end":{"row":3210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15748":{"range":{"start":{"row":3216,"column":0},"end":{"row":3216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15749":{"range":{"start":{"row":3222,"column":0},"end":{"row":3222,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15750":{"range":{"start":{"row":3235,"column":0},"end":{"row":3235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15751":{"range":{"start":{"row":3242,"column":0},"end":{"row":3242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15752":{"range":{"start":{"row":3248,"column":0},"end":{"row":3248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15753":{"range":{"start":{"row":3259,"column":0},"end":{"row":3259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15754":{"range":{"start":{"row":3271,"column":0},"end":{"row":3271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15755":{"range":{"start":{"row":3282,"column":0},"end":{"row":3282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15756":{"range":{"start":{"row":3300,"column":0},"end":{"row":3300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15757":{"range":{"start":{"row":3311,"column":0},"end":{"row":3311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15758":{"range":{"start":{"row":3322,"column":0},"end":{"row":3322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15759":{"range":{"start":{"row":3331,"column":0},"end":{"row":3331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15760":{"range":{"start":{"row":3348,"column":0},"end":{"row":3348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15761":{"range":{"start":{"row":3356,"column":0},"end":{"row":3356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15762":{"range":{"start":{"row":3364,"column":0},"end":{"row":3364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15763":{"range":{"start":{"row":3372,"column":0},"end":{"row":3372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15764":{"range":{"start":{"row":3380,"column":0},"end":{"row":3380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15765":{"range":{"start":{"row":3388,"column":0},"end":{"row":3388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15766":{"range":{"start":{"row":3396,"column":0},"end":{"row":3396,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15767":{"range":{"start":{"row":3403,"column":0},"end":{"row":3403,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15768":{"range":{"start":{"row":3411,"column":0},"end":{"row":3411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15769":{"range":{"start":{"row":3418,"column":0},"end":{"row":3418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15770":{"range":{"start":{"row":3425,"column":0},"end":{"row":3425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15771":{"range":{"start":{"row":3432,"column":0},"end":{"row":3432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15772":{"range":{"start":{"row":3439,"column":0},"end":{"row":3439,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15773":{"range":{"start":{"row":3446,"column":0},"end":{"row":3446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15774":{"range":{"start":{"row":3453,"column":0},"end":{"row":3453,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15775":{"range":{"start":{"row":3466,"column":0},"end":{"row":3466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15776":{"range":{"start":{"row":3478,"column":0},"end":{"row":3478,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15777":{"range":{"start":{"row":3489,"column":0},"end":{"row":3489,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15778":{"range":{"start":{"row":3500,"column":0},"end":{"row":3500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15779":{"range":{"start":{"row":3511,"column":0},"end":{"row":3511,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15780":{"range":{"start":{"row":3522,"column":0},"end":{"row":3522,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15781":{"range":{"start":{"row":3532,"column":0},"end":{"row":3532,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15782":{"range":{"start":{"row":3573,"column":0},"end":{"row":3573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15783":{"range":{"start":{"row":3585,"column":0},"end":{"row":3585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15784":{"range":{"start":{"row":3608,"column":0},"end":{"row":3608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15785":{"range":{"start":{"row":3620,"column":0},"end":{"row":3620,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15786":{"range":{"start":{"row":3632,"column":0},"end":{"row":3632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15787":{"range":{"start":{"row":3644,"column":0},"end":{"row":3644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15788":{"range":{"start":{"row":3957,"column":0},"end":{"row":3957,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15789":{"range":{"start":{"row":3965,"column":0},"end":{"row":3965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15790":{"range":{"start":{"row":3973,"column":0},"end":{"row":3973,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15791":{"range":{"start":{"row":3984,"column":0},"end":{"row":3984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15792":{"range":{"start":{"row":3992,"column":0},"end":{"row":3992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15793":{"range":{"start":{"row":4000,"column":0},"end":{"row":4000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15794":{"range":{"start":{"row":4030,"column":0},"end":{"row":4030,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15795":{"range":{"start":{"row":4037,"column":0},"end":{"row":4037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15796":{"range":{"start":{"row":4044,"column":0},"end":{"row":4044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15797":{"range":{"start":{"row":4051,"column":0},"end":{"row":4051,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15798":{"range":{"start":{"row":4058,"column":0},"end":{"row":4058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15799":{"range":{"start":{"row":4065,"column":0},"end":{"row":4065,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15800":{"range":{"start":{"row":4072,"column":0},"end":{"row":4072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15801":{"range":{"start":{"row":4079,"column":0},"end":{"row":4079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15802":{"range":{"start":{"row":4086,"column":0},"end":{"row":4086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15803":{"range":{"start":{"row":4093,"column":0},"end":{"row":4093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15804":{"range":{"start":{"row":4100,"column":0},"end":{"row":4100,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15805":{"range":{"start":{"row":4107,"column":0},"end":{"row":4107,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15806":{"range":{"start":{"row":4114,"column":0},"end":{"row":4114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15807":{"range":{"start":{"row":4121,"column":0},"end":{"row":4121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15808":{"range":{"start":{"row":4128,"column":0},"end":{"row":4128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15809":{"range":{"start":{"row":4135,"column":0},"end":{"row":4135,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15810":{"range":{"start":{"row":4142,"column":0},"end":{"row":4142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15811":{"range":{"start":{"row":4149,"column":0},"end":{"row":4149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15812":{"range":{"start":{"row":4156,"column":0},"end":{"row":4156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15813":{"range":{"start":{"row":4163,"column":0},"end":{"row":4163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15814":{"range":{"start":{"row":4170,"column":0},"end":{"row":4170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15815":{"range":{"start":{"row":4177,"column":0},"end":{"row":4177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15816":{"range":{"start":{"row":4184,"column":0},"end":{"row":4184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15817":{"range":{"start":{"row":4191,"column":0},"end":{"row":4191,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15818":{"range":{"start":{"row":4198,"column":0},"end":{"row":4198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15819":{"range":{"start":{"row":4205,"column":0},"end":{"row":4205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15820":{"range":{"start":{"row":4212,"column":0},"end":{"row":4212,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15821":{"range":{"start":{"row":4219,"column":0},"end":{"row":4219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15822":{"range":{"start":{"row":4226,"column":0},"end":{"row":4226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15823":{"range":{"start":{"row":4232,"column":0},"end":{"row":4232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15824":{"range":{"start":{"row":4238,"column":0},"end":{"row":4238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15825":{"range":{"start":{"row":4244,"column":0},"end":{"row":4244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15826":{"range":{"start":{"row":4250,"column":0},"end":{"row":4250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15827":{"range":{"start":{"row":4256,"column":0},"end":{"row":4256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15828":{"range":{"start":{"row":4262,"column":0},"end":{"row":4262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15829":{"range":{"start":{"row":4268,"column":0},"end":{"row":4268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15830":{"range":{"start":{"row":4274,"column":0},"end":{"row":4274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15831":{"range":{"start":{"row":4280,"column":0},"end":{"row":4280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15832":{"range":{"start":{"row":4286,"column":0},"end":{"row":4286,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15833":{"range":{"start":{"row":4292,"column":0},"end":{"row":4292,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15834":{"range":{"start":{"row":4298,"column":0},"end":{"row":4298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15835":{"range":{"start":{"row":4304,"column":0},"end":{"row":4304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15836":{"range":{"start":{"row":4310,"column":0},"end":{"row":4310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15837":{"range":{"start":{"row":4316,"column":0},"end":{"row":4316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15838":{"range":{"start":{"row":4322,"column":0},"end":{"row":4322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15839":{"range":{"start":{"row":4328,"column":0},"end":{"row":4328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15840":{"range":{"start":{"row":4334,"column":0},"end":{"row":4334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15841":{"range":{"start":{"row":4340,"column":0},"end":{"row":4340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15842":{"range":{"start":{"row":4346,"column":0},"end":{"row":4346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15843":{"range":{"start":{"row":4352,"column":0},"end":{"row":4352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15844":{"range":{"start":{"row":4358,"column":0},"end":{"row":4358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15845":{"range":{"start":{"row":4364,"column":0},"end":{"row":4364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15846":{"range":{"start":{"row":4370,"column":0},"end":{"row":4370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15847":{"range":{"start":{"row":4376,"column":0},"end":{"row":4376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15848":{"range":{"start":{"row":4382,"column":0},"end":{"row":4382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15849":{"range":{"start":{"row":4388,"column":0},"end":{"row":4388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15850":{"range":{"start":{"row":4394,"column":0},"end":{"row":4394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15851":{"range":{"start":{"row":4400,"column":0},"end":{"row":4400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15852":{"range":{"start":{"row":4406,"column":0},"end":{"row":4406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15853":{"range":{"start":{"row":4412,"column":0},"end":{"row":4412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15854":{"range":{"start":{"row":4418,"column":0},"end":{"row":4418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15855":{"range":{"start":{"row":4424,"column":0},"end":{"row":4424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15856":{"range":{"start":{"row":4430,"column":0},"end":{"row":4430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15857":{"range":{"start":{"row":4436,"column":0},"end":{"row":4436,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15858":{"range":{"start":{"row":4442,"column":0},"end":{"row":4442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15859":{"range":{"start":{"row":4448,"column":0},"end":{"row":4448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15860":{"range":{"start":{"row":4454,"column":0},"end":{"row":4454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15861":{"range":{"start":{"row":4460,"column":0},"end":{"row":4460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15862":{"range":{"start":{"row":4468,"column":0},"end":{"row":4468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15863":{"range":{"start":{"row":4476,"column":0},"end":{"row":4476,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15864":{"range":{"start":{"row":4492,"column":0},"end":{"row":4492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15865":{"range":{"start":{"row":4498,"column":0},"end":{"row":4498,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15866":{"range":{"start":{"row":4504,"column":0},"end":{"row":4504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15867":{"range":{"start":{"row":4509,"column":0},"end":{"row":4509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15868":{"range":{"start":{"row":4515,"column":0},"end":{"row":4515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15869":{"range":{"start":{"row":4520,"column":0},"end":{"row":4520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15870":{"range":{"start":{"row":4525,"column":0},"end":{"row":4525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15871":{"range":{"start":{"row":4530,"column":0},"end":{"row":4530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15872":{"range":{"start":{"row":4535,"column":0},"end":{"row":4535,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15873":{"range":{"start":{"row":4540,"column":0},"end":{"row":4540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15874":{"range":{"start":{"row":4545,"column":0},"end":{"row":4545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15875":{"range":{"start":{"row":4550,"column":0},"end":{"row":4550,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15876":{"range":{"start":{"row":4555,"column":0},"end":{"row":4555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15877":{"range":{"start":{"row":4560,"column":0},"end":{"row":4560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15878":{"range":{"start":{"row":4565,"column":0},"end":{"row":4565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15879":{"range":{"start":{"row":4570,"column":0},"end":{"row":4570,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15880":{"range":{"start":{"row":4575,"column":0},"end":{"row":4575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15881":{"range":{"start":{"row":4580,"column":0},"end":{"row":4580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15882":{"range":{"start":{"row":4585,"column":0},"end":{"row":4585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15883":{"range":{"start":{"row":4597,"column":0},"end":{"row":4597,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15884":{"range":{"start":{"row":4617,"column":0},"end":{"row":4617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15885":{"range":{"start":{"row":4626,"column":0},"end":{"row":4626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15886":{"range":{"start":{"row":4635,"column":0},"end":{"row":4635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15887":{"range":{"start":{"row":4642,"column":0},"end":{"row":4642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15888":{"range":{"start":{"row":4714,"column":0},"end":{"row":4714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15889":{"range":{"start":{"row":4716,"column":0},"end":{"row":4716,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15890":{"range":{"start":{"row":4721,"column":0},"end":{"row":4721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15891":{"range":{"start":{"row":4728,"column":0},"end":{"row":4728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15892":{"range":{"start":{"row":4733,"column":0},"end":{"row":4733,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15893":{"range":{"start":{"row":4739,"column":0},"end":{"row":4739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15894":{"range":{"start":{"row":4745,"column":0},"end":{"row":4745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15895":{"range":{"start":{"row":4756,"column":0},"end":{"row":4756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15896":{"range":{"start":{"row":4767,"column":0},"end":{"row":4767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15897":{"range":{"start":{"row":4787,"column":0},"end":{"row":4787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15898":{"range":{"start":{"row":4799,"column":0},"end":{"row":4799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15899":{"range":{"start":{"row":4806,"column":0},"end":{"row":4806,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15900":{"range":{"start":{"row":4813,"column":0},"end":{"row":4813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15901":{"range":{"start":{"row":4820,"column":0},"end":{"row":4820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15902":{"range":{"start":{"row":4827,"column":0},"end":{"row":4827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15903":{"range":{"start":{"row":4834,"column":0},"end":{"row":4834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15904":{"range":{"start":{"row":4840,"column":0},"end":{"row":4840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15905":{"range":{"start":{"row":4846,"column":0},"end":{"row":4846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15906":{"range":{"start":{"row":4852,"column":0},"end":{"row":4852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15907":{"range":{"start":{"row":4864,"column":0},"end":{"row":4864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15908":{"range":{"start":{"row":4872,"column":0},"end":{"row":4872,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15909":{"range":{"start":{"row":4880,"column":0},"end":{"row":4880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15910":{"range":{"start":{"row":4888,"column":0},"end":{"row":4888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15911":{"range":{"start":{"row":4896,"column":0},"end":{"row":4896,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15912":{"range":{"start":{"row":4904,"column":0},"end":{"row":4904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15913":{"range":{"start":{"row":4910,"column":0},"end":{"row":4910,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15914":{"range":{"start":{"row":4916,"column":0},"end":{"row":4916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15915":{"range":{"start":{"row":4922,"column":0},"end":{"row":4922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15916":{"range":{"start":{"row":4928,"column":0},"end":{"row":4928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15917":{"range":{"start":{"row":4946,"column":0},"end":{"row":4946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15918":{"range":{"start":{"row":4948,"column":0},"end":{"row":4948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15919":{"range":{"start":{"row":4953,"column":0},"end":{"row":4953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15920":{"range":{"start":{"row":4958,"column":0},"end":{"row":4958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15921":{"range":{"start":{"row":4963,"column":0},"end":{"row":4963,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15922":{"range":{"start":{"row":4970,"column":0},"end":{"row":4970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15923":{"range":{"start":{"row":4977,"column":0},"end":{"row":4977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15924":{"range":{"start":{"row":4984,"column":0},"end":{"row":4984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15925":{"range":{"start":{"row":5000,"column":0},"end":{"row":5000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15926":{"range":{"start":{"row":5003,"column":0},"end":{"row":5003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15927":{"range":{"start":{"row":5015,"column":0},"end":{"row":5015,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15928":{"range":{"start":{"row":5026,"column":0},"end":{"row":5026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15929":{"range":{"start":{"row":5037,"column":0},"end":{"row":5037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15930":{"range":{"start":{"row":5045,"column":0},"end":{"row":5045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15931":{"range":{"start":{"row":5057,"column":0},"end":{"row":5057,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15932":{"range":{"start":{"row":5071,"column":0},"end":{"row":5071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15933":{"range":{"start":{"row":5077,"column":0},"end":{"row":5077,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15934":{"range":{"start":{"row":5086,"column":0},"end":{"row":5086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15935":{"range":{"start":{"row":5091,"column":0},"end":{"row":5091,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15936":{"range":{"start":{"row":5103,"column":0},"end":{"row":5103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15937":{"range":{"start":{"row":5113,"column":0},"end":{"row":5113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15938":{"range":{"start":{"row":5125,"column":0},"end":{"row":5125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15939":{"range":{"start":{"row":5136,"column":0},"end":{"row":5136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15940":{"range":{"start":{"row":5148,"column":0},"end":{"row":5148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15941":{"range":{"start":{"row":5160,"column":0},"end":{"row":5160,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15942":{"range":{"start":{"row":5172,"column":0},"end":{"row":5172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15943":{"range":{"start":{"row":5184,"column":0},"end":{"row":5184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15944":{"range":{"start":{"row":5196,"column":0},"end":{"row":5196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15945":{"range":{"start":{"row":5208,"column":0},"end":{"row":5208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15946":{"range":{"start":{"row":5232,"column":0},"end":{"row":5232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15947":{"range":{"start":{"row":5242,"column":0},"end":{"row":5242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15948":{"range":{"start":{"row":5252,"column":0},"end":{"row":5252,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15949":{"range":{"start":{"row":5262,"column":0},"end":{"row":5262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15950":{"range":{"start":{"row":5281,"column":0},"end":{"row":5281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15951":{"range":{"start":{"row":5289,"column":0},"end":{"row":5289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15952":{"range":{"start":{"row":5294,"column":0},"end":{"row":5294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15953":{"range":{"start":{"row":5306,"column":0},"end":{"row":5306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15954":{"range":{"start":{"row":5316,"column":0},"end":{"row":5316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15955":{"range":{"start":{"row":5327,"column":0},"end":{"row":5327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15956":{"range":{"start":{"row":5339,"column":0},"end":{"row":5339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15957":{"range":{"start":{"row":5351,"column":0},"end":{"row":5351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15958":{"range":{"start":{"row":5362,"column":0},"end":{"row":5362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15959":{"range":{"start":{"row":5374,"column":0},"end":{"row":5374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15960":{"range":{"start":{"row":5386,"column":0},"end":{"row":5386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15961":{"range":{"start":{"row":5398,"column":0},"end":{"row":5398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15962":{"range":{"start":{"row":5410,"column":0},"end":{"row":5410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15963":{"range":{"start":{"row":5429,"column":0},"end":{"row":5429,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15964":{"range":{"start":{"row":5454,"column":0},"end":{"row":5454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15965":{"range":{"start":{"row":5460,"column":0},"end":{"row":5460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15966":{"range":{"start":{"row":5468,"column":0},"end":{"row":5468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15967":{"range":{"start":{"row":5473,"column":0},"end":{"row":5473,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15968":{"range":{"start":{"row":5485,"column":0},"end":{"row":5485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15969":{"range":{"start":{"row":5495,"column":0},"end":{"row":5495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15970":{"range":{"start":{"row":5507,"column":0},"end":{"row":5507,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15971":{"range":{"start":{"row":5518,"column":0},"end":{"row":5518,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15972":{"range":{"start":{"row":5530,"column":0},"end":{"row":5530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15973":{"range":{"start":{"row":5542,"column":0},"end":{"row":5542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15974":{"range":{"start":{"row":5554,"column":0},"end":{"row":5554,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15975":{"range":{"start":{"row":5566,"column":0},"end":{"row":5566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15976":{"range":{"start":{"row":5578,"column":0},"end":{"row":5578,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15977":{"range":{"start":{"row":5584,"column":0},"end":{"row":5584,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15978":{"range":{"start":{"row":5624,"column":0},"end":{"row":5624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15979":{"range":{"start":{"row":5626,"column":0},"end":{"row":5626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15980":{"range":{"start":{"row":5631,"column":0},"end":{"row":5631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15981":{"range":{"start":{"row":5639,"column":0},"end":{"row":5639,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15982":{"range":{"start":{"row":5644,"column":0},"end":{"row":5644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15983":{"range":{"start":{"row":5662,"column":0},"end":{"row":5662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15984":{"range":{"start":{"row":5669,"column":0},"end":{"row":5669,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15985":{"range":{"start":{"row":5676,"column":0},"end":{"row":5676,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15986":{"range":{"start":{"row":5683,"column":0},"end":{"row":5683,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15987":{"range":{"start":{"row":5691,"column":0},"end":{"row":5691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15988":{"range":{"start":{"row":5699,"column":0},"end":{"row":5699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15989":{"range":{"start":{"row":5707,"column":0},"end":{"row":5707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15990":{"range":{"start":{"row":5713,"column":0},"end":{"row":5713,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15991":{"range":{"start":{"row":5719,"column":0},"end":{"row":5719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15992":{"range":{"start":{"row":5726,"column":0},"end":{"row":5726,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15993":{"range":{"start":{"row":5738,"column":0},"end":{"row":5738,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15994":{"range":{"start":{"row":5749,"column":0},"end":{"row":5749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15995":{"range":{"start":{"row":5761,"column":0},"end":{"row":5761,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15996":{"range":{"start":{"row":5772,"column":0},"end":{"row":5772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15997":{"range":{"start":{"row":5779,"column":0},"end":{"row":5779,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15998":{"range":{"start":{"row":5786,"column":0},"end":{"row":5786,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15999":{"range":{"start":{"row":5794,"column":0},"end":{"row":5794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16000":{"range":{"start":{"row":5802,"column":0},"end":{"row":5802,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16001":{"range":{"start":{"row":5813,"column":0},"end":{"row":5813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16002":{"range":{"start":{"row":5823,"column":0},"end":{"row":5823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16003":{"range":{"start":{"row":5833,"column":0},"end":{"row":5833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16004":{"range":{"start":{"row":5845,"column":0},"end":{"row":5845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16005":{"range":{"start":{"row":5857,"column":0},"end":{"row":5857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16006":{"range":{"start":{"row":5869,"column":0},"end":{"row":5869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16007":{"range":{"start":{"row":5881,"column":0},"end":{"row":5881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16008":{"range":{"start":{"row":5904,"column":0},"end":{"row":5904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16009":{"range":{"start":{"row":5916,"column":0},"end":{"row":5916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16010":{"range":{"start":{"row":5928,"column":0},"end":{"row":5928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16011":{"range":{"start":{"row":5940,"column":0},"end":{"row":5940,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16012":{"range":{"start":{"row":5950,"column":0},"end":{"row":5950,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16013":{"range":{"start":{"row":5958,"column":0},"end":{"row":5958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16014":{"range":{"start":{"row":5966,"column":0},"end":{"row":5966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16015":{"range":{"start":{"row":5977,"column":0},"end":{"row":5977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16016":{"range":{"start":{"row":5986,"column":0},"end":{"row":5986,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16017":{"range":{"start":{"row":5995,"column":0},"end":{"row":5995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16018":{"range":{"start":{"row":6003,"column":0},"end":{"row":6003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16019":{"range":{"start":{"row":6011,"column":0},"end":{"row":6011,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16020":{"range":{"start":{"row":6018,"column":0},"end":{"row":6018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16021":{"range":{"start":{"row":6025,"column":0},"end":{"row":6025,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16022":{"range":{"start":{"row":6032,"column":0},"end":{"row":6032,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16023":{"range":{"start":{"row":6039,"column":0},"end":{"row":6039,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16024":{"range":{"start":{"row":6054,"column":0},"end":{"row":6054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16025":{"range":{"start":{"row":6066,"column":0},"end":{"row":6066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16026":{"range":{"start":{"row":6088,"column":0},"end":{"row":6088,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16027":{"range":{"start":{"row":6093,"column":0},"end":{"row":6093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16028":{"range":{"start":{"row":6101,"column":0},"end":{"row":6101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16029":{"range":{"start":{"row":6118,"column":0},"end":{"row":6118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16030":{"range":{"start":{"row":6130,"column":0},"end":{"row":6130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16031":{"range":{"start":{"row":6141,"column":0},"end":{"row":6141,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16032":{"range":{"start":{"row":6152,"column":0},"end":{"row":6152,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16033":{"range":{"start":{"row":6161,"column":0},"end":{"row":6161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16034":{"range":{"start":{"row":6173,"column":0},"end":{"row":6173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16035":{"range":{"start":{"row":6185,"column":0},"end":{"row":6185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16036":{"range":{"start":{"row":6203,"column":0},"end":{"row":6203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16037":{"range":{"start":{"row":6205,"column":0},"end":{"row":6205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16038":{"range":{"start":{"row":6210,"column":0},"end":{"row":6210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16039":{"range":{"start":{"row":6217,"column":0},"end":{"row":6217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16040":{"range":{"start":{"row":6224,"column":0},"end":{"row":6224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16041":{"range":{"start":{"row":6231,"column":0},"end":{"row":6231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16042":{"range":{"start":{"row":6238,"column":0},"end":{"row":6238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16043":{"range":{"start":{"row":6243,"column":0},"end":{"row":6243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16044":{"range":{"start":{"row":6255,"column":0},"end":{"row":6255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16045":{"range":{"start":{"row":6267,"column":0},"end":{"row":6267,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16046":{"range":{"start":{"row":6279,"column":0},"end":{"row":6279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16047":{"range":{"start":{"row":6290,"column":0},"end":{"row":6290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16048":{"range":{"start":{"row":6301,"column":0},"end":{"row":6301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16049":{"range":{"start":{"row":6313,"column":0},"end":{"row":6313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16050":{"range":{"start":{"row":6325,"column":0},"end":{"row":6325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16051":{"range":{"start":{"row":6333,"column":0},"end":{"row":6333,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16052":{"range":{"start":{"row":6347,"column":0},"end":{"row":6347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16053":{"range":{"start":{"row":6349,"column":0},"end":{"row":6349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16054":{"range":{"start":{"row":6354,"column":0},"end":{"row":6354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16055":{"range":{"start":{"row":6361,"column":0},"end":{"row":6361,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16056":{"range":{"start":{"row":6372,"column":0},"end":{"row":6372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16057":{"range":{"start":{"row":6377,"column":0},"end":{"row":6377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16058":{"range":{"start":{"row":6388,"column":0},"end":{"row":6388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16059":{"range":{"start":{"row":6404,"column":0},"end":{"row":6404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16060":{"range":{"start":{"row":6413,"column":0},"end":{"row":6413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16061":{"range":{"start":{"row":6423,"column":0},"end":{"row":6423,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16062":{"range":{"start":{"row":6434,"column":0},"end":{"row":6434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16063":{"range":{"start":{"row":6446,"column":0},"end":{"row":6446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16064":{"range":{"start":{"row":6457,"column":0},"end":{"row":6457,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16065":{"range":{"start":{"row":6465,"column":0},"end":{"row":6465,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16066":{"range":{"start":{"row":6479,"column":0},"end":{"row":6479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16067":{"range":{"start":{"row":6482,"column":0},"end":{"row":6482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16068":{"range":{"start":{"row":6485,"column":0},"end":{"row":6485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16069":{"range":{"start":{"row":6487,"column":0},"end":{"row":6487,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16070":{"range":{"start":{"row":6492,"column":0},"end":{"row":6492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16071":{"range":{"start":{"row":6499,"column":0},"end":{"row":6499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16072":{"range":{"start":{"row":6504,"column":0},"end":{"row":6504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16073":{"range":{"start":{"row":6516,"column":0},"end":{"row":6516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16074":{"range":{"start":{"row":6527,"column":0},"end":{"row":6527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16075":{"range":{"start":{"row":6539,"column":0},"end":{"row":6539,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16076":{"range":{"start":{"row":6551,"column":0},"end":{"row":6551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16077":{"range":{"start":{"row":6563,"column":0},"end":{"row":6563,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16078":{"range":{"start":{"row":6574,"column":0},"end":{"row":6574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16079":{"range":{"start":{"row":6582,"column":0},"end":{"row":6582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16080":{"range":{"start":{"row":6594,"column":0},"end":{"row":6594,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16081":{"range":{"start":{"row":6603,"column":0},"end":{"row":6603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16082":{"range":{"start":{"row":6610,"column":0},"end":{"row":6610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16083":{"range":{"start":{"row":6624,"column":0},"end":{"row":6624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16084":{"range":{"start":{"row":6637,"column":0},"end":{"row":6637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16085":{"range":{"start":{"row":6640,"column":0},"end":{"row":6640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16086":{"range":{"start":{"row":6643,"column":0},"end":{"row":6643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16087":{"range":{"start":{"row":6645,"column":0},"end":{"row":6645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16088":{"range":{"start":{"row":6650,"column":0},"end":{"row":6650,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16089":{"range":{"start":{"row":6657,"column":0},"end":{"row":6657,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16090":{"range":{"start":{"row":6662,"column":0},"end":{"row":6662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16091":{"range":{"start":{"row":6673,"column":0},"end":{"row":6673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16092":{"range":{"start":{"row":6685,"column":0},"end":{"row":6685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16093":{"range":{"start":{"row":6696,"column":0},"end":{"row":6696,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16094":{"range":{"start":{"row":6707,"column":0},"end":{"row":6707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16095":{"range":{"start":{"row":6719,"column":0},"end":{"row":6719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16096":{"range":{"start":{"row":6727,"column":0},"end":{"row":6727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16097":{"range":{"start":{"row":6745,"column":0},"end":{"row":6745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16098":{"range":{"start":{"row":6756,"column":0},"end":{"row":6756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16099":{"range":{"start":{"row":6766,"column":0},"end":{"row":6766,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16100":{"range":{"start":{"row":6787,"column":0},"end":{"row":6787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16101":{"range":{"start":{"row":6792,"column":0},"end":{"row":6792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16102":{"range":{"start":{"row":6799,"column":0},"end":{"row":6799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16103":{"range":{"start":{"row":6804,"column":0},"end":{"row":6804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16104":{"range":{"start":{"row":6836,"column":0},"end":{"row":6836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16105":{"range":{"start":{"row":6847,"column":0},"end":{"row":6847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16106":{"range":{"start":{"row":6858,"column":0},"end":{"row":6858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16107":{"range":{"start":{"row":6869,"column":0},"end":{"row":6869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16108":{"range":{"start":{"row":6903,"column":0},"end":{"row":6903,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16109":{"range":{"start":{"row":6924,"column":0},"end":{"row":6924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16110":{"range":{"start":{"row":6936,"column":0},"end":{"row":6936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16111":{"range":{"start":{"row":6952,"column":0},"end":{"row":6952,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16112":{"range":{"start":{"row":6964,"column":0},"end":{"row":6964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16113":{"range":{"start":{"row":6971,"column":0},"end":{"row":6971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16114":{"range":{"start":{"row":6996,"column":0},"end":{"row":6996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16115":{"range":{"start":{"row":7002,"column":0},"end":{"row":7002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16116":{"range":{"start":{"row":7150,"column":0},"end":{"row":7150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16117":{"range":{"start":{"row":7664,"column":0},"end":{"row":7664,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16118":{"range":{"start":{"row":7666,"column":0},"end":{"row":7666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16119":{"range":{"start":{"row":7673,"column":0},"end":{"row":7673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16120":{"range":{"start":{"row":7678,"column":0},"end":{"row":7678,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16121":{"range":{"start":{"row":7685,"column":0},"end":{"row":7685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16122":{"range":{"start":{"row":7692,"column":0},"end":{"row":7692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16123":{"range":{"start":{"row":7699,"column":0},"end":{"row":7699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16124":{"range":{"start":{"row":7711,"column":0},"end":{"row":7711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16125":{"range":{"start":{"row":7719,"column":0},"end":{"row":7719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16126":{"range":{"start":{"row":7730,"column":0},"end":{"row":7730,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16127":{"range":{"start":{"row":7741,"column":0},"end":{"row":7741,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16128":{"range":{"start":{"row":7753,"column":0},"end":{"row":7753,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16129":{"range":{"start":{"row":7764,"column":0},"end":{"row":7764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16130":{"range":{"start":{"row":7775,"column":0},"end":{"row":7775,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16131":{"range":{"start":{"row":7787,"column":0},"end":{"row":7787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16132":{"range":{"start":{"row":7799,"column":0},"end":{"row":7799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16133":{"range":{"start":{"row":7811,"column":0},"end":{"row":7811,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16134":{"range":{"start":{"row":7823,"column":0},"end":{"row":7823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16135":{"range":{"start":{"row":7835,"column":0},"end":{"row":7835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16136":{"range":{"start":{"row":7847,"column":0},"end":{"row":7847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16137":{"range":{"start":{"row":7849,"column":0},"end":{"row":7849,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16138":{"range":{"start":{"row":7854,"column":0},"end":{"row":7854,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16139":{"range":{"start":{"row":7861,"column":0},"end":{"row":7861,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16140":{"range":{"start":{"row":7866,"column":0},"end":{"row":7866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16141":{"range":{"start":{"row":7878,"column":0},"end":{"row":7878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16142":{"range":{"start":{"row":7889,"column":0},"end":{"row":7889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16143":{"range":{"start":{"row":7901,"column":0},"end":{"row":7901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16144":{"range":{"start":{"row":7912,"column":0},"end":{"row":7912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16145":{"range":{"start":{"row":7924,"column":0},"end":{"row":7924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16146":{"range":{"start":{"row":7935,"column":0},"end":{"row":7935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16147":{"range":{"start":{"row":7946,"column":0},"end":{"row":7946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16148":{"range":{"start":{"row":7958,"column":0},"end":{"row":7958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16149":{"range":{"start":{"row":7970,"column":0},"end":{"row":7970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16150":{"range":{"start":{"row":7982,"column":0},"end":{"row":7982,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16151":{"range":{"start":{"row":7994,"column":0},"end":{"row":7994,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16152":{"range":{"start":{"row":8006,"column":0},"end":{"row":8006,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16153":{"range":{"start":{"row":8017,"column":0},"end":{"row":8017,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16154":{"range":{"start":{"row":8027,"column":0},"end":{"row":8027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16155":{"range":{"start":{"row":8035,"column":0},"end":{"row":8035,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16156":{"range":{"start":{"row":8043,"column":0},"end":{"row":8043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20171":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20172":{"range":{"start":{"row":115,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20173":{"range":{"start":{"row":120,"column":0},"end":{"row":121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20174":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20175":{"range":{"start":{"row":128,"column":0},"end":{"row":129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20176":{"range":{"start":{"row":133,"column":0},"end":{"row":134,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20177":{"range":{"start":{"row":138,"column":0},"end":{"row":139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20178":{"range":{"start":{"row":144,"column":0},"end":{"row":145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20179":{"range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20180":{"range":{"start":{"row":168,"column":0},"end":{"row":169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20181":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20182":{"range":{"start":{"row":202,"column":0},"end":{"row":203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20183":{"range":{"start":{"row":209,"column":0},"end":{"row":210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20184":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20185":{"range":{"start":{"row":235,"column":0},"end":{"row":236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20186":{"range":{"start":{"row":241,"column":0},"end":{"row":242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20187":{"range":{"start":{"row":247,"column":0},"end":{"row":248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20188":{"range":{"start":{"row":253,"column":0},"end":{"row":254,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20189":{"range":{"start":{"row":259,"column":0},"end":{"row":260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20190":{"range":{"start":{"row":264,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20191":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20192":{"range":{"start":{"row":274,"column":0},"end":{"row":275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20193":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20194":{"range":{"start":{"row":284,"column":0},"end":{"row":285,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20195":{"range":{"start":{"row":289,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20196":{"range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20197":{"range":{"start":{"row":308,"column":0},"end":{"row":309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20198":{"range":{"start":{"row":315,"column":0},"end":{"row":316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20199":{"range":{"start":{"row":322,"column":0},"end":{"row":323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20200":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20201":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20202":{"range":{"start":{"row":352,"column":0},"end":{"row":353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20203":{"range":{"start":{"row":359,"column":0},"end":{"row":360,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20204":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20205":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20206":{"range":{"start":{"row":379,"column":0},"end":{"row":380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20207":{"range":{"start":{"row":386,"column":0},"end":{"row":387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20208":{"range":{"start":{"row":393,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20209":{"range":{"start":{"row":399,"column":0},"end":{"row":400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20210":{"range":{"start":{"row":406,"column":0},"end":{"row":407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20211":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20212":{"range":{"start":{"row":420,"column":0},"end":{"row":421,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20213":{"range":{"start":{"row":427,"column":0},"end":{"row":428,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20214":{"range":{"start":{"row":434,"column":0},"end":{"row":435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20215":{"range":{"start":{"row":441,"column":0},"end":{"row":442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20216":{"range":{"start":{"row":448,"column":0},"end":{"row":449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20217":{"range":{"start":{"row":471,"column":0},"end":{"row":472,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20218":{"range":{"start":{"row":481,"column":0},"end":{"row":482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20219":{"range":{"start":{"row":503,"column":0},"end":{"row":504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20220":{"range":{"start":{"row":514,"column":0},"end":{"row":515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20221":{"range":{"start":{"row":525,"column":0},"end":{"row":526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20222":{"range":{"start":{"row":544,"column":0},"end":{"row":545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20223":{"range":{"start":{"row":551,"column":0},"end":{"row":552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20224":{"range":{"start":{"row":558,"column":0},"end":{"row":559,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20225":{"range":{"start":{"row":565,"column":0},"end":{"row":566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20226":{"range":{"start":{"row":573,"column":0},"end":{"row":574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20227":{"range":{"start":{"row":581,"column":0},"end":{"row":582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20228":{"range":{"start":{"row":592,"column":0},"end":{"row":593,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20229":{"range":{"start":{"row":631,"column":0},"end":{"row":632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20230":{"range":{"start":{"row":642,"column":0},"end":{"row":643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20231":{"range":{"start":{"row":653,"column":0},"end":{"row":654,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20232":{"range":{"start":{"row":690,"column":0},"end":{"row":691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20233":{"range":{"start":{"row":700,"column":0},"end":{"row":701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20234":{"range":{"start":{"row":710,"column":0},"end":{"row":711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20235":{"range":{"start":{"row":720,"column":0},"end":{"row":721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20236":{"range":{"start":{"row":736,"column":0},"end":{"row":737,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20237":{"range":{"start":{"row":750,"column":0},"end":{"row":751,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20238":{"range":{"start":{"row":771,"column":0},"end":{"row":772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20239":{"range":{"start":{"row":783,"column":0},"end":{"row":784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20240":{"range":{"start":{"row":794,"column":0},"end":{"row":795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20241":{"range":{"start":{"row":819,"column":0},"end":{"row":820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20242":{"range":{"start":{"row":831,"column":0},"end":{"row":832,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20243":{"range":{"start":{"row":843,"column":0},"end":{"row":844,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20244":{"range":{"start":{"row":866,"column":0},"end":{"row":867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20245":{"range":{"start":{"row":878,"column":0},"end":{"row":879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20246":{"range":{"start":{"row":889,"column":0},"end":{"row":890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20247":{"range":{"start":{"row":900,"column":0},"end":{"row":901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20248":{"range":{"start":{"row":911,"column":0},"end":{"row":912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20249":{"range":{"start":{"row":922,"column":0},"end":{"row":923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20250":{"range":{"start":{"row":1226,"column":0},"end":{"row":1227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20251":{"range":{"start":{"row":1234,"column":0},"end":{"row":1235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20252":{"range":{"start":{"row":1309,"column":0},"end":{"row":1310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20253":{"range":{"start":{"row":1341,"column":0},"end":{"row":1342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20254":{"range":{"start":{"row":1348,"column":0},"end":{"row":1349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20255":{"range":{"start":{"row":1355,"column":0},"end":{"row":1356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20256":{"range":{"start":{"row":1362,"column":0},"end":{"row":1363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20257":{"range":{"start":{"row":1369,"column":0},"end":{"row":1370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20258":{"range":{"start":{"row":1376,"column":0},"end":{"row":1377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20259":{"range":{"start":{"row":1383,"column":0},"end":{"row":1384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20260":{"range":{"start":{"row":1390,"column":0},"end":{"row":1391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20261":{"range":{"start":{"row":1397,"column":0},"end":{"row":1398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20262":{"range":{"start":{"row":1404,"column":0},"end":{"row":1405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20263":{"range":{"start":{"row":1411,"column":0},"end":{"row":1412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20264":{"range":{"start":{"row":1418,"column":0},"end":{"row":1419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20265":{"range":{"start":{"row":1425,"column":0},"end":{"row":1426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20266":{"range":{"start":{"row":1437,"column":0},"end":{"row":1438,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20267":{"range":{"start":{"row":1443,"column":0},"end":{"row":1444,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20268":{"range":{"start":{"row":1455,"column":0},"end":{"row":1456,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20269":{"range":{"start":{"row":1466,"column":0},"end":{"row":1467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20270":{"range":{"start":{"row":1474,"column":0},"end":{"row":1475,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20271":{"range":{"start":{"row":1482,"column":0},"end":{"row":1483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20272":{"range":{"start":{"row":1490,"column":0},"end":{"row":1491,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20273":{"range":{"start":{"row":1496,"column":0},"end":{"row":1497,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20274":{"range":{"start":{"row":1502,"column":0},"end":{"row":1503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20275":{"range":{"start":{"row":1508,"column":0},"end":{"row":1509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20276":{"range":{"start":{"row":1514,"column":0},"end":{"row":1515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20277":{"range":{"start":{"row":1520,"column":0},"end":{"row":1521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20278":{"range":{"start":{"row":1526,"column":0},"end":{"row":1527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20279":{"range":{"start":{"row":1533,"column":0},"end":{"row":1534,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20280":{"range":{"start":{"row":1542,"column":0},"end":{"row":1543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20281":{"range":{"start":{"row":1551,"column":0},"end":{"row":1552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20282":{"range":{"start":{"row":1560,"column":0},"end":{"row":1561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20283":{"range":{"start":{"row":1567,"column":0},"end":{"row":1568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20284":{"range":{"start":{"row":1581,"column":0},"end":{"row":1582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20285":{"range":{"start":{"row":1588,"column":0},"end":{"row":1589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20286":{"range":{"start":{"row":1595,"column":0},"end":{"row":1596,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20287":{"range":{"start":{"row":1602,"column":0},"end":{"row":1603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20288":{"range":{"start":{"row":1609,"column":0},"end":{"row":1610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20289":{"range":{"start":{"row":1616,"column":0},"end":{"row":1617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20290":{"range":{"start":{"row":1623,"column":0},"end":{"row":1624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20291":{"range":{"start":{"row":1630,"column":0},"end":{"row":1631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20292":{"range":{"start":{"row":1637,"column":0},"end":{"row":1638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20293":{"range":{"start":{"row":1644,"column":0},"end":{"row":1645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20294":{"range":{"start":{"row":1651,"column":0},"end":{"row":1652,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20295":{"range":{"start":{"row":1658,"column":0},"end":{"row":1659,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20296":{"range":{"start":{"row":1665,"column":0},"end":{"row":1666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20297":{"range":{"start":{"row":1672,"column":0},"end":{"row":1673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20298":{"range":{"start":{"row":1679,"column":0},"end":{"row":1680,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20299":{"range":{"start":{"row":1686,"column":0},"end":{"row":1687,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20300":{"range":{"start":{"row":1693,"column":0},"end":{"row":1694,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20301":{"range":{"start":{"row":1700,"column":0},"end":{"row":1701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20302":{"range":{"start":{"row":1707,"column":0},"end":{"row":1708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20303":{"range":{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20304":{"range":{"start":{"row":1721,"column":0},"end":{"row":1722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20305":{"range":{"start":{"row":1728,"column":0},"end":{"row":1729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20306":{"range":{"start":{"row":1735,"column":0},"end":{"row":1736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20307":{"range":{"start":{"row":1742,"column":0},"end":{"row":1743,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20308":{"range":{"start":{"row":1749,"column":0},"end":{"row":1750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20309":{"range":{"start":{"row":1756,"column":0},"end":{"row":1757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20310":{"range":{"start":{"row":1763,"column":0},"end":{"row":1764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20311":{"range":{"start":{"row":1770,"column":0},"end":{"row":1771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20312":{"range":{"start":{"row":1777,"column":0},"end":{"row":1778,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20313":{"range":{"start":{"row":1784,"column":0},"end":{"row":1785,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20314":{"range":{"start":{"row":1791,"column":0},"end":{"row":1792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20315":{"range":{"start":{"row":1797,"column":0},"end":{"row":1798,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20316":{"range":{"start":{"row":1803,"column":0},"end":{"row":1804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20317":{"range":{"start":{"row":1809,"column":0},"end":{"row":1810,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20318":{"range":{"start":{"row":1815,"column":0},"end":{"row":1816,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20319":{"range":{"start":{"row":1821,"column":0},"end":{"row":1822,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20320":{"range":{"start":{"row":1827,"column":0},"end":{"row":1828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20321":{"range":{"start":{"row":1833,"column":0},"end":{"row":1834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20322":{"range":{"start":{"row":1839,"column":0},"end":{"row":1840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20323":{"range":{"start":{"row":1845,"column":0},"end":{"row":1846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20324":{"range":{"start":{"row":1851,"column":0},"end":{"row":1852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20325":{"range":{"start":{"row":1857,"column":0},"end":{"row":1858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20326":{"range":{"start":{"row":1863,"column":0},"end":{"row":1864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20327":{"range":{"start":{"row":1869,"column":0},"end":{"row":1870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20328":{"range":{"start":{"row":1875,"column":0},"end":{"row":1876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20329":{"range":{"start":{"row":1881,"column":0},"end":{"row":1882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20330":{"range":{"start":{"row":1887,"column":0},"end":{"row":1888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20331":{"range":{"start":{"row":1893,"column":0},"end":{"row":1894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20332":{"range":{"start":{"row":1899,"column":0},"end":{"row":1900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20333":{"range":{"start":{"row":1905,"column":0},"end":{"row":1906,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20334":{"range":{"start":{"row":1911,"column":0},"end":{"row":1912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20335":{"range":{"start":{"row":1917,"column":0},"end":{"row":1918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20336":{"range":{"start":{"row":1923,"column":0},"end":{"row":1924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20337":{"range":{"start":{"row":1929,"column":0},"end":{"row":1930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20338":{"range":{"start":{"row":1935,"column":0},"end":{"row":1936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20339":{"range":{"start":{"row":1941,"column":0},"end":{"row":1942,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20340":{"range":{"start":{"row":1947,"column":0},"end":{"row":1948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20341":{"range":{"start":{"row":1953,"column":0},"end":{"row":1954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20342":{"range":{"start":{"row":1959,"column":0},"end":{"row":1960,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20343":{"range":{"start":{"row":1965,"column":0},"end":{"row":1966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20344":{"range":{"start":{"row":1971,"column":0},"end":{"row":1972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20345":{"range":{"start":{"row":1977,"column":0},"end":{"row":1978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20346":{"range":{"start":{"row":1983,"column":0},"end":{"row":1984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20347":{"range":{"start":{"row":1989,"column":0},"end":{"row":1990,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20348":{"range":{"start":{"row":1995,"column":0},"end":{"row":1996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20349":{"range":{"start":{"row":2001,"column":0},"end":{"row":2002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20350":{"range":{"start":{"row":2036,"column":0},"end":{"row":2037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20351":{"range":{"start":{"row":2042,"column":0},"end":{"row":2043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20352":{"range":{"start":{"row":2048,"column":0},"end":{"row":2049,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20353":{"range":{"start":{"row":2054,"column":0},"end":{"row":2055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20354":{"range":{"start":{"row":2062,"column":0},"end":{"row":2063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20355":{"range":{"start":{"row":2070,"column":0},"end":{"row":2071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20356":{"range":{"start":{"row":2078,"column":0},"end":{"row":2079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20357":{"range":{"start":{"row":2086,"column":0},"end":{"row":2087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20358":{"range":{"start":{"row":2094,"column":0},"end":{"row":2095,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20359":{"range":{"start":{"row":2102,"column":0},"end":{"row":2103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20360":{"range":{"start":{"row":2110,"column":0},"end":{"row":2111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20361":{"range":{"start":{"row":2118,"column":0},"end":{"row":2119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20362":{"range":{"start":{"row":2138,"column":0},"end":{"row":2139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20363":{"range":{"start":{"row":2144,"column":0},"end":{"row":2145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20364":{"range":{"start":{"row":2150,"column":0},"end":{"row":2151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20365":{"range":{"start":{"row":2156,"column":0},"end":{"row":2157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20366":{"range":{"start":{"row":2162,"column":0},"end":{"row":2163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20367":{"range":{"start":{"row":2168,"column":0},"end":{"row":2169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20368":{"range":{"start":{"row":2175,"column":0},"end":{"row":2176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20369":{"range":{"start":{"row":2182,"column":0},"end":{"row":2183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20370":{"range":{"start":{"row":2189,"column":0},"end":{"row":2190,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20371":{"range":{"start":{"row":2196,"column":0},"end":{"row":2197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20372":{"range":{"start":{"row":2203,"column":0},"end":{"row":2204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20373":{"range":{"start":{"row":2218,"column":0},"end":{"row":2219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20374":{"range":{"start":{"row":2224,"column":0},"end":{"row":2225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20375":{"range":{"start":{"row":2231,"column":0},"end":{"row":2232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20376":{"range":{"start":{"row":2237,"column":0},"end":{"row":2238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20377":{"range":{"start":{"row":2243,"column":0},"end":{"row":2244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20378":{"range":{"start":{"row":2249,"column":0},"end":{"row":2250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20379":{"range":{"start":{"row":2256,"column":0},"end":{"row":2257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20380":{"range":{"start":{"row":2264,"column":0},"end":{"row":2265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20381":{"range":{"start":{"row":2271,"column":0},"end":{"row":2272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20382":{"range":{"start":{"row":2277,"column":0},"end":{"row":2278,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20383":{"range":{"start":{"row":2283,"column":0},"end":{"row":2284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20384":{"range":{"start":{"row":2289,"column":0},"end":{"row":2290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20385":{"range":{"start":{"row":2297,"column":0},"end":{"row":2298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20386":{"range":{"start":{"row":2304,"column":0},"end":{"row":2305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20387":{"range":{"start":{"row":2334,"column":0},"end":{"row":2335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20388":{"range":{"start":{"row":2340,"column":0},"end":{"row":2341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20389":{"range":{"start":{"row":2346,"column":0},"end":{"row":2347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20390":{"range":{"start":{"row":2352,"column":0},"end":{"row":2353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20391":{"range":{"start":{"row":2358,"column":0},"end":{"row":2359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20392":{"range":{"start":{"row":2364,"column":0},"end":{"row":2365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20393":{"range":{"start":{"row":2375,"column":0},"end":{"row":2376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20394":{"range":{"start":{"row":2381,"column":0},"end":{"row":2382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20395":{"range":{"start":{"row":2387,"column":0},"end":{"row":2388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20396":{"range":{"start":{"row":2393,"column":0},"end":{"row":2394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20397":{"range":{"start":{"row":2404,"column":0},"end":{"row":2405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20398":{"range":{"start":{"row":2431,"column":0},"end":{"row":2432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20399":{"range":{"start":{"row":2447,"column":0},"end":{"row":2448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20400":{"range":{"start":{"row":2469,"column":0},"end":{"row":2470,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20401":{"range":{"start":{"row":2495,"column":0},"end":{"row":2496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20402":{"range":{"start":{"row":2567,"column":0},"end":{"row":2568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20403":{"range":{"start":{"row":2575,"column":0},"end":{"row":2576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20404":{"range":{"start":{"row":2580,"column":0},"end":{"row":2581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20405":{"range":{"start":{"row":2588,"column":0},"end":{"row":2589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20406":{"range":{"start":{"row":2607,"column":0},"end":{"row":2608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20407":{"range":{"start":{"row":2616,"column":0},"end":{"row":2617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20408":{"range":{"start":{"row":2624,"column":0},"end":{"row":2625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20409":{"range":{"start":{"row":2634,"column":0},"end":{"row":2635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20410":{"range":{"start":{"row":2875,"column":0},"end":{"row":2876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20411":{"range":{"start":{"row":2880,"column":0},"end":{"row":2881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20412":{"range":{"start":{"row":2887,"column":0},"end":{"row":2888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20413":{"range":{"start":{"row":2894,"column":0},"end":{"row":2895,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20414":{"range":{"start":{"row":2917,"column":0},"end":{"row":2918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20415":{"range":{"start":{"row":2929,"column":0},"end":{"row":2930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20416":{"range":{"start":{"row":2937,"column":0},"end":{"row":2938,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20417":{"range":{"start":{"row":2992,"column":0},"end":{"row":2993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20418":{"range":{"start":{"row":3009,"column":0},"end":{"row":3010,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20419":{"range":{"start":{"row":3063,"column":0},"end":{"row":3064,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20420":{"range":{"start":{"row":3067,"column":0},"end":{"row":3068,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20421":{"range":{"start":{"row":3136,"column":0},"end":{"row":3137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20422":{"range":{"start":{"row":3143,"column":0},"end":{"row":3144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20423":{"range":{"start":{"row":3148,"column":0},"end":{"row":3149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20424":{"range":{"start":{"row":3155,"column":0},"end":{"row":3156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20425":{"range":{"start":{"row":3162,"column":0},"end":{"row":3163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20426":{"range":{"start":{"row":3169,"column":0},"end":{"row":3170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20427":{"range":{"start":{"row":3176,"column":0},"end":{"row":3177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20428":{"range":{"start":{"row":3183,"column":0},"end":{"row":3184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20429":{"range":{"start":{"row":3197,"column":0},"end":{"row":3198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20430":{"range":{"start":{"row":3210,"column":0},"end":{"row":3211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20431":{"range":{"start":{"row":3216,"column":0},"end":{"row":3217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20432":{"range":{"start":{"row":3222,"column":0},"end":{"row":3223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20433":{"range":{"start":{"row":3235,"column":0},"end":{"row":3236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20434":{"range":{"start":{"row":3242,"column":0},"end":{"row":3243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20435":{"range":{"start":{"row":3248,"column":0},"end":{"row":3249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20436":{"range":{"start":{"row":3259,"column":0},"end":{"row":3260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20437":{"range":{"start":{"row":3271,"column":0},"end":{"row":3272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20438":{"range":{"start":{"row":3282,"column":0},"end":{"row":3283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20439":{"range":{"start":{"row":3300,"column":0},"end":{"row":3301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20440":{"range":{"start":{"row":3311,"column":0},"end":{"row":3312,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20441":{"range":{"start":{"row":3322,"column":0},"end":{"row":3323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20442":{"range":{"start":{"row":3331,"column":0},"end":{"row":3332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20443":{"range":{"start":{"row":3348,"column":0},"end":{"row":3349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20444":{"range":{"start":{"row":3356,"column":0},"end":{"row":3357,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20445":{"range":{"start":{"row":3364,"column":0},"end":{"row":3365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20446":{"range":{"start":{"row":3372,"column":0},"end":{"row":3373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20447":{"range":{"start":{"row":3380,"column":0},"end":{"row":3381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20448":{"range":{"start":{"row":3388,"column":0},"end":{"row":3389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20449":{"range":{"start":{"row":3396,"column":0},"end":{"row":3397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20450":{"range":{"start":{"row":3403,"column":0},"end":{"row":3404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20451":{"range":{"start":{"row":3411,"column":0},"end":{"row":3412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20452":{"range":{"start":{"row":3418,"column":0},"end":{"row":3419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20453":{"range":{"start":{"row":3425,"column":0},"end":{"row":3426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20454":{"range":{"start":{"row":3432,"column":0},"end":{"row":3433,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20455":{"range":{"start":{"row":3439,"column":0},"end":{"row":3440,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20456":{"range":{"start":{"row":3446,"column":0},"end":{"row":3447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20457":{"range":{"start":{"row":3453,"column":0},"end":{"row":3454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20458":{"range":{"start":{"row":3466,"column":0},"end":{"row":3467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20459":{"range":{"start":{"row":3478,"column":0},"end":{"row":3479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20460":{"range":{"start":{"row":3489,"column":0},"end":{"row":3490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20461":{"range":{"start":{"row":3500,"column":0},"end":{"row":3501,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20462":{"range":{"start":{"row":3511,"column":0},"end":{"row":3512,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20463":{"range":{"start":{"row":3522,"column":0},"end":{"row":3523,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20464":{"range":{"start":{"row":3532,"column":0},"end":{"row":3533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20465":{"range":{"start":{"row":3573,"column":0},"end":{"row":3574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20466":{"range":{"start":{"row":3585,"column":0},"end":{"row":3586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20467":{"range":{"start":{"row":3608,"column":0},"end":{"row":3609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20468":{"range":{"start":{"row":3620,"column":0},"end":{"row":3621,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20469":{"range":{"start":{"row":3632,"column":0},"end":{"row":3633,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20470":{"range":{"start":{"row":3644,"column":0},"end":{"row":3645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20471":{"range":{"start":{"row":3957,"column":0},"end":{"row":3958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20472":{"range":{"start":{"row":3965,"column":0},"end":{"row":3966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20473":{"range":{"start":{"row":3973,"column":0},"end":{"row":3974,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20474":{"range":{"start":{"row":3984,"column":0},"end":{"row":3985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20475":{"range":{"start":{"row":3992,"column":0},"end":{"row":3993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20476":{"range":{"start":{"row":4000,"column":0},"end":{"row":4001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20477":{"range":{"start":{"row":4030,"column":0},"end":{"row":4031,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20478":{"range":{"start":{"row":4037,"column":0},"end":{"row":4038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20479":{"range":{"start":{"row":4044,"column":0},"end":{"row":4045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20480":{"range":{"start":{"row":4051,"column":0},"end":{"row":4052,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20481":{"range":{"start":{"row":4058,"column":0},"end":{"row":4059,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20482":{"range":{"start":{"row":4065,"column":0},"end":{"row":4066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20483":{"range":{"start":{"row":4072,"column":0},"end":{"row":4073,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20484":{"range":{"start":{"row":4079,"column":0},"end":{"row":4080,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20485":{"range":{"start":{"row":4086,"column":0},"end":{"row":4087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20486":{"range":{"start":{"row":4093,"column":0},"end":{"row":4094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20487":{"range":{"start":{"row":4100,"column":0},"end":{"row":4101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20488":{"range":{"start":{"row":4107,"column":0},"end":{"row":4108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20489":{"range":{"start":{"row":4114,"column":0},"end":{"row":4115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20490":{"range":{"start":{"row":4121,"column":0},"end":{"row":4122,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20491":{"range":{"start":{"row":4128,"column":0},"end":{"row":4129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20492":{"range":{"start":{"row":4135,"column":0},"end":{"row":4136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20493":{"range":{"start":{"row":4142,"column":0},"end":{"row":4143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20494":{"range":{"start":{"row":4149,"column":0},"end":{"row":4150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20495":{"range":{"start":{"row":4156,"column":0},"end":{"row":4157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20496":{"range":{"start":{"row":4163,"column":0},"end":{"row":4164,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20497":{"range":{"start":{"row":4170,"column":0},"end":{"row":4171,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20498":{"range":{"start":{"row":4177,"column":0},"end":{"row":4178,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20499":{"range":{"start":{"row":4184,"column":0},"end":{"row":4185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20500":{"range":{"start":{"row":4191,"column":0},"end":{"row":4192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20501":{"range":{"start":{"row":4198,"column":0},"end":{"row":4199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20502":{"range":{"start":{"row":4205,"column":0},"end":{"row":4206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20503":{"range":{"start":{"row":4212,"column":0},"end":{"row":4213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20504":{"range":{"start":{"row":4219,"column":0},"end":{"row":4220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20505":{"range":{"start":{"row":4226,"column":0},"end":{"row":4227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20506":{"range":{"start":{"row":4232,"column":0},"end":{"row":4233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20507":{"range":{"start":{"row":4238,"column":0},"end":{"row":4239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20508":{"range":{"start":{"row":4244,"column":0},"end":{"row":4245,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20509":{"range":{"start":{"row":4250,"column":0},"end":{"row":4251,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20510":{"range":{"start":{"row":4256,"column":0},"end":{"row":4257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20511":{"range":{"start":{"row":4262,"column":0},"end":{"row":4263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20512":{"range":{"start":{"row":4268,"column":0},"end":{"row":4269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20513":{"range":{"start":{"row":4274,"column":0},"end":{"row":4275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20514":{"range":{"start":{"row":4280,"column":0},"end":{"row":4281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20515":{"range":{"start":{"row":4286,"column":0},"end":{"row":4287,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20516":{"range":{"start":{"row":4292,"column":0},"end":{"row":4293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20517":{"range":{"start":{"row":4298,"column":0},"end":{"row":4299,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20518":{"range":{"start":{"row":4304,"column":0},"end":{"row":4305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20519":{"range":{"start":{"row":4310,"column":0},"end":{"row":4311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20520":{"range":{"start":{"row":4316,"column":0},"end":{"row":4317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20521":{"range":{"start":{"row":4322,"column":0},"end":{"row":4323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20522":{"range":{"start":{"row":4328,"column":0},"end":{"row":4329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20523":{"range":{"start":{"row":4334,"column":0},"end":{"row":4335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20524":{"range":{"start":{"row":4340,"column":0},"end":{"row":4341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20525":{"range":{"start":{"row":4346,"column":0},"end":{"row":4347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20526":{"range":{"start":{"row":4352,"column":0},"end":{"row":4353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20527":{"range":{"start":{"row":4358,"column":0},"end":{"row":4359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20528":{"range":{"start":{"row":4364,"column":0},"end":{"row":4365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20529":{"range":{"start":{"row":4370,"column":0},"end":{"row":4371,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20530":{"range":{"start":{"row":4376,"column":0},"end":{"row":4377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20531":{"range":{"start":{"row":4382,"column":0},"end":{"row":4383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20532":{"range":{"start":{"row":4388,"column":0},"end":{"row":4389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20533":{"range":{"start":{"row":4394,"column":0},"end":{"row":4395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20534":{"range":{"start":{"row":4400,"column":0},"end":{"row":4401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20535":{"range":{"start":{"row":4406,"column":0},"end":{"row":4407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20536":{"range":{"start":{"row":4412,"column":0},"end":{"row":4413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20537":{"range":{"start":{"row":4418,"column":0},"end":{"row":4419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20538":{"range":{"start":{"row":4424,"column":0},"end":{"row":4425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20539":{"range":{"start":{"row":4430,"column":0},"end":{"row":4431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20540":{"range":{"start":{"row":4436,"column":0},"end":{"row":4437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20541":{"range":{"start":{"row":4442,"column":0},"end":{"row":4443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20542":{"range":{"start":{"row":4448,"column":0},"end":{"row":4449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20543":{"range":{"start":{"row":4454,"column":0},"end":{"row":4455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20544":{"range":{"start":{"row":4460,"column":0},"end":{"row":4461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20545":{"range":{"start":{"row":4468,"column":0},"end":{"row":4469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20546":{"range":{"start":{"row":4476,"column":0},"end":{"row":4477,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20547":{"range":{"start":{"row":4492,"column":0},"end":{"row":4493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20548":{"range":{"start":{"row":4498,"column":0},"end":{"row":4499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20549":{"range":{"start":{"row":4504,"column":0},"end":{"row":4505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20550":{"range":{"start":{"row":4509,"column":0},"end":{"row":4510,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20551":{"range":{"start":{"row":4515,"column":0},"end":{"row":4516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20552":{"range":{"start":{"row":4520,"column":0},"end":{"row":4521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20553":{"range":{"start":{"row":4525,"column":0},"end":{"row":4526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20554":{"range":{"start":{"row":4530,"column":0},"end":{"row":4531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20555":{"range":{"start":{"row":4535,"column":0},"end":{"row":4536,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20556":{"range":{"start":{"row":4540,"column":0},"end":{"row":4541,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20557":{"range":{"start":{"row":4545,"column":0},"end":{"row":4546,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20558":{"range":{"start":{"row":4550,"column":0},"end":{"row":4551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20559":{"range":{"start":{"row":4555,"column":0},"end":{"row":4556,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20560":{"range":{"start":{"row":4560,"column":0},"end":{"row":4561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20561":{"range":{"start":{"row":4565,"column":0},"end":{"row":4566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20562":{"range":{"start":{"row":4570,"column":0},"end":{"row":4571,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20563":{"range":{"start":{"row":4575,"column":0},"end":{"row":4576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20564":{"range":{"start":{"row":4580,"column":0},"end":{"row":4581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20565":{"range":{"start":{"row":4585,"column":0},"end":{"row":4586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20566":{"range":{"start":{"row":4597,"column":0},"end":{"row":4598,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20567":{"range":{"start":{"row":4617,"column":0},"end":{"row":4618,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20568":{"range":{"start":{"row":4626,"column":0},"end":{"row":4627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20569":{"range":{"start":{"row":4635,"column":0},"end":{"row":4636,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20570":{"range":{"start":{"row":4642,"column":0},"end":{"row":4643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20571":{"range":{"start":{"row":4714,"column":0},"end":{"row":4715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20572":{"range":{"start":{"row":4716,"column":0},"end":{"row":4717,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20573":{"range":{"start":{"row":4721,"column":0},"end":{"row":4722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20574":{"range":{"start":{"row":4728,"column":0},"end":{"row":4729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20575":{"range":{"start":{"row":4733,"column":0},"end":{"row":4734,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20576":{"range":{"start":{"row":4739,"column":0},"end":{"row":4740,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20577":{"range":{"start":{"row":4745,"column":0},"end":{"row":4746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20578":{"range":{"start":{"row":4756,"column":0},"end":{"row":4757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20579":{"range":{"start":{"row":4767,"column":0},"end":{"row":4768,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20580":{"range":{"start":{"row":4787,"column":0},"end":{"row":4788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20581":{"range":{"start":{"row":4799,"column":0},"end":{"row":4800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20582":{"range":{"start":{"row":4806,"column":0},"end":{"row":4807,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20583":{"range":{"start":{"row":4813,"column":0},"end":{"row":4814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20584":{"range":{"start":{"row":4820,"column":0},"end":{"row":4821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20585":{"range":{"start":{"row":4827,"column":0},"end":{"row":4828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20586":{"range":{"start":{"row":4834,"column":0},"end":{"row":4835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20587":{"range":{"start":{"row":4840,"column":0},"end":{"row":4841,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20588":{"range":{"start":{"row":4846,"column":0},"end":{"row":4847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20589":{"range":{"start":{"row":4852,"column":0},"end":{"row":4853,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20590":{"range":{"start":{"row":4864,"column":0},"end":{"row":4865,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20591":{"range":{"start":{"row":4872,"column":0},"end":{"row":4873,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20592":{"range":{"start":{"row":4880,"column":0},"end":{"row":4881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20593":{"range":{"start":{"row":4888,"column":0},"end":{"row":4889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20594":{"range":{"start":{"row":4896,"column":0},"end":{"row":4897,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20595":{"range":{"start":{"row":4904,"column":0},"end":{"row":4905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20596":{"range":{"start":{"row":4910,"column":0},"end":{"row":4911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20597":{"range":{"start":{"row":4916,"column":0},"end":{"row":4917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20598":{"range":{"start":{"row":4922,"column":0},"end":{"row":4923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20599":{"range":{"start":{"row":4928,"column":0},"end":{"row":4929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20600":{"range":{"start":{"row":4946,"column":0},"end":{"row":4947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20601":{"range":{"start":{"row":4948,"column":0},"end":{"row":4949,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20602":{"range":{"start":{"row":4953,"column":0},"end":{"row":4954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20603":{"range":{"start":{"row":4958,"column":0},"end":{"row":4959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20604":{"range":{"start":{"row":4963,"column":0},"end":{"row":4964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20605":{"range":{"start":{"row":4970,"column":0},"end":{"row":4971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20606":{"range":{"start":{"row":4977,"column":0},"end":{"row":4978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20607":{"range":{"start":{"row":4984,"column":0},"end":{"row":4985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20608":{"range":{"start":{"row":5000,"column":0},"end":{"row":5001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20609":{"range":{"start":{"row":5003,"column":0},"end":{"row":5004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20610":{"range":{"start":{"row":5015,"column":0},"end":{"row":5016,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20611":{"range":{"start":{"row":5026,"column":0},"end":{"row":5027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20612":{"range":{"start":{"row":5037,"column":0},"end":{"row":5038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20613":{"range":{"start":{"row":5045,"column":0},"end":{"row":5046,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20614":{"range":{"start":{"row":5057,"column":0},"end":{"row":5058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20615":{"range":{"start":{"row":5071,"column":0},"end":{"row":5072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20616":{"range":{"start":{"row":5077,"column":0},"end":{"row":5078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20617":{"range":{"start":{"row":5086,"column":0},"end":{"row":5087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20618":{"range":{"start":{"row":5091,"column":0},"end":{"row":5092,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20619":{"range":{"start":{"row":5103,"column":0},"end":{"row":5104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20620":{"range":{"start":{"row":5113,"column":0},"end":{"row":5114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20621":{"range":{"start":{"row":5125,"column":0},"end":{"row":5126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20622":{"range":{"start":{"row":5136,"column":0},"end":{"row":5137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20623":{"range":{"start":{"row":5148,"column":0},"end":{"row":5149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20624":{"range":{"start":{"row":5160,"column":0},"end":{"row":5161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20625":{"range":{"start":{"row":5172,"column":0},"end":{"row":5173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20626":{"range":{"start":{"row":5184,"column":0},"end":{"row":5185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20627":{"range":{"start":{"row":5196,"column":0},"end":{"row":5197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20628":{"range":{"start":{"row":5208,"column":0},"end":{"row":5209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20629":{"range":{"start":{"row":5232,"column":0},"end":{"row":5233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20630":{"range":{"start":{"row":5242,"column":0},"end":{"row":5243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20631":{"range":{"start":{"row":5252,"column":0},"end":{"row":5253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20632":{"range":{"start":{"row":5262,"column":0},"end":{"row":5263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20633":{"range":{"start":{"row":5281,"column":0},"end":{"row":5282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20634":{"range":{"start":{"row":5289,"column":0},"end":{"row":5290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20635":{"range":{"start":{"row":5294,"column":0},"end":{"row":5295,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20636":{"range":{"start":{"row":5306,"column":0},"end":{"row":5307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20637":{"range":{"start":{"row":5316,"column":0},"end":{"row":5317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20638":{"range":{"start":{"row":5327,"column":0},"end":{"row":5328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20639":{"range":{"start":{"row":5339,"column":0},"end":{"row":5340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20640":{"range":{"start":{"row":5351,"column":0},"end":{"row":5352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20641":{"range":{"start":{"row":5362,"column":0},"end":{"row":5363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20642":{"range":{"start":{"row":5374,"column":0},"end":{"row":5375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20643":{"range":{"start":{"row":5386,"column":0},"end":{"row":5387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20644":{"range":{"start":{"row":5398,"column":0},"end":{"row":5399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20645":{"range":{"start":{"row":5410,"column":0},"end":{"row":5411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20646":{"range":{"start":{"row":5429,"column":0},"end":{"row":5430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20647":{"range":{"start":{"row":5454,"column":0},"end":{"row":5455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20648":{"range":{"start":{"row":5460,"column":0},"end":{"row":5461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20649":{"range":{"start":{"row":5468,"column":0},"end":{"row":5469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20650":{"range":{"start":{"row":5473,"column":0},"end":{"row":5474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20651":{"range":{"start":{"row":5485,"column":0},"end":{"row":5486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20652":{"range":{"start":{"row":5495,"column":0},"end":{"row":5496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20653":{"range":{"start":{"row":5507,"column":0},"end":{"row":5508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20654":{"range":{"start":{"row":5518,"column":0},"end":{"row":5519,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20655":{"range":{"start":{"row":5530,"column":0},"end":{"row":5531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20656":{"range":{"start":{"row":5542,"column":0},"end":{"row":5543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20657":{"range":{"start":{"row":5554,"column":0},"end":{"row":5555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20658":{"range":{"start":{"row":5566,"column":0},"end":{"row":5567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20659":{"range":{"start":{"row":5578,"column":0},"end":{"row":5579,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20660":{"range":{"start":{"row":5584,"column":0},"end":{"row":5585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20661":{"range":{"start":{"row":5624,"column":0},"end":{"row":5625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20662":{"range":{"start":{"row":5626,"column":0},"end":{"row":5627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20663":{"range":{"start":{"row":5631,"column":0},"end":{"row":5632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20664":{"range":{"start":{"row":5639,"column":0},"end":{"row":5640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20665":{"range":{"start":{"row":5644,"column":0},"end":{"row":5645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20666":{"range":{"start":{"row":5662,"column":0},"end":{"row":5663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20667":{"range":{"start":{"row":5669,"column":0},"end":{"row":5670,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20668":{"range":{"start":{"row":5676,"column":0},"end":{"row":5677,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20669":{"range":{"start":{"row":5683,"column":0},"end":{"row":5684,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20670":{"range":{"start":{"row":5691,"column":0},"end":{"row":5692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20671":{"range":{"start":{"row":5699,"column":0},"end":{"row":5700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20672":{"range":{"start":{"row":5707,"column":0},"end":{"row":5708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20673":{"range":{"start":{"row":5713,"column":0},"end":{"row":5714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20674":{"range":{"start":{"row":5719,"column":0},"end":{"row":5720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20675":{"range":{"start":{"row":5726,"column":0},"end":{"row":5727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20676":{"range":{"start":{"row":5738,"column":0},"end":{"row":5739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20677":{"range":{"start":{"row":5749,"column":0},"end":{"row":5750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20678":{"range":{"start":{"row":5761,"column":0},"end":{"row":5762,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20679":{"range":{"start":{"row":5772,"column":0},"end":{"row":5773,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20680":{"range":{"start":{"row":5779,"column":0},"end":{"row":5780,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20681":{"range":{"start":{"row":5786,"column":0},"end":{"row":5787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20682":{"range":{"start":{"row":5794,"column":0},"end":{"row":5795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20683":{"range":{"start":{"row":5802,"column":0},"end":{"row":5803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20684":{"range":{"start":{"row":5813,"column":0},"end":{"row":5814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20685":{"range":{"start":{"row":5823,"column":0},"end":{"row":5824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20686":{"range":{"start":{"row":5833,"column":0},"end":{"row":5834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20687":{"range":{"start":{"row":5845,"column":0},"end":{"row":5846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20688":{"range":{"start":{"row":5857,"column":0},"end":{"row":5858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20689":{"range":{"start":{"row":5869,"column":0},"end":{"row":5870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20690":{"range":{"start":{"row":5881,"column":0},"end":{"row":5882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20691":{"range":{"start":{"row":5904,"column":0},"end":{"row":5905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20692":{"range":{"start":{"row":5916,"column":0},"end":{"row":5917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20693":{"range":{"start":{"row":5928,"column":0},"end":{"row":5929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20694":{"range":{"start":{"row":5940,"column":0},"end":{"row":5941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20695":{"range":{"start":{"row":5950,"column":0},"end":{"row":5951,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20696":{"range":{"start":{"row":5958,"column":0},"end":{"row":5959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20697":{"range":{"start":{"row":5966,"column":0},"end":{"row":5967,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20698":{"range":{"start":{"row":5977,"column":0},"end":{"row":5978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20699":{"range":{"start":{"row":5986,"column":0},"end":{"row":5987,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20700":{"range":{"start":{"row":5995,"column":0},"end":{"row":5996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20701":{"range":{"start":{"row":6003,"column":0},"end":{"row":6004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20702":{"range":{"start":{"row":6011,"column":0},"end":{"row":6012,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20703":{"range":{"start":{"row":6018,"column":0},"end":{"row":6019,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20704":{"range":{"start":{"row":6025,"column":0},"end":{"row":6026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20705":{"range":{"start":{"row":6032,"column":0},"end":{"row":6033,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20706":{"range":{"start":{"row":6039,"column":0},"end":{"row":6040,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20707":{"range":{"start":{"row":6054,"column":0},"end":{"row":6055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20708":{"range":{"start":{"row":6066,"column":0},"end":{"row":6067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20709":{"range":{"start":{"row":6088,"column":0},"end":{"row":6089,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20710":{"range":{"start":{"row":6093,"column":0},"end":{"row":6094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20711":{"range":{"start":{"row":6101,"column":0},"end":{"row":6102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20712":{"range":{"start":{"row":6118,"column":0},"end":{"row":6119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20713":{"range":{"start":{"row":6130,"column":0},"end":{"row":6131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20714":{"range":{"start":{"row":6141,"column":0},"end":{"row":6142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20715":{"range":{"start":{"row":6152,"column":0},"end":{"row":6153,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20716":{"range":{"start":{"row":6161,"column":0},"end":{"row":6162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20717":{"range":{"start":{"row":6173,"column":0},"end":{"row":6174,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20718":{"range":{"start":{"row":6185,"column":0},"end":{"row":6186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20719":{"range":{"start":{"row":6203,"column":0},"end":{"row":6204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20720":{"range":{"start":{"row":6205,"column":0},"end":{"row":6206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20721":{"range":{"start":{"row":6210,"column":0},"end":{"row":6211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20722":{"range":{"start":{"row":6217,"column":0},"end":{"row":6218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20723":{"range":{"start":{"row":6224,"column":0},"end":{"row":6225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20724":{"range":{"start":{"row":6231,"column":0},"end":{"row":6232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20725":{"range":{"start":{"row":6238,"column":0},"end":{"row":6239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20726":{"range":{"start":{"row":6243,"column":0},"end":{"row":6244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20727":{"range":{"start":{"row":6255,"column":0},"end":{"row":6256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20728":{"range":{"start":{"row":6267,"column":0},"end":{"row":6268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20729":{"range":{"start":{"row":6279,"column":0},"end":{"row":6280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20730":{"range":{"start":{"row":6290,"column":0},"end":{"row":6291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20731":{"range":{"start":{"row":6301,"column":0},"end":{"row":6302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20732":{"range":{"start":{"row":6313,"column":0},"end":{"row":6314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20733":{"range":{"start":{"row":6325,"column":0},"end":{"row":6326,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20734":{"range":{"start":{"row":6333,"column":0},"end":{"row":6334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20735":{"range":{"start":{"row":6347,"column":0},"end":{"row":6348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20736":{"range":{"start":{"row":6349,"column":0},"end":{"row":6350,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20737":{"range":{"start":{"row":6354,"column":0},"end":{"row":6355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20738":{"range":{"start":{"row":6361,"column":0},"end":{"row":6362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20739":{"range":{"start":{"row":6372,"column":0},"end":{"row":6373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20740":{"range":{"start":{"row":6377,"column":0},"end":{"row":6378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20741":{"range":{"start":{"row":6388,"column":0},"end":{"row":6389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20742":{"range":{"start":{"row":6404,"column":0},"end":{"row":6405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20743":{"range":{"start":{"row":6413,"column":0},"end":{"row":6414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20744":{"range":{"start":{"row":6423,"column":0},"end":{"row":6424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20745":{"range":{"start":{"row":6434,"column":0},"end":{"row":6435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20746":{"range":{"start":{"row":6446,"column":0},"end":{"row":6447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20747":{"range":{"start":{"row":6457,"column":0},"end":{"row":6458,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20748":{"range":{"start":{"row":6465,"column":0},"end":{"row":6466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20749":{"range":{"start":{"row":6479,"column":0},"end":{"row":6480,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20750":{"range":{"start":{"row":6482,"column":0},"end":{"row":6483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20751":{"range":{"start":{"row":6485,"column":0},"end":{"row":6486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20752":{"range":{"start":{"row":6487,"column":0},"end":{"row":6488,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20753":{"range":{"start":{"row":6492,"column":0},"end":{"row":6493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20754":{"range":{"start":{"row":6499,"column":0},"end":{"row":6500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20755":{"range":{"start":{"row":6504,"column":0},"end":{"row":6505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20756":{"range":{"start":{"row":6516,"column":0},"end":{"row":6517,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20757":{"range":{"start":{"row":6527,"column":0},"end":{"row":6528,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20758":{"range":{"start":{"row":6539,"column":0},"end":{"row":6540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20759":{"range":{"start":{"row":6551,"column":0},"end":{"row":6552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20760":{"range":{"start":{"row":6563,"column":0},"end":{"row":6564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20761":{"range":{"start":{"row":6574,"column":0},"end":{"row":6575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20762":{"range":{"start":{"row":6582,"column":0},"end":{"row":6583,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20763":{"range":{"start":{"row":6594,"column":0},"end":{"row":6595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20764":{"range":{"start":{"row":6603,"column":0},"end":{"row":6604,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20765":{"range":{"start":{"row":6610,"column":0},"end":{"row":6611,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20766":{"range":{"start":{"row":6624,"column":0},"end":{"row":6625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20767":{"range":{"start":{"row":6637,"column":0},"end":{"row":6638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20768":{"range":{"start":{"row":6640,"column":0},"end":{"row":6641,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20769":{"range":{"start":{"row":6643,"column":0},"end":{"row":6644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20770":{"range":{"start":{"row":6645,"column":0},"end":{"row":6646,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20771":{"range":{"start":{"row":6650,"column":0},"end":{"row":6651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20772":{"range":{"start":{"row":6657,"column":0},"end":{"row":6658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20773":{"range":{"start":{"row":6662,"column":0},"end":{"row":6663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20774":{"range":{"start":{"row":6673,"column":0},"end":{"row":6674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20775":{"range":{"start":{"row":6685,"column":0},"end":{"row":6686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20776":{"range":{"start":{"row":6696,"column":0},"end":{"row":6697,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20777":{"range":{"start":{"row":6707,"column":0},"end":{"row":6708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20778":{"range":{"start":{"row":6719,"column":0},"end":{"row":6720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20779":{"range":{"start":{"row":6727,"column":0},"end":{"row":6728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20780":{"range":{"start":{"row":6745,"column":0},"end":{"row":6746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20781":{"range":{"start":{"row":6756,"column":0},"end":{"row":6757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20782":{"range":{"start":{"row":6766,"column":0},"end":{"row":6767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20783":{"range":{"start":{"row":6787,"column":0},"end":{"row":6788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20784":{"range":{"start":{"row":6792,"column":0},"end":{"row":6793,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20785":{"range":{"start":{"row":6799,"column":0},"end":{"row":6800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20786":{"range":{"start":{"row":6804,"column":0},"end":{"row":6805,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20787":{"range":{"start":{"row":6836,"column":0},"end":{"row":6837,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20788":{"range":{"start":{"row":6847,"column":0},"end":{"row":6848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20789":{"range":{"start":{"row":6858,"column":0},"end":{"row":6859,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20790":{"range":{"start":{"row":6869,"column":0},"end":{"row":6870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20791":{"range":{"start":{"row":6903,"column":0},"end":{"row":6904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20792":{"range":{"start":{"row":6924,"column":0},"end":{"row":6925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20793":{"range":{"start":{"row":6936,"column":0},"end":{"row":6937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20794":{"range":{"start":{"row":6952,"column":0},"end":{"row":6953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20795":{"range":{"start":{"row":6964,"column":0},"end":{"row":6965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20796":{"range":{"start":{"row":6971,"column":0},"end":{"row":6972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20797":{"range":{"start":{"row":6996,"column":0},"end":{"row":6997,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20798":{"range":{"start":{"row":7002,"column":0},"end":{"row":7003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20799":{"range":{"start":{"row":7150,"column":0},"end":{"row":7151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20800":{"range":{"start":{"row":7664,"column":0},"end":{"row":7665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20801":{"range":{"start":{"row":7666,"column":0},"end":{"row":7667,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20802":{"range":{"start":{"row":7673,"column":0},"end":{"row":7674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20803":{"range":{"start":{"row":7678,"column":0},"end":{"row":7679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20804":{"range":{"start":{"row":7685,"column":0},"end":{"row":7686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20805":{"range":{"start":{"row":7692,"column":0},"end":{"row":7693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20806":{"range":{"start":{"row":7699,"column":0},"end":{"row":7700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20807":{"range":{"start":{"row":7711,"column":0},"end":{"row":7712,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20808":{"range":{"start":{"row":7719,"column":0},"end":{"row":7720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20809":{"range":{"start":{"row":7730,"column":0},"end":{"row":7731,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20810":{"range":{"start":{"row":7741,"column":0},"end":{"row":7742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20811":{"range":{"start":{"row":7753,"column":0},"end":{"row":7754,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20812":{"range":{"start":{"row":7764,"column":0},"end":{"row":7765,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20813":{"range":{"start":{"row":7775,"column":0},"end":{"row":7776,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20814":{"range":{"start":{"row":7787,"column":0},"end":{"row":7788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20815":{"range":{"start":{"row":7799,"column":0},"end":{"row":7800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20816":{"range":{"start":{"row":7811,"column":0},"end":{"row":7812,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20817":{"range":{"start":{"row":7823,"column":0},"end":{"row":7824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20818":{"range":{"start":{"row":7835,"column":0},"end":{"row":7836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20819":{"range":{"start":{"row":7847,"column":0},"end":{"row":7848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20820":{"range":{"start":{"row":7849,"column":0},"end":{"row":7850,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20821":{"range":{"start":{"row":7854,"column":0},"end":{"row":7855,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20822":{"range":{"start":{"row":7861,"column":0},"end":{"row":7862,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20823":{"range":{"start":{"row":7866,"column":0},"end":{"row":7867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20824":{"range":{"start":{"row":7878,"column":0},"end":{"row":7879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20825":{"range":{"start":{"row":7889,"column":0},"end":{"row":7890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20826":{"range":{"start":{"row":7901,"column":0},"end":{"row":7902,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20827":{"range":{"start":{"row":7912,"column":0},"end":{"row":7913,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20828":{"range":{"start":{"row":7924,"column":0},"end":{"row":7925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20829":{"range":{"start":{"row":7935,"column":0},"end":{"row":7936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20830":{"range":{"start":{"row":7946,"column":0},"end":{"row":7947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20831":{"range":{"start":{"row":7958,"column":0},"end":{"row":7959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20832":{"range":{"start":{"row":7970,"column":0},"end":{"row":7971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20833":{"range":{"start":{"row":7982,"column":0},"end":{"row":7983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20834":{"range":{"start":{"row":7994,"column":0},"end":{"row":7995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20835":{"range":{"start":{"row":8006,"column":0},"end":{"row":8007,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20836":{"range":{"start":{"row":8017,"column":0},"end":{"row":8018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20837":{"range":{"start":{"row":8027,"column":0},"end":{"row":8028,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20838":{"range":{"start":{"row":8035,"column":0},"end":{"row":8036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20839":{"range":{"start":{"row":8043,"column":0},"end":{"row":8044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20840":{"range":{"start":{"row":108,"column":0},"end":{"row":108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20841":{"range":{"start":{"row":115,"column":0},"end":{"row":115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20842":{"range":{"start":{"row":120,"column":0},"end":{"row":120,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20843":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20844":{"range":{"start":{"row":128,"column":0},"end":{"row":128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20845":{"range":{"start":{"row":133,"column":0},"end":{"row":133,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20846":{"range":{"start":{"row":138,"column":0},"end":{"row":138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20847":{"range":{"start":{"row":144,"column":0},"end":{"row":144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20848":{"range":{"start":{"row":156,"column":0},"end":{"row":156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20849":{"range":{"start":{"row":168,"column":0},"end":{"row":168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20850":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20851":{"range":{"start":{"row":202,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20852":{"range":{"start":{"row":209,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20853":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20854":{"range":{"start":{"row":235,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20855":{"range":{"start":{"row":241,"column":0},"end":{"row":241,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20856":{"range":{"start":{"row":247,"column":0},"end":{"row":247,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20857":{"range":{"start":{"row":253,"column":0},"end":{"row":253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20858":{"range":{"start":{"row":259,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20859":{"range":{"start":{"row":264,"column":0},"end":{"row":264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20860":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20861":{"range":{"start":{"row":274,"column":0},"end":{"row":274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20862":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20863":{"range":{"start":{"row":284,"column":0},"end":{"row":284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20864":{"range":{"start":{"row":289,"column":0},"end":{"row":289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20865":{"range":{"start":{"row":301,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20866":{"range":{"start":{"row":308,"column":0},"end":{"row":308,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20867":{"range":{"start":{"row":315,"column":0},"end":{"row":315,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20868":{"range":{"start":{"row":322,"column":0},"end":{"row":322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20869":{"range":{"start":{"row":329,"column":0},"end":{"row":329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20870":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20871":{"range":{"start":{"row":352,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20872":{"range":{"start":{"row":359,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20873":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20874":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20875":{"range":{"start":{"row":379,"column":0},"end":{"row":379,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20876":{"range":{"start":{"row":386,"column":0},"end":{"row":386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20877":{"range":{"start":{"row":393,"column":0},"end":{"row":393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20878":{"range":{"start":{"row":399,"column":0},"end":{"row":399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20879":{"range":{"start":{"row":406,"column":0},"end":{"row":406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20880":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20881":{"range":{"start":{"row":420,"column":0},"end":{"row":420,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20882":{"range":{"start":{"row":427,"column":0},"end":{"row":427,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20883":{"range":{"start":{"row":434,"column":0},"end":{"row":434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20884":{"range":{"start":{"row":441,"column":0},"end":{"row":441,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20885":{"range":{"start":{"row":448,"column":0},"end":{"row":448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20886":{"range":{"start":{"row":471,"column":0},"end":{"row":471,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20887":{"range":{"start":{"row":481,"column":0},"end":{"row":481,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20888":{"range":{"start":{"row":503,"column":0},"end":{"row":503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20889":{"range":{"start":{"row":514,"column":0},"end":{"row":514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20890":{"range":{"start":{"row":525,"column":0},"end":{"row":525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20891":{"range":{"start":{"row":544,"column":0},"end":{"row":544,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20892":{"range":{"start":{"row":551,"column":0},"end":{"row":551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20893":{"range":{"start":{"row":558,"column":0},"end":{"row":558,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20894":{"range":{"start":{"row":565,"column":0},"end":{"row":565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20895":{"range":{"start":{"row":573,"column":0},"end":{"row":573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20896":{"range":{"start":{"row":581,"column":0},"end":{"row":581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20897":{"range":{"start":{"row":592,"column":0},"end":{"row":592,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20898":{"range":{"start":{"row":631,"column":0},"end":{"row":631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20899":{"range":{"start":{"row":642,"column":0},"end":{"row":642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20900":{"range":{"start":{"row":653,"column":0},"end":{"row":653,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20901":{"range":{"start":{"row":690,"column":0},"end":{"row":690,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20902":{"range":{"start":{"row":700,"column":0},"end":{"row":700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20903":{"range":{"start":{"row":710,"column":0},"end":{"row":710,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20904":{"range":{"start":{"row":720,"column":0},"end":{"row":720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20905":{"range":{"start":{"row":736,"column":0},"end":{"row":736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20906":{"range":{"start":{"row":750,"column":0},"end":{"row":750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20907":{"range":{"start":{"row":771,"column":0},"end":{"row":771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20908":{"range":{"start":{"row":783,"column":0},"end":{"row":783,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20909":{"range":{"start":{"row":794,"column":0},"end":{"row":794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20910":{"range":{"start":{"row":819,"column":0},"end":{"row":819,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20911":{"range":{"start":{"row":831,"column":0},"end":{"row":831,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20912":{"range":{"start":{"row":843,"column":0},"end":{"row":843,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20913":{"range":{"start":{"row":866,"column":0},"end":{"row":866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20914":{"range":{"start":{"row":878,"column":0},"end":{"row":878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20915":{"range":{"start":{"row":889,"column":0},"end":{"row":889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20916":{"range":{"start":{"row":900,"column":0},"end":{"row":900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20917":{"range":{"start":{"row":911,"column":0},"end":{"row":911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20918":{"range":{"start":{"row":922,"column":0},"end":{"row":922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20919":{"range":{"start":{"row":1226,"column":0},"end":{"row":1226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20920":{"range":{"start":{"row":1234,"column":0},"end":{"row":1234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20921":{"range":{"start":{"row":1309,"column":0},"end":{"row":1309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20922":{"range":{"start":{"row":1341,"column":0},"end":{"row":1341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20923":{"range":{"start":{"row":1348,"column":0},"end":{"row":1348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20924":{"range":{"start":{"row":1355,"column":0},"end":{"row":1355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20925":{"range":{"start":{"row":1362,"column":0},"end":{"row":1362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20926":{"range":{"start":{"row":1369,"column":0},"end":{"row":1369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20927":{"range":{"start":{"row":1376,"column":0},"end":{"row":1376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20928":{"range":{"start":{"row":1383,"column":0},"end":{"row":1383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20929":{"range":{"start":{"row":1390,"column":0},"end":{"row":1390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20930":{"range":{"start":{"row":1397,"column":0},"end":{"row":1397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20931":{"range":{"start":{"row":1404,"column":0},"end":{"row":1404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20932":{"range":{"start":{"row":1411,"column":0},"end":{"row":1411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20933":{"range":{"start":{"row":1418,"column":0},"end":{"row":1418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20934":{"range":{"start":{"row":1425,"column":0},"end":{"row":1425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20935":{"range":{"start":{"row":1437,"column":0},"end":{"row":1437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20936":{"range":{"start":{"row":1443,"column":0},"end":{"row":1443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20937":{"range":{"start":{"row":1455,"column":0},"end":{"row":1455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20938":{"range":{"start":{"row":1466,"column":0},"end":{"row":1466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20939":{"range":{"start":{"row":1474,"column":0},"end":{"row":1474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20940":{"range":{"start":{"row":1482,"column":0},"end":{"row":1482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20941":{"range":{"start":{"row":1490,"column":0},"end":{"row":1490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20942":{"range":{"start":{"row":1496,"column":0},"end":{"row":1496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20943":{"range":{"start":{"row":1502,"column":0},"end":{"row":1502,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20944":{"range":{"start":{"row":1508,"column":0},"end":{"row":1508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20945":{"range":{"start":{"row":1514,"column":0},"end":{"row":1514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20946":{"range":{"start":{"row":1520,"column":0},"end":{"row":1520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20947":{"range":{"start":{"row":1526,"column":0},"end":{"row":1526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20948":{"range":{"start":{"row":1533,"column":0},"end":{"row":1533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20949":{"range":{"start":{"row":1542,"column":0},"end":{"row":1542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20950":{"range":{"start":{"row":1551,"column":0},"end":{"row":1551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20951":{"range":{"start":{"row":1560,"column":0},"end":{"row":1560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20952":{"range":{"start":{"row":1567,"column":0},"end":{"row":1567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20953":{"range":{"start":{"row":1581,"column":0},"end":{"row":1581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20954":{"range":{"start":{"row":1588,"column":0},"end":{"row":1588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20955":{"range":{"start":{"row":1595,"column":0},"end":{"row":1595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20956":{"range":{"start":{"row":1602,"column":0},"end":{"row":1602,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20957":{"range":{"start":{"row":1609,"column":0},"end":{"row":1609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20958":{"range":{"start":{"row":1616,"column":0},"end":{"row":1616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20959":{"range":{"start":{"row":1623,"column":0},"end":{"row":1623,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20960":{"range":{"start":{"row":1630,"column":0},"end":{"row":1630,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20961":{"range":{"start":{"row":1637,"column":0},"end":{"row":1637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20962":{"range":{"start":{"row":1644,"column":0},"end":{"row":1644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20963":{"range":{"start":{"row":1651,"column":0},"end":{"row":1651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20964":{"range":{"start":{"row":1658,"column":0},"end":{"row":1658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20965":{"range":{"start":{"row":1665,"column":0},"end":{"row":1665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20966":{"range":{"start":{"row":1672,"column":0},"end":{"row":1672,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20967":{"range":{"start":{"row":1679,"column":0},"end":{"row":1679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20968":{"range":{"start":{"row":1686,"column":0},"end":{"row":1686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20969":{"range":{"start":{"row":1693,"column":0},"end":{"row":1693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20970":{"range":{"start":{"row":1700,"column":0},"end":{"row":1700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20971":{"range":{"start":{"row":1707,"column":0},"end":{"row":1707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20972":{"range":{"start":{"row":1714,"column":0},"end":{"row":1714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20973":{"range":{"start":{"row":1721,"column":0},"end":{"row":1721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20974":{"range":{"start":{"row":1728,"column":0},"end":{"row":1728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20975":{"range":{"start":{"row":1735,"column":0},"end":{"row":1735,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20976":{"range":{"start":{"row":1742,"column":0},"end":{"row":1742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20977":{"range":{"start":{"row":1749,"column":0},"end":{"row":1749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20978":{"range":{"start":{"row":1756,"column":0},"end":{"row":1756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20979":{"range":{"start":{"row":1763,"column":0},"end":{"row":1763,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20980":{"range":{"start":{"row":1770,"column":0},"end":{"row":1770,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20981":{"range":{"start":{"row":1777,"column":0},"end":{"row":1777,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20982":{"range":{"start":{"row":1784,"column":0},"end":{"row":1784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20983":{"range":{"start":{"row":1791,"column":0},"end":{"row":1791,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20984":{"range":{"start":{"row":1797,"column":0},"end":{"row":1797,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20985":{"range":{"start":{"row":1803,"column":0},"end":{"row":1803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20986":{"range":{"start":{"row":1809,"column":0},"end":{"row":1809,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20987":{"range":{"start":{"row":1815,"column":0},"end":{"row":1815,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20988":{"range":{"start":{"row":1821,"column":0},"end":{"row":1821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20989":{"range":{"start":{"row":1827,"column":0},"end":{"row":1827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20990":{"range":{"start":{"row":1833,"column":0},"end":{"row":1833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20991":{"range":{"start":{"row":1839,"column":0},"end":{"row":1839,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20992":{"range":{"start":{"row":1845,"column":0},"end":{"row":1845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20993":{"range":{"start":{"row":1851,"column":0},"end":{"row":1851,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20994":{"range":{"start":{"row":1857,"column":0},"end":{"row":1857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20995":{"range":{"start":{"row":1863,"column":0},"end":{"row":1863,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20996":{"range":{"start":{"row":1869,"column":0},"end":{"row":1869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20997":{"range":{"start":{"row":1875,"column":0},"end":{"row":1875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20998":{"range":{"start":{"row":1881,"column":0},"end":{"row":1881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20999":{"range":{"start":{"row":1887,"column":0},"end":{"row":1887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21000":{"range":{"start":{"row":1893,"column":0},"end":{"row":1893,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21001":{"range":{"start":{"row":1899,"column":0},"end":{"row":1899,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21002":{"range":{"start":{"row":1905,"column":0},"end":{"row":1905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21003":{"range":{"start":{"row":1911,"column":0},"end":{"row":1911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21004":{"range":{"start":{"row":1917,"column":0},"end":{"row":1917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21005":{"range":{"start":{"row":1923,"column":0},"end":{"row":1923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21006":{"range":{"start":{"row":1929,"column":0},"end":{"row":1929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21007":{"range":{"start":{"row":1935,"column":0},"end":{"row":1935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21008":{"range":{"start":{"row":1941,"column":0},"end":{"row":1941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21009":{"range":{"start":{"row":1947,"column":0},"end":{"row":1947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21010":{"range":{"start":{"row":1953,"column":0},"end":{"row":1953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21011":{"range":{"start":{"row":1959,"column":0},"end":{"row":1959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21012":{"range":{"start":{"row":1965,"column":0},"end":{"row":1965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21013":{"range":{"start":{"row":1971,"column":0},"end":{"row":1971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21014":{"range":{"start":{"row":1977,"column":0},"end":{"row":1977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21015":{"range":{"start":{"row":1983,"column":0},"end":{"row":1983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21016":{"range":{"start":{"row":1989,"column":0},"end":{"row":1989,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21017":{"range":{"start":{"row":1995,"column":0},"end":{"row":1995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21018":{"range":{"start":{"row":2001,"column":0},"end":{"row":2001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21019":{"range":{"start":{"row":2036,"column":0},"end":{"row":2036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21020":{"range":{"start":{"row":2042,"column":0},"end":{"row":2042,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21021":{"range":{"start":{"row":2048,"column":0},"end":{"row":2048,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21022":{"range":{"start":{"row":2054,"column":0},"end":{"row":2054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21023":{"range":{"start":{"row":2062,"column":0},"end":{"row":2062,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21024":{"range":{"start":{"row":2070,"column":0},"end":{"row":2070,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21025":{"range":{"start":{"row":2078,"column":0},"end":{"row":2078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21026":{"range":{"start":{"row":2086,"column":0},"end":{"row":2086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21027":{"range":{"start":{"row":2094,"column":0},"end":{"row":2094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21028":{"range":{"start":{"row":2102,"column":0},"end":{"row":2102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21029":{"range":{"start":{"row":2110,"column":0},"end":{"row":2110,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21030":{"range":{"start":{"row":2118,"column":0},"end":{"row":2118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21031":{"range":{"start":{"row":2138,"column":0},"end":{"row":2138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21032":{"range":{"start":{"row":2144,"column":0},"end":{"row":2144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21033":{"range":{"start":{"row":2150,"column":0},"end":{"row":2150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21034":{"range":{"start":{"row":2156,"column":0},"end":{"row":2156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21035":{"range":{"start":{"row":2162,"column":0},"end":{"row":2162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21036":{"range":{"start":{"row":2168,"column":0},"end":{"row":2168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21037":{"range":{"start":{"row":2175,"column":0},"end":{"row":2175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21038":{"range":{"start":{"row":2182,"column":0},"end":{"row":2182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21039":{"range":{"start":{"row":2189,"column":0},"end":{"row":2189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21040":{"range":{"start":{"row":2196,"column":0},"end":{"row":2196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21041":{"range":{"start":{"row":2203,"column":0},"end":{"row":2203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21042":{"range":{"start":{"row":2218,"column":0},"end":{"row":2218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21043":{"range":{"start":{"row":2224,"column":0},"end":{"row":2224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21044":{"range":{"start":{"row":2231,"column":0},"end":{"row":2231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21045":{"range":{"start":{"row":2237,"column":0},"end":{"row":2237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21046":{"range":{"start":{"row":2243,"column":0},"end":{"row":2243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21047":{"range":{"start":{"row":2249,"column":0},"end":{"row":2249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21048":{"range":{"start":{"row":2256,"column":0},"end":{"row":2256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21049":{"range":{"start":{"row":2264,"column":0},"end":{"row":2264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21050":{"range":{"start":{"row":2271,"column":0},"end":{"row":2271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21051":{"range":{"start":{"row":2277,"column":0},"end":{"row":2277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21052":{"range":{"start":{"row":2283,"column":0},"end":{"row":2283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21053":{"range":{"start":{"row":2289,"column":0},"end":{"row":2289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21054":{"range":{"start":{"row":2297,"column":0},"end":{"row":2297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21055":{"range":{"start":{"row":2304,"column":0},"end":{"row":2304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21056":{"range":{"start":{"row":2334,"column":0},"end":{"row":2334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21057":{"range":{"start":{"row":2340,"column":0},"end":{"row":2340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21058":{"range":{"start":{"row":2346,"column":0},"end":{"row":2346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21059":{"range":{"start":{"row":2352,"column":0},"end":{"row":2352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21060":{"range":{"start":{"row":2358,"column":0},"end":{"row":2358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21061":{"range":{"start":{"row":2364,"column":0},"end":{"row":2364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21062":{"range":{"start":{"row":2375,"column":0},"end":{"row":2375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21063":{"range":{"start":{"row":2381,"column":0},"end":{"row":2381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21064":{"range":{"start":{"row":2387,"column":0},"end":{"row":2387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21065":{"range":{"start":{"row":2393,"column":0},"end":{"row":2393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21066":{"range":{"start":{"row":2404,"column":0},"end":{"row":2404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21067":{"range":{"start":{"row":2431,"column":0},"end":{"row":2431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21068":{"range":{"start":{"row":2447,"column":0},"end":{"row":2447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21069":{"range":{"start":{"row":2469,"column":0},"end":{"row":2469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21070":{"range":{"start":{"row":2495,"column":0},"end":{"row":2495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21071":{"range":{"start":{"row":2567,"column":0},"end":{"row":2567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21072":{"range":{"start":{"row":2575,"column":0},"end":{"row":2575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21073":{"range":{"start":{"row":2580,"column":0},"end":{"row":2580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21074":{"range":{"start":{"row":2588,"column":0},"end":{"row":2588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21075":{"range":{"start":{"row":2607,"column":0},"end":{"row":2607,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21076":{"range":{"start":{"row":2616,"column":0},"end":{"row":2616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21077":{"range":{"start":{"row":2624,"column":0},"end":{"row":2624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21078":{"range":{"start":{"row":2634,"column":0},"end":{"row":2634,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21079":{"range":{"start":{"row":2875,"column":0},"end":{"row":2875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21080":{"range":{"start":{"row":2880,"column":0},"end":{"row":2880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21081":{"range":{"start":{"row":2887,"column":0},"end":{"row":2887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21082":{"range":{"start":{"row":2894,"column":0},"end":{"row":2894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21083":{"range":{"start":{"row":2917,"column":0},"end":{"row":2917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21084":{"range":{"start":{"row":2929,"column":0},"end":{"row":2929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21085":{"range":{"start":{"row":2937,"column":0},"end":{"row":2937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21086":{"range":{"start":{"row":2992,"column":0},"end":{"row":2992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21087":{"range":{"start":{"row":3009,"column":0},"end":{"row":3009,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21088":{"range":{"start":{"row":3063,"column":0},"end":{"row":3063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21089":{"range":{"start":{"row":3067,"column":0},"end":{"row":3067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21090":{"range":{"start":{"row":3136,"column":0},"end":{"row":3136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21091":{"range":{"start":{"row":3143,"column":0},"end":{"row":3143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21092":{"range":{"start":{"row":3148,"column":0},"end":{"row":3148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21093":{"range":{"start":{"row":3155,"column":0},"end":{"row":3155,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21094":{"range":{"start":{"row":3162,"column":0},"end":{"row":3162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21095":{"range":{"start":{"row":3169,"column":0},"end":{"row":3169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21096":{"range":{"start":{"row":3176,"column":0},"end":{"row":3176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21097":{"range":{"start":{"row":3183,"column":0},"end":{"row":3183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21098":{"range":{"start":{"row":3197,"column":0},"end":{"row":3197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21099":{"range":{"start":{"row":3210,"column":0},"end":{"row":3210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21100":{"range":{"start":{"row":3216,"column":0},"end":{"row":3216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21101":{"range":{"start":{"row":3222,"column":0},"end":{"row":3222,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21102":{"range":{"start":{"row":3235,"column":0},"end":{"row":3235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21103":{"range":{"start":{"row":3242,"column":0},"end":{"row":3242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21104":{"range":{"start":{"row":3248,"column":0},"end":{"row":3248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21105":{"range":{"start":{"row":3259,"column":0},"end":{"row":3259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21106":{"range":{"start":{"row":3271,"column":0},"end":{"row":3271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21107":{"range":{"start":{"row":3282,"column":0},"end":{"row":3282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21108":{"range":{"start":{"row":3300,"column":0},"end":{"row":3300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21109":{"range":{"start":{"row":3311,"column":0},"end":{"row":3311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21110":{"range":{"start":{"row":3322,"column":0},"end":{"row":3322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21111":{"range":{"start":{"row":3331,"column":0},"end":{"row":3331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21112":{"range":{"start":{"row":3348,"column":0},"end":{"row":3348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21113":{"range":{"start":{"row":3356,"column":0},"end":{"row":3356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21114":{"range":{"start":{"row":3364,"column":0},"end":{"row":3364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21115":{"range":{"start":{"row":3372,"column":0},"end":{"row":3372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21116":{"range":{"start":{"row":3380,"column":0},"end":{"row":3380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21117":{"range":{"start":{"row":3388,"column":0},"end":{"row":3388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21118":{"range":{"start":{"row":3396,"column":0},"end":{"row":3396,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21119":{"range":{"start":{"row":3403,"column":0},"end":{"row":3403,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21120":{"range":{"start":{"row":3411,"column":0},"end":{"row":3411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21121":{"range":{"start":{"row":3418,"column":0},"end":{"row":3418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21122":{"range":{"start":{"row":3425,"column":0},"end":{"row":3425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21123":{"range":{"start":{"row":3432,"column":0},"end":{"row":3432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21124":{"range":{"start":{"row":3439,"column":0},"end":{"row":3439,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21125":{"range":{"start":{"row":3446,"column":0},"end":{"row":3446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21126":{"range":{"start":{"row":3453,"column":0},"end":{"row":3453,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21127":{"range":{"start":{"row":3466,"column":0},"end":{"row":3466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21128":{"range":{"start":{"row":3478,"column":0},"end":{"row":3478,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21129":{"range":{"start":{"row":3489,"column":0},"end":{"row":3489,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21130":{"range":{"start":{"row":3500,"column":0},"end":{"row":3500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21131":{"range":{"start":{"row":3511,"column":0},"end":{"row":3511,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21132":{"range":{"start":{"row":3522,"column":0},"end":{"row":3522,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21133":{"range":{"start":{"row":3532,"column":0},"end":{"row":3532,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21134":{"range":{"start":{"row":3573,"column":0},"end":{"row":3573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21135":{"range":{"start":{"row":3585,"column":0},"end":{"row":3585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21136":{"range":{"start":{"row":3608,"column":0},"end":{"row":3608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21137":{"range":{"start":{"row":3620,"column":0},"end":{"row":3620,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21138":{"range":{"start":{"row":3632,"column":0},"end":{"row":3632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21139":{"range":{"start":{"row":3644,"column":0},"end":{"row":3644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21140":{"range":{"start":{"row":3957,"column":0},"end":{"row":3957,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21141":{"range":{"start":{"row":3965,"column":0},"end":{"row":3965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21142":{"range":{"start":{"row":3973,"column":0},"end":{"row":3973,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21143":{"range":{"start":{"row":3984,"column":0},"end":{"row":3984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21144":{"range":{"start":{"row":3992,"column":0},"end":{"row":3992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21145":{"range":{"start":{"row":4000,"column":0},"end":{"row":4000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21146":{"range":{"start":{"row":4030,"column":0},"end":{"row":4030,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21147":{"range":{"start":{"row":4037,"column":0},"end":{"row":4037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21148":{"range":{"start":{"row":4044,"column":0},"end":{"row":4044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21149":{"range":{"start":{"row":4051,"column":0},"end":{"row":4051,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21150":{"range":{"start":{"row":4058,"column":0},"end":{"row":4058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21151":{"range":{"start":{"row":4065,"column":0},"end":{"row":4065,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21152":{"range":{"start":{"row":4072,"column":0},"end":{"row":4072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21153":{"range":{"start":{"row":4079,"column":0},"end":{"row":4079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21154":{"range":{"start":{"row":4086,"column":0},"end":{"row":4086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21155":{"range":{"start":{"row":4093,"column":0},"end":{"row":4093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21156":{"range":{"start":{"row":4100,"column":0},"end":{"row":4100,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21157":{"range":{"start":{"row":4107,"column":0},"end":{"row":4107,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21158":{"range":{"start":{"row":4114,"column":0},"end":{"row":4114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21159":{"range":{"start":{"row":4121,"column":0},"end":{"row":4121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21160":{"range":{"start":{"row":4128,"column":0},"end":{"row":4128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21161":{"range":{"start":{"row":4135,"column":0},"end":{"row":4135,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21162":{"range":{"start":{"row":4142,"column":0},"end":{"row":4142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21163":{"range":{"start":{"row":4149,"column":0},"end":{"row":4149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21164":{"range":{"start":{"row":4156,"column":0},"end":{"row":4156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21165":{"range":{"start":{"row":4163,"column":0},"end":{"row":4163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21166":{"range":{"start":{"row":4170,"column":0},"end":{"row":4170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21167":{"range":{"start":{"row":4177,"column":0},"end":{"row":4177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21168":{"range":{"start":{"row":4184,"column":0},"end":{"row":4184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21169":{"range":{"start":{"row":4191,"column":0},"end":{"row":4191,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21170":{"range":{"start":{"row":4198,"column":0},"end":{"row":4198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21171":{"range":{"start":{"row":4205,"column":0},"end":{"row":4205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21172":{"range":{"start":{"row":4212,"column":0},"end":{"row":4212,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21173":{"range":{"start":{"row":4219,"column":0},"end":{"row":4219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21174":{"range":{"start":{"row":4226,"column":0},"end":{"row":4226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21175":{"range":{"start":{"row":4232,"column":0},"end":{"row":4232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21176":{"range":{"start":{"row":4238,"column":0},"end":{"row":4238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21177":{"range":{"start":{"row":4244,"column":0},"end":{"row":4244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21178":{"range":{"start":{"row":4250,"column":0},"end":{"row":4250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21179":{"range":{"start":{"row":4256,"column":0},"end":{"row":4256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21180":{"range":{"start":{"row":4262,"column":0},"end":{"row":4262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21181":{"range":{"start":{"row":4268,"column":0},"end":{"row":4268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21182":{"range":{"start":{"row":4274,"column":0},"end":{"row":4274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21183":{"range":{"start":{"row":4280,"column":0},"end":{"row":4280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21184":{"range":{"start":{"row":4286,"column":0},"end":{"row":4286,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21185":{"range":{"start":{"row":4292,"column":0},"end":{"row":4292,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21186":{"range":{"start":{"row":4298,"column":0},"end":{"row":4298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21187":{"range":{"start":{"row":4304,"column":0},"end":{"row":4304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21188":{"range":{"start":{"row":4310,"column":0},"end":{"row":4310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21189":{"range":{"start":{"row":4316,"column":0},"end":{"row":4316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21190":{"range":{"start":{"row":4322,"column":0},"end":{"row":4322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21191":{"range":{"start":{"row":4328,"column":0},"end":{"row":4328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21192":{"range":{"start":{"row":4334,"column":0},"end":{"row":4334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21193":{"range":{"start":{"row":4340,"column":0},"end":{"row":4340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21194":{"range":{"start":{"row":4346,"column":0},"end":{"row":4346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21195":{"range":{"start":{"row":4352,"column":0},"end":{"row":4352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21196":{"range":{"start":{"row":4358,"column":0},"end":{"row":4358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21197":{"range":{"start":{"row":4364,"column":0},"end":{"row":4364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21198":{"range":{"start":{"row":4370,"column":0},"end":{"row":4370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21199":{"range":{"start":{"row":4376,"column":0},"end":{"row":4376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21200":{"range":{"start":{"row":4382,"column":0},"end":{"row":4382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21201":{"range":{"start":{"row":4388,"column":0},"end":{"row":4388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21202":{"range":{"start":{"row":4394,"column":0},"end":{"row":4394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21203":{"range":{"start":{"row":4400,"column":0},"end":{"row":4400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21204":{"range":{"start":{"row":4406,"column":0},"end":{"row":4406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21205":{"range":{"start":{"row":4412,"column":0},"end":{"row":4412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21206":{"range":{"start":{"row":4418,"column":0},"end":{"row":4418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21207":{"range":{"start":{"row":4424,"column":0},"end":{"row":4424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21208":{"range":{"start":{"row":4430,"column":0},"end":{"row":4430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21209":{"range":{"start":{"row":4436,"column":0},"end":{"row":4436,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21210":{"range":{"start":{"row":4442,"column":0},"end":{"row":4442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21211":{"range":{"start":{"row":4448,"column":0},"end":{"row":4448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21212":{"range":{"start":{"row":4454,"column":0},"end":{"row":4454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21213":{"range":{"start":{"row":4460,"column":0},"end":{"row":4460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21214":{"range":{"start":{"row":4468,"column":0},"end":{"row":4468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21215":{"range":{"start":{"row":4476,"column":0},"end":{"row":4476,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21216":{"range":{"start":{"row":4492,"column":0},"end":{"row":4492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21217":{"range":{"start":{"row":4498,"column":0},"end":{"row":4498,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21218":{"range":{"start":{"row":4504,"column":0},"end":{"row":4504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21219":{"range":{"start":{"row":4509,"column":0},"end":{"row":4509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21220":{"range":{"start":{"row":4515,"column":0},"end":{"row":4515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21221":{"range":{"start":{"row":4520,"column":0},"end":{"row":4520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21222":{"range":{"start":{"row":4525,"column":0},"end":{"row":4525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21223":{"range":{"start":{"row":4530,"column":0},"end":{"row":4530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21224":{"range":{"start":{"row":4535,"column":0},"end":{"row":4535,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21225":{"range":{"start":{"row":4540,"column":0},"end":{"row":4540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21226":{"range":{"start":{"row":4545,"column":0},"end":{"row":4545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21227":{"range":{"start":{"row":4550,"column":0},"end":{"row":4550,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21228":{"range":{"start":{"row":4555,"column":0},"end":{"row":4555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21229":{"range":{"start":{"row":4560,"column":0},"end":{"row":4560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21230":{"range":{"start":{"row":4565,"column":0},"end":{"row":4565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21231":{"range":{"start":{"row":4570,"column":0},"end":{"row":4570,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21232":{"range":{"start":{"row":4575,"column":0},"end":{"row":4575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21233":{"range":{"start":{"row":4580,"column":0},"end":{"row":4580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21234":{"range":{"start":{"row":4585,"column":0},"end":{"row":4585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21235":{"range":{"start":{"row":4597,"column":0},"end":{"row":4597,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21236":{"range":{"start":{"row":4617,"column":0},"end":{"row":4617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21237":{"range":{"start":{"row":4626,"column":0},"end":{"row":4626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21238":{"range":{"start":{"row":4635,"column":0},"end":{"row":4635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21239":{"range":{"start":{"row":4642,"column":0},"end":{"row":4642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21240":{"range":{"start":{"row":4714,"column":0},"end":{"row":4714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21241":{"range":{"start":{"row":4716,"column":0},"end":{"row":4716,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21242":{"range":{"start":{"row":4721,"column":0},"end":{"row":4721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21243":{"range":{"start":{"row":4728,"column":0},"end":{"row":4728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21244":{"range":{"start":{"row":4733,"column":0},"end":{"row":4733,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21245":{"range":{"start":{"row":4739,"column":0},"end":{"row":4739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21246":{"range":{"start":{"row":4745,"column":0},"end":{"row":4745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21247":{"range":{"start":{"row":4756,"column":0},"end":{"row":4756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21248":{"range":{"start":{"row":4767,"column":0},"end":{"row":4767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21249":{"range":{"start":{"row":4787,"column":0},"end":{"row":4787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21250":{"range":{"start":{"row":4799,"column":0},"end":{"row":4799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21251":{"range":{"start":{"row":4806,"column":0},"end":{"row":4806,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21252":{"range":{"start":{"row":4813,"column":0},"end":{"row":4813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21253":{"range":{"start":{"row":4820,"column":0},"end":{"row":4820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21254":{"range":{"start":{"row":4827,"column":0},"end":{"row":4827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21255":{"range":{"start":{"row":4834,"column":0},"end":{"row":4834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21256":{"range":{"start":{"row":4840,"column":0},"end":{"row":4840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21257":{"range":{"start":{"row":4846,"column":0},"end":{"row":4846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21258":{"range":{"start":{"row":4852,"column":0},"end":{"row":4852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21259":{"range":{"start":{"row":4864,"column":0},"end":{"row":4864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21260":{"range":{"start":{"row":4872,"column":0},"end":{"row":4872,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21261":{"range":{"start":{"row":4880,"column":0},"end":{"row":4880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21262":{"range":{"start":{"row":4888,"column":0},"end":{"row":4888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21263":{"range":{"start":{"row":4896,"column":0},"end":{"row":4896,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21264":{"range":{"start":{"row":4904,"column":0},"end":{"row":4904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21265":{"range":{"start":{"row":4910,"column":0},"end":{"row":4910,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21266":{"range":{"start":{"row":4916,"column":0},"end":{"row":4916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21267":{"range":{"start":{"row":4922,"column":0},"end":{"row":4922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21268":{"range":{"start":{"row":4928,"column":0},"end":{"row":4928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21269":{"range":{"start":{"row":4946,"column":0},"end":{"row":4946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21270":{"range":{"start":{"row":4948,"column":0},"end":{"row":4948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21271":{"range":{"start":{"row":4953,"column":0},"end":{"row":4953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21272":{"range":{"start":{"row":4958,"column":0},"end":{"row":4958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21273":{"range":{"start":{"row":4963,"column":0},"end":{"row":4963,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21274":{"range":{"start":{"row":4970,"column":0},"end":{"row":4970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21275":{"range":{"start":{"row":4977,"column":0},"end":{"row":4977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21276":{"range":{"start":{"row":4984,"column":0},"end":{"row":4984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21277":{"range":{"start":{"row":5000,"column":0},"end":{"row":5000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21278":{"range":{"start":{"row":5003,"column":0},"end":{"row":5003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21279":{"range":{"start":{"row":5015,"column":0},"end":{"row":5015,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21280":{"range":{"start":{"row":5026,"column":0},"end":{"row":5026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21281":{"range":{"start":{"row":5037,"column":0},"end":{"row":5037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21282":{"range":{"start":{"row":5045,"column":0},"end":{"row":5045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21283":{"range":{"start":{"row":5057,"column":0},"end":{"row":5057,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21284":{"range":{"start":{"row":5071,"column":0},"end":{"row":5071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21285":{"range":{"start":{"row":5077,"column":0},"end":{"row":5077,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21286":{"range":{"start":{"row":5086,"column":0},"end":{"row":5086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21287":{"range":{"start":{"row":5091,"column":0},"end":{"row":5091,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21288":{"range":{"start":{"row":5103,"column":0},"end":{"row":5103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21289":{"range":{"start":{"row":5113,"column":0},"end":{"row":5113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21290":{"range":{"start":{"row":5125,"column":0},"end":{"row":5125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21291":{"range":{"start":{"row":5136,"column":0},"end":{"row":5136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21292":{"range":{"start":{"row":5148,"column":0},"end":{"row":5148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21293":{"range":{"start":{"row":5160,"column":0},"end":{"row":5160,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21294":{"range":{"start":{"row":5172,"column":0},"end":{"row":5172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21295":{"range":{"start":{"row":5184,"column":0},"end":{"row":5184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21296":{"range":{"start":{"row":5196,"column":0},"end":{"row":5196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21297":{"range":{"start":{"row":5208,"column":0},"end":{"row":5208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21298":{"range":{"start":{"row":5232,"column":0},"end":{"row":5232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21299":{"range":{"start":{"row":5242,"column":0},"end":{"row":5242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21300":{"range":{"start":{"row":5252,"column":0},"end":{"row":5252,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21301":{"range":{"start":{"row":5262,"column":0},"end":{"row":5262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21302":{"range":{"start":{"row":5281,"column":0},"end":{"row":5281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21303":{"range":{"start":{"row":5289,"column":0},"end":{"row":5289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21304":{"range":{"start":{"row":5294,"column":0},"end":{"row":5294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21305":{"range":{"start":{"row":5306,"column":0},"end":{"row":5306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21306":{"range":{"start":{"row":5316,"column":0},"end":{"row":5316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21307":{"range":{"start":{"row":5327,"column":0},"end":{"row":5327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21308":{"range":{"start":{"row":5339,"column":0},"end":{"row":5339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21309":{"range":{"start":{"row":5351,"column":0},"end":{"row":5351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21310":{"range":{"start":{"row":5362,"column":0},"end":{"row":5362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21311":{"range":{"start":{"row":5374,"column":0},"end":{"row":5374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21312":{"range":{"start":{"row":5386,"column":0},"end":{"row":5386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21313":{"range":{"start":{"row":5398,"column":0},"end":{"row":5398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21314":{"range":{"start":{"row":5410,"column":0},"end":{"row":5410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21315":{"range":{"start":{"row":5429,"column":0},"end":{"row":5429,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21316":{"range":{"start":{"row":5454,"column":0},"end":{"row":5454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21317":{"range":{"start":{"row":5460,"column":0},"end":{"row":5460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21318":{"range":{"start":{"row":5468,"column":0},"end":{"row":5468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21319":{"range":{"start":{"row":5473,"column":0},"end":{"row":5473,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21320":{"range":{"start":{"row":5485,"column":0},"end":{"row":5485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21321":{"range":{"start":{"row":5495,"column":0},"end":{"row":5495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21322":{"range":{"start":{"row":5507,"column":0},"end":{"row":5507,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21323":{"range":{"start":{"row":5518,"column":0},"end":{"row":5518,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21324":{"range":{"start":{"row":5530,"column":0},"end":{"row":5530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21325":{"range":{"start":{"row":5542,"column":0},"end":{"row":5542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21326":{"range":{"start":{"row":5554,"column":0},"end":{"row":5554,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21327":{"range":{"start":{"row":5566,"column":0},"end":{"row":5566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21328":{"range":{"start":{"row":5578,"column":0},"end":{"row":5578,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21329":{"range":{"start":{"row":5584,"column":0},"end":{"row":5584,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21330":{"range":{"start":{"row":5624,"column":0},"end":{"row":5624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21331":{"range":{"start":{"row":5626,"column":0},"end":{"row":5626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21332":{"range":{"start":{"row":5631,"column":0},"end":{"row":5631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21333":{"range":{"start":{"row":5639,"column":0},"end":{"row":5639,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21334":{"range":{"start":{"row":5644,"column":0},"end":{"row":5644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21335":{"range":{"start":{"row":5662,"column":0},"end":{"row":5662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21336":{"range":{"start":{"row":5669,"column":0},"end":{"row":5669,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21337":{"range":{"start":{"row":5676,"column":0},"end":{"row":5676,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21338":{"range":{"start":{"row":5683,"column":0},"end":{"row":5683,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21339":{"range":{"start":{"row":5691,"column":0},"end":{"row":5691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21340":{"range":{"start":{"row":5699,"column":0},"end":{"row":5699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21341":{"range":{"start":{"row":5707,"column":0},"end":{"row":5707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21342":{"range":{"start":{"row":5713,"column":0},"end":{"row":5713,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21343":{"range":{"start":{"row":5719,"column":0},"end":{"row":5719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21344":{"range":{"start":{"row":5726,"column":0},"end":{"row":5726,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21345":{"range":{"start":{"row":5738,"column":0},"end":{"row":5738,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21346":{"range":{"start":{"row":5749,"column":0},"end":{"row":5749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21347":{"range":{"start":{"row":5761,"column":0},"end":{"row":5761,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21348":{"range":{"start":{"row":5772,"column":0},"end":{"row":5772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21349":{"range":{"start":{"row":5779,"column":0},"end":{"row":5779,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21350":{"range":{"start":{"row":5786,"column":0},"end":{"row":5786,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21351":{"range":{"start":{"row":5794,"column":0},"end":{"row":5794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21352":{"range":{"start":{"row":5802,"column":0},"end":{"row":5802,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21353":{"range":{"start":{"row":5813,"column":0},"end":{"row":5813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21354":{"range":{"start":{"row":5823,"column":0},"end":{"row":5823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21355":{"range":{"start":{"row":5833,"column":0},"end":{"row":5833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21356":{"range":{"start":{"row":5845,"column":0},"end":{"row":5845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21357":{"range":{"start":{"row":5857,"column":0},"end":{"row":5857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21358":{"range":{"start":{"row":5869,"column":0},"end":{"row":5869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21359":{"range":{"start":{"row":5881,"column":0},"end":{"row":5881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21360":{"range":{"start":{"row":5904,"column":0},"end":{"row":5904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21361":{"range":{"start":{"row":5916,"column":0},"end":{"row":5916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21362":{"range":{"start":{"row":5928,"column":0},"end":{"row":5928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21363":{"range":{"start":{"row":5940,"column":0},"end":{"row":5940,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21364":{"range":{"start":{"row":5950,"column":0},"end":{"row":5950,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21365":{"range":{"start":{"row":5958,"column":0},"end":{"row":5958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21366":{"range":{"start":{"row":5966,"column":0},"end":{"row":5966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21367":{"range":{"start":{"row":5977,"column":0},"end":{"row":5977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21368":{"range":{"start":{"row":5986,"column":0},"end":{"row":5986,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21369":{"range":{"start":{"row":5995,"column":0},"end":{"row":5995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21370":{"range":{"start":{"row":6003,"column":0},"end":{"row":6003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21371":{"range":{"start":{"row":6011,"column":0},"end":{"row":6011,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21372":{"range":{"start":{"row":6018,"column":0},"end":{"row":6018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21373":{"range":{"start":{"row":6025,"column":0},"end":{"row":6025,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21374":{"range":{"start":{"row":6032,"column":0},"end":{"row":6032,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21375":{"range":{"start":{"row":6039,"column":0},"end":{"row":6039,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21376":{"range":{"start":{"row":6054,"column":0},"end":{"row":6054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21377":{"range":{"start":{"row":6066,"column":0},"end":{"row":6066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21378":{"range":{"start":{"row":6088,"column":0},"end":{"row":6088,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21379":{"range":{"start":{"row":6093,"column":0},"end":{"row":6093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21380":{"range":{"start":{"row":6101,"column":0},"end":{"row":6101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21381":{"range":{"start":{"row":6118,"column":0},"end":{"row":6118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21382":{"range":{"start":{"row":6130,"column":0},"end":{"row":6130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21383":{"range":{"start":{"row":6141,"column":0},"end":{"row":6141,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21384":{"range":{"start":{"row":6152,"column":0},"end":{"row":6152,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21385":{"range":{"start":{"row":6161,"column":0},"end":{"row":6161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21386":{"range":{"start":{"row":6173,"column":0},"end":{"row":6173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21387":{"range":{"start":{"row":6185,"column":0},"end":{"row":6185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21388":{"range":{"start":{"row":6203,"column":0},"end":{"row":6203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21389":{"range":{"start":{"row":6205,"column":0},"end":{"row":6205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21390":{"range":{"start":{"row":6210,"column":0},"end":{"row":6210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21391":{"range":{"start":{"row":6217,"column":0},"end":{"row":6217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21392":{"range":{"start":{"row":6224,"column":0},"end":{"row":6224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21393":{"range":{"start":{"row":6231,"column":0},"end":{"row":6231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21394":{"range":{"start":{"row":6238,"column":0},"end":{"row":6238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21395":{"range":{"start":{"row":6243,"column":0},"end":{"row":6243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21396":{"range":{"start":{"row":6255,"column":0},"end":{"row":6255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21397":{"range":{"start":{"row":6267,"column":0},"end":{"row":6267,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21398":{"range":{"start":{"row":6279,"column":0},"end":{"row":6279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21399":{"range":{"start":{"row":6290,"column":0},"end":{"row":6290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21400":{"range":{"start":{"row":6301,"column":0},"end":{"row":6301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21401":{"range":{"start":{"row":6313,"column":0},"end":{"row":6313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21402":{"range":{"start":{"row":6325,"column":0},"end":{"row":6325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21403":{"range":{"start":{"row":6333,"column":0},"end":{"row":6333,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21404":{"range":{"start":{"row":6347,"column":0},"end":{"row":6347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21405":{"range":{"start":{"row":6349,"column":0},"end":{"row":6349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21406":{"range":{"start":{"row":6354,"column":0},"end":{"row":6354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21407":{"range":{"start":{"row":6361,"column":0},"end":{"row":6361,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21408":{"range":{"start":{"row":6372,"column":0},"end":{"row":6372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21409":{"range":{"start":{"row":6377,"column":0},"end":{"row":6377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21410":{"range":{"start":{"row":6388,"column":0},"end":{"row":6388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21411":{"range":{"start":{"row":6404,"column":0},"end":{"row":6404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21412":{"range":{"start":{"row":6413,"column":0},"end":{"row":6413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21413":{"range":{"start":{"row":6423,"column":0},"end":{"row":6423,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21414":{"range":{"start":{"row":6434,"column":0},"end":{"row":6434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21415":{"range":{"start":{"row":6446,"column":0},"end":{"row":6446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21416":{"range":{"start":{"row":6457,"column":0},"end":{"row":6457,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21417":{"range":{"start":{"row":6465,"column":0},"end":{"row":6465,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21418":{"range":{"start":{"row":6479,"column":0},"end":{"row":6479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21419":{"range":{"start":{"row":6482,"column":0},"end":{"row":6482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21420":{"range":{"start":{"row":6485,"column":0},"end":{"row":6485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21421":{"range":{"start":{"row":6487,"column":0},"end":{"row":6487,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21422":{"range":{"start":{"row":6492,"column":0},"end":{"row":6492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21423":{"range":{"start":{"row":6499,"column":0},"end":{"row":6499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21424":{"range":{"start":{"row":6504,"column":0},"end":{"row":6504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21425":{"range":{"start":{"row":6516,"column":0},"end":{"row":6516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21426":{"range":{"start":{"row":6527,"column":0},"end":{"row":6527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21427":{"range":{"start":{"row":6539,"column":0},"end":{"row":6539,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21428":{"range":{"start":{"row":6551,"column":0},"end":{"row":6551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21429":{"range":{"start":{"row":6563,"column":0},"end":{"row":6563,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21430":{"range":{"start":{"row":6574,"column":0},"end":{"row":6574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21431":{"range":{"start":{"row":6582,"column":0},"end":{"row":6582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21432":{"range":{"start":{"row":6594,"column":0},"end":{"row":6594,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21433":{"range":{"start":{"row":6603,"column":0},"end":{"row":6603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21434":{"range":{"start":{"row":6610,"column":0},"end":{"row":6610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21435":{"range":{"start":{"row":6624,"column":0},"end":{"row":6624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21436":{"range":{"start":{"row":6637,"column":0},"end":{"row":6637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21437":{"range":{"start":{"row":6640,"column":0},"end":{"row":6640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21438":{"range":{"start":{"row":6643,"column":0},"end":{"row":6643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21439":{"range":{"start":{"row":6645,"column":0},"end":{"row":6645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21440":{"range":{"start":{"row":6650,"column":0},"end":{"row":6650,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21441":{"range":{"start":{"row":6657,"column":0},"end":{"row":6657,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21442":{"range":{"start":{"row":6662,"column":0},"end":{"row":6662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21443":{"range":{"start":{"row":6673,"column":0},"end":{"row":6673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21444":{"range":{"start":{"row":6685,"column":0},"end":{"row":6685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21445":{"range":{"start":{"row":6696,"column":0},"end":{"row":6696,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21446":{"range":{"start":{"row":6707,"column":0},"end":{"row":6707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21447":{"range":{"start":{"row":6719,"column":0},"end":{"row":6719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21448":{"range":{"start":{"row":6727,"column":0},"end":{"row":6727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21449":{"range":{"start":{"row":6745,"column":0},"end":{"row":6745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21450":{"range":{"start":{"row":6756,"column":0},"end":{"row":6756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21451":{"range":{"start":{"row":6766,"column":0},"end":{"row":6766,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21452":{"range":{"start":{"row":6787,"column":0},"end":{"row":6787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21453":{"range":{"start":{"row":6792,"column":0},"end":{"row":6792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21454":{"range":{"start":{"row":6799,"column":0},"end":{"row":6799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21455":{"range":{"start":{"row":6804,"column":0},"end":{"row":6804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21456":{"range":{"start":{"row":6836,"column":0},"end":{"row":6836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21457":{"range":{"start":{"row":6847,"column":0},"end":{"row":6847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21458":{"range":{"start":{"row":6858,"column":0},"end":{"row":6858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21459":{"range":{"start":{"row":6869,"column":0},"end":{"row":6869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21460":{"range":{"start":{"row":6903,"column":0},"end":{"row":6903,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21461":{"range":{"start":{"row":6924,"column":0},"end":{"row":6924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21462":{"range":{"start":{"row":6936,"column":0},"end":{"row":6936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21463":{"range":{"start":{"row":6952,"column":0},"end":{"row":6952,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21464":{"range":{"start":{"row":6964,"column":0},"end":{"row":6964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21465":{"range":{"start":{"row":6971,"column":0},"end":{"row":6971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21466":{"range":{"start":{"row":6996,"column":0},"end":{"row":6996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21467":{"range":{"start":{"row":7002,"column":0},"end":{"row":7002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21468":{"range":{"start":{"row":7150,"column":0},"end":{"row":7150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21469":{"range":{"start":{"row":7664,"column":0},"end":{"row":7664,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21470":{"range":{"start":{"row":7666,"column":0},"end":{"row":7666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21471":{"range":{"start":{"row":7673,"column":0},"end":{"row":7673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21472":{"range":{"start":{"row":7678,"column":0},"end":{"row":7678,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21473":{"range":{"start":{"row":7685,"column":0},"end":{"row":7685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21474":{"range":{"start":{"row":7692,"column":0},"end":{"row":7692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21475":{"range":{"start":{"row":7699,"column":0},"end":{"row":7699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21476":{"range":{"start":{"row":7711,"column":0},"end":{"row":7711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21477":{"range":{"start":{"row":7719,"column":0},"end":{"row":7719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21478":{"range":{"start":{"row":7730,"column":0},"end":{"row":7730,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21479":{"range":{"start":{"row":7741,"column":0},"end":{"row":7741,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21480":{"range":{"start":{"row":7753,"column":0},"end":{"row":7753,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21481":{"range":{"start":{"row":7764,"column":0},"end":{"row":7764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21482":{"range":{"start":{"row":7775,"column":0},"end":{"row":7775,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21483":{"range":{"start":{"row":7787,"column":0},"end":{"row":7787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21484":{"range":{"start":{"row":7799,"column":0},"end":{"row":7799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21485":{"range":{"start":{"row":7811,"column":0},"end":{"row":7811,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21486":{"range":{"start":{"row":7823,"column":0},"end":{"row":7823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21487":{"range":{"start":{"row":7835,"column":0},"end":{"row":7835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21488":{"range":{"start":{"row":7847,"column":0},"end":{"row":7847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21489":{"range":{"start":{"row":7849,"column":0},"end":{"row":7849,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21490":{"range":{"start":{"row":7854,"column":0},"end":{"row":7854,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21491":{"range":{"start":{"row":7861,"column":0},"end":{"row":7861,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21492":{"range":{"start":{"row":7866,"column":0},"end":{"row":7866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21493":{"range":{"start":{"row":7878,"column":0},"end":{"row":7878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21494":{"range":{"start":{"row":7889,"column":0},"end":{"row":7889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21495":{"range":{"start":{"row":7901,"column":0},"end":{"row":7901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21496":{"range":{"start":{"row":7912,"column":0},"end":{"row":7912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21497":{"range":{"start":{"row":7924,"column":0},"end":{"row":7924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21498":{"range":{"start":{"row":7935,"column":0},"end":{"row":7935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21499":{"range":{"start":{"row":7946,"column":0},"end":{"row":7946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21500":{"range":{"start":{"row":7958,"column":0},"end":{"row":7958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21501":{"range":{"start":{"row":7970,"column":0},"end":{"row":7970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21502":{"range":{"start":{"row":7982,"column":0},"end":{"row":7982,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21503":{"range":{"start":{"row":7994,"column":0},"end":{"row":7994,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21504":{"range":{"start":{"row":8006,"column":0},"end":{"row":8006,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21505":{"range":{"start":{"row":8017,"column":0},"end":{"row":8017,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21506":{"range":{"start":{"row":8027,"column":0},"end":{"row":8027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21507":{"range":{"start":{"row":8035,"column":0},"end":{"row":8035,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21508":{"range":{"start":{"row":8043,"column":0},"end":{"row":8043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22847":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22848":{"range":{"start":{"row":115,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22849":{"range":{"start":{"row":120,"column":0},"end":{"row":121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22850":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22851":{"range":{"start":{"row":128,"column":0},"end":{"row":129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22852":{"range":{"start":{"row":133,"column":0},"end":{"row":134,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22853":{"range":{"start":{"row":138,"column":0},"end":{"row":139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22854":{"range":{"start":{"row":144,"column":0},"end":{"row":145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22855":{"range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22856":{"range":{"start":{"row":168,"column":0},"end":{"row":169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22857":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22858":{"range":{"start":{"row":202,"column":0},"end":{"row":203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22859":{"range":{"start":{"row":209,"column":0},"end":{"row":210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22860":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22861":{"range":{"start":{"row":235,"column":0},"end":{"row":236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22862":{"range":{"start":{"row":241,"column":0},"end":{"row":242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22863":{"range":{"start":{"row":247,"column":0},"end":{"row":248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22864":{"range":{"start":{"row":253,"column":0},"end":{"row":254,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22865":{"range":{"start":{"row":259,"column":0},"end":{"row":260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22866":{"range":{"start":{"row":264,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22867":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22868":{"range":{"start":{"row":274,"column":0},"end":{"row":275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22869":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22870":{"range":{"start":{"row":284,"column":0},"end":{"row":285,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22871":{"range":{"start":{"row":289,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22872":{"range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22873":{"range":{"start":{"row":308,"column":0},"end":{"row":309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22874":{"range":{"start":{"row":315,"column":0},"end":{"row":316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22875":{"range":{"start":{"row":322,"column":0},"end":{"row":323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22876":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22877":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22878":{"range":{"start":{"row":352,"column":0},"end":{"row":353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22879":{"range":{"start":{"row":359,"column":0},"end":{"row":360,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22880":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22881":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22882":{"range":{"start":{"row":379,"column":0},"end":{"row":380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22883":{"range":{"start":{"row":386,"column":0},"end":{"row":387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22884":{"range":{"start":{"row":393,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22885":{"range":{"start":{"row":399,"column":0},"end":{"row":400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22886":{"range":{"start":{"row":406,"column":0},"end":{"row":407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22887":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22888":{"range":{"start":{"row":420,"column":0},"end":{"row":421,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22889":{"range":{"start":{"row":427,"column":0},"end":{"row":428,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22890":{"range":{"start":{"row":434,"column":0},"end":{"row":435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22891":{"range":{"start":{"row":441,"column":0},"end":{"row":442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22892":{"range":{"start":{"row":448,"column":0},"end":{"row":449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22893":{"range":{"start":{"row":471,"column":0},"end":{"row":472,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22894":{"range":{"start":{"row":481,"column":0},"end":{"row":482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22895":{"range":{"start":{"row":503,"column":0},"end":{"row":504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22896":{"range":{"start":{"row":514,"column":0},"end":{"row":515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22897":{"range":{"start":{"row":525,"column":0},"end":{"row":526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22898":{"range":{"start":{"row":544,"column":0},"end":{"row":545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22899":{"range":{"start":{"row":551,"column":0},"end":{"row":552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22900":{"range":{"start":{"row":558,"column":0},"end":{"row":559,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22901":{"range":{"start":{"row":565,"column":0},"end":{"row":566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22902":{"range":{"start":{"row":573,"column":0},"end":{"row":574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22903":{"range":{"start":{"row":581,"column":0},"end":{"row":582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22904":{"range":{"start":{"row":592,"column":0},"end":{"row":593,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22905":{"range":{"start":{"row":631,"column":0},"end":{"row":632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22906":{"range":{"start":{"row":642,"column":0},"end":{"row":643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22907":{"range":{"start":{"row":653,"column":0},"end":{"row":654,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22908":{"range":{"start":{"row":690,"column":0},"end":{"row":691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22909":{"range":{"start":{"row":700,"column":0},"end":{"row":701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22910":{"range":{"start":{"row":710,"column":0},"end":{"row":711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22911":{"range":{"start":{"row":720,"column":0},"end":{"row":721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22912":{"range":{"start":{"row":736,"column":0},"end":{"row":737,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22913":{"range":{"start":{"row":750,"column":0},"end":{"row":751,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22914":{"range":{"start":{"row":771,"column":0},"end":{"row":772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22915":{"range":{"start":{"row":783,"column":0},"end":{"row":784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22916":{"range":{"start":{"row":794,"column":0},"end":{"row":795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22917":{"range":{"start":{"row":819,"column":0},"end":{"row":820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22918":{"range":{"start":{"row":831,"column":0},"end":{"row":832,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22919":{"range":{"start":{"row":843,"column":0},"end":{"row":844,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22920":{"range":{"start":{"row":866,"column":0},"end":{"row":867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22921":{"range":{"start":{"row":878,"column":0},"end":{"row":879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22922":{"range":{"start":{"row":889,"column":0},"end":{"row":890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22923":{"range":{"start":{"row":900,"column":0},"end":{"row":901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22924":{"range":{"start":{"row":911,"column":0},"end":{"row":912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22925":{"range":{"start":{"row":922,"column":0},"end":{"row":923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22926":{"range":{"start":{"row":1226,"column":0},"end":{"row":1227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22927":{"range":{"start":{"row":1234,"column":0},"end":{"row":1235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22928":{"range":{"start":{"row":1309,"column":0},"end":{"row":1310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22929":{"range":{"start":{"row":1341,"column":0},"end":{"row":1342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22930":{"range":{"start":{"row":1348,"column":0},"end":{"row":1349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22931":{"range":{"start":{"row":1355,"column":0},"end":{"row":1356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22932":{"range":{"start":{"row":1362,"column":0},"end":{"row":1363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22933":{"range":{"start":{"row":1369,"column":0},"end":{"row":1370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22934":{"range":{"start":{"row":1376,"column":0},"end":{"row":1377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22935":{"range":{"start":{"row":1383,"column":0},"end":{"row":1384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22936":{"range":{"start":{"row":1390,"column":0},"end":{"row":1391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22937":{"range":{"start":{"row":1397,"column":0},"end":{"row":1398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22938":{"range":{"start":{"row":1404,"column":0},"end":{"row":1405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22939":{"range":{"start":{"row":1411,"column":0},"end":{"row":1412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22940":{"range":{"start":{"row":1418,"column":0},"end":{"row":1419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22941":{"range":{"start":{"row":1425,"column":0},"end":{"row":1426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22942":{"range":{"start":{"row":1437,"column":0},"end":{"row":1438,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22943":{"range":{"start":{"row":1443,"column":0},"end":{"row":1444,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22944":{"range":{"start":{"row":1455,"column":0},"end":{"row":1456,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22945":{"range":{"start":{"row":1466,"column":0},"end":{"row":1467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22946":{"range":{"start":{"row":1474,"column":0},"end":{"row":1475,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22947":{"range":{"start":{"row":1482,"column":0},"end":{"row":1483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22948":{"range":{"start":{"row":1490,"column":0},"end":{"row":1491,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22949":{"range":{"start":{"row":1496,"column":0},"end":{"row":1497,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22950":{"range":{"start":{"row":1502,"column":0},"end":{"row":1503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22951":{"range":{"start":{"row":1508,"column":0},"end":{"row":1509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22952":{"range":{"start":{"row":1514,"column":0},"end":{"row":1515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22953":{"range":{"start":{"row":1520,"column":0},"end":{"row":1521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22954":{"range":{"start":{"row":1526,"column":0},"end":{"row":1527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22955":{"range":{"start":{"row":1533,"column":0},"end":{"row":1534,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22956":{"range":{"start":{"row":1542,"column":0},"end":{"row":1543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22957":{"range":{"start":{"row":1551,"column":0},"end":{"row":1552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22958":{"range":{"start":{"row":1560,"column":0},"end":{"row":1561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22959":{"range":{"start":{"row":1567,"column":0},"end":{"row":1568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22960":{"range":{"start":{"row":1581,"column":0},"end":{"row":1582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22961":{"range":{"start":{"row":1588,"column":0},"end":{"row":1589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22962":{"range":{"start":{"row":1595,"column":0},"end":{"row":1596,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22963":{"range":{"start":{"row":1602,"column":0},"end":{"row":1603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22964":{"range":{"start":{"row":1609,"column":0},"end":{"row":1610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22965":{"range":{"start":{"row":1616,"column":0},"end":{"row":1617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22966":{"range":{"start":{"row":1623,"column":0},"end":{"row":1624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22967":{"range":{"start":{"row":1630,"column":0},"end":{"row":1631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22968":{"range":{"start":{"row":1637,"column":0},"end":{"row":1638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22969":{"range":{"start":{"row":1644,"column":0},"end":{"row":1645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22970":{"range":{"start":{"row":1651,"column":0},"end":{"row":1652,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22971":{"range":{"start":{"row":1658,"column":0},"end":{"row":1659,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22972":{"range":{"start":{"row":1665,"column":0},"end":{"row":1666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22973":{"range":{"start":{"row":1672,"column":0},"end":{"row":1673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22974":{"range":{"start":{"row":1679,"column":0},"end":{"row":1680,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22975":{"range":{"start":{"row":1686,"column":0},"end":{"row":1687,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22976":{"range":{"start":{"row":1693,"column":0},"end":{"row":1694,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22977":{"range":{"start":{"row":1700,"column":0},"end":{"row":1701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22978":{"range":{"start":{"row":1707,"column":0},"end":{"row":1708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22979":{"range":{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22980":{"range":{"start":{"row":1721,"column":0},"end":{"row":1722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22981":{"range":{"start":{"row":1728,"column":0},"end":{"row":1729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22982":{"range":{"start":{"row":1735,"column":0},"end":{"row":1736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22983":{"range":{"start":{"row":1742,"column":0},"end":{"row":1743,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22984":{"range":{"start":{"row":1749,"column":0},"end":{"row":1750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22985":{"range":{"start":{"row":1756,"column":0},"end":{"row":1757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22986":{"range":{"start":{"row":1763,"column":0},"end":{"row":1764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22987":{"range":{"start":{"row":1770,"column":0},"end":{"row":1771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22988":{"range":{"start":{"row":1777,"column":0},"end":{"row":1778,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22989":{"range":{"start":{"row":1784,"column":0},"end":{"row":1785,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22990":{"range":{"start":{"row":1791,"column":0},"end":{"row":1792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22991":{"range":{"start":{"row":1797,"column":0},"end":{"row":1798,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22992":{"range":{"start":{"row":1803,"column":0},"end":{"row":1804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22993":{"range":{"start":{"row":1809,"column":0},"end":{"row":1810,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22994":{"range":{"start":{"row":1815,"column":0},"end":{"row":1816,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22995":{"range":{"start":{"row":1821,"column":0},"end":{"row":1822,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22996":{"range":{"start":{"row":1827,"column":0},"end":{"row":1828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22997":{"range":{"start":{"row":1833,"column":0},"end":{"row":1834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22998":{"range":{"start":{"row":1839,"column":0},"end":{"row":1840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22999":{"range":{"start":{"row":1845,"column":0},"end":{"row":1846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23000":{"range":{"start":{"row":1851,"column":0},"end":{"row":1852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23001":{"range":{"start":{"row":1857,"column":0},"end":{"row":1858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23002":{"range":{"start":{"row":1863,"column":0},"end":{"row":1864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23003":{"range":{"start":{"row":1869,"column":0},"end":{"row":1870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23004":{"range":{"start":{"row":1875,"column":0},"end":{"row":1876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23005":{"range":{"start":{"row":1881,"column":0},"end":{"row":1882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23006":{"range":{"start":{"row":1887,"column":0},"end":{"row":1888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23007":{"range":{"start":{"row":1893,"column":0},"end":{"row":1894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23008":{"range":{"start":{"row":1899,"column":0},"end":{"row":1900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23009":{"range":{"start":{"row":1905,"column":0},"end":{"row":1906,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23010":{"range":{"start":{"row":1911,"column":0},"end":{"row":1912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23011":{"range":{"start":{"row":1917,"column":0},"end":{"row":1918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23012":{"range":{"start":{"row":1923,"column":0},"end":{"row":1924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23013":{"range":{"start":{"row":1929,"column":0},"end":{"row":1930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23014":{"range":{"start":{"row":1935,"column":0},"end":{"row":1936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23015":{"range":{"start":{"row":1941,"column":0},"end":{"row":1942,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23016":{"range":{"start":{"row":1947,"column":0},"end":{"row":1948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23017":{"range":{"start":{"row":1953,"column":0},"end":{"row":1954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23018":{"range":{"start":{"row":1959,"column":0},"end":{"row":1960,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23019":{"range":{"start":{"row":1965,"column":0},"end":{"row":1966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23020":{"range":{"start":{"row":1971,"column":0},"end":{"row":1972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23021":{"range":{"start":{"row":1977,"column":0},"end":{"row":1978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23022":{"range":{"start":{"row":1983,"column":0},"end":{"row":1984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23023":{"range":{"start":{"row":1989,"column":0},"end":{"row":1990,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23024":{"range":{"start":{"row":1995,"column":0},"end":{"row":1996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23025":{"range":{"start":{"row":2001,"column":0},"end":{"row":2002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23026":{"range":{"start":{"row":2036,"column":0},"end":{"row":2037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23027":{"range":{"start":{"row":2042,"column":0},"end":{"row":2043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23028":{"range":{"start":{"row":2048,"column":0},"end":{"row":2049,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23029":{"range":{"start":{"row":2054,"column":0},"end":{"row":2055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23030":{"range":{"start":{"row":2062,"column":0},"end":{"row":2063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23031":{"range":{"start":{"row":2070,"column":0},"end":{"row":2071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23032":{"range":{"start":{"row":2078,"column":0},"end":{"row":2079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23033":{"range":{"start":{"row":2086,"column":0},"end":{"row":2087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23034":{"range":{"start":{"row":2094,"column":0},"end":{"row":2095,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23035":{"range":{"start":{"row":2102,"column":0},"end":{"row":2103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23036":{"range":{"start":{"row":2110,"column":0},"end":{"row":2111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23037":{"range":{"start":{"row":2118,"column":0},"end":{"row":2119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23038":{"range":{"start":{"row":2138,"column":0},"end":{"row":2139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23039":{"range":{"start":{"row":2144,"column":0},"end":{"row":2145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23040":{"range":{"start":{"row":2150,"column":0},"end":{"row":2151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23041":{"range":{"start":{"row":2156,"column":0},"end":{"row":2157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23042":{"range":{"start":{"row":2162,"column":0},"end":{"row":2163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23043":{"range":{"start":{"row":2168,"column":0},"end":{"row":2169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23044":{"range":{"start":{"row":2175,"column":0},"end":{"row":2176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23045":{"range":{"start":{"row":2182,"column":0},"end":{"row":2183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23046":{"range":{"start":{"row":2189,"column":0},"end":{"row":2190,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23047":{"range":{"start":{"row":2196,"column":0},"end":{"row":2197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23048":{"range":{"start":{"row":2203,"column":0},"end":{"row":2204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23049":{"range":{"start":{"row":2218,"column":0},"end":{"row":2219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23050":{"range":{"start":{"row":2224,"column":0},"end":{"row":2225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23051":{"range":{"start":{"row":2231,"column":0},"end":{"row":2232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23052":{"range":{"start":{"row":2237,"column":0},"end":{"row":2238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23053":{"range":{"start":{"row":2243,"column":0},"end":{"row":2244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23054":{"range":{"start":{"row":2249,"column":0},"end":{"row":2250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23055":{"range":{"start":{"row":2256,"column":0},"end":{"row":2257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23056":{"range":{"start":{"row":2264,"column":0},"end":{"row":2265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23057":{"range":{"start":{"row":2271,"column":0},"end":{"row":2272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23058":{"range":{"start":{"row":2277,"column":0},"end":{"row":2278,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23059":{"range":{"start":{"row":2283,"column":0},"end":{"row":2284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23060":{"range":{"start":{"row":2289,"column":0},"end":{"row":2290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23061":{"range":{"start":{"row":2297,"column":0},"end":{"row":2298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23062":{"range":{"start":{"row":2304,"column":0},"end":{"row":2305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23063":{"range":{"start":{"row":2334,"column":0},"end":{"row":2335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23064":{"range":{"start":{"row":2340,"column":0},"end":{"row":2341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23065":{"range":{"start":{"row":2346,"column":0},"end":{"row":2347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23066":{"range":{"start":{"row":2352,"column":0},"end":{"row":2353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23067":{"range":{"start":{"row":2358,"column":0},"end":{"row":2359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23068":{"range":{"start":{"row":2364,"column":0},"end":{"row":2365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23069":{"range":{"start":{"row":2375,"column":0},"end":{"row":2376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23070":{"range":{"start":{"row":2381,"column":0},"end":{"row":2382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23071":{"range":{"start":{"row":2387,"column":0},"end":{"row":2388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23072":{"range":{"start":{"row":2393,"column":0},"end":{"row":2394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23073":{"range":{"start":{"row":2404,"column":0},"end":{"row":2405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23074":{"range":{"start":{"row":2431,"column":0},"end":{"row":2432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23075":{"range":{"start":{"row":2447,"column":0},"end":{"row":2448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23076":{"range":{"start":{"row":2469,"column":0},"end":{"row":2470,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23077":{"range":{"start":{"row":2495,"column":0},"end":{"row":2496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23078":{"range":{"start":{"row":2567,"column":0},"end":{"row":2568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23079":{"range":{"start":{"row":2575,"column":0},"end":{"row":2576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23080":{"range":{"start":{"row":2580,"column":0},"end":{"row":2581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23081":{"range":{"start":{"row":2588,"column":0},"end":{"row":2589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23082":{"range":{"start":{"row":2607,"column":0},"end":{"row":2608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23083":{"range":{"start":{"row":2616,"column":0},"end":{"row":2617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23084":{"range":{"start":{"row":2624,"column":0},"end":{"row":2625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23085":{"range":{"start":{"row":2634,"column":0},"end":{"row":2635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23086":{"range":{"start":{"row":2875,"column":0},"end":{"row":2876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23087":{"range":{"start":{"row":2880,"column":0},"end":{"row":2881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23088":{"range":{"start":{"row":2887,"column":0},"end":{"row":2888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23089":{"range":{"start":{"row":2894,"column":0},"end":{"row":2895,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23090":{"range":{"start":{"row":2917,"column":0},"end":{"row":2918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23091":{"range":{"start":{"row":2929,"column":0},"end":{"row":2930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23092":{"range":{"start":{"row":2937,"column":0},"end":{"row":2938,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23093":{"range":{"start":{"row":2992,"column":0},"end":{"row":2993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23094":{"range":{"start":{"row":3009,"column":0},"end":{"row":3010,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23095":{"range":{"start":{"row":3063,"column":0},"end":{"row":3064,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23096":{"range":{"start":{"row":3067,"column":0},"end":{"row":3068,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23097":{"range":{"start":{"row":3136,"column":0},"end":{"row":3137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23098":{"range":{"start":{"row":3143,"column":0},"end":{"row":3144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23099":{"range":{"start":{"row":3148,"column":0},"end":{"row":3149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23100":{"range":{"start":{"row":3155,"column":0},"end":{"row":3156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23101":{"range":{"start":{"row":3162,"column":0},"end":{"row":3163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23102":{"range":{"start":{"row":3169,"column":0},"end":{"row":3170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23103":{"range":{"start":{"row":3176,"column":0},"end":{"row":3177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23104":{"range":{"start":{"row":3183,"column":0},"end":{"row":3184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23105":{"range":{"start":{"row":3197,"column":0},"end":{"row":3198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23106":{"range":{"start":{"row":3210,"column":0},"end":{"row":3211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23107":{"range":{"start":{"row":3216,"column":0},"end":{"row":3217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23108":{"range":{"start":{"row":3222,"column":0},"end":{"row":3223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23109":{"range":{"start":{"row":3235,"column":0},"end":{"row":3236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23110":{"range":{"start":{"row":3242,"column":0},"end":{"row":3243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23111":{"range":{"start":{"row":3248,"column":0},"end":{"row":3249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23112":{"range":{"start":{"row":3259,"column":0},"end":{"row":3260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23113":{"range":{"start":{"row":3271,"column":0},"end":{"row":3272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23114":{"range":{"start":{"row":3282,"column":0},"end":{"row":3283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23115":{"range":{"start":{"row":3300,"column":0},"end":{"row":3301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23116":{"range":{"start":{"row":3311,"column":0},"end":{"row":3312,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23117":{"range":{"start":{"row":3322,"column":0},"end":{"row":3323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23118":{"range":{"start":{"row":3331,"column":0},"end":{"row":3332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23119":{"range":{"start":{"row":3348,"column":0},"end":{"row":3349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23120":{"range":{"start":{"row":3356,"column":0},"end":{"row":3357,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23121":{"range":{"start":{"row":3364,"column":0},"end":{"row":3365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23122":{"range":{"start":{"row":3372,"column":0},"end":{"row":3373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23123":{"range":{"start":{"row":3380,"column":0},"end":{"row":3381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23124":{"range":{"start":{"row":3388,"column":0},"end":{"row":3389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23125":{"range":{"start":{"row":3396,"column":0},"end":{"row":3397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23126":{"range":{"start":{"row":3403,"column":0},"end":{"row":3404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23127":{"range":{"start":{"row":3411,"column":0},"end":{"row":3412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23128":{"range":{"start":{"row":3418,"column":0},"end":{"row":3419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23129":{"range":{"start":{"row":3425,"column":0},"end":{"row":3426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23130":{"range":{"start":{"row":3432,"column":0},"end":{"row":3433,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23131":{"range":{"start":{"row":3439,"column":0},"end":{"row":3440,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23132":{"range":{"start":{"row":3446,"column":0},"end":{"row":3447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23133":{"range":{"start":{"row":3453,"column":0},"end":{"row":3454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23134":{"range":{"start":{"row":3466,"column":0},"end":{"row":3467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23135":{"range":{"start":{"row":3478,"column":0},"end":{"row":3479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23136":{"range":{"start":{"row":3489,"column":0},"end":{"row":3490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23137":{"range":{"start":{"row":3500,"column":0},"end":{"row":3501,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23138":{"range":{"start":{"row":3511,"column":0},"end":{"row":3512,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23139":{"range":{"start":{"row":3522,"column":0},"end":{"row":3523,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23140":{"range":{"start":{"row":3532,"column":0},"end":{"row":3533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23141":{"range":{"start":{"row":3573,"column":0},"end":{"row":3574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23142":{"range":{"start":{"row":3585,"column":0},"end":{"row":3586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23143":{"range":{"start":{"row":3608,"column":0},"end":{"row":3609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23144":{"range":{"start":{"row":3620,"column":0},"end":{"row":3621,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23145":{"range":{"start":{"row":3632,"column":0},"end":{"row":3633,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23146":{"range":{"start":{"row":3644,"column":0},"end":{"row":3645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23147":{"range":{"start":{"row":3957,"column":0},"end":{"row":3958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23148":{"range":{"start":{"row":3965,"column":0},"end":{"row":3966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23149":{"range":{"start":{"row":3973,"column":0},"end":{"row":3974,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23150":{"range":{"start":{"row":3984,"column":0},"end":{"row":3985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23151":{"range":{"start":{"row":3992,"column":0},"end":{"row":3993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23152":{"range":{"start":{"row":4000,"column":0},"end":{"row":4001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23153":{"range":{"start":{"row":4030,"column":0},"end":{"row":4031,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23154":{"range":{"start":{"row":4037,"column":0},"end":{"row":4038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23155":{"range":{"start":{"row":4044,"column":0},"end":{"row":4045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23156":{"range":{"start":{"row":4051,"column":0},"end":{"row":4052,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23157":{"range":{"start":{"row":4058,"column":0},"end":{"row":4059,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23158":{"range":{"start":{"row":4065,"column":0},"end":{"row":4066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23159":{"range":{"start":{"row":4072,"column":0},"end":{"row":4073,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23160":{"range":{"start":{"row":4079,"column":0},"end":{"row":4080,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23161":{"range":{"start":{"row":4086,"column":0},"end":{"row":4087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23162":{"range":{"start":{"row":4093,"column":0},"end":{"row":4094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23163":{"range":{"start":{"row":4100,"column":0},"end":{"row":4101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23164":{"range":{"start":{"row":4107,"column":0},"end":{"row":4108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23165":{"range":{"start":{"row":4114,"column":0},"end":{"row":4115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23166":{"range":{"start":{"row":4121,"column":0},"end":{"row":4122,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23167":{"range":{"start":{"row":4128,"column":0},"end":{"row":4129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23168":{"range":{"start":{"row":4135,"column":0},"end":{"row":4136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23169":{"range":{"start":{"row":4142,"column":0},"end":{"row":4143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23170":{"range":{"start":{"row":4149,"column":0},"end":{"row":4150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23171":{"range":{"start":{"row":4156,"column":0},"end":{"row":4157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23172":{"range":{"start":{"row":4163,"column":0},"end":{"row":4164,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23173":{"range":{"start":{"row":4170,"column":0},"end":{"row":4171,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23174":{"range":{"start":{"row":4177,"column":0},"end":{"row":4178,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23175":{"range":{"start":{"row":4184,"column":0},"end":{"row":4185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23176":{"range":{"start":{"row":4191,"column":0},"end":{"row":4192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23177":{"range":{"start":{"row":4198,"column":0},"end":{"row":4199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23178":{"range":{"start":{"row":4205,"column":0},"end":{"row":4206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23179":{"range":{"start":{"row":4212,"column":0},"end":{"row":4213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23180":{"range":{"start":{"row":4219,"column":0},"end":{"row":4220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23181":{"range":{"start":{"row":4226,"column":0},"end":{"row":4227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23182":{"range":{"start":{"row":4232,"column":0},"end":{"row":4233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23183":{"range":{"start":{"row":4238,"column":0},"end":{"row":4239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23184":{"range":{"start":{"row":4244,"column":0},"end":{"row":4245,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23185":{"range":{"start":{"row":4250,"column":0},"end":{"row":4251,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23186":{"range":{"start":{"row":4256,"column":0},"end":{"row":4257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23187":{"range":{"start":{"row":4262,"column":0},"end":{"row":4263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23188":{"range":{"start":{"row":4268,"column":0},"end":{"row":4269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23189":{"range":{"start":{"row":4274,"column":0},"end":{"row":4275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23190":{"range":{"start":{"row":4280,"column":0},"end":{"row":4281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23191":{"range":{"start":{"row":4286,"column":0},"end":{"row":4287,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23192":{"range":{"start":{"row":4292,"column":0},"end":{"row":4293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23193":{"range":{"start":{"row":4298,"column":0},"end":{"row":4299,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23194":{"range":{"start":{"row":4304,"column":0},"end":{"row":4305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23195":{"range":{"start":{"row":4310,"column":0},"end":{"row":4311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23196":{"range":{"start":{"row":4316,"column":0},"end":{"row":4317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23197":{"range":{"start":{"row":4322,"column":0},"end":{"row":4323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23198":{"range":{"start":{"row":4328,"column":0},"end":{"row":4329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23199":{"range":{"start":{"row":4334,"column":0},"end":{"row":4335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23200":{"range":{"start":{"row":4340,"column":0},"end":{"row":4341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23201":{"range":{"start":{"row":4346,"column":0},"end":{"row":4347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23202":{"range":{"start":{"row":4352,"column":0},"end":{"row":4353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23203":{"range":{"start":{"row":4358,"column":0},"end":{"row":4359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23204":{"range":{"start":{"row":4364,"column":0},"end":{"row":4365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23205":{"range":{"start":{"row":4370,"column":0},"end":{"row":4371,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23206":{"range":{"start":{"row":4376,"column":0},"end":{"row":4377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23207":{"range":{"start":{"row":4382,"column":0},"end":{"row":4383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23208":{"range":{"start":{"row":4388,"column":0},"end":{"row":4389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23209":{"range":{"start":{"row":4394,"column":0},"end":{"row":4395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23210":{"range":{"start":{"row":4400,"column":0},"end":{"row":4401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23211":{"range":{"start":{"row":4406,"column":0},"end":{"row":4407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23212":{"range":{"start":{"row":4412,"column":0},"end":{"row":4413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23213":{"range":{"start":{"row":4418,"column":0},"end":{"row":4419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23214":{"range":{"start":{"row":4424,"column":0},"end":{"row":4425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23215":{"range":{"start":{"row":4430,"column":0},"end":{"row":4431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23216":{"range":{"start":{"row":4436,"column":0},"end":{"row":4437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23217":{"range":{"start":{"row":4442,"column":0},"end":{"row":4443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23218":{"range":{"start":{"row":4448,"column":0},"end":{"row":4449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23219":{"range":{"start":{"row":4454,"column":0},"end":{"row":4455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23220":{"range":{"start":{"row":4460,"column":0},"end":{"row":4461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23221":{"range":{"start":{"row":4468,"column":0},"end":{"row":4469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23222":{"range":{"start":{"row":4476,"column":0},"end":{"row":4477,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23223":{"range":{"start":{"row":4492,"column":0},"end":{"row":4493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23224":{"range":{"start":{"row":4498,"column":0},"end":{"row":4499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23225":{"range":{"start":{"row":4504,"column":0},"end":{"row":4505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23226":{"range":{"start":{"row":4509,"column":0},"end":{"row":4510,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23227":{"range":{"start":{"row":4515,"column":0},"end":{"row":4516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23228":{"range":{"start":{"row":4520,"column":0},"end":{"row":4521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23229":{"range":{"start":{"row":4525,"column":0},"end":{"row":4526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23230":{"range":{"start":{"row":4530,"column":0},"end":{"row":4531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23231":{"range":{"start":{"row":4535,"column":0},"end":{"row":4536,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23232":{"range":{"start":{"row":4540,"column":0},"end":{"row":4541,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23233":{"range":{"start":{"row":4545,"column":0},"end":{"row":4546,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23234":{"range":{"start":{"row":4550,"column":0},"end":{"row":4551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23235":{"range":{"start":{"row":4555,"column":0},"end":{"row":4556,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23236":{"range":{"start":{"row":4560,"column":0},"end":{"row":4561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23237":{"range":{"start":{"row":4565,"column":0},"end":{"row":4566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23238":{"range":{"start":{"row":4570,"column":0},"end":{"row":4571,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23239":{"range":{"start":{"row":4575,"column":0},"end":{"row":4576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23240":{"range":{"start":{"row":4580,"column":0},"end":{"row":4581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23241":{"range":{"start":{"row":4585,"column":0},"end":{"row":4586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23242":{"range":{"start":{"row":4597,"column":0},"end":{"row":4598,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23243":{"range":{"start":{"row":4617,"column":0},"end":{"row":4618,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23244":{"range":{"start":{"row":4626,"column":0},"end":{"row":4627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23245":{"range":{"start":{"row":4635,"column":0},"end":{"row":4636,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23246":{"range":{"start":{"row":4642,"column":0},"end":{"row":4643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23247":{"range":{"start":{"row":4714,"column":0},"end":{"row":4715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23248":{"range":{"start":{"row":4716,"column":0},"end":{"row":4717,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23249":{"range":{"start":{"row":4721,"column":0},"end":{"row":4722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23250":{"range":{"start":{"row":4728,"column":0},"end":{"row":4729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23251":{"range":{"start":{"row":4733,"column":0},"end":{"row":4734,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23252":{"range":{"start":{"row":4739,"column":0},"end":{"row":4740,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23253":{"range":{"start":{"row":4745,"column":0},"end":{"row":4746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23254":{"range":{"start":{"row":4756,"column":0},"end":{"row":4757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23255":{"range":{"start":{"row":4767,"column":0},"end":{"row":4768,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23256":{"range":{"start":{"row":4787,"column":0},"end":{"row":4788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23257":{"range":{"start":{"row":4799,"column":0},"end":{"row":4800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23258":{"range":{"start":{"row":4806,"column":0},"end":{"row":4807,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23259":{"range":{"start":{"row":4813,"column":0},"end":{"row":4814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23260":{"range":{"start":{"row":4820,"column":0},"end":{"row":4821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23261":{"range":{"start":{"row":4827,"column":0},"end":{"row":4828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23262":{"range":{"start":{"row":4834,"column":0},"end":{"row":4835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23263":{"range":{"start":{"row":4840,"column":0},"end":{"row":4841,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23264":{"range":{"start":{"row":4846,"column":0},"end":{"row":4847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23265":{"range":{"start":{"row":4852,"column":0},"end":{"row":4853,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23266":{"range":{"start":{"row":4864,"column":0},"end":{"row":4865,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23267":{"range":{"start":{"row":4872,"column":0},"end":{"row":4873,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23268":{"range":{"start":{"row":4880,"column":0},"end":{"row":4881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23269":{"range":{"start":{"row":4888,"column":0},"end":{"row":4889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23270":{"range":{"start":{"row":4896,"column":0},"end":{"row":4897,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23271":{"range":{"start":{"row":4904,"column":0},"end":{"row":4905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23272":{"range":{"start":{"row":4910,"column":0},"end":{"row":4911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23273":{"range":{"start":{"row":4916,"column":0},"end":{"row":4917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23274":{"range":{"start":{"row":4922,"column":0},"end":{"row":4923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23275":{"range":{"start":{"row":4928,"column":0},"end":{"row":4929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23276":{"range":{"start":{"row":4946,"column":0},"end":{"row":4947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23277":{"range":{"start":{"row":4948,"column":0},"end":{"row":4949,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23278":{"range":{"start":{"row":4953,"column":0},"end":{"row":4954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23279":{"range":{"start":{"row":4958,"column":0},"end":{"row":4959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23280":{"range":{"start":{"row":4963,"column":0},"end":{"row":4964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23281":{"range":{"start":{"row":4970,"column":0},"end":{"row":4971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23282":{"range":{"start":{"row":4977,"column":0},"end":{"row":4978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23283":{"range":{"start":{"row":4984,"column":0},"end":{"row":4985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23284":{"range":{"start":{"row":5000,"column":0},"end":{"row":5001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23285":{"range":{"start":{"row":5003,"column":0},"end":{"row":5004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23286":{"range":{"start":{"row":5015,"column":0},"end":{"row":5016,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23287":{"range":{"start":{"row":5026,"column":0},"end":{"row":5027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23288":{"range":{"start":{"row":5037,"column":0},"end":{"row":5038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23289":{"range":{"start":{"row":5045,"column":0},"end":{"row":5046,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23290":{"range":{"start":{"row":5057,"column":0},"end":{"row":5058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23291":{"range":{"start":{"row":5071,"column":0},"end":{"row":5072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23292":{"range":{"start":{"row":5077,"column":0},"end":{"row":5078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23293":{"range":{"start":{"row":5086,"column":0},"end":{"row":5087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23294":{"range":{"start":{"row":5091,"column":0},"end":{"row":5092,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23295":{"range":{"start":{"row":5103,"column":0},"end":{"row":5104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23296":{"range":{"start":{"row":5113,"column":0},"end":{"row":5114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23297":{"range":{"start":{"row":5125,"column":0},"end":{"row":5126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23298":{"range":{"start":{"row":5136,"column":0},"end":{"row":5137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23299":{"range":{"start":{"row":5148,"column":0},"end":{"row":5149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23300":{"range":{"start":{"row":5160,"column":0},"end":{"row":5161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23301":{"range":{"start":{"row":5172,"column":0},"end":{"row":5173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23302":{"range":{"start":{"row":5184,"column":0},"end":{"row":5185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23303":{"range":{"start":{"row":5196,"column":0},"end":{"row":5197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23304":{"range":{"start":{"row":5208,"column":0},"end":{"row":5209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23305":{"range":{"start":{"row":5232,"column":0},"end":{"row":5233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23306":{"range":{"start":{"row":5242,"column":0},"end":{"row":5243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23307":{"range":{"start":{"row":5252,"column":0},"end":{"row":5253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23308":{"range":{"start":{"row":5262,"column":0},"end":{"row":5263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23309":{"range":{"start":{"row":5281,"column":0},"end":{"row":5282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23310":{"range":{"start":{"row":5289,"column":0},"end":{"row":5290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23311":{"range":{"start":{"row":5294,"column":0},"end":{"row":5295,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23312":{"range":{"start":{"row":5306,"column":0},"end":{"row":5307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23313":{"range":{"start":{"row":5316,"column":0},"end":{"row":5317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23314":{"range":{"start":{"row":5327,"column":0},"end":{"row":5328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23315":{"range":{"start":{"row":5339,"column":0},"end":{"row":5340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23316":{"range":{"start":{"row":5351,"column":0},"end":{"row":5352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23317":{"range":{"start":{"row":5362,"column":0},"end":{"row":5363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23318":{"range":{"start":{"row":5374,"column":0},"end":{"row":5375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23319":{"range":{"start":{"row":5386,"column":0},"end":{"row":5387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23320":{"range":{"start":{"row":5398,"column":0},"end":{"row":5399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23321":{"range":{"start":{"row":5410,"column":0},"end":{"row":5411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23322":{"range":{"start":{"row":5429,"column":0},"end":{"row":5430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23323":{"range":{"start":{"row":5454,"column":0},"end":{"row":5455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23324":{"range":{"start":{"row":5460,"column":0},"end":{"row":5461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23325":{"range":{"start":{"row":5468,"column":0},"end":{"row":5469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23326":{"range":{"start":{"row":5473,"column":0},"end":{"row":5474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23327":{"range":{"start":{"row":5485,"column":0},"end":{"row":5486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23328":{"range":{"start":{"row":5495,"column":0},"end":{"row":5496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23329":{"range":{"start":{"row":5507,"column":0},"end":{"row":5508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23330":{"range":{"start":{"row":5518,"column":0},"end":{"row":5519,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23331":{"range":{"start":{"row":5530,"column":0},"end":{"row":5531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23332":{"range":{"start":{"row":5542,"column":0},"end":{"row":5543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23333":{"range":{"start":{"row":5554,"column":0},"end":{"row":5555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23334":{"range":{"start":{"row":5566,"column":0},"end":{"row":5567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23335":{"range":{"start":{"row":5578,"column":0},"end":{"row":5579,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23336":{"range":{"start":{"row":5584,"column":0},"end":{"row":5585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23337":{"range":{"start":{"row":5624,"column":0},"end":{"row":5625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23338":{"range":{"start":{"row":5626,"column":0},"end":{"row":5627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23339":{"range":{"start":{"row":5631,"column":0},"end":{"row":5632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23340":{"range":{"start":{"row":5639,"column":0},"end":{"row":5640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23341":{"range":{"start":{"row":5644,"column":0},"end":{"row":5645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23342":{"range":{"start":{"row":5662,"column":0},"end":{"row":5663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23343":{"range":{"start":{"row":5669,"column":0},"end":{"row":5670,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23344":{"range":{"start":{"row":5676,"column":0},"end":{"row":5677,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23345":{"range":{"start":{"row":5683,"column":0},"end":{"row":5684,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23346":{"range":{"start":{"row":5691,"column":0},"end":{"row":5692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23347":{"range":{"start":{"row":5699,"column":0},"end":{"row":5700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23348":{"range":{"start":{"row":5707,"column":0},"end":{"row":5708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23349":{"range":{"start":{"row":5713,"column":0},"end":{"row":5714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23350":{"range":{"start":{"row":5719,"column":0},"end":{"row":5720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23351":{"range":{"start":{"row":5726,"column":0},"end":{"row":5727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23352":{"range":{"start":{"row":5738,"column":0},"end":{"row":5739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23353":{"range":{"start":{"row":5749,"column":0},"end":{"row":5750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23354":{"range":{"start":{"row":5761,"column":0},"end":{"row":5762,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23355":{"range":{"start":{"row":5772,"column":0},"end":{"row":5773,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23356":{"range":{"start":{"row":5779,"column":0},"end":{"row":5780,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23357":{"range":{"start":{"row":5786,"column":0},"end":{"row":5787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23358":{"range":{"start":{"row":5794,"column":0},"end":{"row":5795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23359":{"range":{"start":{"row":5802,"column":0},"end":{"row":5803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23360":{"range":{"start":{"row":5813,"column":0},"end":{"row":5814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23361":{"range":{"start":{"row":5823,"column":0},"end":{"row":5824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23362":{"range":{"start":{"row":5833,"column":0},"end":{"row":5834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23363":{"range":{"start":{"row":5845,"column":0},"end":{"row":5846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23364":{"range":{"start":{"row":5857,"column":0},"end":{"row":5858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23365":{"range":{"start":{"row":5869,"column":0},"end":{"row":5870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23366":{"range":{"start":{"row":5881,"column":0},"end":{"row":5882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23367":{"range":{"start":{"row":5904,"column":0},"end":{"row":5905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23368":{"range":{"start":{"row":5916,"column":0},"end":{"row":5917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23369":{"range":{"start":{"row":5928,"column":0},"end":{"row":5929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23370":{"range":{"start":{"row":5940,"column":0},"end":{"row":5941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23371":{"range":{"start":{"row":5950,"column":0},"end":{"row":5951,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23372":{"range":{"start":{"row":5958,"column":0},"end":{"row":5959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23373":{"range":{"start":{"row":5966,"column":0},"end":{"row":5967,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23374":{"range":{"start":{"row":5977,"column":0},"end":{"row":5978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23375":{"range":{"start":{"row":5986,"column":0},"end":{"row":5987,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23376":{"range":{"start":{"row":5995,"column":0},"end":{"row":5996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23377":{"range":{"start":{"row":6003,"column":0},"end":{"row":6004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23378":{"range":{"start":{"row":6011,"column":0},"end":{"row":6012,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23379":{"range":{"start":{"row":6018,"column":0},"end":{"row":6019,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23380":{"range":{"start":{"row":6025,"column":0},"end":{"row":6026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23381":{"range":{"start":{"row":6032,"column":0},"end":{"row":6033,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23382":{"range":{"start":{"row":6039,"column":0},"end":{"row":6040,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23383":{"range":{"start":{"row":6054,"column":0},"end":{"row":6055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23384":{"range":{"start":{"row":6066,"column":0},"end":{"row":6067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23385":{"range":{"start":{"row":6088,"column":0},"end":{"row":6089,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23386":{"range":{"start":{"row":6093,"column":0},"end":{"row":6094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23387":{"range":{"start":{"row":6101,"column":0},"end":{"row":6102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23388":{"range":{"start":{"row":6118,"column":0},"end":{"row":6119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23389":{"range":{"start":{"row":6130,"column":0},"end":{"row":6131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23390":{"range":{"start":{"row":6141,"column":0},"end":{"row":6142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23391":{"range":{"start":{"row":6152,"column":0},"end":{"row":6153,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23392":{"range":{"start":{"row":6161,"column":0},"end":{"row":6162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23393":{"range":{"start":{"row":6173,"column":0},"end":{"row":6174,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23394":{"range":{"start":{"row":6185,"column":0},"end":{"row":6186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23395":{"range":{"start":{"row":6203,"column":0},"end":{"row":6204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23396":{"range":{"start":{"row":6205,"column":0},"end":{"row":6206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23397":{"range":{"start":{"row":6210,"column":0},"end":{"row":6211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23398":{"range":{"start":{"row":6217,"column":0},"end":{"row":6218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23399":{"range":{"start":{"row":6224,"column":0},"end":{"row":6225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23400":{"range":{"start":{"row":6231,"column":0},"end":{"row":6232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23401":{"range":{"start":{"row":6238,"column":0},"end":{"row":6239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23402":{"range":{"start":{"row":6243,"column":0},"end":{"row":6244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23403":{"range":{"start":{"row":6255,"column":0},"end":{"row":6256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23404":{"range":{"start":{"row":6267,"column":0},"end":{"row":6268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23405":{"range":{"start":{"row":6279,"column":0},"end":{"row":6280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23406":{"range":{"start":{"row":6290,"column":0},"end":{"row":6291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23407":{"range":{"start":{"row":6301,"column":0},"end":{"row":6302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23408":{"range":{"start":{"row":6313,"column":0},"end":{"row":6314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23409":{"range":{"start":{"row":6325,"column":0},"end":{"row":6326,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23410":{"range":{"start":{"row":6333,"column":0},"end":{"row":6334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23411":{"range":{"start":{"row":6347,"column":0},"end":{"row":6348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23412":{"range":{"start":{"row":6349,"column":0},"end":{"row":6350,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23413":{"range":{"start":{"row":6354,"column":0},"end":{"row":6355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23414":{"range":{"start":{"row":6361,"column":0},"end":{"row":6362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23415":{"range":{"start":{"row":6372,"column":0},"end":{"row":6373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23416":{"range":{"start":{"row":6377,"column":0},"end":{"row":6378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23417":{"range":{"start":{"row":6388,"column":0},"end":{"row":6389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23418":{"range":{"start":{"row":6404,"column":0},"end":{"row":6405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23419":{"range":{"start":{"row":6413,"column":0},"end":{"row":6414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23420":{"range":{"start":{"row":6423,"column":0},"end":{"row":6424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23421":{"range":{"start":{"row":6434,"column":0},"end":{"row":6435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23422":{"range":{"start":{"row":6446,"column":0},"end":{"row":6447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23423":{"range":{"start":{"row":6457,"column":0},"end":{"row":6458,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23424":{"range":{"start":{"row":6465,"column":0},"end":{"row":6466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23425":{"range":{"start":{"row":6479,"column":0},"end":{"row":6480,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23426":{"range":{"start":{"row":6482,"column":0},"end":{"row":6483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23427":{"range":{"start":{"row":6485,"column":0},"end":{"row":6486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23428":{"range":{"start":{"row":6487,"column":0},"end":{"row":6488,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23429":{"range":{"start":{"row":6492,"column":0},"end":{"row":6493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23430":{"range":{"start":{"row":6499,"column":0},"end":{"row":6500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23431":{"range":{"start":{"row":6504,"column":0},"end":{"row":6505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23432":{"range":{"start":{"row":6516,"column":0},"end":{"row":6517,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23433":{"range":{"start":{"row":6527,"column":0},"end":{"row":6528,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23434":{"range":{"start":{"row":6539,"column":0},"end":{"row":6540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23435":{"range":{"start":{"row":6551,"column":0},"end":{"row":6552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23436":{"range":{"start":{"row":6563,"column":0},"end":{"row":6564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23437":{"range":{"start":{"row":6574,"column":0},"end":{"row":6575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23438":{"range":{"start":{"row":6582,"column":0},"end":{"row":6583,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23439":{"range":{"start":{"row":6594,"column":0},"end":{"row":6595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23440":{"range":{"start":{"row":6603,"column":0},"end":{"row":6604,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23441":{"range":{"start":{"row":6610,"column":0},"end":{"row":6611,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23442":{"range":{"start":{"row":6624,"column":0},"end":{"row":6625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23443":{"range":{"start":{"row":6637,"column":0},"end":{"row":6638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23444":{"range":{"start":{"row":6640,"column":0},"end":{"row":6641,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23445":{"range":{"start":{"row":6643,"column":0},"end":{"row":6644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23446":{"range":{"start":{"row":6645,"column":0},"end":{"row":6646,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23447":{"range":{"start":{"row":6650,"column":0},"end":{"row":6651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23448":{"range":{"start":{"row":6657,"column":0},"end":{"row":6658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23449":{"range":{"start":{"row":6662,"column":0},"end":{"row":6663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23450":{"range":{"start":{"row":6673,"column":0},"end":{"row":6674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23451":{"range":{"start":{"row":6685,"column":0},"end":{"row":6686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23452":{"range":{"start":{"row":6696,"column":0},"end":{"row":6697,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23453":{"range":{"start":{"row":6707,"column":0},"end":{"row":6708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23454":{"range":{"start":{"row":6719,"column":0},"end":{"row":6720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23455":{"range":{"start":{"row":6727,"column":0},"end":{"row":6728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23456":{"range":{"start":{"row":6745,"column":0},"end":{"row":6746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23457":{"range":{"start":{"row":6756,"column":0},"end":{"row":6757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23458":{"range":{"start":{"row":6766,"column":0},"end":{"row":6767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23459":{"range":{"start":{"row":6787,"column":0},"end":{"row":6788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23460":{"range":{"start":{"row":6792,"column":0},"end":{"row":6793,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23461":{"range":{"start":{"row":6799,"column":0},"end":{"row":6800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23462":{"range":{"start":{"row":6804,"column":0},"end":{"row":6805,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23463":{"range":{"start":{"row":6836,"column":0},"end":{"row":6837,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23464":{"range":{"start":{"row":6847,"column":0},"end":{"row":6848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23465":{"range":{"start":{"row":6858,"column":0},"end":{"row":6859,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23466":{"range":{"start":{"row":6869,"column":0},"end":{"row":6870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23467":{"range":{"start":{"row":6903,"column":0},"end":{"row":6904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23468":{"range":{"start":{"row":6924,"column":0},"end":{"row":6925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23469":{"range":{"start":{"row":6936,"column":0},"end":{"row":6937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23470":{"range":{"start":{"row":6952,"column":0},"end":{"row":6953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23471":{"range":{"start":{"row":6964,"column":0},"end":{"row":6965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23472":{"range":{"start":{"row":6971,"column":0},"end":{"row":6972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23473":{"range":{"start":{"row":6996,"column":0},"end":{"row":6997,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23474":{"range":{"start":{"row":7002,"column":0},"end":{"row":7003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23475":{"range":{"start":{"row":7150,"column":0},"end":{"row":7151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23476":{"range":{"start":{"row":7664,"column":0},"end":{"row":7665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23477":{"range":{"start":{"row":7666,"column":0},"end":{"row":7667,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23478":{"range":{"start":{"row":7673,"column":0},"end":{"row":7674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23479":{"range":{"start":{"row":7678,"column":0},"end":{"row":7679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23480":{"range":{"start":{"row":7685,"column":0},"end":{"row":7686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23481":{"range":{"start":{"row":7692,"column":0},"end":{"row":7693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23482":{"range":{"start":{"row":7699,"column":0},"end":{"row":7700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23483":{"range":{"start":{"row":7711,"column":0},"end":{"row":7712,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23484":{"range":{"start":{"row":7719,"column":0},"end":{"row":7720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23485":{"range":{"start":{"row":7730,"column":0},"end":{"row":7731,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23486":{"range":{"start":{"row":7741,"column":0},"end":{"row":7742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23487":{"range":{"start":{"row":7753,"column":0},"end":{"row":7754,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23488":{"range":{"start":{"row":7764,"column":0},"end":{"row":7765,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23489":{"range":{"start":{"row":7775,"column":0},"end":{"row":7776,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23490":{"range":{"start":{"row":7787,"column":0},"end":{"row":7788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23491":{"range":{"start":{"row":7799,"column":0},"end":{"row":7800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23492":{"range":{"start":{"row":7811,"column":0},"end":{"row":7812,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23493":{"range":{"start":{"row":7823,"column":0},"end":{"row":7824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23494":{"range":{"start":{"row":7835,"column":0},"end":{"row":7836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23495":{"range":{"start":{"row":7847,"column":0},"end":{"row":7848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23496":{"range":{"start":{"row":7849,"column":0},"end":{"row":7850,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23497":{"range":{"start":{"row":7854,"column":0},"end":{"row":7855,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23498":{"range":{"start":{"row":7861,"column":0},"end":{"row":7862,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23499":{"range":{"start":{"row":7866,"column":0},"end":{"row":7867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23500":{"range":{"start":{"row":7878,"column":0},"end":{"row":7879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23501":{"range":{"start":{"row":7889,"column":0},"end":{"row":7890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23502":{"range":{"start":{"row":7901,"column":0},"end":{"row":7902,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23503":{"range":{"start":{"row":7912,"column":0},"end":{"row":7913,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23504":{"range":{"start":{"row":7924,"column":0},"end":{"row":7925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23505":{"range":{"start":{"row":7935,"column":0},"end":{"row":7936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23506":{"range":{"start":{"row":7946,"column":0},"end":{"row":7947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23507":{"range":{"start":{"row":7958,"column":0},"end":{"row":7959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23508":{"range":{"start":{"row":7970,"column":0},"end":{"row":7971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23509":{"range":{"start":{"row":7982,"column":0},"end":{"row":7983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23510":{"range":{"start":{"row":7994,"column":0},"end":{"row":7995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23511":{"range":{"start":{"row":8006,"column":0},"end":{"row":8007,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23512":{"range":{"start":{"row":8017,"column":0},"end":{"row":8018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23513":{"range":{"start":{"row":8027,"column":0},"end":{"row":8028,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23514":{"range":{"start":{"row":8035,"column":0},"end":{"row":8036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23515":{"range":{"start":{"row":8043,"column":0},"end":{"row":8044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23516":{"range":{"start":{"row":108,"column":0},"end":{"row":108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23517":{"range":{"start":{"row":115,"column":0},"end":{"row":115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23518":{"range":{"start":{"row":120,"column":0},"end":{"row":120,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23519":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23520":{"range":{"start":{"row":128,"column":0},"end":{"row":128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23521":{"range":{"start":{"row":133,"column":0},"end":{"row":133,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23522":{"range":{"start":{"row":138,"column":0},"end":{"row":138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23523":{"range":{"start":{"row":144,"column":0},"end":{"row":144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23524":{"range":{"start":{"row":156,"column":0},"end":{"row":156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23525":{"range":{"start":{"row":168,"column":0},"end":{"row":168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23526":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23527":{"range":{"start":{"row":202,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23528":{"range":{"start":{"row":209,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23529":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23530":{"range":{"start":{"row":235,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23531":{"range":{"start":{"row":241,"column":0},"end":{"row":241,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23532":{"range":{"start":{"row":247,"column":0},"end":{"row":247,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23533":{"range":{"start":{"row":253,"column":0},"end":{"row":253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23534":{"range":{"start":{"row":259,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23535":{"range":{"start":{"row":264,"column":0},"end":{"row":264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23536":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23537":{"range":{"start":{"row":274,"column":0},"end":{"row":274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23538":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23539":{"range":{"start":{"row":284,"column":0},"end":{"row":284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23540":{"range":{"start":{"row":289,"column":0},"end":{"row":289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23541":{"range":{"start":{"row":301,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23542":{"range":{"start":{"row":308,"column":0},"end":{"row":308,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23543":{"range":{"start":{"row":315,"column":0},"end":{"row":315,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23544":{"range":{"start":{"row":322,"column":0},"end":{"row":322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23545":{"range":{"start":{"row":329,"column":0},"end":{"row":329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23546":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23547":{"range":{"start":{"row":352,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23548":{"range":{"start":{"row":359,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23549":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23550":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23551":{"range":{"start":{"row":379,"column":0},"end":{"row":379,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23552":{"range":{"start":{"row":386,"column":0},"end":{"row":386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23553":{"range":{"start":{"row":393,"column":0},"end":{"row":393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23554":{"range":{"start":{"row":399,"column":0},"end":{"row":399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23555":{"range":{"start":{"row":406,"column":0},"end":{"row":406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23556":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23557":{"range":{"start":{"row":420,"column":0},"end":{"row":420,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23558":{"range":{"start":{"row":427,"column":0},"end":{"row":427,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23559":{"range":{"start":{"row":434,"column":0},"end":{"row":434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23560":{"range":{"start":{"row":441,"column":0},"end":{"row":441,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23561":{"range":{"start":{"row":448,"column":0},"end":{"row":448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23562":{"range":{"start":{"row":471,"column":0},"end":{"row":471,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23563":{"range":{"start":{"row":481,"column":0},"end":{"row":481,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23564":{"range":{"start":{"row":503,"column":0},"end":{"row":503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23565":{"range":{"start":{"row":514,"column":0},"end":{"row":514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23566":{"range":{"start":{"row":525,"column":0},"end":{"row":525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23567":{"range":{"start":{"row":544,"column":0},"end":{"row":544,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23568":{"range":{"start":{"row":551,"column":0},"end":{"row":551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23569":{"range":{"start":{"row":558,"column":0},"end":{"row":558,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23570":{"range":{"start":{"row":565,"column":0},"end":{"row":565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23571":{"range":{"start":{"row":573,"column":0},"end":{"row":573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23572":{"range":{"start":{"row":581,"column":0},"end":{"row":581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23573":{"range":{"start":{"row":592,"column":0},"end":{"row":592,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23574":{"range":{"start":{"row":631,"column":0},"end":{"row":631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23575":{"range":{"start":{"row":642,"column":0},"end":{"row":642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23576":{"range":{"start":{"row":653,"column":0},"end":{"row":653,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23577":{"range":{"start":{"row":690,"column":0},"end":{"row":690,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23578":{"range":{"start":{"row":700,"column":0},"end":{"row":700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23579":{"range":{"start":{"row":710,"column":0},"end":{"row":710,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23580":{"range":{"start":{"row":720,"column":0},"end":{"row":720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23581":{"range":{"start":{"row":736,"column":0},"end":{"row":736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23582":{"range":{"start":{"row":750,"column":0},"end":{"row":750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23583":{"range":{"start":{"row":771,"column":0},"end":{"row":771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23584":{"range":{"start":{"row":783,"column":0},"end":{"row":783,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23585":{"range":{"start":{"row":794,"column":0},"end":{"row":794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23586":{"range":{"start":{"row":819,"column":0},"end":{"row":819,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23587":{"range":{"start":{"row":831,"column":0},"end":{"row":831,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23588":{"range":{"start":{"row":843,"column":0},"end":{"row":843,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23589":{"range":{"start":{"row":866,"column":0},"end":{"row":866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23590":{"range":{"start":{"row":878,"column":0},"end":{"row":878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23591":{"range":{"start":{"row":889,"column":0},"end":{"row":889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23592":{"range":{"start":{"row":900,"column":0},"end":{"row":900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23593":{"range":{"start":{"row":911,"column":0},"end":{"row":911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23594":{"range":{"start":{"row":922,"column":0},"end":{"row":922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23595":{"range":{"start":{"row":1226,"column":0},"end":{"row":1226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23596":{"range":{"start":{"row":1234,"column":0},"end":{"row":1234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23597":{"range":{"start":{"row":1309,"column":0},"end":{"row":1309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23598":{"range":{"start":{"row":1341,"column":0},"end":{"row":1341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23599":{"range":{"start":{"row":1348,"column":0},"end":{"row":1348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23600":{"range":{"start":{"row":1355,"column":0},"end":{"row":1355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23601":{"range":{"start":{"row":1362,"column":0},"end":{"row":1362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23602":{"range":{"start":{"row":1369,"column":0},"end":{"row":1369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23603":{"range":{"start":{"row":1376,"column":0},"end":{"row":1376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23604":{"range":{"start":{"row":1383,"column":0},"end":{"row":1383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23605":{"range":{"start":{"row":1390,"column":0},"end":{"row":1390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23606":{"range":{"start":{"row":1397,"column":0},"end":{"row":1397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23607":{"range":{"start":{"row":1404,"column":0},"end":{"row":1404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23608":{"range":{"start":{"row":1411,"column":0},"end":{"row":1411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23609":{"range":{"start":{"row":1418,"column":0},"end":{"row":1418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23610":{"range":{"start":{"row":1425,"column":0},"end":{"row":1425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23611":{"range":{"start":{"row":1437,"column":0},"end":{"row":1437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23612":{"range":{"start":{"row":1443,"column":0},"end":{"row":1443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23613":{"range":{"start":{"row":1455,"column":0},"end":{"row":1455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23614":{"range":{"start":{"row":1466,"column":0},"end":{"row":1466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23615":{"range":{"start":{"row":1474,"column":0},"end":{"row":1474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23616":{"range":{"start":{"row":1482,"column":0},"end":{"row":1482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23617":{"range":{"start":{"row":1490,"column":0},"end":{"row":1490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23618":{"range":{"start":{"row":1496,"column":0},"end":{"row":1496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23619":{"range":{"start":{"row":1502,"column":0},"end":{"row":1502,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23620":{"range":{"start":{"row":1508,"column":0},"end":{"row":1508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23621":{"range":{"start":{"row":1514,"column":0},"end":{"row":1514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23622":{"range":{"start":{"row":1520,"column":0},"end":{"row":1520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23623":{"range":{"start":{"row":1526,"column":0},"end":{"row":1526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23624":{"range":{"start":{"row":1533,"column":0},"end":{"row":1533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23625":{"range":{"start":{"row":1542,"column":0},"end":{"row":1542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23626":{"range":{"start":{"row":1551,"column":0},"end":{"row":1551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23627":{"range":{"start":{"row":1560,"column":0},"end":{"row":1560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23628":{"range":{"start":{"row":1567,"column":0},"end":{"row":1567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23629":{"range":{"start":{"row":1581,"column":0},"end":{"row":1581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23630":{"range":{"start":{"row":1588,"column":0},"end":{"row":1588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23631":{"range":{"start":{"row":1595,"column":0},"end":{"row":1595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23632":{"range":{"start":{"row":1602,"column":0},"end":{"row":1602,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23633":{"range":{"start":{"row":1609,"column":0},"end":{"row":1609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23634":{"range":{"start":{"row":1616,"column":0},"end":{"row":1616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23635":{"range":{"start":{"row":1623,"column":0},"end":{"row":1623,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23636":{"range":{"start":{"row":1630,"column":0},"end":{"row":1630,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23637":{"range":{"start":{"row":1637,"column":0},"end":{"row":1637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23638":{"range":{"start":{"row":1644,"column":0},"end":{"row":1644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23639":{"range":{"start":{"row":1651,"column":0},"end":{"row":1651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23640":{"range":{"start":{"row":1658,"column":0},"end":{"row":1658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23641":{"range":{"start":{"row":1665,"column":0},"end":{"row":1665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23642":{"range":{"start":{"row":1672,"column":0},"end":{"row":1672,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23643":{"range":{"start":{"row":1679,"column":0},"end":{"row":1679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23644":{"range":{"start":{"row":1686,"column":0},"end":{"row":1686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23645":{"range":{"start":{"row":1693,"column":0},"end":{"row":1693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23646":{"range":{"start":{"row":1700,"column":0},"end":{"row":1700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23647":{"range":{"start":{"row":1707,"column":0},"end":{"row":1707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23648":{"range":{"start":{"row":1714,"column":0},"end":{"row":1714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23649":{"range":{"start":{"row":1721,"column":0},"end":{"row":1721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23650":{"range":{"start":{"row":1728,"column":0},"end":{"row":1728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23651":{"range":{"start":{"row":1735,"column":0},"end":{"row":1735,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23652":{"range":{"start":{"row":1742,"column":0},"end":{"row":1742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23653":{"range":{"start":{"row":1749,"column":0},"end":{"row":1749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23654":{"range":{"start":{"row":1756,"column":0},"end":{"row":1756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23655":{"range":{"start":{"row":1763,"column":0},"end":{"row":1763,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23656":{"range":{"start":{"row":1770,"column":0},"end":{"row":1770,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23657":{"range":{"start":{"row":1777,"column":0},"end":{"row":1777,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23658":{"range":{"start":{"row":1784,"column":0},"end":{"row":1784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23659":{"range":{"start":{"row":1791,"column":0},"end":{"row":1791,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23660":{"range":{"start":{"row":1797,"column":0},"end":{"row":1797,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23661":{"range":{"start":{"row":1803,"column":0},"end":{"row":1803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23662":{"range":{"start":{"row":1809,"column":0},"end":{"row":1809,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23663":{"range":{"start":{"row":1815,"column":0},"end":{"row":1815,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23664":{"range":{"start":{"row":1821,"column":0},"end":{"row":1821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23665":{"range":{"start":{"row":1827,"column":0},"end":{"row":1827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23666":{"range":{"start":{"row":1833,"column":0},"end":{"row":1833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23667":{"range":{"start":{"row":1839,"column":0},"end":{"row":1839,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23668":{"range":{"start":{"row":1845,"column":0},"end":{"row":1845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23669":{"range":{"start":{"row":1851,"column":0},"end":{"row":1851,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23670":{"range":{"start":{"row":1857,"column":0},"end":{"row":1857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23671":{"range":{"start":{"row":1863,"column":0},"end":{"row":1863,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23672":{"range":{"start":{"row":1869,"column":0},"end":{"row":1869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23673":{"range":{"start":{"row":1875,"column":0},"end":{"row":1875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23674":{"range":{"start":{"row":1881,"column":0},"end":{"row":1881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23675":{"range":{"start":{"row":1887,"column":0},"end":{"row":1887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23676":{"range":{"start":{"row":1893,"column":0},"end":{"row":1893,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23677":{"range":{"start":{"row":1899,"column":0},"end":{"row":1899,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23678":{"range":{"start":{"row":1905,"column":0},"end":{"row":1905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23679":{"range":{"start":{"row":1911,"column":0},"end":{"row":1911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23680":{"range":{"start":{"row":1917,"column":0},"end":{"row":1917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23681":{"range":{"start":{"row":1923,"column":0},"end":{"row":1923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23682":{"range":{"start":{"row":1929,"column":0},"end":{"row":1929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23683":{"range":{"start":{"row":1935,"column":0},"end":{"row":1935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23684":{"range":{"start":{"row":1941,"column":0},"end":{"row":1941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23685":{"range":{"start":{"row":1947,"column":0},"end":{"row":1947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23686":{"range":{"start":{"row":1953,"column":0},"end":{"row":1953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23687":{"range":{"start":{"row":1959,"column":0},"end":{"row":1959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23688":{"range":{"start":{"row":1965,"column":0},"end":{"row":1965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23689":{"range":{"start":{"row":1971,"column":0},"end":{"row":1971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23690":{"range":{"start":{"row":1977,"column":0},"end":{"row":1977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23691":{"range":{"start":{"row":1983,"column":0},"end":{"row":1983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23692":{"range":{"start":{"row":1989,"column":0},"end":{"row":1989,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23693":{"range":{"start":{"row":1995,"column":0},"end":{"row":1995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23694":{"range":{"start":{"row":2001,"column":0},"end":{"row":2001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23695":{"range":{"start":{"row":2036,"column":0},"end":{"row":2036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23696":{"range":{"start":{"row":2042,"column":0},"end":{"row":2042,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23697":{"range":{"start":{"row":2048,"column":0},"end":{"row":2048,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23698":{"range":{"start":{"row":2054,"column":0},"end":{"row":2054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23699":{"range":{"start":{"row":2062,"column":0},"end":{"row":2062,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23700":{"range":{"start":{"row":2070,"column":0},"end":{"row":2070,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23701":{"range":{"start":{"row":2078,"column":0},"end":{"row":2078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23702":{"range":{"start":{"row":2086,"column":0},"end":{"row":2086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23703":{"range":{"start":{"row":2094,"column":0},"end":{"row":2094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23704":{"range":{"start":{"row":2102,"column":0},"end":{"row":2102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23705":{"range":{"start":{"row":2110,"column":0},"end":{"row":2110,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23706":{"range":{"start":{"row":2118,"column":0},"end":{"row":2118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23707":{"range":{"start":{"row":2138,"column":0},"end":{"row":2138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23708":{"range":{"start":{"row":2144,"column":0},"end":{"row":2144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23709":{"range":{"start":{"row":2150,"column":0},"end":{"row":2150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23710":{"range":{"start":{"row":2156,"column":0},"end":{"row":2156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23711":{"range":{"start":{"row":2162,"column":0},"end":{"row":2162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23712":{"range":{"start":{"row":2168,"column":0},"end":{"row":2168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23713":{"range":{"start":{"row":2175,"column":0},"end":{"row":2175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23714":{"range":{"start":{"row":2182,"column":0},"end":{"row":2182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23715":{"range":{"start":{"row":2189,"column":0},"end":{"row":2189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23716":{"range":{"start":{"row":2196,"column":0},"end":{"row":2196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23717":{"range":{"start":{"row":2203,"column":0},"end":{"row":2203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23718":{"range":{"start":{"row":2218,"column":0},"end":{"row":2218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23719":{"range":{"start":{"row":2224,"column":0},"end":{"row":2224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23720":{"range":{"start":{"row":2231,"column":0},"end":{"row":2231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23721":{"range":{"start":{"row":2237,"column":0},"end":{"row":2237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23722":{"range":{"start":{"row":2243,"column":0},"end":{"row":2243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23723":{"range":{"start":{"row":2249,"column":0},"end":{"row":2249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23724":{"range":{"start":{"row":2256,"column":0},"end":{"row":2256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23725":{"range":{"start":{"row":2264,"column":0},"end":{"row":2264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23726":{"range":{"start":{"row":2271,"column":0},"end":{"row":2271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23727":{"range":{"start":{"row":2277,"column":0},"end":{"row":2277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23728":{"range":{"start":{"row":2283,"column":0},"end":{"row":2283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23729":{"range":{"start":{"row":2289,"column":0},"end":{"row":2289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23730":{"range":{"start":{"row":2297,"column":0},"end":{"row":2297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23731":{"range":{"start":{"row":2304,"column":0},"end":{"row":2304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23732":{"range":{"start":{"row":2334,"column":0},"end":{"row":2334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23733":{"range":{"start":{"row":2340,"column":0},"end":{"row":2340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23734":{"range":{"start":{"row":2346,"column":0},"end":{"row":2346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23735":{"range":{"start":{"row":2352,"column":0},"end":{"row":2352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23736":{"range":{"start":{"row":2358,"column":0},"end":{"row":2358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23737":{"range":{"start":{"row":2364,"column":0},"end":{"row":2364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23738":{"range":{"start":{"row":2375,"column":0},"end":{"row":2375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23739":{"range":{"start":{"row":2381,"column":0},"end":{"row":2381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23740":{"range":{"start":{"row":2387,"column":0},"end":{"row":2387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23741":{"range":{"start":{"row":2393,"column":0},"end":{"row":2393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23742":{"range":{"start":{"row":2404,"column":0},"end":{"row":2404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23743":{"range":{"start":{"row":2431,"column":0},"end":{"row":2431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23744":{"range":{"start":{"row":2447,"column":0},"end":{"row":2447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23745":{"range":{"start":{"row":2469,"column":0},"end":{"row":2469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23746":{"range":{"start":{"row":2495,"column":0},"end":{"row":2495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23747":{"range":{"start":{"row":2567,"column":0},"end":{"row":2567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23748":{"range":{"start":{"row":2575,"column":0},"end":{"row":2575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23749":{"range":{"start":{"row":2580,"column":0},"end":{"row":2580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23750":{"range":{"start":{"row":2588,"column":0},"end":{"row":2588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23751":{"range":{"start":{"row":2607,"column":0},"end":{"row":2607,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23752":{"range":{"start":{"row":2616,"column":0},"end":{"row":2616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23753":{"range":{"start":{"row":2624,"column":0},"end":{"row":2624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23754":{"range":{"start":{"row":2634,"column":0},"end":{"row":2634,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23755":{"range":{"start":{"row":2875,"column":0},"end":{"row":2875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23756":{"range":{"start":{"row":2880,"column":0},"end":{"row":2880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23757":{"range":{"start":{"row":2887,"column":0},"end":{"row":2887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23758":{"range":{"start":{"row":2894,"column":0},"end":{"row":2894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23759":{"range":{"start":{"row":2917,"column":0},"end":{"row":2917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23760":{"range":{"start":{"row":2929,"column":0},"end":{"row":2929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23761":{"range":{"start":{"row":2937,"column":0},"end":{"row":2937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23762":{"range":{"start":{"row":2992,"column":0},"end":{"row":2992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23763":{"range":{"start":{"row":3009,"column":0},"end":{"row":3009,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23764":{"range":{"start":{"row":3063,"column":0},"end":{"row":3063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23765":{"range":{"start":{"row":3067,"column":0},"end":{"row":3067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23766":{"range":{"start":{"row":3136,"column":0},"end":{"row":3136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23767":{"range":{"start":{"row":3143,"column":0},"end":{"row":3143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23768":{"range":{"start":{"row":3148,"column":0},"end":{"row":3148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23769":{"range":{"start":{"row":3155,"column":0},"end":{"row":3155,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23770":{"range":{"start":{"row":3162,"column":0},"end":{"row":3162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23771":{"range":{"start":{"row":3169,"column":0},"end":{"row":3169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23772":{"range":{"start":{"row":3176,"column":0},"end":{"row":3176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23773":{"range":{"start":{"row":3183,"column":0},"end":{"row":3183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23774":{"range":{"start":{"row":3197,"column":0},"end":{"row":3197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23775":{"range":{"start":{"row":3210,"column":0},"end":{"row":3210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23776":{"range":{"start":{"row":3216,"column":0},"end":{"row":3216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23777":{"range":{"start":{"row":3222,"column":0},"end":{"row":3222,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23778":{"range":{"start":{"row":3235,"column":0},"end":{"row":3235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23779":{"range":{"start":{"row":3242,"column":0},"end":{"row":3242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23780":{"range":{"start":{"row":3248,"column":0},"end":{"row":3248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23781":{"range":{"start":{"row":3259,"column":0},"end":{"row":3259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23782":{"range":{"start":{"row":3271,"column":0},"end":{"row":3271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23783":{"range":{"start":{"row":3282,"column":0},"end":{"row":3282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23784":{"range":{"start":{"row":3300,"column":0},"end":{"row":3300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23785":{"range":{"start":{"row":3311,"column":0},"end":{"row":3311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23786":{"range":{"start":{"row":3322,"column":0},"end":{"row":3322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23787":{"range":{"start":{"row":3331,"column":0},"end":{"row":3331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23788":{"range":{"start":{"row":3348,"column":0},"end":{"row":3348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23789":{"range":{"start":{"row":3356,"column":0},"end":{"row":3356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23790":{"range":{"start":{"row":3364,"column":0},"end":{"row":3364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23791":{"range":{"start":{"row":3372,"column":0},"end":{"row":3372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23792":{"range":{"start":{"row":3380,"column":0},"end":{"row":3380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23793":{"range":{"start":{"row":3388,"column":0},"end":{"row":3388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23794":{"range":{"start":{"row":3396,"column":0},"end":{"row":3396,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23795":{"range":{"start":{"row":3403,"column":0},"end":{"row":3403,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23796":{"range":{"start":{"row":3411,"column":0},"end":{"row":3411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23797":{"range":{"start":{"row":3418,"column":0},"end":{"row":3418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23798":{"range":{"start":{"row":3425,"column":0},"end":{"row":3425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23799":{"range":{"start":{"row":3432,"column":0},"end":{"row":3432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23800":{"range":{"start":{"row":3439,"column":0},"end":{"row":3439,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23801":{"range":{"start":{"row":3446,"column":0},"end":{"row":3446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23802":{"range":{"start":{"row":3453,"column":0},"end":{"row":3453,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23803":{"range":{"start":{"row":3466,"column":0},"end":{"row":3466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23804":{"range":{"start":{"row":3478,"column":0},"end":{"row":3478,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23805":{"range":{"start":{"row":3489,"column":0},"end":{"row":3489,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23806":{"range":{"start":{"row":3500,"column":0},"end":{"row":3500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23807":{"range":{"start":{"row":3511,"column":0},"end":{"row":3511,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23808":{"range":{"start":{"row":3522,"column":0},"end":{"row":3522,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23809":{"range":{"start":{"row":3532,"column":0},"end":{"row":3532,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23810":{"range":{"start":{"row":3573,"column":0},"end":{"row":3573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23811":{"range":{"start":{"row":3585,"column":0},"end":{"row":3585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23812":{"range":{"start":{"row":3608,"column":0},"end":{"row":3608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23813":{"range":{"start":{"row":3620,"column":0},"end":{"row":3620,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23814":{"range":{"start":{"row":3632,"column":0},"end":{"row":3632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23815":{"range":{"start":{"row":3644,"column":0},"end":{"row":3644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23816":{"range":{"start":{"row":3957,"column":0},"end":{"row":3957,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23817":{"range":{"start":{"row":3965,"column":0},"end":{"row":3965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23818":{"range":{"start":{"row":3973,"column":0},"end":{"row":3973,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23819":{"range":{"start":{"row":3984,"column":0},"end":{"row":3984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23820":{"range":{"start":{"row":3992,"column":0},"end":{"row":3992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23821":{"range":{"start":{"row":4000,"column":0},"end":{"row":4000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23822":{"range":{"start":{"row":4030,"column":0},"end":{"row":4030,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23823":{"range":{"start":{"row":4037,"column":0},"end":{"row":4037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23824":{"range":{"start":{"row":4044,"column":0},"end":{"row":4044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23825":{"range":{"start":{"row":4051,"column":0},"end":{"row":4051,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23826":{"range":{"start":{"row":4058,"column":0},"end":{"row":4058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23827":{"range":{"start":{"row":4065,"column":0},"end":{"row":4065,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23828":{"range":{"start":{"row":4072,"column":0},"end":{"row":4072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23829":{"range":{"start":{"row":4079,"column":0},"end":{"row":4079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23830":{"range":{"start":{"row":4086,"column":0},"end":{"row":4086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23831":{"range":{"start":{"row":4093,"column":0},"end":{"row":4093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23832":{"range":{"start":{"row":4100,"column":0},"end":{"row":4100,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23833":{"range":{"start":{"row":4107,"column":0},"end":{"row":4107,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23834":{"range":{"start":{"row":4114,"column":0},"end":{"row":4114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23835":{"range":{"start":{"row":4121,"column":0},"end":{"row":4121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23836":{"range":{"start":{"row":4128,"column":0},"end":{"row":4128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23837":{"range":{"start":{"row":4135,"column":0},"end":{"row":4135,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23838":{"range":{"start":{"row":4142,"column":0},"end":{"row":4142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23839":{"range":{"start":{"row":4149,"column":0},"end":{"row":4149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23840":{"range":{"start":{"row":4156,"column":0},"end":{"row":4156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23841":{"range":{"start":{"row":4163,"column":0},"end":{"row":4163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23842":{"range":{"start":{"row":4170,"column":0},"end":{"row":4170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23843":{"range":{"start":{"row":4177,"column":0},"end":{"row":4177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23844":{"range":{"start":{"row":4184,"column":0},"end":{"row":4184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23845":{"range":{"start":{"row":4191,"column":0},"end":{"row":4191,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23846":{"range":{"start":{"row":4198,"column":0},"end":{"row":4198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23847":{"range":{"start":{"row":4205,"column":0},"end":{"row":4205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23848":{"range":{"start":{"row":4212,"column":0},"end":{"row":4212,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23849":{"range":{"start":{"row":4219,"column":0},"end":{"row":4219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23850":{"range":{"start":{"row":4226,"column":0},"end":{"row":4226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23851":{"range":{"start":{"row":4232,"column":0},"end":{"row":4232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23852":{"range":{"start":{"row":4238,"column":0},"end":{"row":4238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23853":{"range":{"start":{"row":4244,"column":0},"end":{"row":4244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23854":{"range":{"start":{"row":4250,"column":0},"end":{"row":4250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23855":{"range":{"start":{"row":4256,"column":0},"end":{"row":4256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23856":{"range":{"start":{"row":4262,"column":0},"end":{"row":4262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23857":{"range":{"start":{"row":4268,"column":0},"end":{"row":4268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23858":{"range":{"start":{"row":4274,"column":0},"end":{"row":4274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23859":{"range":{"start":{"row":4280,"column":0},"end":{"row":4280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23860":{"range":{"start":{"row":4286,"column":0},"end":{"row":4286,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23861":{"range":{"start":{"row":4292,"column":0},"end":{"row":4292,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23862":{"range":{"start":{"row":4298,"column":0},"end":{"row":4298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23863":{"range":{"start":{"row":4304,"column":0},"end":{"row":4304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23864":{"range":{"start":{"row":4310,"column":0},"end":{"row":4310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23865":{"range":{"start":{"row":4316,"column":0},"end":{"row":4316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23866":{"range":{"start":{"row":4322,"column":0},"end":{"row":4322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23867":{"range":{"start":{"row":4328,"column":0},"end":{"row":4328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23868":{"range":{"start":{"row":4334,"column":0},"end":{"row":4334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23869":{"range":{"start":{"row":4340,"column":0},"end":{"row":4340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23870":{"range":{"start":{"row":4346,"column":0},"end":{"row":4346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23871":{"range":{"start":{"row":4352,"column":0},"end":{"row":4352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23872":{"range":{"start":{"row":4358,"column":0},"end":{"row":4358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23873":{"range":{"start":{"row":4364,"column":0},"end":{"row":4364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23874":{"range":{"start":{"row":4370,"column":0},"end":{"row":4370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23875":{"range":{"start":{"row":4376,"column":0},"end":{"row":4376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23876":{"range":{"start":{"row":4382,"column":0},"end":{"row":4382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23877":{"range":{"start":{"row":4388,"column":0},"end":{"row":4388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23878":{"range":{"start":{"row":4394,"column":0},"end":{"row":4394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23879":{"range":{"start":{"row":4400,"column":0},"end":{"row":4400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23880":{"range":{"start":{"row":4406,"column":0},"end":{"row":4406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23881":{"range":{"start":{"row":4412,"column":0},"end":{"row":4412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23882":{"range":{"start":{"row":4418,"column":0},"end":{"row":4418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23883":{"range":{"start":{"row":4424,"column":0},"end":{"row":4424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23884":{"range":{"start":{"row":4430,"column":0},"end":{"row":4430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23885":{"range":{"start":{"row":4436,"column":0},"end":{"row":4436,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23886":{"range":{"start":{"row":4442,"column":0},"end":{"row":4442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23887":{"range":{"start":{"row":4448,"column":0},"end":{"row":4448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23888":{"range":{"start":{"row":4454,"column":0},"end":{"row":4454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23889":{"range":{"start":{"row":4460,"column":0},"end":{"row":4460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23890":{"range":{"start":{"row":4468,"column":0},"end":{"row":4468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23891":{"range":{"start":{"row":4476,"column":0},"end":{"row":4476,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23892":{"range":{"start":{"row":4492,"column":0},"end":{"row":4492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23893":{"range":{"start":{"row":4498,"column":0},"end":{"row":4498,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23894":{"range":{"start":{"row":4504,"column":0},"end":{"row":4504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23895":{"range":{"start":{"row":4509,"column":0},"end":{"row":4509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23896":{"range":{"start":{"row":4515,"column":0},"end":{"row":4515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23897":{"range":{"start":{"row":4520,"column":0},"end":{"row":4520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23898":{"range":{"start":{"row":4525,"column":0},"end":{"row":4525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23899":{"range":{"start":{"row":4530,"column":0},"end":{"row":4530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23900":{"range":{"start":{"row":4535,"column":0},"end":{"row":4535,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23901":{"range":{"start":{"row":4540,"column":0},"end":{"row":4540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23902":{"range":{"start":{"row":4545,"column":0},"end":{"row":4545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23903":{"range":{"start":{"row":4550,"column":0},"end":{"row":4550,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23904":{"range":{"start":{"row":4555,"column":0},"end":{"row":4555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23905":{"range":{"start":{"row":4560,"column":0},"end":{"row":4560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23906":{"range":{"start":{"row":4565,"column":0},"end":{"row":4565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23907":{"range":{"start":{"row":4570,"column":0},"end":{"row":4570,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23908":{"range":{"start":{"row":4575,"column":0},"end":{"row":4575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23909":{"range":{"start":{"row":4580,"column":0},"end":{"row":4580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23910":{"range":{"start":{"row":4585,"column":0},"end":{"row":4585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23911":{"range":{"start":{"row":4597,"column":0},"end":{"row":4597,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23912":{"range":{"start":{"row":4617,"column":0},"end":{"row":4617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23913":{"range":{"start":{"row":4626,"column":0},"end":{"row":4626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23914":{"range":{"start":{"row":4635,"column":0},"end":{"row":4635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23915":{"range":{"start":{"row":4642,"column":0},"end":{"row":4642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23916":{"range":{"start":{"row":4714,"column":0},"end":{"row":4714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23917":{"range":{"start":{"row":4716,"column":0},"end":{"row":4716,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23918":{"range":{"start":{"row":4721,"column":0},"end":{"row":4721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23919":{"range":{"start":{"row":4728,"column":0},"end":{"row":4728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23920":{"range":{"start":{"row":4733,"column":0},"end":{"row":4733,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23921":{"range":{"start":{"row":4739,"column":0},"end":{"row":4739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23922":{"range":{"start":{"row":4745,"column":0},"end":{"row":4745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23923":{"range":{"start":{"row":4756,"column":0},"end":{"row":4756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23924":{"range":{"start":{"row":4767,"column":0},"end":{"row":4767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23925":{"range":{"start":{"row":4787,"column":0},"end":{"row":4787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23926":{"range":{"start":{"row":4799,"column":0},"end":{"row":4799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23927":{"range":{"start":{"row":4806,"column":0},"end":{"row":4806,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23928":{"range":{"start":{"row":4813,"column":0},"end":{"row":4813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23929":{"range":{"start":{"row":4820,"column":0},"end":{"row":4820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23930":{"range":{"start":{"row":4827,"column":0},"end":{"row":4827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23931":{"range":{"start":{"row":4834,"column":0},"end":{"row":4834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23932":{"range":{"start":{"row":4840,"column":0},"end":{"row":4840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23933":{"range":{"start":{"row":4846,"column":0},"end":{"row":4846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23934":{"range":{"start":{"row":4852,"column":0},"end":{"row":4852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23935":{"range":{"start":{"row":4864,"column":0},"end":{"row":4864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23936":{"range":{"start":{"row":4872,"column":0},"end":{"row":4872,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23937":{"range":{"start":{"row":4880,"column":0},"end":{"row":4880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23938":{"range":{"start":{"row":4888,"column":0},"end":{"row":4888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23939":{"range":{"start":{"row":4896,"column":0},"end":{"row":4896,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23940":{"range":{"start":{"row":4904,"column":0},"end":{"row":4904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23941":{"range":{"start":{"row":4910,"column":0},"end":{"row":4910,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23942":{"range":{"start":{"row":4916,"column":0},"end":{"row":4916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23943":{"range":{"start":{"row":4922,"column":0},"end":{"row":4922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23944":{"range":{"start":{"row":4928,"column":0},"end":{"row":4928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23945":{"range":{"start":{"row":4946,"column":0},"end":{"row":4946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23946":{"range":{"start":{"row":4948,"column":0},"end":{"row":4948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23947":{"range":{"start":{"row":4953,"column":0},"end":{"row":4953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23948":{"range":{"start":{"row":4958,"column":0},"end":{"row":4958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23949":{"range":{"start":{"row":4963,"column":0},"end":{"row":4963,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23950":{"range":{"start":{"row":4970,"column":0},"end":{"row":4970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23951":{"range":{"start":{"row":4977,"column":0},"end":{"row":4977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23952":{"range":{"start":{"row":4984,"column":0},"end":{"row":4984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23953":{"range":{"start":{"row":5000,"column":0},"end":{"row":5000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23954":{"range":{"start":{"row":5003,"column":0},"end":{"row":5003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23955":{"range":{"start":{"row":5015,"column":0},"end":{"row":5015,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23956":{"range":{"start":{"row":5026,"column":0},"end":{"row":5026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23957":{"range":{"start":{"row":5037,"column":0},"end":{"row":5037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23958":{"range":{"start":{"row":5045,"column":0},"end":{"row":5045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23959":{"range":{"start":{"row":5057,"column":0},"end":{"row":5057,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23960":{"range":{"start":{"row":5071,"column":0},"end":{"row":5071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23961":{"range":{"start":{"row":5077,"column":0},"end":{"row":5077,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23962":{"range":{"start":{"row":5086,"column":0},"end":{"row":5086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23963":{"range":{"start":{"row":5091,"column":0},"end":{"row":5091,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23964":{"range":{"start":{"row":5103,"column":0},"end":{"row":5103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23965":{"range":{"start":{"row":5113,"column":0},"end":{"row":5113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23966":{"range":{"start":{"row":5125,"column":0},"end":{"row":5125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23967":{"range":{"start":{"row":5136,"column":0},"end":{"row":5136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23968":{"range":{"start":{"row":5148,"column":0},"end":{"row":5148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23969":{"range":{"start":{"row":5160,"column":0},"end":{"row":5160,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23970":{"range":{"start":{"row":5172,"column":0},"end":{"row":5172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23971":{"range":{"start":{"row":5184,"column":0},"end":{"row":5184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23972":{"range":{"start":{"row":5196,"column":0},"end":{"row":5196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23973":{"range":{"start":{"row":5208,"column":0},"end":{"row":5208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23974":{"range":{"start":{"row":5232,"column":0},"end":{"row":5232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23975":{"range":{"start":{"row":5242,"column":0},"end":{"row":5242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23976":{"range":{"start":{"row":5252,"column":0},"end":{"row":5252,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23977":{"range":{"start":{"row":5262,"column":0},"end":{"row":5262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23978":{"range":{"start":{"row":5281,"column":0},"end":{"row":5281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23979":{"range":{"start":{"row":5289,"column":0},"end":{"row":5289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23980":{"range":{"start":{"row":5294,"column":0},"end":{"row":5294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23981":{"range":{"start":{"row":5306,"column":0},"end":{"row":5306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23982":{"range":{"start":{"row":5316,"column":0},"end":{"row":5316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23983":{"range":{"start":{"row":5327,"column":0},"end":{"row":5327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23984":{"range":{"start":{"row":5339,"column":0},"end":{"row":5339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23985":{"range":{"start":{"row":5351,"column":0},"end":{"row":5351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23986":{"range":{"start":{"row":5362,"column":0},"end":{"row":5362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23987":{"range":{"start":{"row":5374,"column":0},"end":{"row":5374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23988":{"range":{"start":{"row":5386,"column":0},"end":{"row":5386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23989":{"range":{"start":{"row":5398,"column":0},"end":{"row":5398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23990":{"range":{"start":{"row":5410,"column":0},"end":{"row":5410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23991":{"range":{"start":{"row":5429,"column":0},"end":{"row":5429,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23992":{"range":{"start":{"row":5454,"column":0},"end":{"row":5454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23993":{"range":{"start":{"row":5460,"column":0},"end":{"row":5460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23994":{"range":{"start":{"row":5468,"column":0},"end":{"row":5468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23995":{"range":{"start":{"row":5473,"column":0},"end":{"row":5473,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23996":{"range":{"start":{"row":5485,"column":0},"end":{"row":5485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23997":{"range":{"start":{"row":5495,"column":0},"end":{"row":5495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23998":{"range":{"start":{"row":5507,"column":0},"end":{"row":5507,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23999":{"range":{"start":{"row":5518,"column":0},"end":{"row":5518,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24000":{"range":{"start":{"row":5530,"column":0},"end":{"row":5530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24001":{"range":{"start":{"row":5542,"column":0},"end":{"row":5542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24002":{"range":{"start":{"row":5554,"column":0},"end":{"row":5554,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24003":{"range":{"start":{"row":5566,"column":0},"end":{"row":5566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24004":{"range":{"start":{"row":5578,"column":0},"end":{"row":5578,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24005":{"range":{"start":{"row":5584,"column":0},"end":{"row":5584,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24006":{"range":{"start":{"row":5624,"column":0},"end":{"row":5624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24007":{"range":{"start":{"row":5626,"column":0},"end":{"row":5626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24008":{"range":{"start":{"row":5631,"column":0},"end":{"row":5631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24009":{"range":{"start":{"row":5639,"column":0},"end":{"row":5639,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24010":{"range":{"start":{"row":5644,"column":0},"end":{"row":5644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24011":{"range":{"start":{"row":5662,"column":0},"end":{"row":5662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24012":{"range":{"start":{"row":5669,"column":0},"end":{"row":5669,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24013":{"range":{"start":{"row":5676,"column":0},"end":{"row":5676,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24014":{"range":{"start":{"row":5683,"column":0},"end":{"row":5683,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24015":{"range":{"start":{"row":5691,"column":0},"end":{"row":5691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24016":{"range":{"start":{"row":5699,"column":0},"end":{"row":5699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24017":{"range":{"start":{"row":5707,"column":0},"end":{"row":5707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24018":{"range":{"start":{"row":5713,"column":0},"end":{"row":5713,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24019":{"range":{"start":{"row":5719,"column":0},"end":{"row":5719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24020":{"range":{"start":{"row":5726,"column":0},"end":{"row":5726,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24021":{"range":{"start":{"row":5738,"column":0},"end":{"row":5738,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24022":{"range":{"start":{"row":5749,"column":0},"end":{"row":5749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24023":{"range":{"start":{"row":5761,"column":0},"end":{"row":5761,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24024":{"range":{"start":{"row":5772,"column":0},"end":{"row":5772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24025":{"range":{"start":{"row":5779,"column":0},"end":{"row":5779,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24026":{"range":{"start":{"row":5786,"column":0},"end":{"row":5786,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24027":{"range":{"start":{"row":5794,"column":0},"end":{"row":5794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24028":{"range":{"start":{"row":5802,"column":0},"end":{"row":5802,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24029":{"range":{"start":{"row":5813,"column":0},"end":{"row":5813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24030":{"range":{"start":{"row":5823,"column":0},"end":{"row":5823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24031":{"range":{"start":{"row":5833,"column":0},"end":{"row":5833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24032":{"range":{"start":{"row":5845,"column":0},"end":{"row":5845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24033":{"range":{"start":{"row":5857,"column":0},"end":{"row":5857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24034":{"range":{"start":{"row":5869,"column":0},"end":{"row":5869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24035":{"range":{"start":{"row":5881,"column":0},"end":{"row":5881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24036":{"range":{"start":{"row":5904,"column":0},"end":{"row":5904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24037":{"range":{"start":{"row":5916,"column":0},"end":{"row":5916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24038":{"range":{"start":{"row":5928,"column":0},"end":{"row":5928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24039":{"range":{"start":{"row":5940,"column":0},"end":{"row":5940,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24040":{"range":{"start":{"row":5950,"column":0},"end":{"row":5950,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24041":{"range":{"start":{"row":5958,"column":0},"end":{"row":5958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24042":{"range":{"start":{"row":5966,"column":0},"end":{"row":5966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24043":{"range":{"start":{"row":5977,"column":0},"end":{"row":5977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24044":{"range":{"start":{"row":5986,"column":0},"end":{"row":5986,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24045":{"range":{"start":{"row":5995,"column":0},"end":{"row":5995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24046":{"range":{"start":{"row":6003,"column":0},"end":{"row":6003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24047":{"range":{"start":{"row":6011,"column":0},"end":{"row":6011,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24048":{"range":{"start":{"row":6018,"column":0},"end":{"row":6018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24049":{"range":{"start":{"row":6025,"column":0},"end":{"row":6025,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24050":{"range":{"start":{"row":6032,"column":0},"end":{"row":6032,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24051":{"range":{"start":{"row":6039,"column":0},"end":{"row":6039,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24052":{"range":{"start":{"row":6054,"column":0},"end":{"row":6054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24053":{"range":{"start":{"row":6066,"column":0},"end":{"row":6066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24054":{"range":{"start":{"row":6088,"column":0},"end":{"row":6088,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24055":{"range":{"start":{"row":6093,"column":0},"end":{"row":6093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24056":{"range":{"start":{"row":6101,"column":0},"end":{"row":6101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24057":{"range":{"start":{"row":6118,"column":0},"end":{"row":6118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24058":{"range":{"start":{"row":6130,"column":0},"end":{"row":6130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24059":{"range":{"start":{"row":6141,"column":0},"end":{"row":6141,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24060":{"range":{"start":{"row":6152,"column":0},"end":{"row":6152,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24061":{"range":{"start":{"row":6161,"column":0},"end":{"row":6161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24062":{"range":{"start":{"row":6173,"column":0},"end":{"row":6173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24063":{"range":{"start":{"row":6185,"column":0},"end":{"row":6185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24064":{"range":{"start":{"row":6203,"column":0},"end":{"row":6203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24065":{"range":{"start":{"row":6205,"column":0},"end":{"row":6205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24066":{"range":{"start":{"row":6210,"column":0},"end":{"row":6210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24067":{"range":{"start":{"row":6217,"column":0},"end":{"row":6217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24068":{"range":{"start":{"row":6224,"column":0},"end":{"row":6224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24069":{"range":{"start":{"row":6231,"column":0},"end":{"row":6231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24070":{"range":{"start":{"row":6238,"column":0},"end":{"row":6238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24071":{"range":{"start":{"row":6243,"column":0},"end":{"row":6243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24072":{"range":{"start":{"row":6255,"column":0},"end":{"row":6255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24073":{"range":{"start":{"row":6267,"column":0},"end":{"row":6267,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24074":{"range":{"start":{"row":6279,"column":0},"end":{"row":6279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24075":{"range":{"start":{"row":6290,"column":0},"end":{"row":6290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24076":{"range":{"start":{"row":6301,"column":0},"end":{"row":6301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24077":{"range":{"start":{"row":6313,"column":0},"end":{"row":6313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24078":{"range":{"start":{"row":6325,"column":0},"end":{"row":6325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24079":{"range":{"start":{"row":6333,"column":0},"end":{"row":6333,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24080":{"range":{"start":{"row":6347,"column":0},"end":{"row":6347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24081":{"range":{"start":{"row":6349,"column":0},"end":{"row":6349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24082":{"range":{"start":{"row":6354,"column":0},"end":{"row":6354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24083":{"range":{"start":{"row":6361,"column":0},"end":{"row":6361,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24084":{"range":{"start":{"row":6372,"column":0},"end":{"row":6372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24085":{"range":{"start":{"row":6377,"column":0},"end":{"row":6377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24086":{"range":{"start":{"row":6388,"column":0},"end":{"row":6388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24087":{"range":{"start":{"row":6404,"column":0},"end":{"row":6404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24088":{"range":{"start":{"row":6413,"column":0},"end":{"row":6413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24089":{"range":{"start":{"row":6423,"column":0},"end":{"row":6423,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24090":{"range":{"start":{"row":6434,"column":0},"end":{"row":6434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24091":{"range":{"start":{"row":6446,"column":0},"end":{"row":6446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24092":{"range":{"start":{"row":6457,"column":0},"end":{"row":6457,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24093":{"range":{"start":{"row":6465,"column":0},"end":{"row":6465,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24094":{"range":{"start":{"row":6479,"column":0},"end":{"row":6479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24095":{"range":{"start":{"row":6482,"column":0},"end":{"row":6482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24096":{"range":{"start":{"row":6485,"column":0},"end":{"row":6485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24097":{"range":{"start":{"row":6487,"column":0},"end":{"row":6487,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24098":{"range":{"start":{"row":6492,"column":0},"end":{"row":6492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24099":{"range":{"start":{"row":6499,"column":0},"end":{"row":6499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24100":{"range":{"start":{"row":6504,"column":0},"end":{"row":6504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24101":{"range":{"start":{"row":6516,"column":0},"end":{"row":6516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24102":{"range":{"start":{"row":6527,"column":0},"end":{"row":6527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24103":{"range":{"start":{"row":6539,"column":0},"end":{"row":6539,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24104":{"range":{"start":{"row":6551,"column":0},"end":{"row":6551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24105":{"range":{"start":{"row":6563,"column":0},"end":{"row":6563,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24106":{"range":{"start":{"row":6574,"column":0},"end":{"row":6574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24107":{"range":{"start":{"row":6582,"column":0},"end":{"row":6582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24108":{"range":{"start":{"row":6594,"column":0},"end":{"row":6594,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24109":{"range":{"start":{"row":6603,"column":0},"end":{"row":6603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24110":{"range":{"start":{"row":6610,"column":0},"end":{"row":6610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24111":{"range":{"start":{"row":6624,"column":0},"end":{"row":6624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24112":{"range":{"start":{"row":6637,"column":0},"end":{"row":6637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24113":{"range":{"start":{"row":6640,"column":0},"end":{"row":6640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24114":{"range":{"start":{"row":6643,"column":0},"end":{"row":6643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24115":{"range":{"start":{"row":6645,"column":0},"end":{"row":6645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24116":{"range":{"start":{"row":6650,"column":0},"end":{"row":6650,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24117":{"range":{"start":{"row":6657,"column":0},"end":{"row":6657,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24118":{"range":{"start":{"row":6662,"column":0},"end":{"row":6662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24119":{"range":{"start":{"row":6673,"column":0},"end":{"row":6673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24120":{"range":{"start":{"row":6685,"column":0},"end":{"row":6685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24121":{"range":{"start":{"row":6696,"column":0},"end":{"row":6696,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24122":{"range":{"start":{"row":6707,"column":0},"end":{"row":6707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24123":{"range":{"start":{"row":6719,"column":0},"end":{"row":6719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24124":{"range":{"start":{"row":6727,"column":0},"end":{"row":6727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24125":{"range":{"start":{"row":6745,"column":0},"end":{"row":6745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24126":{"range":{"start":{"row":6756,"column":0},"end":{"row":6756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24127":{"range":{"start":{"row":6766,"column":0},"end":{"row":6766,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24128":{"range":{"start":{"row":6787,"column":0},"end":{"row":6787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24129":{"range":{"start":{"row":6792,"column":0},"end":{"row":6792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24130":{"range":{"start":{"row":6799,"column":0},"end":{"row":6799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24131":{"range":{"start":{"row":6804,"column":0},"end":{"row":6804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24132":{"range":{"start":{"row":6836,"column":0},"end":{"row":6836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24133":{"range":{"start":{"row":6847,"column":0},"end":{"row":6847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24134":{"range":{"start":{"row":6858,"column":0},"end":{"row":6858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24135":{"range":{"start":{"row":6869,"column":0},"end":{"row":6869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24136":{"range":{"start":{"row":6903,"column":0},"end":{"row":6903,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24137":{"range":{"start":{"row":6924,"column":0},"end":{"row":6924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24138":{"range":{"start":{"row":6936,"column":0},"end":{"row":6936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24139":{"range":{"start":{"row":6952,"column":0},"end":{"row":6952,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24140":{"range":{"start":{"row":6964,"column":0},"end":{"row":6964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24141":{"range":{"start":{"row":6971,"column":0},"end":{"row":6971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24142":{"range":{"start":{"row":6996,"column":0},"end":{"row":6996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24143":{"range":{"start":{"row":7002,"column":0},"end":{"row":7002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24144":{"range":{"start":{"row":7150,"column":0},"end":{"row":7150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24145":{"range":{"start":{"row":7664,"column":0},"end":{"row":7664,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24146":{"range":{"start":{"row":7666,"column":0},"end":{"row":7666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24147":{"range":{"start":{"row":7673,"column":0},"end":{"row":7673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24148":{"range":{"start":{"row":7678,"column":0},"end":{"row":7678,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24149":{"range":{"start":{"row":7685,"column":0},"end":{"row":7685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24150":{"range":{"start":{"row":7692,"column":0},"end":{"row":7692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24151":{"range":{"start":{"row":7699,"column":0},"end":{"row":7699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24152":{"range":{"start":{"row":7711,"column":0},"end":{"row":7711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24153":{"range":{"start":{"row":7719,"column":0},"end":{"row":7719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24154":{"range":{"start":{"row":7730,"column":0},"end":{"row":7730,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24155":{"range":{"start":{"row":7741,"column":0},"end":{"row":7741,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24156":{"range":{"start":{"row":7753,"column":0},"end":{"row":7753,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24157":{"range":{"start":{"row":7764,"column":0},"end":{"row":7764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24158":{"range":{"start":{"row":7775,"column":0},"end":{"row":7775,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24159":{"range":{"start":{"row":7787,"column":0},"end":{"row":7787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24160":{"range":{"start":{"row":7799,"column":0},"end":{"row":7799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24161":{"range":{"start":{"row":7811,"column":0},"end":{"row":7811,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24162":{"range":{"start":{"row":7823,"column":0},"end":{"row":7823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24163":{"range":{"start":{"row":7835,"column":0},"end":{"row":7835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24164":{"range":{"start":{"row":7847,"column":0},"end":{"row":7847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24165":{"range":{"start":{"row":7849,"column":0},"end":{"row":7849,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24166":{"range":{"start":{"row":7854,"column":0},"end":{"row":7854,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24167":{"range":{"start":{"row":7861,"column":0},"end":{"row":7861,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24168":{"range":{"start":{"row":7866,"column":0},"end":{"row":7866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24169":{"range":{"start":{"row":7878,"column":0},"end":{"row":7878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24170":{"range":{"start":{"row":7889,"column":0},"end":{"row":7889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24171":{"range":{"start":{"row":7901,"column":0},"end":{"row":7901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24172":{"range":{"start":{"row":7912,"column":0},"end":{"row":7912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24173":{"range":{"start":{"row":7924,"column":0},"end":{"row":7924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24174":{"range":{"start":{"row":7935,"column":0},"end":{"row":7935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24175":{"range":{"start":{"row":7946,"column":0},"end":{"row":7946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24176":{"range":{"start":{"row":7958,"column":0},"end":{"row":7958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24177":{"range":{"start":{"row":7970,"column":0},"end":{"row":7970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24178":{"range":{"start":{"row":7982,"column":0},"end":{"row":7982,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24179":{"range":{"start":{"row":7994,"column":0},"end":{"row":7994,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24180":{"range":{"start":{"row":8006,"column":0},"end":{"row":8006,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24181":{"range":{"start":{"row":8017,"column":0},"end":{"row":8017,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24182":{"range":{"start":{"row":8027,"column":0},"end":{"row":8027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24183":{"range":{"start":{"row":8035,"column":0},"end":{"row":8035,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24184":{"range":{"start":{"row":8043,"column":0},"end":{"row":8043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25523":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25524":{"range":{"start":{"row":115,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25525":{"range":{"start":{"row":120,"column":0},"end":{"row":121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25526":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25527":{"range":{"start":{"row":128,"column":0},"end":{"row":129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25528":{"range":{"start":{"row":133,"column":0},"end":{"row":134,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25529":{"range":{"start":{"row":138,"column":0},"end":{"row":139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25530":{"range":{"start":{"row":144,"column":0},"end":{"row":145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25531":{"range":{"start":{"row":156,"column":0},"end":{"row":157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25532":{"range":{"start":{"row":168,"column":0},"end":{"row":169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25533":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25534":{"range":{"start":{"row":202,"column":0},"end":{"row":203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25535":{"range":{"start":{"row":209,"column":0},"end":{"row":210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25536":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25537":{"range":{"start":{"row":235,"column":0},"end":{"row":236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25538":{"range":{"start":{"row":241,"column":0},"end":{"row":242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25539":{"range":{"start":{"row":247,"column":0},"end":{"row":248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25540":{"range":{"start":{"row":253,"column":0},"end":{"row":254,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25541":{"range":{"start":{"row":259,"column":0},"end":{"row":260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25542":{"range":{"start":{"row":264,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25543":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25544":{"range":{"start":{"row":274,"column":0},"end":{"row":275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25545":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25546":{"range":{"start":{"row":284,"column":0},"end":{"row":285,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25547":{"range":{"start":{"row":289,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25548":{"range":{"start":{"row":301,"column":0},"end":{"row":302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25549":{"range":{"start":{"row":308,"column":0},"end":{"row":309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25550":{"range":{"start":{"row":315,"column":0},"end":{"row":316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25551":{"range":{"start":{"row":322,"column":0},"end":{"row":323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25552":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25553":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25554":{"range":{"start":{"row":352,"column":0},"end":{"row":353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25555":{"range":{"start":{"row":359,"column":0},"end":{"row":360,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25556":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25557":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25558":{"range":{"start":{"row":379,"column":0},"end":{"row":380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25559":{"range":{"start":{"row":386,"column":0},"end":{"row":387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25560":{"range":{"start":{"row":393,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25561":{"range":{"start":{"row":399,"column":0},"end":{"row":400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25562":{"range":{"start":{"row":406,"column":0},"end":{"row":407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25563":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25564":{"range":{"start":{"row":420,"column":0},"end":{"row":421,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25565":{"range":{"start":{"row":427,"column":0},"end":{"row":428,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25566":{"range":{"start":{"row":434,"column":0},"end":{"row":435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25567":{"range":{"start":{"row":441,"column":0},"end":{"row":442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25568":{"range":{"start":{"row":448,"column":0},"end":{"row":449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25569":{"range":{"start":{"row":471,"column":0},"end":{"row":472,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25570":{"range":{"start":{"row":481,"column":0},"end":{"row":482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25571":{"range":{"start":{"row":503,"column":0},"end":{"row":504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25572":{"range":{"start":{"row":514,"column":0},"end":{"row":515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25573":{"range":{"start":{"row":525,"column":0},"end":{"row":526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25574":{"range":{"start":{"row":544,"column":0},"end":{"row":545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25575":{"range":{"start":{"row":551,"column":0},"end":{"row":552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25576":{"range":{"start":{"row":558,"column":0},"end":{"row":559,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25577":{"range":{"start":{"row":565,"column":0},"end":{"row":566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25578":{"range":{"start":{"row":573,"column":0},"end":{"row":574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25579":{"range":{"start":{"row":581,"column":0},"end":{"row":582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25580":{"range":{"start":{"row":592,"column":0},"end":{"row":593,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25581":{"range":{"start":{"row":631,"column":0},"end":{"row":632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25582":{"range":{"start":{"row":642,"column":0},"end":{"row":643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25583":{"range":{"start":{"row":653,"column":0},"end":{"row":654,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25584":{"range":{"start":{"row":690,"column":0},"end":{"row":691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25585":{"range":{"start":{"row":700,"column":0},"end":{"row":701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25586":{"range":{"start":{"row":710,"column":0},"end":{"row":711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25587":{"range":{"start":{"row":720,"column":0},"end":{"row":721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25588":{"range":{"start":{"row":736,"column":0},"end":{"row":737,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25589":{"range":{"start":{"row":750,"column":0},"end":{"row":751,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25590":{"range":{"start":{"row":771,"column":0},"end":{"row":772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25591":{"range":{"start":{"row":783,"column":0},"end":{"row":784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25592":{"range":{"start":{"row":794,"column":0},"end":{"row":795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25593":{"range":{"start":{"row":819,"column":0},"end":{"row":820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25594":{"range":{"start":{"row":831,"column":0},"end":{"row":832,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25595":{"range":{"start":{"row":843,"column":0},"end":{"row":844,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25596":{"range":{"start":{"row":866,"column":0},"end":{"row":867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25597":{"range":{"start":{"row":878,"column":0},"end":{"row":879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25598":{"range":{"start":{"row":889,"column":0},"end":{"row":890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25599":{"range":{"start":{"row":900,"column":0},"end":{"row":901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25600":{"range":{"start":{"row":911,"column":0},"end":{"row":912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25601":{"range":{"start":{"row":922,"column":0},"end":{"row":923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25602":{"range":{"start":{"row":1226,"column":0},"end":{"row":1227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25603":{"range":{"start":{"row":1234,"column":0},"end":{"row":1235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25604":{"range":{"start":{"row":1309,"column":0},"end":{"row":1310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25605":{"range":{"start":{"row":1341,"column":0},"end":{"row":1342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25606":{"range":{"start":{"row":1348,"column":0},"end":{"row":1349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25607":{"range":{"start":{"row":1355,"column":0},"end":{"row":1356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25608":{"range":{"start":{"row":1362,"column":0},"end":{"row":1363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25609":{"range":{"start":{"row":1369,"column":0},"end":{"row":1370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25610":{"range":{"start":{"row":1376,"column":0},"end":{"row":1377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25611":{"range":{"start":{"row":1383,"column":0},"end":{"row":1384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25612":{"range":{"start":{"row":1390,"column":0},"end":{"row":1391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25613":{"range":{"start":{"row":1397,"column":0},"end":{"row":1398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25614":{"range":{"start":{"row":1404,"column":0},"end":{"row":1405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25615":{"range":{"start":{"row":1411,"column":0},"end":{"row":1412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25616":{"range":{"start":{"row":1418,"column":0},"end":{"row":1419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25617":{"range":{"start":{"row":1425,"column":0},"end":{"row":1426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25618":{"range":{"start":{"row":1437,"column":0},"end":{"row":1438,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25619":{"range":{"start":{"row":1443,"column":0},"end":{"row":1444,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25620":{"range":{"start":{"row":1455,"column":0},"end":{"row":1456,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25621":{"range":{"start":{"row":1466,"column":0},"end":{"row":1467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25622":{"range":{"start":{"row":1474,"column":0},"end":{"row":1475,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25623":{"range":{"start":{"row":1482,"column":0},"end":{"row":1483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25624":{"range":{"start":{"row":1490,"column":0},"end":{"row":1491,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25625":{"range":{"start":{"row":1496,"column":0},"end":{"row":1497,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25626":{"range":{"start":{"row":1502,"column":0},"end":{"row":1503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25627":{"range":{"start":{"row":1508,"column":0},"end":{"row":1509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25628":{"range":{"start":{"row":1514,"column":0},"end":{"row":1515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25629":{"range":{"start":{"row":1520,"column":0},"end":{"row":1521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25630":{"range":{"start":{"row":1526,"column":0},"end":{"row":1527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25631":{"range":{"start":{"row":1533,"column":0},"end":{"row":1534,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25632":{"range":{"start":{"row":1542,"column":0},"end":{"row":1543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25633":{"range":{"start":{"row":1551,"column":0},"end":{"row":1552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25634":{"range":{"start":{"row":1560,"column":0},"end":{"row":1561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25635":{"range":{"start":{"row":1567,"column":0},"end":{"row":1568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25636":{"range":{"start":{"row":1581,"column":0},"end":{"row":1582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25637":{"range":{"start":{"row":1588,"column":0},"end":{"row":1589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25638":{"range":{"start":{"row":1595,"column":0},"end":{"row":1596,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25639":{"range":{"start":{"row":1602,"column":0},"end":{"row":1603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25640":{"range":{"start":{"row":1609,"column":0},"end":{"row":1610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25641":{"range":{"start":{"row":1616,"column":0},"end":{"row":1617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25642":{"range":{"start":{"row":1623,"column":0},"end":{"row":1624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25643":{"range":{"start":{"row":1630,"column":0},"end":{"row":1631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25644":{"range":{"start":{"row":1637,"column":0},"end":{"row":1638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25645":{"range":{"start":{"row":1644,"column":0},"end":{"row":1645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25646":{"range":{"start":{"row":1651,"column":0},"end":{"row":1652,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25647":{"range":{"start":{"row":1658,"column":0},"end":{"row":1659,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25648":{"range":{"start":{"row":1665,"column":0},"end":{"row":1666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25649":{"range":{"start":{"row":1672,"column":0},"end":{"row":1673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25650":{"range":{"start":{"row":1679,"column":0},"end":{"row":1680,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25651":{"range":{"start":{"row":1686,"column":0},"end":{"row":1687,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25652":{"range":{"start":{"row":1693,"column":0},"end":{"row":1694,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25653":{"range":{"start":{"row":1700,"column":0},"end":{"row":1701,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25654":{"range":{"start":{"row":1707,"column":0},"end":{"row":1708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25655":{"range":{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25656":{"range":{"start":{"row":1721,"column":0},"end":{"row":1722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25657":{"range":{"start":{"row":1728,"column":0},"end":{"row":1729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25658":{"range":{"start":{"row":1735,"column":0},"end":{"row":1736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25659":{"range":{"start":{"row":1742,"column":0},"end":{"row":1743,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25660":{"range":{"start":{"row":1749,"column":0},"end":{"row":1750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25661":{"range":{"start":{"row":1756,"column":0},"end":{"row":1757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25662":{"range":{"start":{"row":1763,"column":0},"end":{"row":1764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25663":{"range":{"start":{"row":1770,"column":0},"end":{"row":1771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25664":{"range":{"start":{"row":1777,"column":0},"end":{"row":1778,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25665":{"range":{"start":{"row":1784,"column":0},"end":{"row":1785,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25666":{"range":{"start":{"row":1791,"column":0},"end":{"row":1792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25667":{"range":{"start":{"row":1797,"column":0},"end":{"row":1798,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25668":{"range":{"start":{"row":1803,"column":0},"end":{"row":1804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25669":{"range":{"start":{"row":1809,"column":0},"end":{"row":1810,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25670":{"range":{"start":{"row":1815,"column":0},"end":{"row":1816,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25671":{"range":{"start":{"row":1821,"column":0},"end":{"row":1822,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25672":{"range":{"start":{"row":1827,"column":0},"end":{"row":1828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25673":{"range":{"start":{"row":1833,"column":0},"end":{"row":1834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25674":{"range":{"start":{"row":1839,"column":0},"end":{"row":1840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25675":{"range":{"start":{"row":1845,"column":0},"end":{"row":1846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25676":{"range":{"start":{"row":1851,"column":0},"end":{"row":1852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25677":{"range":{"start":{"row":1857,"column":0},"end":{"row":1858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25678":{"range":{"start":{"row":1863,"column":0},"end":{"row":1864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25679":{"range":{"start":{"row":1869,"column":0},"end":{"row":1870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25680":{"range":{"start":{"row":1875,"column":0},"end":{"row":1876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25681":{"range":{"start":{"row":1881,"column":0},"end":{"row":1882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25682":{"range":{"start":{"row":1887,"column":0},"end":{"row":1888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25683":{"range":{"start":{"row":1893,"column":0},"end":{"row":1894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25684":{"range":{"start":{"row":1899,"column":0},"end":{"row":1900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25685":{"range":{"start":{"row":1905,"column":0},"end":{"row":1906,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25686":{"range":{"start":{"row":1911,"column":0},"end":{"row":1912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25687":{"range":{"start":{"row":1917,"column":0},"end":{"row":1918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25688":{"range":{"start":{"row":1923,"column":0},"end":{"row":1924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25689":{"range":{"start":{"row":1929,"column":0},"end":{"row":1930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25690":{"range":{"start":{"row":1935,"column":0},"end":{"row":1936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25691":{"range":{"start":{"row":1941,"column":0},"end":{"row":1942,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25692":{"range":{"start":{"row":1947,"column":0},"end":{"row":1948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25693":{"range":{"start":{"row":1953,"column":0},"end":{"row":1954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25694":{"range":{"start":{"row":1959,"column":0},"end":{"row":1960,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25695":{"range":{"start":{"row":1965,"column":0},"end":{"row":1966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25696":{"range":{"start":{"row":1971,"column":0},"end":{"row":1972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25697":{"range":{"start":{"row":1977,"column":0},"end":{"row":1978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25698":{"range":{"start":{"row":1983,"column":0},"end":{"row":1984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25699":{"range":{"start":{"row":1989,"column":0},"end":{"row":1990,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25700":{"range":{"start":{"row":1995,"column":0},"end":{"row":1996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25701":{"range":{"start":{"row":2001,"column":0},"end":{"row":2002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25702":{"range":{"start":{"row":2036,"column":0},"end":{"row":2037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25703":{"range":{"start":{"row":2042,"column":0},"end":{"row":2043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25704":{"range":{"start":{"row":2048,"column":0},"end":{"row":2049,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25705":{"range":{"start":{"row":2054,"column":0},"end":{"row":2055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25706":{"range":{"start":{"row":2062,"column":0},"end":{"row":2063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25707":{"range":{"start":{"row":2070,"column":0},"end":{"row":2071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25708":{"range":{"start":{"row":2078,"column":0},"end":{"row":2079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25709":{"range":{"start":{"row":2086,"column":0},"end":{"row":2087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25710":{"range":{"start":{"row":2094,"column":0},"end":{"row":2095,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25711":{"range":{"start":{"row":2102,"column":0},"end":{"row":2103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25712":{"range":{"start":{"row":2110,"column":0},"end":{"row":2111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25713":{"range":{"start":{"row":2118,"column":0},"end":{"row":2119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25714":{"range":{"start":{"row":2138,"column":0},"end":{"row":2139,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25715":{"range":{"start":{"row":2144,"column":0},"end":{"row":2145,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25716":{"range":{"start":{"row":2150,"column":0},"end":{"row":2151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25717":{"range":{"start":{"row":2156,"column":0},"end":{"row":2157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25718":{"range":{"start":{"row":2162,"column":0},"end":{"row":2163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25719":{"range":{"start":{"row":2168,"column":0},"end":{"row":2169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25720":{"range":{"start":{"row":2175,"column":0},"end":{"row":2176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25721":{"range":{"start":{"row":2182,"column":0},"end":{"row":2183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25722":{"range":{"start":{"row":2189,"column":0},"end":{"row":2190,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25723":{"range":{"start":{"row":2196,"column":0},"end":{"row":2197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25724":{"range":{"start":{"row":2203,"column":0},"end":{"row":2204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25725":{"range":{"start":{"row":2218,"column":0},"end":{"row":2219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25726":{"range":{"start":{"row":2224,"column":0},"end":{"row":2225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25727":{"range":{"start":{"row":2231,"column":0},"end":{"row":2232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25728":{"range":{"start":{"row":2237,"column":0},"end":{"row":2238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25729":{"range":{"start":{"row":2243,"column":0},"end":{"row":2244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25730":{"range":{"start":{"row":2249,"column":0},"end":{"row":2250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25731":{"range":{"start":{"row":2256,"column":0},"end":{"row":2257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25732":{"range":{"start":{"row":2264,"column":0},"end":{"row":2265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25733":{"range":{"start":{"row":2271,"column":0},"end":{"row":2272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25734":{"range":{"start":{"row":2277,"column":0},"end":{"row":2278,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25735":{"range":{"start":{"row":2283,"column":0},"end":{"row":2284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25736":{"range":{"start":{"row":2289,"column":0},"end":{"row":2290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25737":{"range":{"start":{"row":2297,"column":0},"end":{"row":2298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25738":{"range":{"start":{"row":2304,"column":0},"end":{"row":2305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25739":{"range":{"start":{"row":2334,"column":0},"end":{"row":2335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25740":{"range":{"start":{"row":2340,"column":0},"end":{"row":2341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25741":{"range":{"start":{"row":2346,"column":0},"end":{"row":2347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25742":{"range":{"start":{"row":2352,"column":0},"end":{"row":2353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25743":{"range":{"start":{"row":2358,"column":0},"end":{"row":2359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25744":{"range":{"start":{"row":2364,"column":0},"end":{"row":2365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25745":{"range":{"start":{"row":2375,"column":0},"end":{"row":2376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25746":{"range":{"start":{"row":2381,"column":0},"end":{"row":2382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25747":{"range":{"start":{"row":2387,"column":0},"end":{"row":2388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25748":{"range":{"start":{"row":2393,"column":0},"end":{"row":2394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25749":{"range":{"start":{"row":2404,"column":0},"end":{"row":2405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25750":{"range":{"start":{"row":2431,"column":0},"end":{"row":2432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25751":{"range":{"start":{"row":2447,"column":0},"end":{"row":2448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25752":{"range":{"start":{"row":2469,"column":0},"end":{"row":2470,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25753":{"range":{"start":{"row":2495,"column":0},"end":{"row":2496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25754":{"range":{"start":{"row":2567,"column":0},"end":{"row":2568,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25755":{"range":{"start":{"row":2575,"column":0},"end":{"row":2576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25756":{"range":{"start":{"row":2580,"column":0},"end":{"row":2581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25757":{"range":{"start":{"row":2588,"column":0},"end":{"row":2589,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25758":{"range":{"start":{"row":2607,"column":0},"end":{"row":2608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25759":{"range":{"start":{"row":2616,"column":0},"end":{"row":2617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25760":{"range":{"start":{"row":2624,"column":0},"end":{"row":2625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25761":{"range":{"start":{"row":2634,"column":0},"end":{"row":2635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25762":{"range":{"start":{"row":2875,"column":0},"end":{"row":2876,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25763":{"range":{"start":{"row":2880,"column":0},"end":{"row":2881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25764":{"range":{"start":{"row":2887,"column":0},"end":{"row":2888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25765":{"range":{"start":{"row":2894,"column":0},"end":{"row":2895,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25766":{"range":{"start":{"row":2917,"column":0},"end":{"row":2918,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25767":{"range":{"start":{"row":2929,"column":0},"end":{"row":2930,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25768":{"range":{"start":{"row":2937,"column":0},"end":{"row":2938,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25769":{"range":{"start":{"row":2992,"column":0},"end":{"row":2993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25770":{"range":{"start":{"row":3009,"column":0},"end":{"row":3010,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25771":{"range":{"start":{"row":3063,"column":0},"end":{"row":3064,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25772":{"range":{"start":{"row":3067,"column":0},"end":{"row":3068,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25773":{"range":{"start":{"row":3136,"column":0},"end":{"row":3137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25774":{"range":{"start":{"row":3143,"column":0},"end":{"row":3144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25775":{"range":{"start":{"row":3148,"column":0},"end":{"row":3149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25776":{"range":{"start":{"row":3155,"column":0},"end":{"row":3156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25777":{"range":{"start":{"row":3162,"column":0},"end":{"row":3163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25778":{"range":{"start":{"row":3169,"column":0},"end":{"row":3170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25779":{"range":{"start":{"row":3176,"column":0},"end":{"row":3177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25780":{"range":{"start":{"row":3183,"column":0},"end":{"row":3184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25781":{"range":{"start":{"row":3197,"column":0},"end":{"row":3198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25782":{"range":{"start":{"row":3210,"column":0},"end":{"row":3211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25783":{"range":{"start":{"row":3216,"column":0},"end":{"row":3217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25784":{"range":{"start":{"row":3222,"column":0},"end":{"row":3223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25785":{"range":{"start":{"row":3235,"column":0},"end":{"row":3236,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25786":{"range":{"start":{"row":3242,"column":0},"end":{"row":3243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25787":{"range":{"start":{"row":3248,"column":0},"end":{"row":3249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25788":{"range":{"start":{"row":3259,"column":0},"end":{"row":3260,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25789":{"range":{"start":{"row":3271,"column":0},"end":{"row":3272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25790":{"range":{"start":{"row":3282,"column":0},"end":{"row":3283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25791":{"range":{"start":{"row":3300,"column":0},"end":{"row":3301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25792":{"range":{"start":{"row":3311,"column":0},"end":{"row":3312,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25793":{"range":{"start":{"row":3322,"column":0},"end":{"row":3323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25794":{"range":{"start":{"row":3331,"column":0},"end":{"row":3332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25795":{"range":{"start":{"row":3348,"column":0},"end":{"row":3349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25796":{"range":{"start":{"row":3356,"column":0},"end":{"row":3357,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25797":{"range":{"start":{"row":3364,"column":0},"end":{"row":3365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25798":{"range":{"start":{"row":3372,"column":0},"end":{"row":3373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25799":{"range":{"start":{"row":3380,"column":0},"end":{"row":3381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25800":{"range":{"start":{"row":3388,"column":0},"end":{"row":3389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25801":{"range":{"start":{"row":3396,"column":0},"end":{"row":3397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25802":{"range":{"start":{"row":3403,"column":0},"end":{"row":3404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25803":{"range":{"start":{"row":3411,"column":0},"end":{"row":3412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25804":{"range":{"start":{"row":3418,"column":0},"end":{"row":3419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25805":{"range":{"start":{"row":3425,"column":0},"end":{"row":3426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25806":{"range":{"start":{"row":3432,"column":0},"end":{"row":3433,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25807":{"range":{"start":{"row":3439,"column":0},"end":{"row":3440,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25808":{"range":{"start":{"row":3446,"column":0},"end":{"row":3447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25809":{"range":{"start":{"row":3453,"column":0},"end":{"row":3454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25810":{"range":{"start":{"row":3466,"column":0},"end":{"row":3467,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25811":{"range":{"start":{"row":3478,"column":0},"end":{"row":3479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25812":{"range":{"start":{"row":3489,"column":0},"end":{"row":3490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25813":{"range":{"start":{"row":3500,"column":0},"end":{"row":3501,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25814":{"range":{"start":{"row":3511,"column":0},"end":{"row":3512,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25815":{"range":{"start":{"row":3522,"column":0},"end":{"row":3523,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25816":{"range":{"start":{"row":3532,"column":0},"end":{"row":3533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25817":{"range":{"start":{"row":3573,"column":0},"end":{"row":3574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25818":{"range":{"start":{"row":3585,"column":0},"end":{"row":3586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25819":{"range":{"start":{"row":3608,"column":0},"end":{"row":3609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25820":{"range":{"start":{"row":3620,"column":0},"end":{"row":3621,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25821":{"range":{"start":{"row":3632,"column":0},"end":{"row":3633,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25822":{"range":{"start":{"row":3644,"column":0},"end":{"row":3645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25823":{"range":{"start":{"row":3957,"column":0},"end":{"row":3958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25824":{"range":{"start":{"row":3965,"column":0},"end":{"row":3966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25825":{"range":{"start":{"row":3973,"column":0},"end":{"row":3974,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25826":{"range":{"start":{"row":3984,"column":0},"end":{"row":3985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25827":{"range":{"start":{"row":3992,"column":0},"end":{"row":3993,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25828":{"range":{"start":{"row":4000,"column":0},"end":{"row":4001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25829":{"range":{"start":{"row":4030,"column":0},"end":{"row":4031,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25830":{"range":{"start":{"row":4037,"column":0},"end":{"row":4038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25831":{"range":{"start":{"row":4044,"column":0},"end":{"row":4045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25832":{"range":{"start":{"row":4051,"column":0},"end":{"row":4052,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25833":{"range":{"start":{"row":4058,"column":0},"end":{"row":4059,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25834":{"range":{"start":{"row":4065,"column":0},"end":{"row":4066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25835":{"range":{"start":{"row":4072,"column":0},"end":{"row":4073,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25836":{"range":{"start":{"row":4079,"column":0},"end":{"row":4080,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25837":{"range":{"start":{"row":4086,"column":0},"end":{"row":4087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25838":{"range":{"start":{"row":4093,"column":0},"end":{"row":4094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25839":{"range":{"start":{"row":4100,"column":0},"end":{"row":4101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25840":{"range":{"start":{"row":4107,"column":0},"end":{"row":4108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25841":{"range":{"start":{"row":4114,"column":0},"end":{"row":4115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25842":{"range":{"start":{"row":4121,"column":0},"end":{"row":4122,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25843":{"range":{"start":{"row":4128,"column":0},"end":{"row":4129,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25844":{"range":{"start":{"row":4135,"column":0},"end":{"row":4136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25845":{"range":{"start":{"row":4142,"column":0},"end":{"row":4143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25846":{"range":{"start":{"row":4149,"column":0},"end":{"row":4150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25847":{"range":{"start":{"row":4156,"column":0},"end":{"row":4157,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25848":{"range":{"start":{"row":4163,"column":0},"end":{"row":4164,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25849":{"range":{"start":{"row":4170,"column":0},"end":{"row":4171,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25850":{"range":{"start":{"row":4177,"column":0},"end":{"row":4178,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25851":{"range":{"start":{"row":4184,"column":0},"end":{"row":4185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25852":{"range":{"start":{"row":4191,"column":0},"end":{"row":4192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25853":{"range":{"start":{"row":4198,"column":0},"end":{"row":4199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25854":{"range":{"start":{"row":4205,"column":0},"end":{"row":4206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25855":{"range":{"start":{"row":4212,"column":0},"end":{"row":4213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25856":{"range":{"start":{"row":4219,"column":0},"end":{"row":4220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25857":{"range":{"start":{"row":4226,"column":0},"end":{"row":4227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25858":{"range":{"start":{"row":4232,"column":0},"end":{"row":4233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25859":{"range":{"start":{"row":4238,"column":0},"end":{"row":4239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25860":{"range":{"start":{"row":4244,"column":0},"end":{"row":4245,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25861":{"range":{"start":{"row":4250,"column":0},"end":{"row":4251,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25862":{"range":{"start":{"row":4256,"column":0},"end":{"row":4257,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25863":{"range":{"start":{"row":4262,"column":0},"end":{"row":4263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25864":{"range":{"start":{"row":4268,"column":0},"end":{"row":4269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25865":{"range":{"start":{"row":4274,"column":0},"end":{"row":4275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25866":{"range":{"start":{"row":4280,"column":0},"end":{"row":4281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25867":{"range":{"start":{"row":4286,"column":0},"end":{"row":4287,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25868":{"range":{"start":{"row":4292,"column":0},"end":{"row":4293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25869":{"range":{"start":{"row":4298,"column":0},"end":{"row":4299,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25870":{"range":{"start":{"row":4304,"column":0},"end":{"row":4305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25871":{"range":{"start":{"row":4310,"column":0},"end":{"row":4311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25872":{"range":{"start":{"row":4316,"column":0},"end":{"row":4317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25873":{"range":{"start":{"row":4322,"column":0},"end":{"row":4323,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25874":{"range":{"start":{"row":4328,"column":0},"end":{"row":4329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25875":{"range":{"start":{"row":4334,"column":0},"end":{"row":4335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25876":{"range":{"start":{"row":4340,"column":0},"end":{"row":4341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25877":{"range":{"start":{"row":4346,"column":0},"end":{"row":4347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25878":{"range":{"start":{"row":4352,"column":0},"end":{"row":4353,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25879":{"range":{"start":{"row":4358,"column":0},"end":{"row":4359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25880":{"range":{"start":{"row":4364,"column":0},"end":{"row":4365,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25881":{"range":{"start":{"row":4370,"column":0},"end":{"row":4371,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25882":{"range":{"start":{"row":4376,"column":0},"end":{"row":4377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25883":{"range":{"start":{"row":4382,"column":0},"end":{"row":4383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25884":{"range":{"start":{"row":4388,"column":0},"end":{"row":4389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25885":{"range":{"start":{"row":4394,"column":0},"end":{"row":4395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25886":{"range":{"start":{"row":4400,"column":0},"end":{"row":4401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25887":{"range":{"start":{"row":4406,"column":0},"end":{"row":4407,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25888":{"range":{"start":{"row":4412,"column":0},"end":{"row":4413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25889":{"range":{"start":{"row":4418,"column":0},"end":{"row":4419,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25890":{"range":{"start":{"row":4424,"column":0},"end":{"row":4425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25891":{"range":{"start":{"row":4430,"column":0},"end":{"row":4431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25892":{"range":{"start":{"row":4436,"column":0},"end":{"row":4437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25893":{"range":{"start":{"row":4442,"column":0},"end":{"row":4443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25894":{"range":{"start":{"row":4448,"column":0},"end":{"row":4449,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25895":{"range":{"start":{"row":4454,"column":0},"end":{"row":4455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25896":{"range":{"start":{"row":4460,"column":0},"end":{"row":4461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25897":{"range":{"start":{"row":4468,"column":0},"end":{"row":4469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25898":{"range":{"start":{"row":4476,"column":0},"end":{"row":4477,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25899":{"range":{"start":{"row":4492,"column":0},"end":{"row":4493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25900":{"range":{"start":{"row":4498,"column":0},"end":{"row":4499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25901":{"range":{"start":{"row":4504,"column":0},"end":{"row":4505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25902":{"range":{"start":{"row":4509,"column":0},"end":{"row":4510,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25903":{"range":{"start":{"row":4515,"column":0},"end":{"row":4516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25904":{"range":{"start":{"row":4520,"column":0},"end":{"row":4521,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25905":{"range":{"start":{"row":4525,"column":0},"end":{"row":4526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25906":{"range":{"start":{"row":4530,"column":0},"end":{"row":4531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25907":{"range":{"start":{"row":4535,"column":0},"end":{"row":4536,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25908":{"range":{"start":{"row":4540,"column":0},"end":{"row":4541,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25909":{"range":{"start":{"row":4545,"column":0},"end":{"row":4546,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25910":{"range":{"start":{"row":4550,"column":0},"end":{"row":4551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25911":{"range":{"start":{"row":4555,"column":0},"end":{"row":4556,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25912":{"range":{"start":{"row":4560,"column":0},"end":{"row":4561,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25913":{"range":{"start":{"row":4565,"column":0},"end":{"row":4566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25914":{"range":{"start":{"row":4570,"column":0},"end":{"row":4571,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25915":{"range":{"start":{"row":4575,"column":0},"end":{"row":4576,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25916":{"range":{"start":{"row":4580,"column":0},"end":{"row":4581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25917":{"range":{"start":{"row":4585,"column":0},"end":{"row":4586,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25918":{"range":{"start":{"row":4597,"column":0},"end":{"row":4598,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25919":{"range":{"start":{"row":4617,"column":0},"end":{"row":4618,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25920":{"range":{"start":{"row":4626,"column":0},"end":{"row":4627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25921":{"range":{"start":{"row":4635,"column":0},"end":{"row":4636,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25922":{"range":{"start":{"row":4642,"column":0},"end":{"row":4643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25923":{"range":{"start":{"row":4714,"column":0},"end":{"row":4715,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25924":{"range":{"start":{"row":4716,"column":0},"end":{"row":4717,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25925":{"range":{"start":{"row":4721,"column":0},"end":{"row":4722,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25926":{"range":{"start":{"row":4728,"column":0},"end":{"row":4729,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25927":{"range":{"start":{"row":4733,"column":0},"end":{"row":4734,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25928":{"range":{"start":{"row":4739,"column":0},"end":{"row":4740,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25929":{"range":{"start":{"row":4745,"column":0},"end":{"row":4746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25930":{"range":{"start":{"row":4756,"column":0},"end":{"row":4757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25931":{"range":{"start":{"row":4767,"column":0},"end":{"row":4768,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25932":{"range":{"start":{"row":4787,"column":0},"end":{"row":4788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25933":{"range":{"start":{"row":4799,"column":0},"end":{"row":4800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25934":{"range":{"start":{"row":4806,"column":0},"end":{"row":4807,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25935":{"range":{"start":{"row":4813,"column":0},"end":{"row":4814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25936":{"range":{"start":{"row":4820,"column":0},"end":{"row":4821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25937":{"range":{"start":{"row":4827,"column":0},"end":{"row":4828,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25938":{"range":{"start":{"row":4834,"column":0},"end":{"row":4835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25939":{"range":{"start":{"row":4840,"column":0},"end":{"row":4841,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25940":{"range":{"start":{"row":4846,"column":0},"end":{"row":4847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25941":{"range":{"start":{"row":4852,"column":0},"end":{"row":4853,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25942":{"range":{"start":{"row":4864,"column":0},"end":{"row":4865,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25943":{"range":{"start":{"row":4872,"column":0},"end":{"row":4873,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25944":{"range":{"start":{"row":4880,"column":0},"end":{"row":4881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25945":{"range":{"start":{"row":4888,"column":0},"end":{"row":4889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25946":{"range":{"start":{"row":4896,"column":0},"end":{"row":4897,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25947":{"range":{"start":{"row":4904,"column":0},"end":{"row":4905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25948":{"range":{"start":{"row":4910,"column":0},"end":{"row":4911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25949":{"range":{"start":{"row":4916,"column":0},"end":{"row":4917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25950":{"range":{"start":{"row":4922,"column":0},"end":{"row":4923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25951":{"range":{"start":{"row":4928,"column":0},"end":{"row":4929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25952":{"range":{"start":{"row":4946,"column":0},"end":{"row":4947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25953":{"range":{"start":{"row":4948,"column":0},"end":{"row":4949,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25954":{"range":{"start":{"row":4953,"column":0},"end":{"row":4954,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25955":{"range":{"start":{"row":4958,"column":0},"end":{"row":4959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25956":{"range":{"start":{"row":4963,"column":0},"end":{"row":4964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25957":{"range":{"start":{"row":4970,"column":0},"end":{"row":4971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25958":{"range":{"start":{"row":4977,"column":0},"end":{"row":4978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25959":{"range":{"start":{"row":4984,"column":0},"end":{"row":4985,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25960":{"range":{"start":{"row":5000,"column":0},"end":{"row":5001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25961":{"range":{"start":{"row":5003,"column":0},"end":{"row":5004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25962":{"range":{"start":{"row":5015,"column":0},"end":{"row":5016,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25963":{"range":{"start":{"row":5026,"column":0},"end":{"row":5027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25964":{"range":{"start":{"row":5037,"column":0},"end":{"row":5038,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25965":{"range":{"start":{"row":5045,"column":0},"end":{"row":5046,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25966":{"range":{"start":{"row":5057,"column":0},"end":{"row":5058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25967":{"range":{"start":{"row":5071,"column":0},"end":{"row":5072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25968":{"range":{"start":{"row":5077,"column":0},"end":{"row":5078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25969":{"range":{"start":{"row":5086,"column":0},"end":{"row":5087,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25970":{"range":{"start":{"row":5091,"column":0},"end":{"row":5092,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25971":{"range":{"start":{"row":5103,"column":0},"end":{"row":5104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25972":{"range":{"start":{"row":5113,"column":0},"end":{"row":5114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25973":{"range":{"start":{"row":5125,"column":0},"end":{"row":5126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25974":{"range":{"start":{"row":5136,"column":0},"end":{"row":5137,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25975":{"range":{"start":{"row":5148,"column":0},"end":{"row":5149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25976":{"range":{"start":{"row":5160,"column":0},"end":{"row":5161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25977":{"range":{"start":{"row":5172,"column":0},"end":{"row":5173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25978":{"range":{"start":{"row":5184,"column":0},"end":{"row":5185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25979":{"range":{"start":{"row":5196,"column":0},"end":{"row":5197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25980":{"range":{"start":{"row":5208,"column":0},"end":{"row":5209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25981":{"range":{"start":{"row":5232,"column":0},"end":{"row":5233,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25982":{"range":{"start":{"row":5242,"column":0},"end":{"row":5243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25983":{"range":{"start":{"row":5252,"column":0},"end":{"row":5253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25984":{"range":{"start":{"row":5262,"column":0},"end":{"row":5263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25985":{"range":{"start":{"row":5281,"column":0},"end":{"row":5282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25986":{"range":{"start":{"row":5289,"column":0},"end":{"row":5290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25987":{"range":{"start":{"row":5294,"column":0},"end":{"row":5295,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25988":{"range":{"start":{"row":5306,"column":0},"end":{"row":5307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25989":{"range":{"start":{"row":5316,"column":0},"end":{"row":5317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25990":{"range":{"start":{"row":5327,"column":0},"end":{"row":5328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25991":{"range":{"start":{"row":5339,"column":0},"end":{"row":5340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25992":{"range":{"start":{"row":5351,"column":0},"end":{"row":5352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25993":{"range":{"start":{"row":5362,"column":0},"end":{"row":5363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25994":{"range":{"start":{"row":5374,"column":0},"end":{"row":5375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25995":{"range":{"start":{"row":5386,"column":0},"end":{"row":5387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25996":{"range":{"start":{"row":5398,"column":0},"end":{"row":5399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25997":{"range":{"start":{"row":5410,"column":0},"end":{"row":5411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25998":{"range":{"start":{"row":5429,"column":0},"end":{"row":5430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25999":{"range":{"start":{"row":5454,"column":0},"end":{"row":5455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26000":{"range":{"start":{"row":5460,"column":0},"end":{"row":5461,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26001":{"range":{"start":{"row":5468,"column":0},"end":{"row":5469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26002":{"range":{"start":{"row":5473,"column":0},"end":{"row":5474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26003":{"range":{"start":{"row":5485,"column":0},"end":{"row":5486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26004":{"range":{"start":{"row":5495,"column":0},"end":{"row":5496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26005":{"range":{"start":{"row":5507,"column":0},"end":{"row":5508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26006":{"range":{"start":{"row":5518,"column":0},"end":{"row":5519,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26007":{"range":{"start":{"row":5530,"column":0},"end":{"row":5531,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26008":{"range":{"start":{"row":5542,"column":0},"end":{"row":5543,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26009":{"range":{"start":{"row":5554,"column":0},"end":{"row":5555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26010":{"range":{"start":{"row":5566,"column":0},"end":{"row":5567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26011":{"range":{"start":{"row":5578,"column":0},"end":{"row":5579,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26012":{"range":{"start":{"row":5584,"column":0},"end":{"row":5585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26013":{"range":{"start":{"row":5624,"column":0},"end":{"row":5625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26014":{"range":{"start":{"row":5626,"column":0},"end":{"row":5627,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26015":{"range":{"start":{"row":5631,"column":0},"end":{"row":5632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26016":{"range":{"start":{"row":5639,"column":0},"end":{"row":5640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26017":{"range":{"start":{"row":5644,"column":0},"end":{"row":5645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26018":{"range":{"start":{"row":5662,"column":0},"end":{"row":5663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26019":{"range":{"start":{"row":5669,"column":0},"end":{"row":5670,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26020":{"range":{"start":{"row":5676,"column":0},"end":{"row":5677,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26021":{"range":{"start":{"row":5683,"column":0},"end":{"row":5684,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26022":{"range":{"start":{"row":5691,"column":0},"end":{"row":5692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26023":{"range":{"start":{"row":5699,"column":0},"end":{"row":5700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26024":{"range":{"start":{"row":5707,"column":0},"end":{"row":5708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26025":{"range":{"start":{"row":5713,"column":0},"end":{"row":5714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26026":{"range":{"start":{"row":5719,"column":0},"end":{"row":5720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26027":{"range":{"start":{"row":5726,"column":0},"end":{"row":5727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26028":{"range":{"start":{"row":5738,"column":0},"end":{"row":5739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26029":{"range":{"start":{"row":5749,"column":0},"end":{"row":5750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26030":{"range":{"start":{"row":5761,"column":0},"end":{"row":5762,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26031":{"range":{"start":{"row":5772,"column":0},"end":{"row":5773,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26032":{"range":{"start":{"row":5779,"column":0},"end":{"row":5780,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26033":{"range":{"start":{"row":5786,"column":0},"end":{"row":5787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26034":{"range":{"start":{"row":5794,"column":0},"end":{"row":5795,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26035":{"range":{"start":{"row":5802,"column":0},"end":{"row":5803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26036":{"range":{"start":{"row":5813,"column":0},"end":{"row":5814,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26037":{"range":{"start":{"row":5823,"column":0},"end":{"row":5824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26038":{"range":{"start":{"row":5833,"column":0},"end":{"row":5834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26039":{"range":{"start":{"row":5845,"column":0},"end":{"row":5846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26040":{"range":{"start":{"row":5857,"column":0},"end":{"row":5858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26041":{"range":{"start":{"row":5869,"column":0},"end":{"row":5870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26042":{"range":{"start":{"row":5881,"column":0},"end":{"row":5882,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26043":{"range":{"start":{"row":5904,"column":0},"end":{"row":5905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26044":{"range":{"start":{"row":5916,"column":0},"end":{"row":5917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26045":{"range":{"start":{"row":5928,"column":0},"end":{"row":5929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26046":{"range":{"start":{"row":5940,"column":0},"end":{"row":5941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26047":{"range":{"start":{"row":5950,"column":0},"end":{"row":5951,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26048":{"range":{"start":{"row":5958,"column":0},"end":{"row":5959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26049":{"range":{"start":{"row":5966,"column":0},"end":{"row":5967,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26050":{"range":{"start":{"row":5977,"column":0},"end":{"row":5978,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26051":{"range":{"start":{"row":5986,"column":0},"end":{"row":5987,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26052":{"range":{"start":{"row":5995,"column":0},"end":{"row":5996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26053":{"range":{"start":{"row":6003,"column":0},"end":{"row":6004,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26054":{"range":{"start":{"row":6011,"column":0},"end":{"row":6012,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26055":{"range":{"start":{"row":6018,"column":0},"end":{"row":6019,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26056":{"range":{"start":{"row":6025,"column":0},"end":{"row":6026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26057":{"range":{"start":{"row":6032,"column":0},"end":{"row":6033,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26058":{"range":{"start":{"row":6039,"column":0},"end":{"row":6040,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26059":{"range":{"start":{"row":6054,"column":0},"end":{"row":6055,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26060":{"range":{"start":{"row":6066,"column":0},"end":{"row":6067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26061":{"range":{"start":{"row":6088,"column":0},"end":{"row":6089,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26062":{"range":{"start":{"row":6093,"column":0},"end":{"row":6094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26063":{"range":{"start":{"row":6101,"column":0},"end":{"row":6102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26064":{"range":{"start":{"row":6118,"column":0},"end":{"row":6119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26065":{"range":{"start":{"row":6130,"column":0},"end":{"row":6131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26066":{"range":{"start":{"row":6141,"column":0},"end":{"row":6142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26067":{"range":{"start":{"row":6152,"column":0},"end":{"row":6153,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26068":{"range":{"start":{"row":6161,"column":0},"end":{"row":6162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26069":{"range":{"start":{"row":6173,"column":0},"end":{"row":6174,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26070":{"range":{"start":{"row":6185,"column":0},"end":{"row":6186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26071":{"range":{"start":{"row":6203,"column":0},"end":{"row":6204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26072":{"range":{"start":{"row":6205,"column":0},"end":{"row":6206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26073":{"range":{"start":{"row":6210,"column":0},"end":{"row":6211,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26074":{"range":{"start":{"row":6217,"column":0},"end":{"row":6218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26075":{"range":{"start":{"row":6224,"column":0},"end":{"row":6225,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26076":{"range":{"start":{"row":6231,"column":0},"end":{"row":6232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26077":{"range":{"start":{"row":6238,"column":0},"end":{"row":6239,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26078":{"range":{"start":{"row":6243,"column":0},"end":{"row":6244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26079":{"range":{"start":{"row":6255,"column":0},"end":{"row":6256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26080":{"range":{"start":{"row":6267,"column":0},"end":{"row":6268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26081":{"range":{"start":{"row":6279,"column":0},"end":{"row":6280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26082":{"range":{"start":{"row":6290,"column":0},"end":{"row":6291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26083":{"range":{"start":{"row":6301,"column":0},"end":{"row":6302,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26084":{"range":{"start":{"row":6313,"column":0},"end":{"row":6314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26085":{"range":{"start":{"row":6325,"column":0},"end":{"row":6326,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26086":{"range":{"start":{"row":6333,"column":0},"end":{"row":6334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26087":{"range":{"start":{"row":6347,"column":0},"end":{"row":6348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26088":{"range":{"start":{"row":6349,"column":0},"end":{"row":6350,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26089":{"range":{"start":{"row":6354,"column":0},"end":{"row":6355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26090":{"range":{"start":{"row":6361,"column":0},"end":{"row":6362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26091":{"range":{"start":{"row":6372,"column":0},"end":{"row":6373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26092":{"range":{"start":{"row":6377,"column":0},"end":{"row":6378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26093":{"range":{"start":{"row":6388,"column":0},"end":{"row":6389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26094":{"range":{"start":{"row":6404,"column":0},"end":{"row":6405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26095":{"range":{"start":{"row":6413,"column":0},"end":{"row":6414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26096":{"range":{"start":{"row":6423,"column":0},"end":{"row":6424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26097":{"range":{"start":{"row":6434,"column":0},"end":{"row":6435,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26098":{"range":{"start":{"row":6446,"column":0},"end":{"row":6447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26099":{"range":{"start":{"row":6457,"column":0},"end":{"row":6458,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26100":{"range":{"start":{"row":6465,"column":0},"end":{"row":6466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26101":{"range":{"start":{"row":6479,"column":0},"end":{"row":6480,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26102":{"range":{"start":{"row":6482,"column":0},"end":{"row":6483,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26103":{"range":{"start":{"row":6485,"column":0},"end":{"row":6486,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26104":{"range":{"start":{"row":6487,"column":0},"end":{"row":6488,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26105":{"range":{"start":{"row":6492,"column":0},"end":{"row":6493,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26106":{"range":{"start":{"row":6499,"column":0},"end":{"row":6500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26107":{"range":{"start":{"row":6504,"column":0},"end":{"row":6505,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26108":{"range":{"start":{"row":6516,"column":0},"end":{"row":6517,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26109":{"range":{"start":{"row":6527,"column":0},"end":{"row":6528,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26110":{"range":{"start":{"row":6539,"column":0},"end":{"row":6540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26111":{"range":{"start":{"row":6551,"column":0},"end":{"row":6552,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26112":{"range":{"start":{"row":6563,"column":0},"end":{"row":6564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26113":{"range":{"start":{"row":6574,"column":0},"end":{"row":6575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26114":{"range":{"start":{"row":6582,"column":0},"end":{"row":6583,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26115":{"range":{"start":{"row":6594,"column":0},"end":{"row":6595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26116":{"range":{"start":{"row":6603,"column":0},"end":{"row":6604,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26117":{"range":{"start":{"row":6610,"column":0},"end":{"row":6611,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26118":{"range":{"start":{"row":6624,"column":0},"end":{"row":6625,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26119":{"range":{"start":{"row":6637,"column":0},"end":{"row":6638,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26120":{"range":{"start":{"row":6640,"column":0},"end":{"row":6641,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26121":{"range":{"start":{"row":6643,"column":0},"end":{"row":6644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26122":{"range":{"start":{"row":6645,"column":0},"end":{"row":6646,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26123":{"range":{"start":{"row":6650,"column":0},"end":{"row":6651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26124":{"range":{"start":{"row":6657,"column":0},"end":{"row":6658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26125":{"range":{"start":{"row":6662,"column":0},"end":{"row":6663,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26126":{"range":{"start":{"row":6673,"column":0},"end":{"row":6674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26127":{"range":{"start":{"row":6685,"column":0},"end":{"row":6686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26128":{"range":{"start":{"row":6696,"column":0},"end":{"row":6697,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26129":{"range":{"start":{"row":6707,"column":0},"end":{"row":6708,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26130":{"range":{"start":{"row":6719,"column":0},"end":{"row":6720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26131":{"range":{"start":{"row":6727,"column":0},"end":{"row":6728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26132":{"range":{"start":{"row":6745,"column":0},"end":{"row":6746,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26133":{"range":{"start":{"row":6756,"column":0},"end":{"row":6757,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26134":{"range":{"start":{"row":6766,"column":0},"end":{"row":6767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26135":{"range":{"start":{"row":6787,"column":0},"end":{"row":6788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26136":{"range":{"start":{"row":6792,"column":0},"end":{"row":6793,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26137":{"range":{"start":{"row":6799,"column":0},"end":{"row":6800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26138":{"range":{"start":{"row":6804,"column":0},"end":{"row":6805,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26139":{"range":{"start":{"row":6836,"column":0},"end":{"row":6837,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26140":{"range":{"start":{"row":6847,"column":0},"end":{"row":6848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26141":{"range":{"start":{"row":6858,"column":0},"end":{"row":6859,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26142":{"range":{"start":{"row":6869,"column":0},"end":{"row":6870,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26143":{"range":{"start":{"row":6903,"column":0},"end":{"row":6904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26144":{"range":{"start":{"row":6924,"column":0},"end":{"row":6925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26145":{"range":{"start":{"row":6936,"column":0},"end":{"row":6937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26146":{"range":{"start":{"row":6952,"column":0},"end":{"row":6953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26147":{"range":{"start":{"row":6964,"column":0},"end":{"row":6965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26148":{"range":{"start":{"row":6971,"column":0},"end":{"row":6972,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26149":{"range":{"start":{"row":6996,"column":0},"end":{"row":6997,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26150":{"range":{"start":{"row":7002,"column":0},"end":{"row":7003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26151":{"range":{"start":{"row":7150,"column":0},"end":{"row":7151,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26152":{"range":{"start":{"row":7664,"column":0},"end":{"row":7665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26153":{"range":{"start":{"row":7666,"column":0},"end":{"row":7667,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26154":{"range":{"start":{"row":7673,"column":0},"end":{"row":7674,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26155":{"range":{"start":{"row":7678,"column":0},"end":{"row":7679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26156":{"range":{"start":{"row":7685,"column":0},"end":{"row":7686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26157":{"range":{"start":{"row":7692,"column":0},"end":{"row":7693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26158":{"range":{"start":{"row":7699,"column":0},"end":{"row":7700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26159":{"range":{"start":{"row":7711,"column":0},"end":{"row":7712,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26160":{"range":{"start":{"row":7719,"column":0},"end":{"row":7720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26161":{"range":{"start":{"row":7730,"column":0},"end":{"row":7731,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26162":{"range":{"start":{"row":7741,"column":0},"end":{"row":7742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26163":{"range":{"start":{"row":7753,"column":0},"end":{"row":7754,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26164":{"range":{"start":{"row":7764,"column":0},"end":{"row":7765,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26165":{"range":{"start":{"row":7775,"column":0},"end":{"row":7776,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26166":{"range":{"start":{"row":7787,"column":0},"end":{"row":7788,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26167":{"range":{"start":{"row":7799,"column":0},"end":{"row":7800,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26168":{"range":{"start":{"row":7811,"column":0},"end":{"row":7812,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26169":{"range":{"start":{"row":7823,"column":0},"end":{"row":7824,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26170":{"range":{"start":{"row":7835,"column":0},"end":{"row":7836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26171":{"range":{"start":{"row":7847,"column":0},"end":{"row":7848,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26172":{"range":{"start":{"row":7849,"column":0},"end":{"row":7850,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26173":{"range":{"start":{"row":7854,"column":0},"end":{"row":7855,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26174":{"range":{"start":{"row":7861,"column":0},"end":{"row":7862,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26175":{"range":{"start":{"row":7866,"column":0},"end":{"row":7867,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26176":{"range":{"start":{"row":7878,"column":0},"end":{"row":7879,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26177":{"range":{"start":{"row":7889,"column":0},"end":{"row":7890,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26178":{"range":{"start":{"row":7901,"column":0},"end":{"row":7902,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26179":{"range":{"start":{"row":7912,"column":0},"end":{"row":7913,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26180":{"range":{"start":{"row":7924,"column":0},"end":{"row":7925,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26181":{"range":{"start":{"row":7935,"column":0},"end":{"row":7936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26182":{"range":{"start":{"row":7946,"column":0},"end":{"row":7947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26183":{"range":{"start":{"row":7958,"column":0},"end":{"row":7959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26184":{"range":{"start":{"row":7970,"column":0},"end":{"row":7971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26185":{"range":{"start":{"row":7982,"column":0},"end":{"row":7983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26186":{"range":{"start":{"row":7994,"column":0},"end":{"row":7995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26187":{"range":{"start":{"row":8006,"column":0},"end":{"row":8007,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26188":{"range":{"start":{"row":8017,"column":0},"end":{"row":8018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26189":{"range":{"start":{"row":8027,"column":0},"end":{"row":8028,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26190":{"range":{"start":{"row":8035,"column":0},"end":{"row":8036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26191":{"range":{"start":{"row":8043,"column":0},"end":{"row":8044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26192":{"range":{"start":{"row":108,"column":0},"end":{"row":108,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26193":{"range":{"start":{"row":115,"column":0},"end":{"row":115,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26194":{"range":{"start":{"row":120,"column":0},"end":{"row":120,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26195":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26196":{"range":{"start":{"row":128,"column":0},"end":{"row":128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26197":{"range":{"start":{"row":133,"column":0},"end":{"row":133,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26198":{"range":{"start":{"row":138,"column":0},"end":{"row":138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26199":{"range":{"start":{"row":144,"column":0},"end":{"row":144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26200":{"range":{"start":{"row":156,"column":0},"end":{"row":156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26201":{"range":{"start":{"row":168,"column":0},"end":{"row":168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26202":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26203":{"range":{"start":{"row":202,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26204":{"range":{"start":{"row":209,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26205":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26206":{"range":{"start":{"row":235,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26207":{"range":{"start":{"row":241,"column":0},"end":{"row":241,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26208":{"range":{"start":{"row":247,"column":0},"end":{"row":247,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26209":{"range":{"start":{"row":253,"column":0},"end":{"row":253,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26210":{"range":{"start":{"row":259,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26211":{"range":{"start":{"row":264,"column":0},"end":{"row":264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26212":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26213":{"range":{"start":{"row":274,"column":0},"end":{"row":274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26214":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26215":{"range":{"start":{"row":284,"column":0},"end":{"row":284,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26216":{"range":{"start":{"row":289,"column":0},"end":{"row":289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26217":{"range":{"start":{"row":301,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26218":{"range":{"start":{"row":308,"column":0},"end":{"row":308,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26219":{"range":{"start":{"row":315,"column":0},"end":{"row":315,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26220":{"range":{"start":{"row":322,"column":0},"end":{"row":322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26221":{"range":{"start":{"row":329,"column":0},"end":{"row":329,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26222":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26223":{"range":{"start":{"row":352,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26224":{"range":{"start":{"row":359,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26225":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26226":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26227":{"range":{"start":{"row":379,"column":0},"end":{"row":379,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26228":{"range":{"start":{"row":386,"column":0},"end":{"row":386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26229":{"range":{"start":{"row":393,"column":0},"end":{"row":393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26230":{"range":{"start":{"row":399,"column":0},"end":{"row":399,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26231":{"range":{"start":{"row":406,"column":0},"end":{"row":406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26232":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26233":{"range":{"start":{"row":420,"column":0},"end":{"row":420,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26234":{"range":{"start":{"row":427,"column":0},"end":{"row":427,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26235":{"range":{"start":{"row":434,"column":0},"end":{"row":434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26236":{"range":{"start":{"row":441,"column":0},"end":{"row":441,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26237":{"range":{"start":{"row":448,"column":0},"end":{"row":448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26238":{"range":{"start":{"row":471,"column":0},"end":{"row":471,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26239":{"range":{"start":{"row":481,"column":0},"end":{"row":481,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26240":{"range":{"start":{"row":503,"column":0},"end":{"row":503,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26241":{"range":{"start":{"row":514,"column":0},"end":{"row":514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26242":{"range":{"start":{"row":525,"column":0},"end":{"row":525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26243":{"range":{"start":{"row":544,"column":0},"end":{"row":544,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26244":{"range":{"start":{"row":551,"column":0},"end":{"row":551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26245":{"range":{"start":{"row":558,"column":0},"end":{"row":558,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26246":{"range":{"start":{"row":565,"column":0},"end":{"row":565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26247":{"range":{"start":{"row":573,"column":0},"end":{"row":573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26248":{"range":{"start":{"row":581,"column":0},"end":{"row":581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26249":{"range":{"start":{"row":592,"column":0},"end":{"row":592,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26250":{"range":{"start":{"row":631,"column":0},"end":{"row":631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26251":{"range":{"start":{"row":642,"column":0},"end":{"row":642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26252":{"range":{"start":{"row":653,"column":0},"end":{"row":653,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26253":{"range":{"start":{"row":690,"column":0},"end":{"row":690,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26254":{"range":{"start":{"row":700,"column":0},"end":{"row":700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26255":{"range":{"start":{"row":710,"column":0},"end":{"row":710,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26256":{"range":{"start":{"row":720,"column":0},"end":{"row":720,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26257":{"range":{"start":{"row":736,"column":0},"end":{"row":736,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26258":{"range":{"start":{"row":750,"column":0},"end":{"row":750,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26259":{"range":{"start":{"row":771,"column":0},"end":{"row":771,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26260":{"range":{"start":{"row":783,"column":0},"end":{"row":783,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26261":{"range":{"start":{"row":794,"column":0},"end":{"row":794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26262":{"range":{"start":{"row":819,"column":0},"end":{"row":819,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26263":{"range":{"start":{"row":831,"column":0},"end":{"row":831,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26264":{"range":{"start":{"row":843,"column":0},"end":{"row":843,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26265":{"range":{"start":{"row":866,"column":0},"end":{"row":866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26266":{"range":{"start":{"row":878,"column":0},"end":{"row":878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26267":{"range":{"start":{"row":889,"column":0},"end":{"row":889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26268":{"range":{"start":{"row":900,"column":0},"end":{"row":900,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26269":{"range":{"start":{"row":911,"column":0},"end":{"row":911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26270":{"range":{"start":{"row":922,"column":0},"end":{"row":922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26271":{"range":{"start":{"row":1226,"column":0},"end":{"row":1226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26272":{"range":{"start":{"row":1234,"column":0},"end":{"row":1234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26273":{"range":{"start":{"row":1309,"column":0},"end":{"row":1309,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26274":{"range":{"start":{"row":1341,"column":0},"end":{"row":1341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26275":{"range":{"start":{"row":1348,"column":0},"end":{"row":1348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26276":{"range":{"start":{"row":1355,"column":0},"end":{"row":1355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26277":{"range":{"start":{"row":1362,"column":0},"end":{"row":1362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26278":{"range":{"start":{"row":1369,"column":0},"end":{"row":1369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26279":{"range":{"start":{"row":1376,"column":0},"end":{"row":1376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26280":{"range":{"start":{"row":1383,"column":0},"end":{"row":1383,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26281":{"range":{"start":{"row":1390,"column":0},"end":{"row":1390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26282":{"range":{"start":{"row":1397,"column":0},"end":{"row":1397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26283":{"range":{"start":{"row":1404,"column":0},"end":{"row":1404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26284":{"range":{"start":{"row":1411,"column":0},"end":{"row":1411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26285":{"range":{"start":{"row":1418,"column":0},"end":{"row":1418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26286":{"range":{"start":{"row":1425,"column":0},"end":{"row":1425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26287":{"range":{"start":{"row":1437,"column":0},"end":{"row":1437,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26288":{"range":{"start":{"row":1443,"column":0},"end":{"row":1443,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26289":{"range":{"start":{"row":1455,"column":0},"end":{"row":1455,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26290":{"range":{"start":{"row":1466,"column":0},"end":{"row":1466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26291":{"range":{"start":{"row":1474,"column":0},"end":{"row":1474,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26292":{"range":{"start":{"row":1482,"column":0},"end":{"row":1482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26293":{"range":{"start":{"row":1490,"column":0},"end":{"row":1490,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26294":{"range":{"start":{"row":1496,"column":0},"end":{"row":1496,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26295":{"range":{"start":{"row":1502,"column":0},"end":{"row":1502,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26296":{"range":{"start":{"row":1508,"column":0},"end":{"row":1508,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26297":{"range":{"start":{"row":1514,"column":0},"end":{"row":1514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26298":{"range":{"start":{"row":1520,"column":0},"end":{"row":1520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26299":{"range":{"start":{"row":1526,"column":0},"end":{"row":1526,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26300":{"range":{"start":{"row":1533,"column":0},"end":{"row":1533,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26301":{"range":{"start":{"row":1542,"column":0},"end":{"row":1542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26302":{"range":{"start":{"row":1551,"column":0},"end":{"row":1551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26303":{"range":{"start":{"row":1560,"column":0},"end":{"row":1560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26304":{"range":{"start":{"row":1567,"column":0},"end":{"row":1567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26305":{"range":{"start":{"row":1581,"column":0},"end":{"row":1581,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26306":{"range":{"start":{"row":1588,"column":0},"end":{"row":1588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26307":{"range":{"start":{"row":1595,"column":0},"end":{"row":1595,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26308":{"range":{"start":{"row":1602,"column":0},"end":{"row":1602,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26309":{"range":{"start":{"row":1609,"column":0},"end":{"row":1609,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26310":{"range":{"start":{"row":1616,"column":0},"end":{"row":1616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26311":{"range":{"start":{"row":1623,"column":0},"end":{"row":1623,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26312":{"range":{"start":{"row":1630,"column":0},"end":{"row":1630,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26313":{"range":{"start":{"row":1637,"column":0},"end":{"row":1637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26314":{"range":{"start":{"row":1644,"column":0},"end":{"row":1644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26315":{"range":{"start":{"row":1651,"column":0},"end":{"row":1651,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26316":{"range":{"start":{"row":1658,"column":0},"end":{"row":1658,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26317":{"range":{"start":{"row":1665,"column":0},"end":{"row":1665,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26318":{"range":{"start":{"row":1672,"column":0},"end":{"row":1672,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26319":{"range":{"start":{"row":1679,"column":0},"end":{"row":1679,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26320":{"range":{"start":{"row":1686,"column":0},"end":{"row":1686,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26321":{"range":{"start":{"row":1693,"column":0},"end":{"row":1693,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26322":{"range":{"start":{"row":1700,"column":0},"end":{"row":1700,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26323":{"range":{"start":{"row":1707,"column":0},"end":{"row":1707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26324":{"range":{"start":{"row":1714,"column":0},"end":{"row":1714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26325":{"range":{"start":{"row":1721,"column":0},"end":{"row":1721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26326":{"range":{"start":{"row":1728,"column":0},"end":{"row":1728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26327":{"range":{"start":{"row":1735,"column":0},"end":{"row":1735,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26328":{"range":{"start":{"row":1742,"column":0},"end":{"row":1742,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26329":{"range":{"start":{"row":1749,"column":0},"end":{"row":1749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26330":{"range":{"start":{"row":1756,"column":0},"end":{"row":1756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26331":{"range":{"start":{"row":1763,"column":0},"end":{"row":1763,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26332":{"range":{"start":{"row":1770,"column":0},"end":{"row":1770,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26333":{"range":{"start":{"row":1777,"column":0},"end":{"row":1777,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26334":{"range":{"start":{"row":1784,"column":0},"end":{"row":1784,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26335":{"range":{"start":{"row":1791,"column":0},"end":{"row":1791,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26336":{"range":{"start":{"row":1797,"column":0},"end":{"row":1797,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26337":{"range":{"start":{"row":1803,"column":0},"end":{"row":1803,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26338":{"range":{"start":{"row":1809,"column":0},"end":{"row":1809,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26339":{"range":{"start":{"row":1815,"column":0},"end":{"row":1815,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26340":{"range":{"start":{"row":1821,"column":0},"end":{"row":1821,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26341":{"range":{"start":{"row":1827,"column":0},"end":{"row":1827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26342":{"range":{"start":{"row":1833,"column":0},"end":{"row":1833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26343":{"range":{"start":{"row":1839,"column":0},"end":{"row":1839,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26344":{"range":{"start":{"row":1845,"column":0},"end":{"row":1845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26345":{"range":{"start":{"row":1851,"column":0},"end":{"row":1851,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26346":{"range":{"start":{"row":1857,"column":0},"end":{"row":1857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26347":{"range":{"start":{"row":1863,"column":0},"end":{"row":1863,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26348":{"range":{"start":{"row":1869,"column":0},"end":{"row":1869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26349":{"range":{"start":{"row":1875,"column":0},"end":{"row":1875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26350":{"range":{"start":{"row":1881,"column":0},"end":{"row":1881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26351":{"range":{"start":{"row":1887,"column":0},"end":{"row":1887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26352":{"range":{"start":{"row":1893,"column":0},"end":{"row":1893,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26353":{"range":{"start":{"row":1899,"column":0},"end":{"row":1899,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26354":{"range":{"start":{"row":1905,"column":0},"end":{"row":1905,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26355":{"range":{"start":{"row":1911,"column":0},"end":{"row":1911,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26356":{"range":{"start":{"row":1917,"column":0},"end":{"row":1917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26357":{"range":{"start":{"row":1923,"column":0},"end":{"row":1923,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26358":{"range":{"start":{"row":1929,"column":0},"end":{"row":1929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26359":{"range":{"start":{"row":1935,"column":0},"end":{"row":1935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26360":{"range":{"start":{"row":1941,"column":0},"end":{"row":1941,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26361":{"range":{"start":{"row":1947,"column":0},"end":{"row":1947,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26362":{"range":{"start":{"row":1953,"column":0},"end":{"row":1953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26363":{"range":{"start":{"row":1959,"column":0},"end":{"row":1959,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26364":{"range":{"start":{"row":1965,"column":0},"end":{"row":1965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26365":{"range":{"start":{"row":1971,"column":0},"end":{"row":1971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26366":{"range":{"start":{"row":1977,"column":0},"end":{"row":1977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26367":{"range":{"start":{"row":1983,"column":0},"end":{"row":1983,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26368":{"range":{"start":{"row":1989,"column":0},"end":{"row":1989,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26369":{"range":{"start":{"row":1995,"column":0},"end":{"row":1995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26370":{"range":{"start":{"row":2001,"column":0},"end":{"row":2001,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26371":{"range":{"start":{"row":2036,"column":0},"end":{"row":2036,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26372":{"range":{"start":{"row":2042,"column":0},"end":{"row":2042,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26373":{"range":{"start":{"row":2048,"column":0},"end":{"row":2048,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26374":{"range":{"start":{"row":2054,"column":0},"end":{"row":2054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26375":{"range":{"start":{"row":2062,"column":0},"end":{"row":2062,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26376":{"range":{"start":{"row":2070,"column":0},"end":{"row":2070,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26377":{"range":{"start":{"row":2078,"column":0},"end":{"row":2078,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26378":{"range":{"start":{"row":2086,"column":0},"end":{"row":2086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26379":{"range":{"start":{"row":2094,"column":0},"end":{"row":2094,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26380":{"range":{"start":{"row":2102,"column":0},"end":{"row":2102,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26381":{"range":{"start":{"row":2110,"column":0},"end":{"row":2110,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26382":{"range":{"start":{"row":2118,"column":0},"end":{"row":2118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26383":{"range":{"start":{"row":2138,"column":0},"end":{"row":2138,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26384":{"range":{"start":{"row":2144,"column":0},"end":{"row":2144,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26385":{"range":{"start":{"row":2150,"column":0},"end":{"row":2150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26386":{"range":{"start":{"row":2156,"column":0},"end":{"row":2156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26387":{"range":{"start":{"row":2162,"column":0},"end":{"row":2162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26388":{"range":{"start":{"row":2168,"column":0},"end":{"row":2168,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26389":{"range":{"start":{"row":2175,"column":0},"end":{"row":2175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26390":{"range":{"start":{"row":2182,"column":0},"end":{"row":2182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26391":{"range":{"start":{"row":2189,"column":0},"end":{"row":2189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26392":{"range":{"start":{"row":2196,"column":0},"end":{"row":2196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26393":{"range":{"start":{"row":2203,"column":0},"end":{"row":2203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26394":{"range":{"start":{"row":2218,"column":0},"end":{"row":2218,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26395":{"range":{"start":{"row":2224,"column":0},"end":{"row":2224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26396":{"range":{"start":{"row":2231,"column":0},"end":{"row":2231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26397":{"range":{"start":{"row":2237,"column":0},"end":{"row":2237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26398":{"range":{"start":{"row":2243,"column":0},"end":{"row":2243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26399":{"range":{"start":{"row":2249,"column":0},"end":{"row":2249,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26400":{"range":{"start":{"row":2256,"column":0},"end":{"row":2256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26401":{"range":{"start":{"row":2264,"column":0},"end":{"row":2264,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26402":{"range":{"start":{"row":2271,"column":0},"end":{"row":2271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26403":{"range":{"start":{"row":2277,"column":0},"end":{"row":2277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26404":{"range":{"start":{"row":2283,"column":0},"end":{"row":2283,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26405":{"range":{"start":{"row":2289,"column":0},"end":{"row":2289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26406":{"range":{"start":{"row":2297,"column":0},"end":{"row":2297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26407":{"range":{"start":{"row":2304,"column":0},"end":{"row":2304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26408":{"range":{"start":{"row":2334,"column":0},"end":{"row":2334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26409":{"range":{"start":{"row":2340,"column":0},"end":{"row":2340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26410":{"range":{"start":{"row":2346,"column":0},"end":{"row":2346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26411":{"range":{"start":{"row":2352,"column":0},"end":{"row":2352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26412":{"range":{"start":{"row":2358,"column":0},"end":{"row":2358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26413":{"range":{"start":{"row":2364,"column":0},"end":{"row":2364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26414":{"range":{"start":{"row":2375,"column":0},"end":{"row":2375,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26415":{"range":{"start":{"row":2381,"column":0},"end":{"row":2381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26416":{"range":{"start":{"row":2387,"column":0},"end":{"row":2387,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26417":{"range":{"start":{"row":2393,"column":0},"end":{"row":2393,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26418":{"range":{"start":{"row":2404,"column":0},"end":{"row":2404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26419":{"range":{"start":{"row":2431,"column":0},"end":{"row":2431,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26420":{"range":{"start":{"row":2447,"column":0},"end":{"row":2447,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26421":{"range":{"start":{"row":2469,"column":0},"end":{"row":2469,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26422":{"range":{"start":{"row":2495,"column":0},"end":{"row":2495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26423":{"range":{"start":{"row":2567,"column":0},"end":{"row":2567,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26424":{"range":{"start":{"row":2575,"column":0},"end":{"row":2575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26425":{"range":{"start":{"row":2580,"column":0},"end":{"row":2580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26426":{"range":{"start":{"row":2588,"column":0},"end":{"row":2588,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26427":{"range":{"start":{"row":2607,"column":0},"end":{"row":2607,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26428":{"range":{"start":{"row":2616,"column":0},"end":{"row":2616,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26429":{"range":{"start":{"row":2624,"column":0},"end":{"row":2624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26430":{"range":{"start":{"row":2634,"column":0},"end":{"row":2634,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26431":{"range":{"start":{"row":2875,"column":0},"end":{"row":2875,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26432":{"range":{"start":{"row":2880,"column":0},"end":{"row":2880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26433":{"range":{"start":{"row":2887,"column":0},"end":{"row":2887,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26434":{"range":{"start":{"row":2894,"column":0},"end":{"row":2894,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26435":{"range":{"start":{"row":2917,"column":0},"end":{"row":2917,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26436":{"range":{"start":{"row":2929,"column":0},"end":{"row":2929,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26437":{"range":{"start":{"row":2937,"column":0},"end":{"row":2937,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26438":{"range":{"start":{"row":2992,"column":0},"end":{"row":2992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26439":{"range":{"start":{"row":3009,"column":0},"end":{"row":3009,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26440":{"range":{"start":{"row":3063,"column":0},"end":{"row":3063,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26441":{"range":{"start":{"row":3067,"column":0},"end":{"row":3067,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26442":{"range":{"start":{"row":3136,"column":0},"end":{"row":3136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26443":{"range":{"start":{"row":3143,"column":0},"end":{"row":3143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26444":{"range":{"start":{"row":3148,"column":0},"end":{"row":3148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26445":{"range":{"start":{"row":3155,"column":0},"end":{"row":3155,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26446":{"range":{"start":{"row":3162,"column":0},"end":{"row":3162,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26447":{"range":{"start":{"row":3169,"column":0},"end":{"row":3169,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26448":{"range":{"start":{"row":3176,"column":0},"end":{"row":3176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26449":{"range":{"start":{"row":3183,"column":0},"end":{"row":3183,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26450":{"range":{"start":{"row":3197,"column":0},"end":{"row":3197,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26451":{"range":{"start":{"row":3210,"column":0},"end":{"row":3210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26452":{"range":{"start":{"row":3216,"column":0},"end":{"row":3216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26453":{"range":{"start":{"row":3222,"column":0},"end":{"row":3222,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26454":{"range":{"start":{"row":3235,"column":0},"end":{"row":3235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26455":{"range":{"start":{"row":3242,"column":0},"end":{"row":3242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26456":{"range":{"start":{"row":3248,"column":0},"end":{"row":3248,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26457":{"range":{"start":{"row":3259,"column":0},"end":{"row":3259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26458":{"range":{"start":{"row":3271,"column":0},"end":{"row":3271,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26459":{"range":{"start":{"row":3282,"column":0},"end":{"row":3282,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26460":{"range":{"start":{"row":3300,"column":0},"end":{"row":3300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26461":{"range":{"start":{"row":3311,"column":0},"end":{"row":3311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26462":{"range":{"start":{"row":3322,"column":0},"end":{"row":3322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26463":{"range":{"start":{"row":3331,"column":0},"end":{"row":3331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26464":{"range":{"start":{"row":3348,"column":0},"end":{"row":3348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26465":{"range":{"start":{"row":3356,"column":0},"end":{"row":3356,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26466":{"range":{"start":{"row":3364,"column":0},"end":{"row":3364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26467":{"range":{"start":{"row":3372,"column":0},"end":{"row":3372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26468":{"range":{"start":{"row":3380,"column":0},"end":{"row":3380,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26469":{"range":{"start":{"row":3388,"column":0},"end":{"row":3388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26470":{"range":{"start":{"row":3396,"column":0},"end":{"row":3396,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26471":{"range":{"start":{"row":3403,"column":0},"end":{"row":3403,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26472":{"range":{"start":{"row":3411,"column":0},"end":{"row":3411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26473":{"range":{"start":{"row":3418,"column":0},"end":{"row":3418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26474":{"range":{"start":{"row":3425,"column":0},"end":{"row":3425,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26475":{"range":{"start":{"row":3432,"column":0},"end":{"row":3432,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26476":{"range":{"start":{"row":3439,"column":0},"end":{"row":3439,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26477":{"range":{"start":{"row":3446,"column":0},"end":{"row":3446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26478":{"range":{"start":{"row":3453,"column":0},"end":{"row":3453,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26479":{"range":{"start":{"row":3466,"column":0},"end":{"row":3466,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26480":{"range":{"start":{"row":3478,"column":0},"end":{"row":3478,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26481":{"range":{"start":{"row":3489,"column":0},"end":{"row":3489,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26482":{"range":{"start":{"row":3500,"column":0},"end":{"row":3500,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26483":{"range":{"start":{"row":3511,"column":0},"end":{"row":3511,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26484":{"range":{"start":{"row":3522,"column":0},"end":{"row":3522,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26485":{"range":{"start":{"row":3532,"column":0},"end":{"row":3532,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26486":{"range":{"start":{"row":3573,"column":0},"end":{"row":3573,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26487":{"range":{"start":{"row":3585,"column":0},"end":{"row":3585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26488":{"range":{"start":{"row":3608,"column":0},"end":{"row":3608,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26489":{"range":{"start":{"row":3620,"column":0},"end":{"row":3620,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26490":{"range":{"start":{"row":3632,"column":0},"end":{"row":3632,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26491":{"range":{"start":{"row":3644,"column":0},"end":{"row":3644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26492":{"range":{"start":{"row":3957,"column":0},"end":{"row":3957,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26493":{"range":{"start":{"row":3965,"column":0},"end":{"row":3965,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26494":{"range":{"start":{"row":3973,"column":0},"end":{"row":3973,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26495":{"range":{"start":{"row":3984,"column":0},"end":{"row":3984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26496":{"range":{"start":{"row":3992,"column":0},"end":{"row":3992,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26497":{"range":{"start":{"row":4000,"column":0},"end":{"row":4000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26498":{"range":{"start":{"row":4030,"column":0},"end":{"row":4030,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26499":{"range":{"start":{"row":4037,"column":0},"end":{"row":4037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26500":{"range":{"start":{"row":4044,"column":0},"end":{"row":4044,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26501":{"range":{"start":{"row":4051,"column":0},"end":{"row":4051,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26502":{"range":{"start":{"row":4058,"column":0},"end":{"row":4058,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26503":{"range":{"start":{"row":4065,"column":0},"end":{"row":4065,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26504":{"range":{"start":{"row":4072,"column":0},"end":{"row":4072,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26505":{"range":{"start":{"row":4079,"column":0},"end":{"row":4079,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26506":{"range":{"start":{"row":4086,"column":0},"end":{"row":4086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26507":{"range":{"start":{"row":4093,"column":0},"end":{"row":4093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26508":{"range":{"start":{"row":4100,"column":0},"end":{"row":4100,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26509":{"range":{"start":{"row":4107,"column":0},"end":{"row":4107,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26510":{"range":{"start":{"row":4114,"column":0},"end":{"row":4114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26511":{"range":{"start":{"row":4121,"column":0},"end":{"row":4121,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26512":{"range":{"start":{"row":4128,"column":0},"end":{"row":4128,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26513":{"range":{"start":{"row":4135,"column":0},"end":{"row":4135,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26514":{"range":{"start":{"row":4142,"column":0},"end":{"row":4142,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26515":{"range":{"start":{"row":4149,"column":0},"end":{"row":4149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26516":{"range":{"start":{"row":4156,"column":0},"end":{"row":4156,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26517":{"range":{"start":{"row":4163,"column":0},"end":{"row":4163,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26518":{"range":{"start":{"row":4170,"column":0},"end":{"row":4170,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26519":{"range":{"start":{"row":4177,"column":0},"end":{"row":4177,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26520":{"range":{"start":{"row":4184,"column":0},"end":{"row":4184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26521":{"range":{"start":{"row":4191,"column":0},"end":{"row":4191,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26522":{"range":{"start":{"row":4198,"column":0},"end":{"row":4198,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26523":{"range":{"start":{"row":4205,"column":0},"end":{"row":4205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26524":{"range":{"start":{"row":4212,"column":0},"end":{"row":4212,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26525":{"range":{"start":{"row":4219,"column":0},"end":{"row":4219,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26526":{"range":{"start":{"row":4226,"column":0},"end":{"row":4226,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26527":{"range":{"start":{"row":4232,"column":0},"end":{"row":4232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26528":{"range":{"start":{"row":4238,"column":0},"end":{"row":4238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26529":{"range":{"start":{"row":4244,"column":0},"end":{"row":4244,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26530":{"range":{"start":{"row":4250,"column":0},"end":{"row":4250,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26531":{"range":{"start":{"row":4256,"column":0},"end":{"row":4256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26532":{"range":{"start":{"row":4262,"column":0},"end":{"row":4262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26533":{"range":{"start":{"row":4268,"column":0},"end":{"row":4268,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26534":{"range":{"start":{"row":4274,"column":0},"end":{"row":4274,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26535":{"range":{"start":{"row":4280,"column":0},"end":{"row":4280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26536":{"range":{"start":{"row":4286,"column":0},"end":{"row":4286,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26537":{"range":{"start":{"row":4292,"column":0},"end":{"row":4292,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26538":{"range":{"start":{"row":4298,"column":0},"end":{"row":4298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26539":{"range":{"start":{"row":4304,"column":0},"end":{"row":4304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26540":{"range":{"start":{"row":4310,"column":0},"end":{"row":4310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26541":{"range":{"start":{"row":4316,"column":0},"end":{"row":4316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26542":{"range":{"start":{"row":4322,"column":0},"end":{"row":4322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26543":{"range":{"start":{"row":4328,"column":0},"end":{"row":4328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26544":{"range":{"start":{"row":4334,"column":0},"end":{"row":4334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26545":{"range":{"start":{"row":4340,"column":0},"end":{"row":4340,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26546":{"range":{"start":{"row":4346,"column":0},"end":{"row":4346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26547":{"range":{"start":{"row":4352,"column":0},"end":{"row":4352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26548":{"range":{"start":{"row":4358,"column":0},"end":{"row":4358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26549":{"range":{"start":{"row":4364,"column":0},"end":{"row":4364,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26550":{"range":{"start":{"row":4370,"column":0},"end":{"row":4370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26551":{"range":{"start":{"row":4376,"column":0},"end":{"row":4376,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26552":{"range":{"start":{"row":4382,"column":0},"end":{"row":4382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26553":{"range":{"start":{"row":4388,"column":0},"end":{"row":4388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26554":{"range":{"start":{"row":4394,"column":0},"end":{"row":4394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26555":{"range":{"start":{"row":4400,"column":0},"end":{"row":4400,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26556":{"range":{"start":{"row":4406,"column":0},"end":{"row":4406,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26557":{"range":{"start":{"row":4412,"column":0},"end":{"row":4412,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26558":{"range":{"start":{"row":4418,"column":0},"end":{"row":4418,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26559":{"range":{"start":{"row":4424,"column":0},"end":{"row":4424,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26560":{"range":{"start":{"row":4430,"column":0},"end":{"row":4430,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26561":{"range":{"start":{"row":4436,"column":0},"end":{"row":4436,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26562":{"range":{"start":{"row":4442,"column":0},"end":{"row":4442,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26563":{"range":{"start":{"row":4448,"column":0},"end":{"row":4448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26564":{"range":{"start":{"row":4454,"column":0},"end":{"row":4454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26565":{"range":{"start":{"row":4460,"column":0},"end":{"row":4460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26566":{"range":{"start":{"row":4468,"column":0},"end":{"row":4468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26567":{"range":{"start":{"row":4476,"column":0},"end":{"row":4476,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26568":{"range":{"start":{"row":4492,"column":0},"end":{"row":4492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26569":{"range":{"start":{"row":4498,"column":0},"end":{"row":4498,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26570":{"range":{"start":{"row":4504,"column":0},"end":{"row":4504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26571":{"range":{"start":{"row":4509,"column":0},"end":{"row":4509,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26572":{"range":{"start":{"row":4515,"column":0},"end":{"row":4515,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26573":{"range":{"start":{"row":4520,"column":0},"end":{"row":4520,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26574":{"range":{"start":{"row":4525,"column":0},"end":{"row":4525,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26575":{"range":{"start":{"row":4530,"column":0},"end":{"row":4530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26576":{"range":{"start":{"row":4535,"column":0},"end":{"row":4535,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26577":{"range":{"start":{"row":4540,"column":0},"end":{"row":4540,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26578":{"range":{"start":{"row":4545,"column":0},"end":{"row":4545,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26579":{"range":{"start":{"row":4550,"column":0},"end":{"row":4550,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26580":{"range":{"start":{"row":4555,"column":0},"end":{"row":4555,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26581":{"range":{"start":{"row":4560,"column":0},"end":{"row":4560,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26582":{"range":{"start":{"row":4565,"column":0},"end":{"row":4565,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26583":{"range":{"start":{"row":4570,"column":0},"end":{"row":4570,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26584":{"range":{"start":{"row":4575,"column":0},"end":{"row":4575,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26585":{"range":{"start":{"row":4580,"column":0},"end":{"row":4580,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26586":{"range":{"start":{"row":4585,"column":0},"end":{"row":4585,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26587":{"range":{"start":{"row":4597,"column":0},"end":{"row":4597,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26588":{"range":{"start":{"row":4617,"column":0},"end":{"row":4617,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26589":{"range":{"start":{"row":4626,"column":0},"end":{"row":4626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26590":{"range":{"start":{"row":4635,"column":0},"end":{"row":4635,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26591":{"range":{"start":{"row":4642,"column":0},"end":{"row":4642,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26592":{"range":{"start":{"row":4714,"column":0},"end":{"row":4714,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26593":{"range":{"start":{"row":4716,"column":0},"end":{"row":4716,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26594":{"range":{"start":{"row":4721,"column":0},"end":{"row":4721,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26595":{"range":{"start":{"row":4728,"column":0},"end":{"row":4728,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26596":{"range":{"start":{"row":4733,"column":0},"end":{"row":4733,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26597":{"range":{"start":{"row":4739,"column":0},"end":{"row":4739,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26598":{"range":{"start":{"row":4745,"column":0},"end":{"row":4745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26599":{"range":{"start":{"row":4756,"column":0},"end":{"row":4756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26600":{"range":{"start":{"row":4767,"column":0},"end":{"row":4767,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26601":{"range":{"start":{"row":4787,"column":0},"end":{"row":4787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26602":{"range":{"start":{"row":4799,"column":0},"end":{"row":4799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26603":{"range":{"start":{"row":4806,"column":0},"end":{"row":4806,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26604":{"range":{"start":{"row":4813,"column":0},"end":{"row":4813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26605":{"range":{"start":{"row":4820,"column":0},"end":{"row":4820,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26606":{"range":{"start":{"row":4827,"column":0},"end":{"row":4827,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26607":{"range":{"start":{"row":4834,"column":0},"end":{"row":4834,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26608":{"range":{"start":{"row":4840,"column":0},"end":{"row":4840,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26609":{"range":{"start":{"row":4846,"column":0},"end":{"row":4846,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26610":{"range":{"start":{"row":4852,"column":0},"end":{"row":4852,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26611":{"range":{"start":{"row":4864,"column":0},"end":{"row":4864,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26612":{"range":{"start":{"row":4872,"column":0},"end":{"row":4872,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26613":{"range":{"start":{"row":4880,"column":0},"end":{"row":4880,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26614":{"range":{"start":{"row":4888,"column":0},"end":{"row":4888,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26615":{"range":{"start":{"row":4896,"column":0},"end":{"row":4896,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26616":{"range":{"start":{"row":4904,"column":0},"end":{"row":4904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26617":{"range":{"start":{"row":4910,"column":0},"end":{"row":4910,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26618":{"range":{"start":{"row":4916,"column":0},"end":{"row":4916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26619":{"range":{"start":{"row":4922,"column":0},"end":{"row":4922,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26620":{"range":{"start":{"row":4928,"column":0},"end":{"row":4928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26621":{"range":{"start":{"row":4946,"column":0},"end":{"row":4946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26622":{"range":{"start":{"row":4948,"column":0},"end":{"row":4948,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26623":{"range":{"start":{"row":4953,"column":0},"end":{"row":4953,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26624":{"range":{"start":{"row":4958,"column":0},"end":{"row":4958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26625":{"range":{"start":{"row":4963,"column":0},"end":{"row":4963,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26626":{"range":{"start":{"row":4970,"column":0},"end":{"row":4970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26627":{"range":{"start":{"row":4977,"column":0},"end":{"row":4977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26628":{"range":{"start":{"row":4984,"column":0},"end":{"row":4984,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26629":{"range":{"start":{"row":5000,"column":0},"end":{"row":5000,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26630":{"range":{"start":{"row":5003,"column":0},"end":{"row":5003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26631":{"range":{"start":{"row":5015,"column":0},"end":{"row":5015,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26632":{"range":{"start":{"row":5026,"column":0},"end":{"row":5026,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26633":{"range":{"start":{"row":5037,"column":0},"end":{"row":5037,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26634":{"range":{"start":{"row":5045,"column":0},"end":{"row":5045,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26635":{"range":{"start":{"row":5057,"column":0},"end":{"row":5057,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26636":{"range":{"start":{"row":5071,"column":0},"end":{"row":5071,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26637":{"range":{"start":{"row":5077,"column":0},"end":{"row":5077,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26638":{"range":{"start":{"row":5086,"column":0},"end":{"row":5086,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26639":{"range":{"start":{"row":5091,"column":0},"end":{"row":5091,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26640":{"range":{"start":{"row":5103,"column":0},"end":{"row":5103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26641":{"range":{"start":{"row":5113,"column":0},"end":{"row":5113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26642":{"range":{"start":{"row":5125,"column":0},"end":{"row":5125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26643":{"range":{"start":{"row":5136,"column":0},"end":{"row":5136,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26644":{"range":{"start":{"row":5148,"column":0},"end":{"row":5148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26645":{"range":{"start":{"row":5160,"column":0},"end":{"row":5160,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26646":{"range":{"start":{"row":5172,"column":0},"end":{"row":5172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26647":{"range":{"start":{"row":5184,"column":0},"end":{"row":5184,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26648":{"range":{"start":{"row":5196,"column":0},"end":{"row":5196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26649":{"range":{"start":{"row":5208,"column":0},"end":{"row":5208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26650":{"range":{"start":{"row":5232,"column":0},"end":{"row":5232,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26651":{"range":{"start":{"row":5242,"column":0},"end":{"row":5242,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26652":{"range":{"start":{"row":5252,"column":0},"end":{"row":5252,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26653":{"range":{"start":{"row":5262,"column":0},"end":{"row":5262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26654":{"range":{"start":{"row":5281,"column":0},"end":{"row":5281,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26655":{"range":{"start":{"row":5289,"column":0},"end":{"row":5289,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26656":{"range":{"start":{"row":5294,"column":0},"end":{"row":5294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26657":{"range":{"start":{"row":5306,"column":0},"end":{"row":5306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26658":{"range":{"start":{"row":5316,"column":0},"end":{"row":5316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26659":{"range":{"start":{"row":5327,"column":0},"end":{"row":5327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26660":{"range":{"start":{"row":5339,"column":0},"end":{"row":5339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26661":{"range":{"start":{"row":5351,"column":0},"end":{"row":5351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26662":{"range":{"start":{"row":5362,"column":0},"end":{"row":5362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26663":{"range":{"start":{"row":5374,"column":0},"end":{"row":5374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26664":{"range":{"start":{"row":5386,"column":0},"end":{"row":5386,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26665":{"range":{"start":{"row":5398,"column":0},"end":{"row":5398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26666":{"range":{"start":{"row":5410,"column":0},"end":{"row":5410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26667":{"range":{"start":{"row":5429,"column":0},"end":{"row":5429,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26668":{"range":{"start":{"row":5454,"column":0},"end":{"row":5454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26669":{"range":{"start":{"row":5460,"column":0},"end":{"row":5460,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26670":{"range":{"start":{"row":5468,"column":0},"end":{"row":5468,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26671":{"range":{"start":{"row":5473,"column":0},"end":{"row":5473,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26672":{"range":{"start":{"row":5485,"column":0},"end":{"row":5485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26673":{"range":{"start":{"row":5495,"column":0},"end":{"row":5495,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26674":{"range":{"start":{"row":5507,"column":0},"end":{"row":5507,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26675":{"range":{"start":{"row":5518,"column":0},"end":{"row":5518,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26676":{"range":{"start":{"row":5530,"column":0},"end":{"row":5530,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26677":{"range":{"start":{"row":5542,"column":0},"end":{"row":5542,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26678":{"range":{"start":{"row":5554,"column":0},"end":{"row":5554,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26679":{"range":{"start":{"row":5566,"column":0},"end":{"row":5566,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26680":{"range":{"start":{"row":5578,"column":0},"end":{"row":5578,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26681":{"range":{"start":{"row":5584,"column":0},"end":{"row":5584,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26682":{"range":{"start":{"row":5624,"column":0},"end":{"row":5624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26683":{"range":{"start":{"row":5626,"column":0},"end":{"row":5626,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26684":{"range":{"start":{"row":5631,"column":0},"end":{"row":5631,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26685":{"range":{"start":{"row":5639,"column":0},"end":{"row":5639,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26686":{"range":{"start":{"row":5644,"column":0},"end":{"row":5644,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26687":{"range":{"start":{"row":5662,"column":0},"end":{"row":5662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26688":{"range":{"start":{"row":5669,"column":0},"end":{"row":5669,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26689":{"range":{"start":{"row":5676,"column":0},"end":{"row":5676,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26690":{"range":{"start":{"row":5683,"column":0},"end":{"row":5683,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26691":{"range":{"start":{"row":5691,"column":0},"end":{"row":5691,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26692":{"range":{"start":{"row":5699,"column":0},"end":{"row":5699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26693":{"range":{"start":{"row":5707,"column":0},"end":{"row":5707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26694":{"range":{"start":{"row":5713,"column":0},"end":{"row":5713,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26695":{"range":{"start":{"row":5719,"column":0},"end":{"row":5719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26696":{"range":{"start":{"row":5726,"column":0},"end":{"row":5726,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26697":{"range":{"start":{"row":5738,"column":0},"end":{"row":5738,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26698":{"range":{"start":{"row":5749,"column":0},"end":{"row":5749,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26699":{"range":{"start":{"row":5761,"column":0},"end":{"row":5761,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26700":{"range":{"start":{"row":5772,"column":0},"end":{"row":5772,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26701":{"range":{"start":{"row":5779,"column":0},"end":{"row":5779,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26702":{"range":{"start":{"row":5786,"column":0},"end":{"row":5786,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26703":{"range":{"start":{"row":5794,"column":0},"end":{"row":5794,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26704":{"range":{"start":{"row":5802,"column":0},"end":{"row":5802,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26705":{"range":{"start":{"row":5813,"column":0},"end":{"row":5813,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26706":{"range":{"start":{"row":5823,"column":0},"end":{"row":5823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26707":{"range":{"start":{"row":5833,"column":0},"end":{"row":5833,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26708":{"range":{"start":{"row":5845,"column":0},"end":{"row":5845,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26709":{"range":{"start":{"row":5857,"column":0},"end":{"row":5857,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26710":{"range":{"start":{"row":5869,"column":0},"end":{"row":5869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26711":{"range":{"start":{"row":5881,"column":0},"end":{"row":5881,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26712":{"range":{"start":{"row":5904,"column":0},"end":{"row":5904,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26713":{"range":{"start":{"row":5916,"column":0},"end":{"row":5916,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26714":{"range":{"start":{"row":5928,"column":0},"end":{"row":5928,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26715":{"range":{"start":{"row":5940,"column":0},"end":{"row":5940,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26716":{"range":{"start":{"row":5950,"column":0},"end":{"row":5950,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26717":{"range":{"start":{"row":5958,"column":0},"end":{"row":5958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26718":{"range":{"start":{"row":5966,"column":0},"end":{"row":5966,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26719":{"range":{"start":{"row":5977,"column":0},"end":{"row":5977,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26720":{"range":{"start":{"row":5986,"column":0},"end":{"row":5986,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26721":{"range":{"start":{"row":5995,"column":0},"end":{"row":5995,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26722":{"range":{"start":{"row":6003,"column":0},"end":{"row":6003,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26723":{"range":{"start":{"row":6011,"column":0},"end":{"row":6011,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26724":{"range":{"start":{"row":6018,"column":0},"end":{"row":6018,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26725":{"range":{"start":{"row":6025,"column":0},"end":{"row":6025,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26726":{"range":{"start":{"row":6032,"column":0},"end":{"row":6032,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26727":{"range":{"start":{"row":6039,"column":0},"end":{"row":6039,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26728":{"range":{"start":{"row":6054,"column":0},"end":{"row":6054,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26729":{"range":{"start":{"row":6066,"column":0},"end":{"row":6066,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26730":{"range":{"start":{"row":6088,"column":0},"end":{"row":6088,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26731":{"range":{"start":{"row":6093,"column":0},"end":{"row":6093,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26732":{"range":{"start":{"row":6101,"column":0},"end":{"row":6101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26733":{"range":{"start":{"row":6118,"column":0},"end":{"row":6118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26734":{"range":{"start":{"row":6130,"column":0},"end":{"row":6130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26735":{"range":{"start":{"row":6141,"column":0},"end":{"row":6141,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26736":{"range":{"start":{"row":6152,"column":0},"end":{"row":6152,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26737":{"range":{"start":{"row":6161,"column":0},"end":{"row":6161,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26738":{"range":{"start":{"row":6173,"column":0},"end":{"row":6173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26739":{"range":{"start":{"row":6185,"column":0},"end":{"row":6185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26740":{"range":{"start":{"row":6203,"column":0},"end":{"row":6203,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26741":{"range":{"start":{"row":6205,"column":0},"end":{"row":6205,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26742":{"range":{"start":{"row":6210,"column":0},"end":{"row":6210,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26743":{"range":{"start":{"row":6217,"column":0},"end":{"row":6217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26744":{"range":{"start":{"row":6224,"column":0},"end":{"row":6224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26745":{"range":{"start":{"row":6231,"column":0},"end":{"row":6231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26746":{"range":{"start":{"row":6238,"column":0},"end":{"row":6238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26747":{"range":{"start":{"row":6243,"column":0},"end":{"row":6243,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26748":{"range":{"start":{"row":6255,"column":0},"end":{"row":6255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26749":{"range":{"start":{"row":6267,"column":0},"end":{"row":6267,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26750":{"range":{"start":{"row":6279,"column":0},"end":{"row":6279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26751":{"range":{"start":{"row":6290,"column":0},"end":{"row":6290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26752":{"range":{"start":{"row":6301,"column":0},"end":{"row":6301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26753":{"range":{"start":{"row":6313,"column":0},"end":{"row":6313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26754":{"range":{"start":{"row":6325,"column":0},"end":{"row":6325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26755":{"range":{"start":{"row":6333,"column":0},"end":{"row":6333,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26756":{"range":{"start":{"row":6347,"column":0},"end":{"row":6347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26757":{"range":{"start":{"row":6349,"column":0},"end":{"row":6349,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26758":{"range":{"start":{"row":6354,"column":0},"end":{"row":6354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26759":{"range":{"start":{"row":6361,"column":0},"end":{"row":6361,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26760":{"range":{"start":{"row":6372,"column":0},"end":{"row":6372,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26761":{"range":{"start":{"row":6377,"column":0},"end":{"row":6377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26762":{"range":{"start":{"row":6388,"column":0},"end":{"row":6388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26763":{"range":{"start":{"row":6404,"column":0},"end":{"row":6404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26764":{"range":{"start":{"row":6413,"column":0},"end":{"row":6413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26765":{"range":{"start":{"row":6423,"column":0},"end":{"row":6423,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26766":{"range":{"start":{"row":6434,"column":0},"end":{"row":6434,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26767":{"range":{"start":{"row":6446,"column":0},"end":{"row":6446,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26768":{"range":{"start":{"row":6457,"column":0},"end":{"row":6457,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26769":{"range":{"start":{"row":6465,"column":0},"end":{"row":6465,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26770":{"range":{"start":{"row":6479,"column":0},"end":{"row":6479,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26771":{"range":{"start":{"row":6482,"column":0},"end":{"row":6482,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26772":{"range":{"start":{"row":6485,"column":0},"end":{"row":6485,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26773":{"range":{"start":{"row":6487,"column":0},"end":{"row":6487,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26774":{"range":{"start":{"row":6492,"column":0},"end":{"row":6492,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26775":{"range":{"start":{"row":6499,"column":0},"end":{"row":6499,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26776":{"range":{"start":{"row":6504,"column":0},"end":{"row":6504,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26777":{"range":{"start":{"row":6516,"column":0},"end":{"row":6516,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26778":{"range":{"start":{"row":6527,"column":0},"end":{"row":6527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26779":{"range":{"start":{"row":6539,"column":0},"end":{"row":6539,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26780":{"range":{"start":{"row":6551,"column":0},"end":{"row":6551,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26781":{"range":{"start":{"row":6563,"column":0},"end":{"row":6563,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26782":{"range":{"start":{"row":6574,"column":0},"end":{"row":6574,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26783":{"range":{"start":{"row":6582,"column":0},"end":{"row":6582,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26784":{"range":{"start":{"row":6594,"column":0},"end":{"row":6594,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26785":{"range":{"start":{"row":6603,"column":0},"end":{"row":6603,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26786":{"range":{"start":{"row":6610,"column":0},"end":{"row":6610,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26787":{"range":{"start":{"row":6624,"column":0},"end":{"row":6624,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26788":{"range":{"start":{"row":6637,"column":0},"end":{"row":6637,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26789":{"range":{"start":{"row":6640,"column":0},"end":{"row":6640,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26790":{"range":{"start":{"row":6643,"column":0},"end":{"row":6643,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26791":{"range":{"start":{"row":6645,"column":0},"end":{"row":6645,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26792":{"range":{"start":{"row":6650,"column":0},"end":{"row":6650,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26793":{"range":{"start":{"row":6657,"column":0},"end":{"row":6657,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26794":{"range":{"start":{"row":6662,"column":0},"end":{"row":6662,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26795":{"range":{"start":{"row":6673,"column":0},"end":{"row":6673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26796":{"range":{"start":{"row":6685,"column":0},"end":{"row":6685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26797":{"range":{"start":{"row":6696,"column":0},"end":{"row":6696,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26798":{"range":{"start":{"row":6707,"column":0},"end":{"row":6707,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26799":{"range":{"start":{"row":6719,"column":0},"end":{"row":6719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26800":{"range":{"start":{"row":6727,"column":0},"end":{"row":6727,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26801":{"range":{"start":{"row":6745,"column":0},"end":{"row":6745,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26802":{"range":{"start":{"row":6756,"column":0},"end":{"row":6756,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26803":{"range":{"start":{"row":6766,"column":0},"end":{"row":6766,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26804":{"range":{"start":{"row":6787,"column":0},"end":{"row":6787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26805":{"range":{"start":{"row":6792,"column":0},"end":{"row":6792,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26806":{"range":{"start":{"row":6799,"column":0},"end":{"row":6799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26807":{"range":{"start":{"row":6804,"column":0},"end":{"row":6804,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26808":{"range":{"start":{"row":6836,"column":0},"end":{"row":6836,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26809":{"range":{"start":{"row":6847,"column":0},"end":{"row":6847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26810":{"range":{"start":{"row":6858,"column":0},"end":{"row":6858,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26811":{"range":{"start":{"row":6869,"column":0},"end":{"row":6869,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26812":{"range":{"start":{"row":6903,"column":0},"end":{"row":6903,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26813":{"range":{"start":{"row":6924,"column":0},"end":{"row":6924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26814":{"range":{"start":{"row":6936,"column":0},"end":{"row":6936,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26815":{"range":{"start":{"row":6952,"column":0},"end":{"row":6952,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26816":{"range":{"start":{"row":6964,"column":0},"end":{"row":6964,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26817":{"range":{"start":{"row":6971,"column":0},"end":{"row":6971,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26818":{"range":{"start":{"row":6996,"column":0},"end":{"row":6996,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26819":{"range":{"start":{"row":7002,"column":0},"end":{"row":7002,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26820":{"range":{"start":{"row":7150,"column":0},"end":{"row":7150,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26821":{"range":{"start":{"row":7664,"column":0},"end":{"row":7664,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26822":{"range":{"start":{"row":7666,"column":0},"end":{"row":7666,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26823":{"range":{"start":{"row":7673,"column":0},"end":{"row":7673,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26824":{"range":{"start":{"row":7678,"column":0},"end":{"row":7678,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26825":{"range":{"start":{"row":7685,"column":0},"end":{"row":7685,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26826":{"range":{"start":{"row":7692,"column":0},"end":{"row":7692,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26827":{"range":{"start":{"row":7699,"column":0},"end":{"row":7699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26828":{"range":{"start":{"row":7711,"column":0},"end":{"row":7711,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26829":{"range":{"start":{"row":7719,"column":0},"end":{"row":7719,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26830":{"range":{"start":{"row":7730,"column":0},"end":{"row":7730,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26831":{"range":{"start":{"row":7741,"column":0},"end":{"row":7741,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26832":{"range":{"start":{"row":7753,"column":0},"end":{"row":7753,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26833":{"range":{"start":{"row":7764,"column":0},"end":{"row":7764,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26834":{"range":{"start":{"row":7775,"column":0},"end":{"row":7775,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26835":{"range":{"start":{"row":7787,"column":0},"end":{"row":7787,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26836":{"range":{"start":{"row":7799,"column":0},"end":{"row":7799,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26837":{"range":{"start":{"row":7811,"column":0},"end":{"row":7811,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26838":{"range":{"start":{"row":7823,"column":0},"end":{"row":7823,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26839":{"range":{"start":{"row":7835,"column":0},"end":{"row":7835,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26840":{"range":{"start":{"row":7847,"column":0},"end":{"row":7847,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26841":{"range":{"start":{"row":7849,"column":0},"end":{"row":7849,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26842":{"range":{"start":{"row":7854,"column":0},"end":{"row":7854,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26843":{"range":{"start":{"row":7861,"column":0},"end":{"row":7861,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26844":{"range":{"start":{"row":7866,"column":0},"end":{"row":7866,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26845":{"range":{"start":{"row":7878,"column":0},"end":{"row":7878,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26846":{"range":{"start":{"row":7889,"column":0},"end":{"row":7889,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26847":{"range":{"start":{"row":7901,"column":0},"end":{"row":7901,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26848":{"range":{"start":{"row":7912,"column":0},"end":{"row":7912,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26849":{"range":{"start":{"row":7924,"column":0},"end":{"row":7924,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26850":{"range":{"start":{"row":7935,"column":0},"end":{"row":7935,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26851":{"range":{"start":{"row":7946,"column":0},"end":{"row":7946,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26852":{"range":{"start":{"row":7958,"column":0},"end":{"row":7958,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26853":{"range":{"start":{"row":7970,"column":0},"end":{"row":7970,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26854":{"range":{"start":{"row":7982,"column":0},"end":{"row":7982,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26855":{"range":{"start":{"row":7994,"column":0},"end":{"row":7994,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26856":{"range":{"start":{"row":8006,"column":0},"end":{"row":8006,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26857":{"range":{"start":{"row":8017,"column":0},"end":{"row":8017,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26858":{"range":{"start":{"row":8027,"column":0},"end":{"row":8027,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26859":{"range":{"start":{"row":8035,"column":0},"end":{"row":8035,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26860":{"range":{"start":{"row":8043,"column":0},"end":{"row":8043,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":91,"column":18},"end":{"row":91,"column":18}},"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":{"characterwise":{"head":{"row":50,"column":32},"tail":{"row":47,"column":0},"reversed":false}},"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"nextMarkerId":29,"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"nextMarkerId":0,"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":14,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"2":{"2-0":{"range":[[176,110],[176,110]],"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"checkpoint","id":6,"snapshot":{"2":{"2-0":{"range":[[177,0],[177,0]],"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"checkpoint","id":11,"snapshot":{"2":{"2-0":{"range":[[91,17],[91,17]],"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":{"characterwise":{"head":{"row":50,"column":32},"tail":{"row":47,"column":0},"reversed":false}},"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"checkpoint","id":12,"snapshot":{"2":{"2-0":{"range":[[91,18],[91,18]],"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":{"characterwise":{"head":{"row":50,"column":32},"tail":{"row":47,"column":0},"reversed":false}},"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-0":{"range":[[91,18],[91,18]],"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":{"characterwise":{"head":{"row":50,"column":32},"tail":{"row":47,"column":0},"reversed":false}},"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[8043,0],[8043,4]],"newRange":[[8043,0],[8043,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[8035,0],[8035,4]],"newRange":[[8035,0],[8035,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[8027,0],[8027,4]],"newRange":[[8027,0],[8027,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[8017,0],[8017,4]],"newRange":[[8017,0],[8017,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[8006,0],[8006,4]],"newRange":[[8006,0],[8006,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7994,0],[7994,4]],"newRange":[[7994,0],[7994,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7982,0],[7982,4]],"newRange":[[7982,0],[7982,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7970,0],[7970,4]],"newRange":[[7970,0],[7970,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7958,0],[7958,4]],"newRange":[[7958,0],[7958,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7946,0],[7946,4]],"newRange":[[7946,0],[7946,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7935,0],[7935,4]],"newRange":[[7935,0],[7935,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7924,0],[7924,4]],"newRange":[[7924,0],[7924,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7912,0],[7912,4]],"newRange":[[7912,0],[7912,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7901,0],[7901,4]],"newRange":[[7901,0],[7901,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7889,0],[7889,4]],"newRange":[[7889,0],[7889,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7878,0],[7878,4]],"newRange":[[7878,0],[7878,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7866,0],[7866,4]],"newRange":[[7866,0],[7866,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7861,0],[7861,4]],"newRange":[[7861,0],[7861,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7854,0],[7854,4]],"newRange":[[7854,0],[7854,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7849,0],[7849,4]],"newRange":[[7849,0],[7849,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7847,0],[7847,4]],"newRange":[[7847,0],[7847,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7835,0],[7835,4]],"newRange":[[7835,0],[7835,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7823,0],[7823,4]],"newRange":[[7823,0],[7823,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7811,0],[7811,4]],"newRange":[[7811,0],[7811,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7799,0],[7799,4]],"newRange":[[7799,0],[7799,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7787,0],[7787,4]],"newRange":[[7787,0],[7787,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7775,0],[7775,4]],"newRange":[[7775,0],[7775,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7764,0],[7764,4]],"newRange":[[7764,0],[7764,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7753,0],[7753,4]],"newRange":[[7753,0],[7753,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7741,0],[7741,4]],"newRange":[[7741,0],[7741,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7730,0],[7730,4]],"newRange":[[7730,0],[7730,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7719,0],[7719,4]],"newRange":[[7719,0],[7719,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7711,0],[7711,4]],"newRange":[[7711,0],[7711,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7699,0],[7699,2]],"newRange":[[7699,0],[7699,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[7692,0],[7692,4]],"newRange":[[7692,0],[7692,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7685,0],[7685,4]],"newRange":[[7685,0],[7685,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7678,0],[7678,4]],"newRange":[[7678,0],[7678,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7673,0],[7673,4]],"newRange":[[7673,0],[7673,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7666,0],[7666,4]],"newRange":[[7666,0],[7666,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7664,0],[7664,4]],"newRange":[[7664,0],[7664,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7150,0],[7150,4]],"newRange":[[7150,0],[7150,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[7002,0],[7002,4]],"newRange":[[7002,0],[7002,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6996,0],[6996,4]],"newRange":[[6996,0],[6996,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6971,0],[6971,2]],"newRange":[[6971,0],[6971,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6964,0],[6964,2]],"newRange":[[6964,0],[6964,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6952,0],[6952,4]],"newRange":[[6952,0],[6952,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6936,0],[6936,4]],"newRange":[[6936,0],[6936,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6924,0],[6924,4]],"newRange":[[6924,0],[6924,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6903,0],[6903,4]],"newRange":[[6903,0],[6903,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6869,0],[6869,2]],"newRange":[[6869,0],[6869,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6858,0],[6858,4]],"newRange":[[6858,0],[6858,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6847,0],[6847,4]],"newRange":[[6847,0],[6847,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6836,0],[6836,4]],"newRange":[[6836,0],[6836,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6804,0],[6804,4]],"newRange":[[6804,0],[6804,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6799,0],[6799,4]],"newRange":[[6799,0],[6799,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6792,0],[6792,4]],"newRange":[[6792,0],[6792,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6787,0],[6787,4]],"newRange":[[6787,0],[6787,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6766,0],[6766,2]],"newRange":[[6766,0],[6766,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6756,0],[6756,2]],"newRange":[[6756,0],[6756,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6745,0],[6745,4]],"newRange":[[6745,0],[6745,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6727,0],[6727,4]],"newRange":[[6727,0],[6727,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6719,0],[6719,4]],"newRange":[[6719,0],[6719,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6707,0],[6707,4]],"newRange":[[6707,0],[6707,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6696,0],[6696,2]],"newRange":[[6696,0],[6696,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6685,0],[6685,2]],"newRange":[[6685,0],[6685,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6673,0],[6673,2]],"newRange":[[6673,0],[6673,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6662,0],[6662,4]],"newRange":[[6662,0],[6662,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6657,0],[6657,4]],"newRange":[[6657,0],[6657,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6650,0],[6650,4]],"newRange":[[6650,0],[6650,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6645,0],[6645,4]],"newRange":[[6645,0],[6645,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6643,0],[6643,4]],"newRange":[[6643,0],[6643,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6640,0],[6640,4]],"newRange":[[6640,0],[6640,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6637,0],[6637,4]],"newRange":[[6637,0],[6637,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6624,0],[6624,4]],"newRange":[[6624,0],[6624,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6610,0],[6610,4]],"newRange":[[6610,0],[6610,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6603,0],[6603,4]],"newRange":[[6603,0],[6603,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6594,0],[6594,2]],"newRange":[[6594,0],[6594,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6582,0],[6582,4]],"newRange":[[6582,0],[6582,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6574,0],[6574,4]],"newRange":[[6574,0],[6574,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6563,0],[6563,4]],"newRange":[[6563,0],[6563,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6551,0],[6551,4]],"newRange":[[6551,0],[6551,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6539,0],[6539,4]],"newRange":[[6539,0],[6539,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6527,0],[6527,4]],"newRange":[[6527,0],[6527,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6516,0],[6516,4]],"newRange":[[6516,0],[6516,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6504,0],[6504,4]],"newRange":[[6504,0],[6504,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6499,0],[6499,4]],"newRange":[[6499,0],[6499,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6492,0],[6492,4]],"newRange":[[6492,0],[6492,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6487,0],[6487,4]],"newRange":[[6487,0],[6487,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6485,0],[6485,4]],"newRange":[[6485,0],[6485,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6482,0],[6482,4]],"newRange":[[6482,0],[6482,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6479,0],[6479,4]],"newRange":[[6479,0],[6479,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6465,0],[6465,2]],"newRange":[[6465,0],[6465,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6457,0],[6457,2]],"newRange":[[6457,0],[6457,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6446,0],[6446,4]],"newRange":[[6446,0],[6446,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6434,0],[6434,4]],"newRange":[[6434,0],[6434,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6423,0],[6423,4]],"newRange":[[6423,0],[6423,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6413,0],[6413,2]],"newRange":[[6413,0],[6413,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6404,0],[6404,2]],"newRange":[[6404,0],[6404,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6388,0],[6388,4]],"newRange":[[6388,0],[6388,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6377,0],[6377,4]],"newRange":[[6377,0],[6377,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6372,0],[6372,4]],"newRange":[[6372,0],[6372,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6361,0],[6361,4]],"newRange":[[6361,0],[6361,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6354,0],[6354,4]],"newRange":[[6354,0],[6354,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6349,0],[6349,4]],"newRange":[[6349,0],[6349,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6347,0],[6347,4]],"newRange":[[6347,0],[6347,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6333,0],[6333,4]],"newRange":[[6333,0],[6333,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6325,0],[6325,4]],"newRange":[[6325,0],[6325,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6313,0],[6313,4]],"newRange":[[6313,0],[6313,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6301,0],[6301,4]],"newRange":[[6301,0],[6301,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6290,0],[6290,4]],"newRange":[[6290,0],[6290,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6279,0],[6279,4]],"newRange":[[6279,0],[6279,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6267,0],[6267,2]],"newRange":[[6267,0],[6267,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6255,0],[6255,2]],"newRange":[[6255,0],[6255,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6243,0],[6243,4]],"newRange":[[6243,0],[6243,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6238,0],[6238,4]],"newRange":[[6238,0],[6238,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6231,0],[6231,2]],"newRange":[[6231,0],[6231,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6224,0],[6224,2]],"newRange":[[6224,0],[6224,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6217,0],[6217,4]],"newRange":[[6217,0],[6217,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6210,0],[6210,4]],"newRange":[[6210,0],[6210,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6205,0],[6205,4]],"newRange":[[6205,0],[6205,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6203,0],[6203,8]],"newRange":[[6203,0],[6203,0]],"oldText":"        ","newText":""}},{"type":"change","content":{"oldRange":[[6185,0],[6185,4]],"newRange":[[6185,0],[6185,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6173,0],[6173,4]],"newRange":[[6173,0],[6173,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6161,0],[6161,4]],"newRange":[[6161,0],[6161,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6152,0],[6152,4]],"newRange":[[6152,0],[6152,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6141,0],[6141,4]],"newRange":[[6141,0],[6141,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6130,0],[6130,4]],"newRange":[[6130,0],[6130,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6118,0],[6118,4]],"newRange":[[6118,0],[6118,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6101,0],[6101,4]],"newRange":[[6101,0],[6101,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6093,0],[6093,4]],"newRange":[[6093,0],[6093,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6088,0],[6088,4]],"newRange":[[6088,0],[6088,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6066,0],[6066,4]],"newRange":[[6066,0],[6066,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6054,0],[6054,2]],"newRange":[[6054,0],[6054,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[6039,0],[6039,4]],"newRange":[[6039,0],[6039,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6032,0],[6032,4]],"newRange":[[6032,0],[6032,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6025,0],[6025,4]],"newRange":[[6025,0],[6025,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6018,0],[6018,4]],"newRange":[[6018,0],[6018,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6011,0],[6011,4]],"newRange":[[6011,0],[6011,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[6003,0],[6003,4]],"newRange":[[6003,0],[6003,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5995,0],[5995,4]],"newRange":[[5995,0],[5995,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5986,0],[5986,4]],"newRange":[[5986,0],[5986,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5977,0],[5977,4]],"newRange":[[5977,0],[5977,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5966,0],[5966,4]],"newRange":[[5966,0],[5966,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5958,0],[5958,4]],"newRange":[[5958,0],[5958,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5950,0],[5950,4]],"newRange":[[5950,0],[5950,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5940,0],[5940,4]],"newRange":[[5940,0],[5940,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5928,0],[5928,2]],"newRange":[[5928,0],[5928,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5916,0],[5916,2]],"newRange":[[5916,0],[5916,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5904,0],[5904,4]],"newRange":[[5904,0],[5904,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5881,0],[5881,2]],"newRange":[[5881,0],[5881,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5869,0],[5869,4]],"newRange":[[5869,0],[5869,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5857,0],[5857,4]],"newRange":[[5857,0],[5857,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5845,0],[5845,4]],"newRange":[[5845,0],[5845,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5833,0],[5833,4]],"newRange":[[5833,0],[5833,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5823,0],[5823,4]],"newRange":[[5823,0],[5823,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5813,0],[5813,4]],"newRange":[[5813,0],[5813,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5802,0],[5802,4]],"newRange":[[5802,0],[5802,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5794,0],[5794,4]],"newRange":[[5794,0],[5794,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5786,0],[5786,4]],"newRange":[[5786,0],[5786,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5779,0],[5779,4]],"newRange":[[5779,0],[5779,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5772,0],[5772,4]],"newRange":[[5772,0],[5772,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5761,0],[5761,4]],"newRange":[[5761,0],[5761,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5749,0],[5749,4]],"newRange":[[5749,0],[5749,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5738,0],[5738,4]],"newRange":[[5738,0],[5738,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5726,0],[5726,4]],"newRange":[[5726,0],[5726,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5719,0],[5719,4]],"newRange":[[5719,0],[5719,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5713,0],[5713,4]],"newRange":[[5713,0],[5713,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5707,0],[5707,4]],"newRange":[[5707,0],[5707,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5699,0],[5699,4]],"newRange":[[5699,0],[5699,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5691,0],[5691,2]],"newRange":[[5691,0],[5691,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5683,0],[5683,2]],"newRange":[[5683,0],[5683,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5676,0],[5676,2]],"newRange":[[5676,0],[5676,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5669,0],[5669,4]],"newRange":[[5669,0],[5669,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5662,0],[5662,4]],"newRange":[[5662,0],[5662,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5644,0],[5644,4]],"newRange":[[5644,0],[5644,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5639,0],[5639,4]],"newRange":[[5639,0],[5639,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5631,0],[5631,4]],"newRange":[[5631,0],[5631,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5626,0],[5626,4]],"newRange":[[5626,0],[5626,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5624,0],[5624,4]],"newRange":[[5624,0],[5624,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5584,0],[5584,4]],"newRange":[[5584,0],[5584,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5578,0],[5578,4]],"newRange":[[5578,0],[5578,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5566,0],[5566,4]],"newRange":[[5566,0],[5566,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5554,0],[5554,4]],"newRange":[[5554,0],[5554,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5542,0],[5542,4]],"newRange":[[5542,0],[5542,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5530,0],[5530,4]],"newRange":[[5530,0],[5530,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5518,0],[5518,4]],"newRange":[[5518,0],[5518,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5507,0],[5507,4]],"newRange":[[5507,0],[5507,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5495,0],[5495,2]],"newRange":[[5495,0],[5495,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5485,0],[5485,4]],"newRange":[[5485,0],[5485,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5473,0],[5473,4]],"newRange":[[5473,0],[5473,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5468,0],[5468,4]],"newRange":[[5468,0],[5468,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5460,0],[5460,4]],"newRange":[[5460,0],[5460,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5454,0],[5454,4]],"newRange":[[5454,0],[5454,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5429,0],[5429,4]],"newRange":[[5429,0],[5429,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5410,0],[5410,4]],"newRange":[[5410,0],[5410,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5398,0],[5398,4]],"newRange":[[5398,0],[5398,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5386,0],[5386,4]],"newRange":[[5386,0],[5386,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5374,0],[5374,4]],"newRange":[[5374,0],[5374,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5362,0],[5362,4]],"newRange":[[5362,0],[5362,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5351,0],[5351,4]],"newRange":[[5351,0],[5351,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5339,0],[5339,2]],"newRange":[[5339,0],[5339,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5327,0],[5327,2]],"newRange":[[5327,0],[5327,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5316,0],[5316,2]],"newRange":[[5316,0],[5316,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5306,0],[5306,4]],"newRange":[[5306,0],[5306,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5294,0],[5294,4]],"newRange":[[5294,0],[5294,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5289,0],[5289,4]],"newRange":[[5289,0],[5289,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5281,0],[5281,4]],"newRange":[[5281,0],[5281,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5262,0],[5262,4]],"newRange":[[5262,0],[5262,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5252,0],[5252,2]],"newRange":[[5252,0],[5252,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5242,0],[5242,4]],"newRange":[[5242,0],[5242,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5232,0],[5232,4]],"newRange":[[5232,0],[5232,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5208,0],[5208,2]],"newRange":[[5208,0],[5208,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5196,0],[5196,4]],"newRange":[[5196,0],[5196,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5184,0],[5184,4]],"newRange":[[5184,0],[5184,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5172,0],[5172,4]],"newRange":[[5172,0],[5172,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5160,0],[5160,4]],"newRange":[[5160,0],[5160,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5148,0],[5148,4]],"newRange":[[5148,0],[5148,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5136,0],[5136,4]],"newRange":[[5136,0],[5136,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5125,0],[5125,4]],"newRange":[[5125,0],[5125,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5113,0],[5113,4]],"newRange":[[5113,0],[5113,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5103,0],[5103,4]],"newRange":[[5103,0],[5103,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5091,0],[5091,4]],"newRange":[[5091,0],[5091,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5086,0],[5086,4]],"newRange":[[5086,0],[5086,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5077,0],[5077,4]],"newRange":[[5077,0],[5077,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5071,0],[5071,1]],"newRange":[[5071,0],[5071,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[5057,0],[5057,2]],"newRange":[[5057,0],[5057,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5045,0],[5045,2]],"newRange":[[5045,0],[5045,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5037,0],[5037,4]],"newRange":[[5037,0],[5037,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5026,0],[5026,4]],"newRange":[[5026,0],[5026,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[5015,0],[5015,2]],"newRange":[[5015,0],[5015,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5003,0],[5003,2]],"newRange":[[5003,0],[5003,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[5000,0],[5000,2]],"newRange":[[5000,0],[5000,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4984,0],[4984,2]],"newRange":[[4984,0],[4984,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4977,0],[4977,2]],"newRange":[[4977,0],[4977,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4970,0],[4970,2]],"newRange":[[4970,0],[4970,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4963,0],[4963,4]],"newRange":[[4963,0],[4963,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4958,0],[4958,4]],"newRange":[[4958,0],[4958,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4953,0],[4953,4]],"newRange":[[4953,0],[4953,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4948,0],[4948,4]],"newRange":[[4948,0],[4948,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4946,0],[4946,4]],"newRange":[[4946,0],[4946,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4928,0],[4928,2]],"newRange":[[4928,0],[4928,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4922,0],[4922,2]],"newRange":[[4922,0],[4922,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4916,0],[4916,2]],"newRange":[[4916,0],[4916,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4910,0],[4910,2]],"newRange":[[4910,0],[4910,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4904,0],[4904,2]],"newRange":[[4904,0],[4904,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4896,0],[4896,2]],"newRange":[[4896,0],[4896,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4888,0],[4888,2]],"newRange":[[4888,0],[4888,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4880,0],[4880,1]],"newRange":[[4880,0],[4880,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[4872,0],[4872,4]],"newRange":[[4872,0],[4872,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4864,0],[4864,4]],"newRange":[[4864,0],[4864,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4852,0],[4852,4]],"newRange":[[4852,0],[4852,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4846,0],[4846,4]],"newRange":[[4846,0],[4846,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4840,0],[4840,2]],"newRange":[[4840,0],[4840,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4834,0],[4834,4]],"newRange":[[4834,0],[4834,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4827,0],[4827,4]],"newRange":[[4827,0],[4827,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4820,0],[4820,2]],"newRange":[[4820,0],[4820,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4813,0],[4813,4]],"newRange":[[4813,0],[4813,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4806,0],[4806,4]],"newRange":[[4806,0],[4806,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4799,0],[4799,4]],"newRange":[[4799,0],[4799,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4787,0],[4787,4]],"newRange":[[4787,0],[4787,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4767,0],[4767,6]],"newRange":[[4767,0],[4767,0]],"oldText":"      ","newText":""}},{"type":"change","content":{"oldRange":[[4756,0],[4756,4]],"newRange":[[4756,0],[4756,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4745,0],[4745,4]],"newRange":[[4745,0],[4745,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4739,0],[4739,2]],"newRange":[[4739,0],[4739,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4733,0],[4733,4]],"newRange":[[4733,0],[4733,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4728,0],[4728,4]],"newRange":[[4728,0],[4728,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4721,0],[4721,4]],"newRange":[[4721,0],[4721,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4716,0],[4716,2]],"newRange":[[4716,0],[4716,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4714,0],[4714,2]],"newRange":[[4714,0],[4714,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4642,0],[4642,2]],"newRange":[[4642,0],[4642,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4635,0],[4635,2]],"newRange":[[4635,0],[4635,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4626,0],[4626,4]],"newRange":[[4626,0],[4626,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4617,0],[4617,4]],"newRange":[[4617,0],[4617,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4597,0],[4597,4]],"newRange":[[4597,0],[4597,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4585,0],[4585,2]],"newRange":[[4585,0],[4585,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4580,0],[4580,2]],"newRange":[[4580,0],[4580,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4575,0],[4575,2]],"newRange":[[4575,0],[4575,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4570,0],[4570,2]],"newRange":[[4570,0],[4570,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4565,0],[4565,2]],"newRange":[[4565,0],[4565,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4560,0],[4560,2]],"newRange":[[4560,0],[4560,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4555,0],[4555,2]],"newRange":[[4555,0],[4555,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4550,0],[4550,2]],"newRange":[[4550,0],[4550,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4545,0],[4545,2]],"newRange":[[4545,0],[4545,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4540,0],[4540,2]],"newRange":[[4540,0],[4540,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4535,0],[4535,2]],"newRange":[[4535,0],[4535,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4530,0],[4530,2]],"newRange":[[4530,0],[4530,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4525,0],[4525,2]],"newRange":[[4525,0],[4525,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4520,0],[4520,2]],"newRange":[[4520,0],[4520,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4515,0],[4515,2]],"newRange":[[4515,0],[4515,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4509,0],[4509,2]],"newRange":[[4509,0],[4509,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4504,0],[4504,2]],"newRange":[[4504,0],[4504,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4498,0],[4498,2]],"newRange":[[4498,0],[4498,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4492,0],[4492,2]],"newRange":[[4492,0],[4492,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4476,0],[4476,2]],"newRange":[[4476,0],[4476,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4468,0],[4468,2]],"newRange":[[4468,0],[4468,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4460,0],[4460,2]],"newRange":[[4460,0],[4460,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4454,0],[4454,2]],"newRange":[[4454,0],[4454,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4448,0],[4448,2]],"newRange":[[4448,0],[4448,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4442,0],[4442,2]],"newRange":[[4442,0],[4442,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4436,0],[4436,2]],"newRange":[[4436,0],[4436,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4430,0],[4430,2]],"newRange":[[4430,0],[4430,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4424,0],[4424,2]],"newRange":[[4424,0],[4424,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4418,0],[4418,4]],"newRange":[[4418,0],[4418,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4412,0],[4412,4]],"newRange":[[4412,0],[4412,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4406,0],[4406,4]],"newRange":[[4406,0],[4406,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4400,0],[4400,4]],"newRange":[[4400,0],[4400,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4394,0],[4394,4]],"newRange":[[4394,0],[4394,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4388,0],[4388,4]],"newRange":[[4388,0],[4388,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4382,0],[4382,4]],"newRange":[[4382,0],[4382,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4376,0],[4376,4]],"newRange":[[4376,0],[4376,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4370,0],[4370,4]],"newRange":[[4370,0],[4370,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4364,0],[4364,4]],"newRange":[[4364,0],[4364,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4358,0],[4358,4]],"newRange":[[4358,0],[4358,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4352,0],[4352,4]],"newRange":[[4352,0],[4352,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4346,0],[4346,4]],"newRange":[[4346,0],[4346,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4340,0],[4340,4]],"newRange":[[4340,0],[4340,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4334,0],[4334,4]],"newRange":[[4334,0],[4334,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4328,0],[4328,4]],"newRange":[[4328,0],[4328,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4322,0],[4322,4]],"newRange":[[4322,0],[4322,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4316,0],[4316,4]],"newRange":[[4316,0],[4316,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4310,0],[4310,4]],"newRange":[[4310,0],[4310,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4304,0],[4304,4]],"newRange":[[4304,0],[4304,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4298,0],[4298,4]],"newRange":[[4298,0],[4298,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4292,0],[4292,4]],"newRange":[[4292,0],[4292,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4286,0],[4286,4]],"newRange":[[4286,0],[4286,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4280,0],[4280,4]],"newRange":[[4280,0],[4280,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4274,0],[4274,2]],"newRange":[[4274,0],[4274,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4268,0],[4268,2]],"newRange":[[4268,0],[4268,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4262,0],[4262,4]],"newRange":[[4262,0],[4262,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4256,0],[4256,4]],"newRange":[[4256,0],[4256,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4250,0],[4250,2]],"newRange":[[4250,0],[4250,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4244,0],[4244,2]],"newRange":[[4244,0],[4244,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4238,0],[4238,4]],"newRange":[[4238,0],[4238,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4232,0],[4232,4]],"newRange":[[4232,0],[4232,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4226,0],[4226,4]],"newRange":[[4226,0],[4226,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4219,0],[4219,4]],"newRange":[[4219,0],[4219,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4212,0],[4212,4]],"newRange":[[4212,0],[4212,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4205,0],[4205,4]],"newRange":[[4205,0],[4205,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4198,0],[4198,4]],"newRange":[[4198,0],[4198,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4191,0],[4191,4]],"newRange":[[4191,0],[4191,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4184,0],[4184,4]],"newRange":[[4184,0],[4184,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4177,0],[4177,2]],"newRange":[[4177,0],[4177,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4170,0],[4170,2]],"newRange":[[4170,0],[4170,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4163,0],[4163,2]],"newRange":[[4163,0],[4163,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4156,0],[4156,2]],"newRange":[[4156,0],[4156,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4149,0],[4149,2]],"newRange":[[4149,0],[4149,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4142,0],[4142,2]],"newRange":[[4142,0],[4142,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4135,0],[4135,2]],"newRange":[[4135,0],[4135,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4128,0],[4128,2]],"newRange":[[4128,0],[4128,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4121,0],[4121,2]],"newRange":[[4121,0],[4121,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4114,0],[4114,2]],"newRange":[[4114,0],[4114,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4107,0],[4107,2]],"newRange":[[4107,0],[4107,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4100,0],[4100,4]],"newRange":[[4100,0],[4100,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4093,0],[4093,4]],"newRange":[[4093,0],[4093,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4086,0],[4086,4]],"newRange":[[4086,0],[4086,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4079,0],[4079,2]],"newRange":[[4079,0],[4079,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4072,0],[4072,2]],"newRange":[[4072,0],[4072,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4065,0],[4065,2]],"newRange":[[4065,0],[4065,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4058,0],[4058,2]],"newRange":[[4058,0],[4058,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4051,0],[4051,2]],"newRange":[[4051,0],[4051,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[4044,0],[4044,4]],"newRange":[[4044,0],[4044,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4037,0],[4037,4]],"newRange":[[4037,0],[4037,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4030,0],[4030,4]],"newRange":[[4030,0],[4030,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[4000,0],[4000,4]],"newRange":[[4000,0],[4000,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3992,0],[3992,4]],"newRange":[[3992,0],[3992,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3984,0],[3984,2]],"newRange":[[3984,0],[3984,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3973,0],[3973,2]],"newRange":[[3973,0],[3973,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3965,0],[3965,2]],"newRange":[[3965,0],[3965,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3957,0],[3957,4]],"newRange":[[3957,0],[3957,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3644,0],[3644,2]],"newRange":[[3644,0],[3644,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3632,0],[3632,2]],"newRange":[[3632,0],[3632,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3620,0],[3620,4]],"newRange":[[3620,0],[3620,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3608,0],[3608,4]],"newRange":[[3608,0],[3608,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3585,0],[3585,2]],"newRange":[[3585,0],[3585,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3573,0],[3573,4]],"newRange":[[3573,0],[3573,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3532,0],[3532,4]],"newRange":[[3532,0],[3532,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3522,0],[3522,2]],"newRange":[[3522,0],[3522,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3511,0],[3511,2]],"newRange":[[3511,0],[3511,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3500,0],[3500,4]],"newRange":[[3500,0],[3500,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3489,0],[3489,4]],"newRange":[[3489,0],[3489,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3478,0],[3478,4]],"newRange":[[3478,0],[3478,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3466,0],[3466,4]],"newRange":[[3466,0],[3466,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3453,0],[3453,4]],"newRange":[[3453,0],[3453,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3446,0],[3446,4]],"newRange":[[3446,0],[3446,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3439,0],[3439,4]],"newRange":[[3439,0],[3439,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3432,0],[3432,4]],"newRange":[[3432,0],[3432,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3425,0],[3425,4]],"newRange":[[3425,0],[3425,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3418,0],[3418,2]],"newRange":[[3418,0],[3418,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3411,0],[3411,2]],"newRange":[[3411,0],[3411,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3403,0],[3403,2]],"newRange":[[3403,0],[3403,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3396,0],[3396,4]],"newRange":[[3396,0],[3396,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3388,0],[3388,4]],"newRange":[[3388,0],[3388,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3380,0],[3380,2]],"newRange":[[3380,0],[3380,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3372,0],[3372,2]],"newRange":[[3372,0],[3372,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3364,0],[3364,4]],"newRange":[[3364,0],[3364,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3356,0],[3356,4]],"newRange":[[3356,0],[3356,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3348,0],[3348,4]],"newRange":[[3348,0],[3348,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3331,0],[3331,2]],"newRange":[[3331,0],[3331,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3322,0],[3322,2]],"newRange":[[3322,0],[3322,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3311,0],[3311,4]],"newRange":[[3311,0],[3311,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3300,0],[3300,4]],"newRange":[[3300,0],[3300,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3282,0],[3282,4]],"newRange":[[3282,0],[3282,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3271,0],[3271,4]],"newRange":[[3271,0],[3271,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3259,0],[3259,4]],"newRange":[[3259,0],[3259,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3248,0],[3248,2]],"newRange":[[3248,0],[3248,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3242,0],[3242,2]],"newRange":[[3242,0],[3242,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3235,0],[3235,4]],"newRange":[[3235,0],[3235,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3222,0],[3222,4]],"newRange":[[3222,0],[3222,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3216,0],[3216,4]],"newRange":[[3216,0],[3216,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3210,0],[3210,4]],"newRange":[[3210,0],[3210,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3197,0],[3197,2]],"newRange":[[3197,0],[3197,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3183,0],[3183,2]],"newRange":[[3183,0],[3183,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3176,0],[3176,2]],"newRange":[[3176,0],[3176,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3169,0],[3169,4]],"newRange":[[3169,0],[3169,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3162,0],[3162,4]],"newRange":[[3162,0],[3162,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3155,0],[3155,4]],"newRange":[[3155,0],[3155,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3148,0],[3148,4]],"newRange":[[3148,0],[3148,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3143,0],[3143,4]],"newRange":[[3143,0],[3143,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3136,0],[3136,4]],"newRange":[[3136,0],[3136,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[3067,0],[3067,2]],"newRange":[[3067,0],[3067,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3063,0],[3063,2]],"newRange":[[3063,0],[3063,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[3009,0],[3009,1]],"newRange":[[3009,0],[3009,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[2992,0],[2992,1]],"newRange":[[2992,0],[2992,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[2937,0],[2937,1]],"newRange":[[2937,0],[2937,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[2929,0],[2929,1]],"newRange":[[2929,0],[2929,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[2917,0],[2917,4]],"newRange":[[2917,0],[2917,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2894,0],[2894,4]],"newRange":[[2894,0],[2894,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2887,0],[2887,4]],"newRange":[[2887,0],[2887,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2880,0],[2880,4]],"newRange":[[2880,0],[2880,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2875,0],[2875,4]],"newRange":[[2875,0],[2875,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2634,0],[2634,2]],"newRange":[[2634,0],[2634,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2624,0],[2624,4]],"newRange":[[2624,0],[2624,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2616,0],[2616,4]],"newRange":[[2616,0],[2616,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2607,0],[2607,2]],"newRange":[[2607,0],[2607,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2588,0],[2588,2]],"newRange":[[2588,0],[2588,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2580,0],[2580,2]],"newRange":[[2580,0],[2580,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2575,0],[2575,4]],"newRange":[[2575,0],[2575,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2567,0],[2567,4]],"newRange":[[2567,0],[2567,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2495,0],[2495,4]],"newRange":[[2495,0],[2495,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2469,0],[2469,4]],"newRange":[[2469,0],[2469,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2447,0],[2447,4]],"newRange":[[2447,0],[2447,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2431,0],[2431,4]],"newRange":[[2431,0],[2431,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2404,0],[2404,2]],"newRange":[[2404,0],[2404,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2393,0],[2393,2]],"newRange":[[2393,0],[2393,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2387,0],[2387,2]],"newRange":[[2387,0],[2387,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2381,0],[2381,2]],"newRange":[[2381,0],[2381,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2375,0],[2375,2]],"newRange":[[2375,0],[2375,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2364,0],[2364,2]],"newRange":[[2364,0],[2364,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2358,0],[2358,2]],"newRange":[[2358,0],[2358,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2352,0],[2352,2]],"newRange":[[2352,0],[2352,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2346,0],[2346,2]],"newRange":[[2346,0],[2346,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2340,0],[2340,2]],"newRange":[[2340,0],[2340,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2334,0],[2334,2]],"newRange":[[2334,0],[2334,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2304,0],[2304,4]],"newRange":[[2304,0],[2304,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2297,0],[2297,4]],"newRange":[[2297,0],[2297,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2289,0],[2289,2]],"newRange":[[2289,0],[2289,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2283,0],[2283,2]],"newRange":[[2283,0],[2283,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2277,0],[2277,4]],"newRange":[[2277,0],[2277,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2271,0],[2271,2]],"newRange":[[2271,0],[2271,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2264,0],[2264,4]],"newRange":[[2264,0],[2264,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2256,0],[2256,4]],"newRange":[[2256,0],[2256,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2249,0],[2249,4]],"newRange":[[2249,0],[2249,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2243,0],[2243,4]],"newRange":[[2243,0],[2243,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2237,0],[2237,4]],"newRange":[[2237,0],[2237,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2231,0],[2231,4]],"newRange":[[2231,0],[2231,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2224,0],[2224,4]],"newRange":[[2224,0],[2224,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2218,0],[2218,4]],"newRange":[[2218,0],[2218,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2203,0],[2203,4]],"newRange":[[2203,0],[2203,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2196,0],[2196,4]],"newRange":[[2196,0],[2196,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2189,0],[2189,4]],"newRange":[[2189,0],[2189,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2182,0],[2182,4]],"newRange":[[2182,0],[2182,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2175,0],[2175,4]],"newRange":[[2175,0],[2175,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2168,0],[2168,4]],"newRange":[[2168,0],[2168,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2162,0],[2162,2]],"newRange":[[2162,0],[2162,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2156,0],[2156,2]],"newRange":[[2156,0],[2156,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2150,0],[2150,2]],"newRange":[[2150,0],[2150,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2144,0],[2144,2]],"newRange":[[2144,0],[2144,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2138,0],[2138,2]],"newRange":[[2138,0],[2138,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2118,0],[2118,2]],"newRange":[[2118,0],[2118,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2110,0],[2110,2]],"newRange":[[2110,0],[2110,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2102,0],[2102,2]],"newRange":[[2102,0],[2102,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2094,0],[2094,4]],"newRange":[[2094,0],[2094,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2086,0],[2086,4]],"newRange":[[2086,0],[2086,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2078,0],[2078,2]],"newRange":[[2078,0],[2078,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2070,0],[2070,2]],"newRange":[[2070,0],[2070,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2062,0],[2062,2]],"newRange":[[2062,0],[2062,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2054,0],[2054,4]],"newRange":[[2054,0],[2054,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[2048,0],[2048,2]],"newRange":[[2048,0],[2048,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2042,0],[2042,2]],"newRange":[[2042,0],[2042,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2036,0],[2036,2]],"newRange":[[2036,0],[2036,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[2001,0],[2001,2]],"newRange":[[2001,0],[2001,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1995,0],[1995,4]],"newRange":[[1995,0],[1995,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1989,0],[1989,4]],"newRange":[[1989,0],[1989,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1983,0],[1983,4]],"newRange":[[1983,0],[1983,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1977,0],[1977,2]],"newRange":[[1977,0],[1977,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1971,0],[1971,4]],"newRange":[[1971,0],[1971,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1965,0],[1965,4]],"newRange":[[1965,0],[1965,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1959,0],[1959,4]],"newRange":[[1959,0],[1959,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1953,0],[1953,4]],"newRange":[[1953,0],[1953,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1947,0],[1947,4]],"newRange":[[1947,0],[1947,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1941,0],[1941,4]],"newRange":[[1941,0],[1941,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1935,0],[1935,4]],"newRange":[[1935,0],[1935,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1929,0],[1929,4]],"newRange":[[1929,0],[1929,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1923,0],[1923,2]],"newRange":[[1923,0],[1923,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1917,0],[1917,4]],"newRange":[[1917,0],[1917,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1911,0],[1911,4]],"newRange":[[1911,0],[1911,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1905,0],[1905,2]],"newRange":[[1905,0],[1905,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1899,0],[1899,2]],"newRange":[[1899,0],[1899,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1893,0],[1893,2]],"newRange":[[1893,0],[1893,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1887,0],[1887,4]],"newRange":[[1887,0],[1887,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1881,0],[1881,4]],"newRange":[[1881,0],[1881,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1875,0],[1875,4]],"newRange":[[1875,0],[1875,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1869,0],[1869,2]],"newRange":[[1869,0],[1869,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1863,0],[1863,2]],"newRange":[[1863,0],[1863,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1857,0],[1857,2]],"newRange":[[1857,0],[1857,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1851,0],[1851,4]],"newRange":[[1851,0],[1851,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1845,0],[1845,4]],"newRange":[[1845,0],[1845,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1839,0],[1839,4]],"newRange":[[1839,0],[1839,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1833,0],[1833,4]],"newRange":[[1833,0],[1833,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1827,0],[1827,4]],"newRange":[[1827,0],[1827,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1821,0],[1821,4]],"newRange":[[1821,0],[1821,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1815,0],[1815,4]],"newRange":[[1815,0],[1815,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1809,0],[1809,4]],"newRange":[[1809,0],[1809,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1803,0],[1803,4]],"newRange":[[1803,0],[1803,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1797,0],[1797,4]],"newRange":[[1797,0],[1797,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1791,0],[1791,4]],"newRange":[[1791,0],[1791,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1784,0],[1784,4]],"newRange":[[1784,0],[1784,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1777,0],[1777,4]],"newRange":[[1777,0],[1777,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1770,0],[1770,4]],"newRange":[[1770,0],[1770,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1763,0],[1763,4]],"newRange":[[1763,0],[1763,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1756,0],[1756,4]],"newRange":[[1756,0],[1756,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1749,0],[1749,4]],"newRange":[[1749,0],[1749,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1742,0],[1742,4]],"newRange":[[1742,0],[1742,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1735,0],[1735,4]],"newRange":[[1735,0],[1735,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1728,0],[1728,2]],"newRange":[[1728,0],[1728,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1721,0],[1721,2]],"newRange":[[1721,0],[1721,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1714,0],[1714,2]],"newRange":[[1714,0],[1714,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1707,0],[1707,2]],"newRange":[[1707,0],[1707,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1700,0],[1700,2]],"newRange":[[1700,0],[1700,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1693,0],[1693,2]],"newRange":[[1693,0],[1693,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1686,0],[1686,2]],"newRange":[[1686,0],[1686,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1679,0],[1679,2]],"newRange":[[1679,0],[1679,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1672,0],[1672,2]],"newRange":[[1672,0],[1672,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1665,0],[1665,2]],"newRange":[[1665,0],[1665,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1658,0],[1658,2]],"newRange":[[1658,0],[1658,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1651,0],[1651,2]],"newRange":[[1651,0],[1651,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1644,0],[1644,2]],"newRange":[[1644,0],[1644,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1637,0],[1637,2]],"newRange":[[1637,0],[1637,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1630,0],[1630,2]],"newRange":[[1630,0],[1630,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1623,0],[1623,2]],"newRange":[[1623,0],[1623,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1616,0],[1616,2]],"newRange":[[1616,0],[1616,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1609,0],[1609,2]],"newRange":[[1609,0],[1609,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1602,0],[1602,2]],"newRange":[[1602,0],[1602,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1595,0],[1595,2]],"newRange":[[1595,0],[1595,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1588,0],[1588,4]],"newRange":[[1588,0],[1588,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1581,0],[1581,4]],"newRange":[[1581,0],[1581,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1567,0],[1567,4]],"newRange":[[1567,0],[1567,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1560,0],[1560,4]],"newRange":[[1560,0],[1560,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1551,0],[1551,4]],"newRange":[[1551,0],[1551,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1542,0],[1542,4]],"newRange":[[1542,0],[1542,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1533,0],[1533,4]],"newRange":[[1533,0],[1533,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1526,0],[1526,4]],"newRange":[[1526,0],[1526,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1520,0],[1520,4]],"newRange":[[1520,0],[1520,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1514,0],[1514,4]],"newRange":[[1514,0],[1514,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1508,0],[1508,4]],"newRange":[[1508,0],[1508,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1502,0],[1502,4]],"newRange":[[1502,0],[1502,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1496,0],[1496,4]],"newRange":[[1496,0],[1496,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1490,0],[1490,4]],"newRange":[[1490,0],[1490,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1482,0],[1482,4]],"newRange":[[1482,0],[1482,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1474,0],[1474,4]],"newRange":[[1474,0],[1474,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1466,0],[1466,4]],"newRange":[[1466,0],[1466,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1455,0],[1455,4]],"newRange":[[1455,0],[1455,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1443,0],[1443,4]],"newRange":[[1443,0],[1443,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1437,0],[1437,4]],"newRange":[[1437,0],[1437,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1425,0],[1425,4]],"newRange":[[1425,0],[1425,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1418,0],[1418,2]],"newRange":[[1418,0],[1418,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1411,0],[1411,2]],"newRange":[[1411,0],[1411,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1404,0],[1404,2]],"newRange":[[1404,0],[1404,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1397,0],[1397,2]],"newRange":[[1397,0],[1397,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1390,0],[1390,2]],"newRange":[[1390,0],[1390,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1383,0],[1383,2]],"newRange":[[1383,0],[1383,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1376,0],[1376,2]],"newRange":[[1376,0],[1376,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[1369,0],[1369,4]],"newRange":[[1369,0],[1369,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1362,0],[1362,4]],"newRange":[[1362,0],[1362,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1355,0],[1355,4]],"newRange":[[1355,0],[1355,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1348,0],[1348,4]],"newRange":[[1348,0],[1348,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1341,0],[1341,4]],"newRange":[[1341,0],[1341,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1309,0],[1309,4]],"newRange":[[1309,0],[1309,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1234,0],[1234,4]],"newRange":[[1234,0],[1234,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[1226,0],[1226,4]],"newRange":[[1226,0],[1226,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[922,0],[922,4]],"newRange":[[922,0],[922,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[911,0],[911,4]],"newRange":[[911,0],[911,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[900,0],[900,4]],"newRange":[[900,0],[900,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[889,0],[889,2]],"newRange":[[889,0],[889,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[878,0],[878,4]],"newRange":[[878,0],[878,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[866,0],[866,4]],"newRange":[[866,0],[866,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[843,0],[843,2]],"newRange":[[843,0],[843,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[831,0],[831,4]],"newRange":[[831,0],[831,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[819,0],[819,2]],"newRange":[[819,0],[819,0]],"oldText":"\t\t","newText":""}},{"type":"change","content":{"oldRange":[[794,0],[794,4]],"newRange":[[794,0],[794,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[783,0],[783,4]],"newRange":[[783,0],[783,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[771,0],[771,4]],"newRange":[[771,0],[771,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[750,0],[750,6]],"newRange":[[750,0],[750,0]],"oldText":"      ","newText":""}},{"type":"change","content":{"oldRange":[[736,0],[736,2]],"newRange":[[736,0],[736,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[720,0],[720,2]],"newRange":[[720,0],[720,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[710,0],[710,2]],"newRange":[[710,0],[710,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[700,0],[700,4]],"newRange":[[700,0],[700,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[690,0],[690,4]],"newRange":[[690,0],[690,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[653,0],[653,2]],"newRange":[[653,0],[653,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[642,0],[642,4]],"newRange":[[642,0],[642,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[631,0],[631,4]],"newRange":[[631,0],[631,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[592,0],[592,4]],"newRange":[[592,0],[592,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[581,0],[581,4]],"newRange":[[581,0],[581,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[573,0],[573,4]],"newRange":[[573,0],[573,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[565,0],[565,4]],"newRange":[[565,0],[565,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[558,0],[558,4]],"newRange":[[558,0],[558,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[551,0],[551,4]],"newRange":[[551,0],[551,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[544,0],[544,4]],"newRange":[[544,0],[544,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[525,0],[525,4]],"newRange":[[525,0],[525,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[514,0],[514,4]],"newRange":[[514,0],[514,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[503,0],[503,4]],"newRange":[[503,0],[503,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[481,0],[481,4]],"newRange":[[481,0],[481,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[471,0],[471,4]],"newRange":[[471,0],[471,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[448,0],[448,4]],"newRange":[[448,0],[448,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[441,0],[441,2]],"newRange":[[441,0],[441,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[434,0],[434,2]],"newRange":[[434,0],[434,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[427,0],[427,4]],"newRange":[[427,0],[427,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[420,0],[420,4]],"newRange":[[420,0],[420,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[413,0],[413,4]],"newRange":[[413,0],[413,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[406,0],[406,4]],"newRange":[[406,0],[406,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[399,0],[399,4]],"newRange":[[399,0],[399,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[393,0],[393,4]],"newRange":[[393,0],[393,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[386,0],[386,4]],"newRange":[[386,0],[386,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[379,0],[379,4]],"newRange":[[379,0],[379,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[373,0],[373,4]],"newRange":[[373,0],[373,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[366,0],[366,2]],"newRange":[[366,0],[366,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[359,0],[359,2]],"newRange":[[359,0],[359,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[352,0],[352,4]],"newRange":[[352,0],[352,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[338,0],[338,4]],"newRange":[[338,0],[338,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[329,0],[329,4]],"newRange":[[329,0],[329,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[322,0],[322,4]],"newRange":[[322,0],[322,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[315,0],[315,4]],"newRange":[[315,0],[315,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[308,0],[308,4]],"newRange":[[308,0],[308,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[301,0],[301,4]],"newRange":[[301,0],[301,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[289,0],[289,4]],"newRange":[[289,0],[289,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[284,0],[284,2]],"newRange":[[284,0],[284,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[279,0],[279,2]],"newRange":[[279,0],[279,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[274,0],[274,2]],"newRange":[[274,0],[274,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[269,0],[269,2]],"newRange":[[269,0],[269,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[264,0],[264,2]],"newRange":[[264,0],[264,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[259,0],[259,4]],"newRange":[[259,0],[259,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[253,0],[253,4]],"newRange":[[253,0],[253,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[247,0],[247,4]],"newRange":[[247,0],[247,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[241,0],[241,4]],"newRange":[[241,0],[241,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[235,0],[235,4]],"newRange":[[235,0],[235,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[223,0],[223,2]],"newRange":[[223,0],[223,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[209,0],[209,1]],"newRange":[[209,0],[209,0]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[202,0],[202,2]],"newRange":[[202,0],[202,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[195,0],[195,4]],"newRange":[[195,0],[195,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[168,0],[168,4]],"newRange":[[168,0],[168,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[156,0],[156,2]],"newRange":[[156,0],[156,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[144,0],[144,4]],"newRange":[[144,0],[144,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[138,0],[138,5]],"newRange":[[138,0],[138,0]],"oldText":"     ","newText":""}},{"type":"change","content":{"oldRange":[[133,0],[133,4]],"newRange":[[133,0],[133,0]],"oldText":"    ","newText":""}},{"type":"change","content":{"oldRange":[[128,0],[128,2]],"newRange":[[128,0],[128,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[125,0],[125,2]],"newRange":[[125,0],[125,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[120,0],[120,2]],"newRange":[[120,0],[120,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[115,0],[115,2]],"newRange":[[115,0],[115,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[108,0],[108,2]],"newRange":[[108,0],[108,0]],"oldText":"  ","newText":""}},{"type":"group-end","snapshot":{"2":{"2-0":{"range":[[91,18],[91,18]],"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":{"characterwise":{"head":{"row":50,"column":32},"tail":{"row":47,"column":0},"reversed":false}},"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/solver_structure.hpp","digestWhenLastPersisted":"e724929b20335a6d38752eef2475398d4348eabc","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file SU2_CFD.hpp\n * \\brief Headers of the main subroutines of the code SU2_CFD.\n *        The subroutines and functions are in the <i>SU2_CFD.cpp</i> file.\n * \\author F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#pragma once\n\n#include \"../../Common/include/mpi_structure.hpp\"\n\n#include <ctime>\n\n#include \"driver_structure.hpp\"\n#include \"solver_structure.hpp\"\n#include \"integration_structure.hpp\"\n#include \"output_structure.hpp\"\n#include \"numerics_structure.hpp\"\n#include \"../../Common/include/geometry_structure.hpp\"\n#include \"../../Common/include/grid_movement_structure.hpp\"\n#include \"../../Common/include/config_structure.hpp\"\n#include \"../../Common/include/interpolation_structure.hpp\"\n#include \"../include/definition_structure.hpp\"\n#include \"../include/iteration_structure.hpp\"\n#include \"../include/transfer_structure.hpp\"\n#include \"../include/braid_structure.hpp\"\n\nusing namespace std;\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":2,"id":"0","maintainHistory":false,"markersById":{"0-0":{"range":{"start":{"row":50,"column":0},"end":{"row":51,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1":{"range":{"start":{"row":50,"column":0},"end":{"row":50,"column":41}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":41,"column":30},"end":{"row":41,"column":30}},"properties":{"type":"selection","preserveFolds":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"nextMarkerId":0,"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/SU2_CFD.hpp","digestWhenLastPersisted":"dd214629f6b21289bffdce3d4d1b9f8e4bc43244","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file SU2_CFD.cpp\n * \\brief Main file of the Computational Fluid Dynamics code\n * \\author F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"../include/SU2_CFD.hpp\"\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n\n    std::cout<<\"HI\";\n\n  bool StopCalc = false;\n  su2double StartTime = 0.0, StopTime = 0.0, UsedTime = 0.0;\n  unsigned long ExtIter = 0;\n  unsigned short iMesh, iZone, nZone, nDim;\n  char config_file_name[MAX_STRING_SIZE];\n  char runtime_file_name[MAX_STRING_SIZE];\n  ofstream ConvHist_file;\n  int rank = MASTER_NODE;\n  int size = SINGLE_NODE;\n\n  /*--- MPI initialization, and buffer setting ---*/\n\n#ifdef HAVE_MPI\n  int *bptr, bl;\n  SU2_MPI::Init(&argc, &argv);\n  MPI_Buffer_attach( malloc(BUFSIZE), BUFSIZE );\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  MPI_Comm_size(MPI_COMM_WORLD, &size);\n#endif\n\n  /*--- Create pointers to all of the classes that may be used throughout\n   the SU2_CFD code. In general, the pointers are instantiated down a\n   heirarchy over all zones, multigrid levels, equation sets, and equation\n   terms as described in the comments below. ---*/\n\n  CDriver *driver                         = NULL;\n  CIteration **iteration_container        = NULL;\n  COutput *output                         = NULL;\n  CIntegration ***integration_container   = NULL; \n  CGeometry ***geometry_container         = NULL;\n  CSolver ****solver_container            = NULL;\n  CNumerics *****numerics_container       = NULL;\n  CConfig **config_container              = NULL;\n  CSurfaceMovement **surface_movement     = NULL;\n  CVolumetricMovement **grid_movement     = NULL;\n  CFreeFormDefBox*** FFDBox               = NULL;\n  CInterpolator ***interpolator_container = NULL;\n  CTransfer ***transfer_container         = NULL;\n\n  /*--- Load in the number of zones and spatial dimensions in the mesh file (If no config\n   file is specified, default.cfg is used) ---*/\n\n  if (argc == 2) { strcpy(config_file_name, argv[1]); }\n  else { strcpy(config_file_name, \"default.cfg\"); }\n\n  /*--- Read the name and format of the input mesh file to get from the mesh\n   file the number of zones and dimensions from the numerical grid (required\n   for variables allocation)  ---*/\n\n  CConfig *config = NULL;\n  config = new CConfig(config_file_name, SU2_CFD);\n\n  nZone = GetnZone(config->GetMesh_FileName(), config->GetMesh_FileFormat(), config);\n  nDim  = GetnDim(config->GetMesh_FileName(), config->GetMesh_FileFormat());\n\n  /*--- Definition and of the containers for all possible zones. ---*/\n\n  iteration_container    = new CIteration*[nZone];\n  solver_container       = new CSolver***[nZone];\n  integration_container  = new CIntegration**[nZone];\n  numerics_container     = new CNumerics****[nZone];\n  config_container       = new CConfig*[nZone];\n  geometry_container     = new CGeometry**[nZone];\n  surface_movement       = new CSurfaceMovement*[nZone];\n  grid_movement          = new CVolumetricMovement*[nZone];\n  FFDBox                 = new CFreeFormDefBox**[nZone];\n  interpolator_container = new CInterpolator**[nZone];\n  transfer_container     = new CTransfer**[nZone];\n\n  for (iZone = 0; iZone < nZone; iZone++) {\n    solver_container[iZone]       = NULL;\n    integration_container[iZone]  = NULL;\n    numerics_container[iZone]     = NULL;\n    config_container[iZone]       = NULL;\n    geometry_container[iZone]     = NULL;\n    surface_movement[iZone]       = NULL;\n    grid_movement[iZone]          = NULL;\n    FFDBox[iZone]                 = NULL;\n    interpolator_container[iZone] = NULL;\n    transfer_container[iZone]     = NULL;\n  }\n\n  /*--- Loop over all zones to initialize the various classes. In most\n   cases, nZone is equal to one. This represents the solution of a partial\n   differential equation on a single block, unstructured mesh. ---*/\n\n  for (iZone = 0; iZone < nZone; iZone++) {\n\n    /*--- Definition of the configuration option class for all zones. In this\n     constructor, the input configuration file is parsed and all options are\n     read and stored. ---*/\n\n    config_container[iZone] = new CConfig(config_file_name, SU2_CFD, iZone, nZone, nDim, VERB_HIGH);\n\n    /*--- Definition of the geometry class to store the primal grid in the\n     partitioning process. ---*/\n\n    CGeometry *geometry_aux = NULL;\n\n    /*--- All ranks process the grid and call ParMETIS for partitioning ---*/\n\n    geometry_aux = new CPhysicalGeometry(config_container[iZone], iZone, nZone);\n\n    /*--- Color the initial grid and set the send-receive domains (ParMETIS) ---*/\n\n    geometry_aux->SetColorGrid_Parallel(config_container[iZone]);\n\n    /*--- Allocate the memory of the current domain, and divide the grid\n     between the ranks. ---*/\n\n    geometry_container[iZone] = new CGeometry *[config_container[iZone]->GetnMGLevels()+1];\n    geometry_container[iZone][MESH_0] = new CPhysicalGeometry(geometry_aux, config_container[iZone], 1);\n\n    /*--- Deallocate the memory of geometry_aux ---*/\n\n    delete geometry_aux;\n\n    /*--- Add the Send/Receive boundaries ---*/\n\n    geometry_container[iZone][MESH_0]->SetSendReceive(config_container[iZone]);\n\n    /*--- Add the Send/Receive boundaries ---*/\n\n    geometry_container[iZone][MESH_0]->SetBoundaries(config_container[iZone]);\n\n  }\n\n  if (rank == MASTER_NODE)\n    cout << endl <<\"------------------------- Geometry Preprocessing ------------------------\" << endl;\n\n  /*--- Preprocessing of the geometry for all zones. In this routine, the edge-\n   based data structure is constructed, i.e. node and cell neighbors are\n   identified and linked, face areas and volumes of the dual mesh cells are\n   computed, and the multigrid levels are created using an agglomeration procedure. ---*/\n\n  Geometrical_Preprocessing(geometry_container, config_container, nZone);\n\n  for (iZone = 0; iZone < nZone; iZone++) {\n\n    /*--- Computation of wall distances for turbulence modeling ---*/\n\n    if (rank == MASTER_NODE)\n      cout << \"Computing wall distances.\" << endl;\n\n    if ((config_container[iZone]->GetKind_Solver() == RANS) ||\n        (config_container[iZone]->GetKind_Solver() == ADJ_RANS) ||\n        (config_container[iZone]->GetKind_Solver() == DISC_ADJ_RANS))\n      geometry_container[iZone][MESH_0]->ComputeWall_Distance(config_container[iZone]);\n\n    /*--- Computation of positive surface area in the z-plane which is used for\n     the calculation of force coefficient (non-dimensionalization). ---*/\n\n    geometry_container[iZone][MESH_0]->SetPositive_ZArea(config_container[iZone]);\n\n    /*--- Set the near-field, interface and actuator disk boundary conditions, if necessary. ---*/\n\n    for (iMesh = 0; iMesh <= config_container[iZone]->GetnMGLevels(); iMesh++) {\n      geometry_container[iZone][iMesh]->MatchNearField(config_container[iZone]);\n      geometry_container[iZone][iMesh]->MatchInterface(config_container[iZone]);\n      geometry_container[iZone][iMesh]->MatchActuator_Disk(config_container[iZone]);\n    }\n\n  }\n\n  /*--- If activated by the compile directive, perform a partition analysis. ---*/\n#if PARTITION\n  Partition_Analysis(geometry_container[ZONE_0][MESH_0], config_container[ZONE_0]);\n#endif\n\n  if (rank == MASTER_NODE)\n    cout << endl <<\"------------------------- Driver Preprocessing --------------------------\" << endl;\n\n  /*--- First, given the basic information about the number of zones and the\n   solver types from the config, instantiate the appropriate driver for the problem. ---*/\n\n  Driver_Preprocessing(&driver, iteration_container, solver_container,\n                       geometry_container, integration_container, numerics_container,\n                       interpolator_container, transfer_container, config_container, nZone, nDim);\n\n\n  /*--- Instantiate the geometry movement classes for the solution of unsteady\n   flows on dynamic meshes, including rigid mesh transformations, dynamically\n   deforming meshes, and time-spectral preprocessing. ---*/\n\n  for (iZone = 0; iZone < nZone; iZone++) {\n\n    if (config_container[iZone]->GetGrid_Movement() ||\n        (config_container[iZone]->GetDirectDiff() == D_DESIGN)) {\n      if (rank == MASTER_NODE)\n        cout << \"Setting dynamic mesh structure.\" << endl;\n      grid_movement[iZone] = new CVolumetricMovement(geometry_container[iZone][MESH_0], config_container[iZone]);\n      FFDBox[iZone] = new CFreeFormDefBox*[MAX_NUMBER_FFD];\n      surface_movement[iZone] = new CSurfaceMovement();\n      surface_movement[iZone]->CopyBoundary(geometry_container[iZone][MESH_0], config_container[iZone]);\n      if (config_container[iZone]->GetUnsteady_Simulation() == TIME_SPECTRAL)\n        SetGrid_Movement(geometry_container[iZone], surface_movement[iZone], grid_movement[iZone],\n                         FFDBox[iZone], solver_container[iZone], config_container[iZone], iZone, 0, 0);\n    }\n\n    if (config_container[iZone]->GetDirectDiff() == D_DESIGN){\n      if (rank == MASTER_NODE)\n        cout << \"Setting surface/volume derivatives.\" << endl;\n\n      /*--- Set the surface derivatives, i.e. the derivative of the surface mesh nodes with respect to the design variables ---*/\n\n      surface_movement[iZone]->SetSurface_Derivative(geometry_container[iZone][MESH_0],config_container[iZone]);\n\n      /*--- Call the volume deformation routine with derivative mode enabled.\n       This computes the derivative of the volume mesh with respect to the surface nodes ---*/\n\n      grid_movement[iZone]->SetVolume_Deformation(geometry_container[iZone][MESH_0],config_container[iZone], true, true);\n\n      /*--- Update the multi-grid structure to propagate the derivative information to the coarser levels ---*/\n\n      geometry_container[iZone][MESH_0]->UpdateGeometry(geometry_container[iZone],config_container[iZone]);\n\n      /*--- Set the derivative of the wall-distance with respect to the surface nodes ---*/\n\n      if ( (config_container[iZone]->GetKind_Solver() == RANS) ||\n          (config_container[iZone]->GetKind_Solver() == ADJ_RANS) ||\n          (config_container[iZone]->GetKind_Solver() == DISC_ADJ_RANS))\n        geometry_container[iZone][MESH_0]->ComputeWall_Distance(config_container[iZone]);\n    }\n\n\n  }\n\n  /*--- Coupling between zones (limited to two zones at the moment) ---*/\n\n  bool fsi = config_container[ZONE_0]->GetFSI_Simulation();\n\n  if ((nZone == 2) && !(fsi)) {\n    if (rank == MASTER_NODE)\n      cout << endl <<\"--------------------- Setting Coupling Between Zones --------------------\" << endl;\n    geometry_container[ZONE_0][MESH_0]->MatchZone(config_container[ZONE_0], geometry_container[ZONE_1][MESH_0],\n                                                  config_container[ZONE_1], ZONE_0, nZone);\n    geometry_container[ZONE_1][MESH_0]->MatchZone(config_container[ZONE_1], geometry_container[ZONE_0][MESH_0],\n                                                  config_container[ZONE_0], ZONE_1, nZone);\n  }\n\n  /*--- Definition of the output class (one for all zones). The output class\n   manages the writing of all restart, volume solution, surface solution,\n   surface comma-separated value, and convergence history files (both in serial\n   and in parallel). ---*/\n\n  output = new COutput();\n\n  /*--- Open the convergence history file ---*/\n\n  if (rank == MASTER_NODE)\n    output->SetConvHistory_Header(&ConvHist_file, config_container[ZONE_0]);\n\n  /*--- Check for an unsteady restart. Update ExtIter if necessary. ---*/\n  if (config_container[ZONE_0]->GetWrt_Unsteady() && config_container[ZONE_0]->GetRestart())\n    ExtIter = config_container[ZONE_0]->GetUnst_RestartIter();\n\n  /*--- Check for a dynamic restart (structural analysis). Update ExtIter if necessary. ---*/\n  if (config_container[ZONE_0]->GetKind_Solver() == FEM_ELASTICITY\n\t\t  && config_container[ZONE_0]->GetWrt_Dynamic() && config_container[ZONE_0]->GetRestart())\n\t  \t  ExtIter = config_container[ZONE_0]->GetDyn_RestartIter();\n\n  /*--- Initiate value at each interface for the mixing plane ---*/\n  if(config_container[ZONE_0]->GetBoolMixingPlane())\n  \tfor (iZone = 0; iZone < nZone; iZone++)\n  \t  iteration_container[iZone]->Preprocess(output, integration_container, geometry_container, solver_container, numerics_container, config_container, surface_movement, grid_movement, FFDBox, iZone);\n\n  /*--- Main external loop of the solver. Within this loop, each iteration ---*/\n\n  if (rank == MASTER_NODE)\n    cout << endl <<\"------------------------------ Begin Solver -----------------------------\" << endl;\n\n  /*--- Set up a timer for performance benchmarking (preprocessing time is not included) ---*/\n\n#ifndef HAVE_MPI\n  StartTime = su2double(clock())/su2double(CLOCKS_PER_SEC);\n#else\n  StartTime = MPI_Wtime();\n#endif\n\n  /*--- This is temporal and just to check. It will have to be added to the regular history file ---*/\n\n  ofstream historyFile_FSI;\n  bool writeHistFSI = config_container[ZONE_0]->GetWrite_Conv_FSI();\n  if (writeHistFSI && (rank == MASTER_NODE)){\n    char cstrFSI[200];\n    string filenameHistFSI = config_container[ZONE_0]->GetConv_FileName_FSI();\n    strcpy (cstrFSI, filenameHistFSI.data());\n    historyFile_FSI.open (cstrFSI);\n    historyFile_FSI << \"Time,Iteration,Aitken,URes,logResidual,orderMagnResidual\" << endl;\n    historyFile_FSI.close();\n  }\n\n//\n// TIME LOOP STARTS HERE\n//\n  while (ExtIter < config_container[ZONE_0]->GetnExtIter()) {\n\n    /*--- Set the value of the external iteration. ---*/\n\tfor (iZone = 0; iZone < nZone; iZone++) config_container[iZone]->SetExtIter(ExtIter);\n\n\n    /*--- Read the target pressure ---*/\n\n    if (config_container[ZONE_0]->GetInvDesign_Cp() == YES)\n      output->SetCp_InverseDesign(solver_container[ZONE_0][MESH_0][FLOW_SOL],\n                                  geometry_container[ZONE_0][MESH_0], config_container[ZONE_0], ExtIter);\n\n    /*--- Read the target heat flux ---*/\n\n    if (config_container[ZONE_0]->GetInvDesign_HeatFlux() == YES)\n      output->SetHeat_InverseDesign(solver_container[ZONE_0][MESH_0][FLOW_SOL],\n                                    geometry_container[ZONE_0][MESH_0], config_container[ZONE_0], ExtIter);\n\n    /*--- Perform a single iteration of the chosen PDE solver. ---*/\n\n      /*--- Run a single iteration of the problem using the driver class. ---*/\n\n      driver->Run(iteration_container, output, integration_container,\n                  geometry_container, solver_container, numerics_container,\n                  config_container, surface_movement, grid_movement, FFDBox,\n                  interpolator_container, transfer_container);\n\n\n    /*--- Synchronization point after a single solver iteration. Compute the\n     wall clock time required. ---*/\n\n#ifndef HAVE_MPI\n    StopTime = su2double(clock())/su2double(CLOCKS_PER_SEC);\n#else\n    StopTime = MPI_Wtime();\n#endif\n\n    UsedTime = (StopTime - StartTime);\n\n    /*--- For specific applications, evaluate and plot the equivalent area. ---*/\n\n    if (config_container[ZONE_0]->GetEquivArea() == YES) {\n      output->SetEquivalentArea(solver_container[ZONE_0][MESH_0][FLOW_SOL],\n                                geometry_container[ZONE_0][MESH_0], config_container[ZONE_0], ExtIter);\n    }\n\n    /*--- Check if there is any change in the runtime parameters ---*/\n\n    CConfig *runtime = NULL;\n    strcpy(runtime_file_name, \"runtime.dat\");\n    runtime = new CConfig(runtime_file_name, config_container[ZONE_0]);\n    runtime->SetExtIter(ExtIter);\n\n\t/*--- Update the convergence history file (serial and parallel computations). ---*/\n\n\tif (!fsi){\n\t\toutput->SetConvHistory_Body(&ConvHist_file, geometry_container, solver_container,\n\t\t\t\tconfig_container, integration_container, false, UsedTime, ZONE_0);\n\n\t}\n\n\n    /*--- Evaluate the new CFL number (adaptive). ---*/\n\n    if (config_container[ZONE_0]->GetCFL_Adapt() == YES) {\n      output->SetCFL_Number(solver_container, config_container, ZONE_0);\n    }\n\n    /*--- Check whether the current simulation has reached the specified\n     convergence criteria, and set StopCalc to true, if so. ---*/\n\n    switch (config_container[ZONE_0]->GetKind_Solver()) {\n      case EULER: case NAVIER_STOKES: case RANS:\n        StopCalc = integration_container[ZONE_0][FLOW_SOL]->GetConvergence(); break;\n      case WAVE_EQUATION:\n        StopCalc = integration_container[ZONE_0][WAVE_SOL]->GetConvergence(); break;\n      case HEAT_EQUATION:\n        StopCalc = integration_container[ZONE_0][HEAT_SOL]->GetConvergence(); break;\n      case LINEAR_ELASTICITY:\n        // This is a temporal fix, while we code the non-linear solver\n        //\t        StopCalc = integration_container[ZONE_0][FEA_SOL]->GetConvergence(); break;\n        StopCalc = false; break;\n\t  case FEM_ELASTICITY:\n\t    StopCalc = integration_container[ZONE_0][FEA_SOL]->GetConvergence(); break;\n      case ADJ_EULER: case ADJ_NAVIER_STOKES: case ADJ_RANS:\n      case DISC_ADJ_EULER: case DISC_ADJ_NAVIER_STOKES: case DISC_ADJ_RANS:\n        StopCalc = integration_container[ZONE_0][ADJFLOW_SOL]->GetConvergence(); break;\n    }\n\n\t\t/*--- Solution output. Determine whether a solution needs to be written\n\t\t after the current iteration, and if so, execute the output file writing\n\t\t routines. ---*/\n\n\t\tif ((ExtIter+1 >= config_container[ZONE_0]->GetnExtIter())\n\n\t\t\t\t||\n\n\t\t\t\t((ExtIter % config_container[ZONE_0]->GetWrt_Sol_Freq() == 0) && (ExtIter != 0) &&\n\t\t\t\t !((config_container[ZONE_0]->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n\t\t\t\t\t (config_container[ZONE_0]->GetUnsteady_Simulation() == DT_STEPPING_2ND) ||\n\t\t\t\t\t (config_container[ZONE_0]->GetUnsteady_Simulation() == TIME_STEPPING)))\n\n\t\t\t\t||\n\n\t\t\t\t(StopCalc)\n\n\t\t\t\t||\n\n\t\t\t\t(((config_container[ZONE_0]->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n\t\t\t\t (config_container[ZONE_0]->GetUnsteady_Simulation() == TIME_STEPPING)) &&\n\t\t\t\t ((ExtIter == 0) || (ExtIter % config_container[ZONE_0]->GetWrt_Sol_Freq_DualTime() == 0)))\n\n\t\t\t\t||\n\n\t\t\t\t((config_container[ZONE_0]->GetUnsteady_Simulation() == DT_STEPPING_2ND) && (!fsi) &&\n\t\t\t\t ((ExtIter == 0) || ((ExtIter % config_container[ZONE_0]->GetWrt_Sol_Freq_DualTime() == 0) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t ((ExtIter-1) % config_container[ZONE_0]->GetWrt_Sol_Freq_DualTime() == 0))))\n\n\t\t\t\t||\n\n\t\t\t\t((config_container[ZONE_0]->GetUnsteady_Simulation() == DT_STEPPING_2ND) && (fsi) &&\n\t\t\t\t ((ExtIter == 0) || ((ExtIter % config_container[ZONE_0]->GetWrt_Sol_Freq_DualTime() == 0))))\n\n\t\t\t\t||\n\n\t\t\t\t(((config_container[ZONE_0]->GetDynamic_Analysis() == DYNAMIC) &&\n\t\t\t\t\t\t ((ExtIter == 0) || (ExtIter % config_container[ZONE_0]->GetWrt_Sol_Freq_DualTime() == 0))))){\n\n\n          /*--- Low-fidelity simulations (using a coarser multigrid level\n           approximation to the solution) require an interpolation back to the\n           finest grid. ---*/\n\n          if (config_container[ZONE_0]->GetLowFidelitySim()) {\n            integration_container[ZONE_0][FLOW_SOL]->SetProlongated_Solution(RUNTIME_FLOW_SYS, solver_container[ZONE_0][MESH_0][FLOW_SOL], solver_container[ZONE_0][MESH_1][FLOW_SOL], geometry_container[ZONE_0][MESH_0], geometry_container[ZONE_0][MESH_1], config_container[ZONE_0]);\n            integration_container[ZONE_0][FLOW_SOL]->Smooth_Solution(RUNTIME_FLOW_SYS, solver_container[ZONE_0][MESH_0][FLOW_SOL], geometry_container[ZONE_0][MESH_0], 3, 1.25, config_container[ZONE_0]);\n            solver_container[ZONE_0][MESH_0][config_container[ZONE_0]->GetContainerPosition(RUNTIME_FLOW_SYS)]->Set_MPI_Solution(geometry_container[ZONE_0][MESH_0], config_container[ZONE_0]);\n            solver_container[ZONE_0][MESH_0][config_container[ZONE_0]->GetContainerPosition(RUNTIME_FLOW_SYS)]->Preprocessing(geometry_container[ZONE_0][MESH_0], solver_container[ZONE_0][MESH_0], config_container[ZONE_0], MESH_0, 0, RUNTIME_FLOW_SYS, true);\n          }\n\n\n          if (rank == MASTER_NODE) cout << endl << \"-------------------------- File Output Summary --------------------------\";\n\n          /*--- Execute the routine for writing restart, volume solution,\n           surface solution, and surface comma-separated value files. ---*/\n\n          output->SetResult_Files(solver_container, geometry_container, config_container, ExtIter, nZone);\n\n          /*--- Output a file with the forces breakdown. ---*/\n\n          output->SetForces_Breakdown(geometry_container, solver_container,\n                                      config_container, integration_container, ZONE_0);\n\n          /*--- Compute the forces at different sections. ---*/\n\n          if (config_container[ZONE_0]->GetPlot_Section_Forces()) {\n            output->SetForceSections(solver_container[ZONE_0][MESH_0][FLOW_SOL],\n                                     geometry_container[ZONE_0][MESH_0], config_container[ZONE_0], ExtIter);\n          }\n\n          if (rank == MASTER_NODE) cout << \"-------------------------------------------------------------------------\" << endl << endl;\n\n        }\n\n    /*--- If the convergence criteria has been met, terminate the simulation. ---*/\n\n    if (StopCalc) break;\n\n    ExtIter++;\n\n  }\n\n  /*--- Output some information to the console. ---*/\n\n  if (rank == MASTER_NODE) {\n\n    /*--- Print out the number of non-physical points and reconstructions ---*/\n\n    if (config_container[ZONE_0]->GetNonphysical_Points() > 0)\n      cout << \"Warning: there are \" << config_container[ZONE_0]->GetNonphysical_Points() << \" non-physical points in the solution.\" << endl;\n    if (config_container[ZONE_0]->GetNonphysical_Reconstr() > 0)\n      cout << \"Warning: \" << config_container[ZONE_0]->GetNonphysical_Reconstr() << \" reconstructed states for upwinding are non-physical.\" << endl;\n\n    /*--- Close the convergence history file. ---*/\n\n    ConvHist_file.close();\n    cout << \"History file, closed.\" << endl;\n  }\n\n  //  /*--- Deallocate config container ---*/\n  //\n  //  for (iZone = 0; iZone < nZone; iZone++) {\n  //    if (config_container[iZone] != NULL) {\n  //      delete config_container[iZone];\n  //    }\n  //  }\n  //  if (config_container != NULL) delete[] config_container;\n\n\n  /*--- Synchronization point after a single solver iteration. Compute the\n   wall clock time required. ---*/\n\n#ifndef HAVE_MPI\n  StopTime = su2double(clock())/su2double(CLOCKS_PER_SEC);\n#else\n  StopTime = MPI_Wtime();\n#endif\n\n  /*--- Compute/print the total time for performance benchmarking. ---*/\n\n  UsedTime = StopTime-StartTime;\n  if (rank == MASTER_NODE) {\n    cout << \"\\nCompleted in \" << fixed << UsedTime << \" seconds on \"<< size;\n    if (size == 1) cout << \" core.\" << endl; else cout << \" cores.\" << endl;\n  }\n\n  /*--- Exit the solver cleanly ---*/\n\n  if (rank == MASTER_NODE)\n    cout << endl <<\"------------------------- Exit Success (SU2_CFD) ------------------------\" << endl << endl;\n\n#ifdef HAVE_MPI\n  /*--- Finalize MPI parallelization ---*/\n  MPI_Buffer_detach(&bptr, &bl);\n  MPI_Finalize();\n#endif\n\n  return EXIT_SUCCESS;\n\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":237,"id":"0","maintainHistory":false,"markersById":{"0-120":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-121":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-141":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-142":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-217":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-218":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-219":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-220":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-225":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-226":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-227":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-228":{"range":{"start":{"row":564,"column":0},"end":{"row":564,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-233":{"range":{"start":{"row":37,"column":0},"end":{"row":39,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-234":{"range":{"start":{"row":67,"column":0},"end":{"row":68,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-235":{"range":{"start":{"row":37,"column":0},"end":{"row":38,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-236":{"range":{"start":{"row":67,"column":0},"end":{"row":67,"column":50}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":369,"column":0},"end":{"row":369,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true,"vim-mode-plus":{"characterwise":{"head":{"row":369,"column":0},"tail":{"row":368,"column":0},"reversed":false}},"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":160,"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"nextMarkerId":14,"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":16,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/SU2_CFD.cpp","digestWhenLastPersisted":"c536d945a6d6314aeb773c5a0d47729dea5e20b3","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file variable_structure.cpp\n * \\brief Definition of the solution fields.\n * \\author F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"../include/variable_structure.hpp\"\n\nunsigned short CVariable::nDim = 0;\n\nCVariable::CVariable(void) {\n\n  /*--- Array initialization ---*/\n  Solution = NULL;\n\tSolution_Old = NULL; \n\tSolution_time_n = NULL;\n\tSolution_time_n1 = NULL;\n\tGradient = NULL;\n\tLimiter = NULL;\n\tSolution_Max = NULL;\n\tSolution_Min = NULL;\n\tGrad_AuxVar = NULL;\n\tUndivided_Laplacian = NULL;\n\tRes_TruncError = NULL;\n  Residual_Old = NULL;\n\tResidual_Sum = NULL;\n\n}\n\nCVariable::CVariable(unsigned short val_nvar, CConfig *config) {\n\n  /*--- Array initialization ---*/\n  Solution = NULL;\n\tSolution_Old = NULL;\n\tSolution_time_n = NULL;\n\tSolution_time_n1 = NULL;\n\tGradient = NULL;\n\tLimiter = NULL;\n\tSolution_Max = NULL;\n\tSolution_Min = NULL;\n\tGrad_AuxVar = NULL;\n\tUndivided_Laplacian = NULL;\n\tRes_TruncError = NULL;\n  Residual_Old = NULL;\n\tResidual_Sum = NULL;\n\n  /*--- Initialize the number of solution variables. This version\n   of the constructor will be used primarily for converting the\n   restart files into solution files (SU2_SOL). ---*/\n\tnVar = val_nvar;\n\n\t/*--- Allocate the solution array - here it is also possible\n\t to allocate some extra flow variables that do not participate\n\t in the simulation ---*/\n\tSolution = new su2double [nVar];\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution[iVar] = 0.0;\n\n}\n\nCVariable::CVariable(unsigned short val_nDim, unsigned short val_nvar, CConfig *config) {\n\n\tunsigned short iVar, iDim;\n\n  /*--- Array initialization ---*/\n  Solution = NULL;\n\tSolution_Old = NULL;\n\tSolution_time_n = NULL;\n\tSolution_time_n1 = NULL;\n\tGradient = NULL;\n\tLimiter = NULL;\n\tSolution_Max = NULL;\n\tSolution_Min = NULL;\n\tGrad_AuxVar = NULL;\n\tUndivided_Laplacian = NULL;\n\tRes_TruncError = NULL;\n  Residual_Old = NULL;\n\tResidual_Sum = NULL;\n\n\t/*--- Initializate the number of dimension and number of variables ---*/\n\tnDim = val_nDim;\n\tnVar = val_nvar;\n\n\t/*--- Allocate solution, solution old, residual and gradient\n\t which is common for all the problems, here it is also possible\n\t to allocate some extra flow variables that do not participate\n\t in the simulation ---*/\n\tSolution = new su2double [nVar];\n\n\tfor (iVar = 0; iVar < nVar; iVar++)\n\t\tSolution[iVar] = 0.0;\n\n\tSolution_Old = new su2double [nVar];\n\n\tGradient = new su2double* [nVar];\n\tfor (iVar = 0; iVar < nVar; iVar++) {\n\t\tGradient[iVar] = new su2double [nDim];\n\t\tfor (iDim = 0; iDim < nDim; iDim ++)\n\t\t\tGradient[iVar][iDim] = 0.0;\n\t}\n\n\tif (config->GetUnsteady_Simulation() != NO) {\n\t\tSolution_time_n = new su2double [nVar];\n\t\tSolution_time_n1 = new su2double [nVar];\n\t}\n\n}\n\nCVariable::~CVariable(void) {\n\tunsigned short iVar;\n\n  if (Solution            != NULL) delete [] Solution;\n\tif (Solution_Old        != NULL) delete [] Solution_Old;\n\tif (Solution_time_n     != NULL) delete [] Solution_time_n;\n\tif (Solution_time_n1    != NULL) delete [] Solution_time_n1;\n\tif (Limiter             != NULL) delete [] Limiter;\n\tif (Solution_Max        != NULL) delete [] Solution_Max;\n\tif (Solution_Min        != NULL) delete [] Solution_Min;\n\tif (Grad_AuxVar         != NULL) delete [] Grad_AuxVar;\n\tif (Undivided_Laplacian != NULL) delete [] Undivided_Laplacian;\n\tif (Res_TruncError      != NULL) delete [] Res_TruncError;\n\tif (Residual_Old        != NULL) delete [] Residual_Old;\n\tif (Residual_Sum        != NULL) delete [] Residual_Sum;\n\n  if (Gradient != NULL) {\n    for (iVar = 0; iVar < nVar; iVar++)\n      delete Gradient[iVar];\n    delete [] Gradient;\n  }\n\n}\n\nvoid CVariable::AddUnd_Lapl(su2double *val_und_lapl) {\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tUndivided_Laplacian[iVar] += val_und_lapl[iVar];\n}\n\nvoid CVariable::SubtractUnd_Lapl(su2double *val_und_lapl) {\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tUndivided_Laplacian[iVar] -= val_und_lapl[iVar];\n}\n\nvoid CVariable::SubtractUnd_Lapl(unsigned short val_var, su2double val_und_lapl) {\n\tUndivided_Laplacian[val_var] -= val_und_lapl;\n}\n\nvoid CVariable::SetUnd_LaplZero(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tUndivided_Laplacian[iVar] = 0.0;\n\n}\n\nvoid CVariable::SetUnd_Lapl(unsigned short val_var, su2double val_und_lapl) {\n\n\t\tUndivided_Laplacian[val_var] = val_und_lapl;\n\n}\n\nvoid CVariable::SetSolution(su2double *val_solution) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution[iVar] = val_solution[iVar];\n\n}\n\nvoid CVariable::Set_OldSolution(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution_Old[iVar] = Solution[iVar];\n\n}\n\nvoid CVariable::AddSolution(unsigned short val_var, su2double val_solution) {\n\n  Solution[val_var] = Solution_Old[val_var] + val_solution;\n\n}\n\nvoid CVariable::AddClippedSolution(unsigned short val_var, su2double val_solution,\n                                   su2double lowerlimit, su2double upperlimit) {\n\n\tSolution[val_var] = min(max((Solution_Old[val_var] + val_solution), lowerlimit), upperlimit);\n\n}\n\nvoid CVariable::AddConservativeSolution(unsigned short val_var, su2double val_solution,\n\t\tsu2double val_density, su2double val_density_old, su2double lowerlimit, su2double upperlimit) {\n\n\tSolution[val_var] = min(max((Solution_Old[val_var]*val_density_old + val_solution)/val_density,\n\t\t\tlowerlimit), upperlimit);\n\n}\n\nvoid CVariable::Set_Solution(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\t Solution[iVar] = Solution_Old[iVar];\n\n}\n\nvoid CVariable::Set_Solution_time_n(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution_time_n[iVar] = Solution[iVar];\n\n}\n\nvoid CVariable::Set_Solution_time_n1(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution_time_n1[iVar] = Solution_time_n[iVar];\n\n}\n\nvoid CVariable::Set_Solution_time_n(su2double *val_sol) {\n\n  for (unsigned short iVar = 0; iVar < nVar; iVar++)\n    Solution_time_n[iVar] = val_sol[iVar];\n\n}\n\nvoid CVariable::Set_Solution_time_n1(su2double *val_sol) {\n\n  for (unsigned short iVar = 0; iVar < nVar; iVar++)\n    Solution_time_n1[iVar] = val_sol[iVar];\n\n}\n\nvoid CVariable::AddRes_TruncError(su2double *val_truncation_error) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tRes_TruncError[iVar] += val_truncation_error[iVar];\n\n}\n\nvoid CVariable::SubtractRes_TruncError(su2double *val_truncation_error) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tRes_TruncError[iVar] -= val_truncation_error[iVar];\n\n}\n\nvoid CVariable::SetResidual_Old(su2double *val_residual_old) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tResidual_Old[iVar] = val_residual_old[iVar];\n\n}\n\nvoid CVariable::SetSolution_Old(su2double *val_solution_old) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution_Old[iVar] = val_solution_old[iVar];\n\n}\n\nvoid CVariable::SetSolution_time_n(su2double *val_solution_time_n) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution_time_n[iVar] = val_solution_time_n[iVar];\n\n}\n\nvoid CVariable::AddResidual_Sum(su2double *val_residual) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tResidual_Sum[iVar] += val_residual[iVar];\n\n}\n\nvoid CVariable::SetVel_ResTruncError_Zero(void) {\n\n\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tRes_TruncError[iDim+1] = 0.0;\n\n}\n\nvoid CVariable::SetEnergy_ResTruncError_Zero(void) {\n\n  Res_TruncError[nDim+1] = 0.0;\n\n}\n\nvoid CVariable::SetVelSolutionZero(void) {\n\n\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tSolution[iDim+1] = 0.0;\n\n}\n\nvoid CVariable::SetVelSolutionVector(su2double *val_vector) {\n\n\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tSolution[iDim+1] = val_vector[iDim];\n\n}\n\nvoid CVariable::SetVelSolutionOldZero(void) {\n\n\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tSolution_Old[iDim+1] = 0.0;\n\n}\n\nvoid CVariable::SetVelSolutionOldVector(su2double *val_vector) {\n\n\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tSolution_Old[iDim+1] = val_vector[iDim];\n\n}\n\nvoid CVariable::SetSolutionZero(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution[iVar] = 0.0;\n\n}\n\nvoid CVariable::SetSolutionZero(unsigned short val_var) {\n\n\t\tSolution[val_var] = 0.0;\n\n}\n\nvoid CVariable::SetResidualSumZero(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tResidual_Sum[iVar] = 0.0;\n\n}\n\nvoid CVariable::SetGradientZero(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tGradient[iVar][iDim] = 0.0;\n\n}\n\nvoid CVariable::SetAuxVarGradientZero(void) {\n\n\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tGrad_AuxVar[iDim] = 0.0;\n\n}\n\nvoid CVariable::SetGradient(su2double **val_gradient) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tfor (unsigned short iDim = 0; iDim < nDim; iDim++)\n\t\tGradient[iVar][iDim] = val_gradient[iVar][iDim];\n\n}\n\nvoid CVariable::SetRes_TruncErrorZero(void) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tRes_TruncError[iVar] = 0.0;\n\n}\n\nvoid CVariable::SetVal_ResTruncError_Zero(unsigned short val_var) {\n\n\t\tRes_TruncError[val_var] = 0.0;\n\n}\n\nvoid CVariable::GetResidual_Sum(su2double *val_residual) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tval_residual[iVar] = Residual_Sum[iVar];\n\n}\n\nvoid CVariable::GetResTruncError(su2double *val_trunc_error) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tval_trunc_error[iVar] = Res_TruncError[iVar];\n\n}\n\nCBaselineVariable::CBaselineVariable(void) : CVariable() { }\n\nCBaselineVariable::CBaselineVariable(su2double *val_solution, unsigned short val_nvar, CConfig *config) : CVariable(val_nvar, config) {\n\n\tfor (unsigned short iVar = 0; iVar < nVar; iVar++)\n\t\tSolution[iVar] = val_solution[iVar];\n\n}\n\nCBaselineVariable::~CBaselineVariable(void) { }\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":1568,"id":"0","maintainHistory":false,"markersById":{"0-2":{"range":{"start":{"row":39,"column":0},"end":{"row":39,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-3":{"range":{"start":{"row":51,"column":0},"end":{"row":51,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-4":{"range":{"start":{"row":70,"column":0},"end":{"row":70,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-5":{"range":{"start":{"row":75,"column":0},"end":{"row":75,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-6":{"range":{"start":{"row":82,"column":0},"end":{"row":82,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-7":{"range":{"start":{"row":86,"column":0},"end":{"row":86,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-8":{"range":{"start":{"row":88,"column":0},"end":{"row":88,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-9":{"range":{"start":{"row":103,"column":0},"end":{"row":103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-10":{"range":{"start":{"row":107,"column":0},"end":{"row":110,"column":63}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-11":{"range":{"start":{"row":113,"column":0},"end":{"row":113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-12":{"range":{"start":{"row":118,"column":0},"end":{"row":118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-13":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-14":{"range":{"start":{"row":130,"column":0},"end":{"row":130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-15":{"range":{"start":{"row":148,"column":0},"end":{"row":148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-16":{"range":{"start":{"row":172,"column":0},"end":{"row":172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-17":{"range":{"start":{"row":175,"column":0},"end":{"row":175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-18":{"range":{"start":{"row":179,"column":0},"end":{"row":179,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-19":{"range":{"start":{"row":181,"column":0},"end":{"row":181,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-20":{"range":{"start":{"row":185,"column":0},"end":{"row":185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-21":{"range":{"start":{"row":188,"column":0},"end":{"row":188,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-22":{"range":{"start":{"row":192,"column":0},"end":{"row":192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-23":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-24":{"range":{"start":{"row":199,"column":0},"end":{"row":199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-25":{"range":{"start":{"row":201,"column":0},"end":{"row":201,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-26":{"range":{"start":{"row":206,"column":0},"end":{"row":206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-27":{"range":{"start":{"row":208,"column":0},"end":{"row":208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-28":{"range":{"start":{"row":213,"column":0},"end":{"row":213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-29":{"range":{"start":{"row":216,"column":0},"end":{"row":216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-30":{"range":{"start":{"row":220,"column":0},"end":{"row":220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-31":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-32":{"range":{"start":{"row":227,"column":0},"end":{"row":227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-33":{"range":{"start":{"row":230,"column":0},"end":{"row":230,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-34":{"range":{"start":{"row":234,"column":0},"end":{"row":234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-35":{"range":{"start":{"row":237,"column":0},"end":{"row":237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-36":{"range":{"start":{"row":255,"column":0},"end":{"row":255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-37":{"range":{"start":{"row":258,"column":0},"end":{"row":258,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-38":{"range":{"start":{"row":262,"column":0},"end":{"row":262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-39":{"range":{"start":{"row":265,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-40":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-41":{"range":{"start":{"row":272,"column":0},"end":{"row":272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-42":{"range":{"start":{"row":276,"column":0},"end":{"row":276,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-43":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-44":{"range":{"start":{"row":290,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-45":{"range":{"start":{"row":293,"column":0},"end":{"row":293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-46":{"range":{"start":{"row":297,"column":0},"end":{"row":297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-47":{"range":{"start":{"row":300,"column":0},"end":{"row":300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-48":{"range":{"start":{"row":304,"column":0},"end":{"row":304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-49":{"range":{"start":{"row":306,"column":0},"end":{"row":306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-50":{"range":{"start":{"row":310,"column":0},"end":{"row":310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-51":{"range":{"start":{"row":313,"column":0},"end":{"row":313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-52":{"range":{"start":{"row":317,"column":0},"end":{"row":317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-53":{"range":{"start":{"row":320,"column":0},"end":{"row":320,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-54":{"range":{"start":{"row":324,"column":0},"end":{"row":324,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-55":{"range":{"start":{"row":327,"column":0},"end":{"row":327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-56":{"range":{"start":{"row":331,"column":0},"end":{"row":331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-57":{"range":{"start":{"row":334,"column":0},"end":{"row":334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-58":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-59":{"range":{"start":{"row":341,"column":0},"end":{"row":341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-60":{"range":{"start":{"row":345,"column":0},"end":{"row":345,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-61":{"range":{"start":{"row":347,"column":0},"end":{"row":347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-62":{"range":{"start":{"row":351,"column":0},"end":{"row":351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-63":{"range":{"start":{"row":354,"column":0},"end":{"row":354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-64":{"range":{"start":{"row":358,"column":0},"end":{"row":358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-65":{"range":{"start":{"row":362,"column":0},"end":{"row":362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-66":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-67":{"range":{"start":{"row":369,"column":0},"end":{"row":369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-68":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-69":{"range":{"start":{"row":377,"column":0},"end":{"row":377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-70":{"range":{"start":{"row":381,"column":0},"end":{"row":381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-71":{"range":{"start":{"row":384,"column":0},"end":{"row":384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-72":{"range":{"start":{"row":388,"column":0},"end":{"row":388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-73":{"range":{"start":{"row":390,"column":0},"end":{"row":390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-74":{"range":{"start":{"row":394,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-75":{"range":{"start":{"row":397,"column":0},"end":{"row":397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-76":{"range":{"start":{"row":401,"column":0},"end":{"row":401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-77":{"range":{"start":{"row":404,"column":0},"end":{"row":404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-78":{"range":{"start":{"row":410,"column":0},"end":{"row":410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-79":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-80":{"range":{"start":{"row":39,"column":0},"end":{"row":40,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-81":{"range":{"start":{"row":51,"column":0},"end":{"row":52,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-82":{"range":{"start":{"row":70,"column":0},"end":{"row":71,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-83":{"range":{"start":{"row":75,"column":0},"end":{"row":76,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-84":{"range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-85":{"range":{"start":{"row":86,"column":0},"end":{"row":87,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-86":{"range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-87":{"range":{"start":{"row":103,"column":0},"end":{"row":104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-88":{"range":{"start":{"row":107,"column":0},"end":{"row":111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-89":{"range":{"start":{"row":113,"column":0},"end":{"row":114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-90":{"range":{"start":{"row":118,"column":0},"end":{"row":119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-91":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-92":{"range":{"start":{"row":130,"column":0},"end":{"row":131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-93":{"range":{"start":{"row":148,"column":0},"end":{"row":149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-94":{"range":{"start":{"row":172,"column":0},"end":{"row":173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-95":{"range":{"start":{"row":175,"column":0},"end":{"row":176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-96":{"range":{"start":{"row":179,"column":0},"end":{"row":180,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-97":{"range":{"start":{"row":181,"column":0},"end":{"row":182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-98":{"range":{"start":{"row":185,"column":0},"end":{"row":186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-99":{"range":{"start":{"row":188,"column":0},"end":{"row":189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-100":{"range":{"start":{"row":192,"column":0},"end":{"row":193,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-101":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-102":{"range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-103":{"range":{"start":{"row":201,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-104":{"range":{"start":{"row":206,"column":0},"end":{"row":207,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-105":{"range":{"start":{"row":208,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-106":{"range":{"start":{"row":213,"column":0},"end":{"row":214,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-107":{"range":{"start":{"row":216,"column":0},"end":{"row":217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-108":{"range":{"start":{"row":220,"column":0},"end":{"row":221,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-109":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-110":{"range":{"start":{"row":227,"column":0},"end":{"row":228,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-111":{"range":{"start":{"row":230,"column":0},"end":{"row":231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-112":{"range":{"start":{"row":234,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-113":{"range":{"start":{"row":237,"column":0},"end":{"row":238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-114":{"range":{"start":{"row":255,"column":0},"end":{"row":256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-115":{"range":{"start":{"row":258,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-116":{"range":{"start":{"row":262,"column":0},"end":{"row":263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-117":{"range":{"start":{"row":265,"column":0},"end":{"row":266,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-118":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-119":{"range":{"start":{"row":272,"column":0},"end":{"row":273,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-120":{"range":{"start":{"row":276,"column":0},"end":{"row":277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-121":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-122":{"range":{"start":{"row":290,"column":0},"end":{"row":291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-123":{"range":{"start":{"row":293,"column":0},"end":{"row":294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-124":{"range":{"start":{"row":297,"column":0},"end":{"row":298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-125":{"range":{"start":{"row":300,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-126":{"range":{"start":{"row":304,"column":0},"end":{"row":305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-127":{"range":{"start":{"row":306,"column":0},"end":{"row":307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-128":{"range":{"start":{"row":310,"column":0},"end":{"row":311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-129":{"range":{"start":{"row":313,"column":0},"end":{"row":314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-130":{"range":{"start":{"row":317,"column":0},"end":{"row":318,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-131":{"range":{"start":{"row":320,"column":0},"end":{"row":321,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-132":{"range":{"start":{"row":324,"column":0},"end":{"row":325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-133":{"range":{"start":{"row":327,"column":0},"end":{"row":328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-134":{"range":{"start":{"row":331,"column":0},"end":{"row":332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-135":{"range":{"start":{"row":334,"column":0},"end":{"row":335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-136":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-137":{"range":{"start":{"row":341,"column":0},"end":{"row":342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-138":{"range":{"start":{"row":345,"column":0},"end":{"row":346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-139":{"range":{"start":{"row":347,"column":0},"end":{"row":348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-140":{"range":{"start":{"row":351,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-141":{"range":{"start":{"row":354,"column":0},"end":{"row":355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-142":{"range":{"start":{"row":358,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-143":{"range":{"start":{"row":362,"column":0},"end":{"row":363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-144":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-145":{"range":{"start":{"row":369,"column":0},"end":{"row":370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-146":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-147":{"range":{"start":{"row":377,"column":0},"end":{"row":378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-148":{"range":{"start":{"row":381,"column":0},"end":{"row":382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-149":{"range":{"start":{"row":384,"column":0},"end":{"row":385,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-150":{"range":{"start":{"row":388,"column":0},"end":{"row":389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-151":{"range":{"start":{"row":390,"column":0},"end":{"row":391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-152":{"range":{"start":{"row":394,"column":0},"end":{"row":395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-153":{"range":{"start":{"row":397,"column":0},"end":{"row":398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-154":{"range":{"start":{"row":401,"column":0},"end":{"row":402,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-155":{"range":{"start":{"row":404,"column":0},"end":{"row":405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-156":{"range":{"start":{"row":410,"column":0},"end":{"row":411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-157":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-788":{"range":{"start":{"row":39,"column":0},"end":{"row":40,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-789":{"range":{"start":{"row":51,"column":0},"end":{"row":52,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-790":{"range":{"start":{"row":70,"column":0},"end":{"row":71,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-791":{"range":{"start":{"row":75,"column":0},"end":{"row":76,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-792":{"range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-793":{"range":{"start":{"row":86,"column":0},"end":{"row":87,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-794":{"range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-795":{"range":{"start":{"row":103,"column":0},"end":{"row":104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-796":{"range":{"start":{"row":107,"column":0},"end":{"row":111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-797":{"range":{"start":{"row":113,"column":0},"end":{"row":114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-798":{"range":{"start":{"row":118,"column":0},"end":{"row":119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-799":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-800":{"range":{"start":{"row":130,"column":0},"end":{"row":131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-801":{"range":{"start":{"row":148,"column":0},"end":{"row":149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-802":{"range":{"start":{"row":172,"column":0},"end":{"row":173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-803":{"range":{"start":{"row":175,"column":0},"end":{"row":176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-804":{"range":{"start":{"row":179,"column":0},"end":{"row":180,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-805":{"range":{"start":{"row":181,"column":0},"end":{"row":182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-806":{"range":{"start":{"row":185,"column":0},"end":{"row":186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-807":{"range":{"start":{"row":188,"column":0},"end":{"row":189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-808":{"range":{"start":{"row":192,"column":0},"end":{"row":193,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-809":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-810":{"range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-811":{"range":{"start":{"row":201,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-812":{"range":{"start":{"row":206,"column":0},"end":{"row":207,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-813":{"range":{"start":{"row":208,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-814":{"range":{"start":{"row":213,"column":0},"end":{"row":214,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-815":{"range":{"start":{"row":216,"column":0},"end":{"row":217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-816":{"range":{"start":{"row":220,"column":0},"end":{"row":221,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-817":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-818":{"range":{"start":{"row":227,"column":0},"end":{"row":228,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-819":{"range":{"start":{"row":230,"column":0},"end":{"row":231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-820":{"range":{"start":{"row":234,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-821":{"range":{"start":{"row":237,"column":0},"end":{"row":238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-822":{"range":{"start":{"row":255,"column":0},"end":{"row":256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-823":{"range":{"start":{"row":258,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-824":{"range":{"start":{"row":262,"column":0},"end":{"row":263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-825":{"range":{"start":{"row":265,"column":0},"end":{"row":266,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-826":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-827":{"range":{"start":{"row":272,"column":0},"end":{"row":273,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-828":{"range":{"start":{"row":276,"column":0},"end":{"row":277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-829":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-830":{"range":{"start":{"row":290,"column":0},"end":{"row":291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-831":{"range":{"start":{"row":293,"column":0},"end":{"row":294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-832":{"range":{"start":{"row":297,"column":0},"end":{"row":298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-833":{"range":{"start":{"row":300,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-834":{"range":{"start":{"row":304,"column":0},"end":{"row":305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-835":{"range":{"start":{"row":306,"column":0},"end":{"row":307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-836":{"range":{"start":{"row":310,"column":0},"end":{"row":311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-837":{"range":{"start":{"row":313,"column":0},"end":{"row":314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-838":{"range":{"start":{"row":317,"column":0},"end":{"row":318,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-839":{"range":{"start":{"row":320,"column":0},"end":{"row":321,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-840":{"range":{"start":{"row":324,"column":0},"end":{"row":325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-841":{"range":{"start":{"row":327,"column":0},"end":{"row":328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-842":{"range":{"start":{"row":331,"column":0},"end":{"row":332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-843":{"range":{"start":{"row":334,"column":0},"end":{"row":335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-844":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-845":{"range":{"start":{"row":341,"column":0},"end":{"row":342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-846":{"range":{"start":{"row":345,"column":0},"end":{"row":346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-847":{"range":{"start":{"row":347,"column":0},"end":{"row":348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-848":{"range":{"start":{"row":351,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-849":{"range":{"start":{"row":354,"column":0},"end":{"row":355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-850":{"range":{"start":{"row":358,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-851":{"range":{"start":{"row":362,"column":0},"end":{"row":363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-852":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-853":{"range":{"start":{"row":369,"column":0},"end":{"row":370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-854":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-855":{"range":{"start":{"row":377,"column":0},"end":{"row":378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-856":{"range":{"start":{"row":381,"column":0},"end":{"row":382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-857":{"range":{"start":{"row":384,"column":0},"end":{"row":385,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-858":{"range":{"start":{"row":388,"column":0},"end":{"row":389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-859":{"range":{"start":{"row":390,"column":0},"end":{"row":391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-860":{"range":{"start":{"row":394,"column":0},"end":{"row":395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-861":{"range":{"start":{"row":397,"column":0},"end":{"row":398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-862":{"range":{"start":{"row":401,"column":0},"end":{"row":402,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-863":{"range":{"start":{"row":404,"column":0},"end":{"row":405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-864":{"range":{"start":{"row":410,"column":0},"end":{"row":411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-865":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-866":{"range":{"start":{"row":39,"column":0},"end":{"row":39,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-867":{"range":{"start":{"row":51,"column":0},"end":{"row":51,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-868":{"range":{"start":{"row":70,"column":0},"end":{"row":70,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-869":{"range":{"start":{"row":75,"column":0},"end":{"row":75,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-870":{"range":{"start":{"row":82,"column":0},"end":{"row":82,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-871":{"range":{"start":{"row":86,"column":0},"end":{"row":86,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-872":{"range":{"start":{"row":88,"column":0},"end":{"row":88,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-873":{"range":{"start":{"row":103,"column":0},"end":{"row":103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-874":{"range":{"start":{"row":107,"column":0},"end":{"row":110,"column":63}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-875":{"range":{"start":{"row":113,"column":0},"end":{"row":113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-876":{"range":{"start":{"row":118,"column":0},"end":{"row":118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-877":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-878":{"range":{"start":{"row":130,"column":0},"end":{"row":130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-879":{"range":{"start":{"row":148,"column":0},"end":{"row":148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-880":{"range":{"start":{"row":172,"column":0},"end":{"row":172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-881":{"range":{"start":{"row":175,"column":0},"end":{"row":175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-882":{"range":{"start":{"row":179,"column":0},"end":{"row":179,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-883":{"range":{"start":{"row":181,"column":0},"end":{"row":181,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-884":{"range":{"start":{"row":185,"column":0},"end":{"row":185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-885":{"range":{"start":{"row":188,"column":0},"end":{"row":188,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-886":{"range":{"start":{"row":192,"column":0},"end":{"row":192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-887":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-888":{"range":{"start":{"row":199,"column":0},"end":{"row":199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-889":{"range":{"start":{"row":201,"column":0},"end":{"row":201,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-890":{"range":{"start":{"row":206,"column":0},"end":{"row":206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-891":{"range":{"start":{"row":208,"column":0},"end":{"row":208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-892":{"range":{"start":{"row":213,"column":0},"end":{"row":213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-893":{"range":{"start":{"row":216,"column":0},"end":{"row":216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-894":{"range":{"start":{"row":220,"column":0},"end":{"row":220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-895":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-896":{"range":{"start":{"row":227,"column":0},"end":{"row":227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-897":{"range":{"start":{"row":230,"column":0},"end":{"row":230,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-898":{"range":{"start":{"row":234,"column":0},"end":{"row":234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-899":{"range":{"start":{"row":237,"column":0},"end":{"row":237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-900":{"range":{"start":{"row":255,"column":0},"end":{"row":255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-901":{"range":{"start":{"row":258,"column":0},"end":{"row":258,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-902":{"range":{"start":{"row":262,"column":0},"end":{"row":262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-903":{"range":{"start":{"row":265,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-904":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-905":{"range":{"start":{"row":272,"column":0},"end":{"row":272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-906":{"range":{"start":{"row":276,"column":0},"end":{"row":276,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-907":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-908":{"range":{"start":{"row":290,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-909":{"range":{"start":{"row":293,"column":0},"end":{"row":293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-910":{"range":{"start":{"row":297,"column":0},"end":{"row":297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-911":{"range":{"start":{"row":300,"column":0},"end":{"row":300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-912":{"range":{"start":{"row":304,"column":0},"end":{"row":304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-913":{"range":{"start":{"row":306,"column":0},"end":{"row":306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-914":{"range":{"start":{"row":310,"column":0},"end":{"row":310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-915":{"range":{"start":{"row":313,"column":0},"end":{"row":313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-916":{"range":{"start":{"row":317,"column":0},"end":{"row":317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-917":{"range":{"start":{"row":320,"column":0},"end":{"row":320,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-918":{"range":{"start":{"row":324,"column":0},"end":{"row":324,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-919":{"range":{"start":{"row":327,"column":0},"end":{"row":327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-920":{"range":{"start":{"row":331,"column":0},"end":{"row":331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-921":{"range":{"start":{"row":334,"column":0},"end":{"row":334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-922":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-923":{"range":{"start":{"row":341,"column":0},"end":{"row":341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-924":{"range":{"start":{"row":345,"column":0},"end":{"row":345,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-925":{"range":{"start":{"row":347,"column":0},"end":{"row":347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-926":{"range":{"start":{"row":351,"column":0},"end":{"row":351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-927":{"range":{"start":{"row":354,"column":0},"end":{"row":354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-928":{"range":{"start":{"row":358,"column":0},"end":{"row":358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-929":{"range":{"start":{"row":362,"column":0},"end":{"row":362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-930":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-931":{"range":{"start":{"row":369,"column":0},"end":{"row":369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-932":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-933":{"range":{"start":{"row":377,"column":0},"end":{"row":377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-934":{"range":{"start":{"row":381,"column":0},"end":{"row":381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-935":{"range":{"start":{"row":384,"column":0},"end":{"row":384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-936":{"range":{"start":{"row":388,"column":0},"end":{"row":388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-937":{"range":{"start":{"row":390,"column":0},"end":{"row":390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-938":{"range":{"start":{"row":394,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-939":{"range":{"start":{"row":397,"column":0},"end":{"row":397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-940":{"range":{"start":{"row":401,"column":0},"end":{"row":401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-941":{"range":{"start":{"row":404,"column":0},"end":{"row":404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-942":{"range":{"start":{"row":410,"column":0},"end":{"row":410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-943":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1100":{"range":{"start":{"row":39,"column":0},"end":{"row":40,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1101":{"range":{"start":{"row":51,"column":0},"end":{"row":52,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1102":{"range":{"start":{"row":70,"column":0},"end":{"row":71,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1103":{"range":{"start":{"row":75,"column":0},"end":{"row":76,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1104":{"range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1105":{"range":{"start":{"row":86,"column":0},"end":{"row":87,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1106":{"range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1107":{"range":{"start":{"row":103,"column":0},"end":{"row":104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1108":{"range":{"start":{"row":107,"column":0},"end":{"row":111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1109":{"range":{"start":{"row":113,"column":0},"end":{"row":114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1110":{"range":{"start":{"row":118,"column":0},"end":{"row":119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1111":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1112":{"range":{"start":{"row":130,"column":0},"end":{"row":131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1113":{"range":{"start":{"row":148,"column":0},"end":{"row":149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1114":{"range":{"start":{"row":172,"column":0},"end":{"row":173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1115":{"range":{"start":{"row":175,"column":0},"end":{"row":176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1116":{"range":{"start":{"row":179,"column":0},"end":{"row":180,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1117":{"range":{"start":{"row":181,"column":0},"end":{"row":182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1118":{"range":{"start":{"row":185,"column":0},"end":{"row":186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1119":{"range":{"start":{"row":188,"column":0},"end":{"row":189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1120":{"range":{"start":{"row":192,"column":0},"end":{"row":193,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1121":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1122":{"range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1123":{"range":{"start":{"row":201,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1124":{"range":{"start":{"row":206,"column":0},"end":{"row":207,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1125":{"range":{"start":{"row":208,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1126":{"range":{"start":{"row":213,"column":0},"end":{"row":214,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1127":{"range":{"start":{"row":216,"column":0},"end":{"row":217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1128":{"range":{"start":{"row":220,"column":0},"end":{"row":221,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1129":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1130":{"range":{"start":{"row":227,"column":0},"end":{"row":228,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1131":{"range":{"start":{"row":230,"column":0},"end":{"row":231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1132":{"range":{"start":{"row":234,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1133":{"range":{"start":{"row":237,"column":0},"end":{"row":238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1134":{"range":{"start":{"row":255,"column":0},"end":{"row":256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1135":{"range":{"start":{"row":258,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1136":{"range":{"start":{"row":262,"column":0},"end":{"row":263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1137":{"range":{"start":{"row":265,"column":0},"end":{"row":266,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1138":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1139":{"range":{"start":{"row":272,"column":0},"end":{"row":273,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1140":{"range":{"start":{"row":276,"column":0},"end":{"row":277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1141":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1142":{"range":{"start":{"row":290,"column":0},"end":{"row":291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1143":{"range":{"start":{"row":293,"column":0},"end":{"row":294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1144":{"range":{"start":{"row":297,"column":0},"end":{"row":298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1145":{"range":{"start":{"row":300,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1146":{"range":{"start":{"row":304,"column":0},"end":{"row":305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1147":{"range":{"start":{"row":306,"column":0},"end":{"row":307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1148":{"range":{"start":{"row":310,"column":0},"end":{"row":311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1149":{"range":{"start":{"row":313,"column":0},"end":{"row":314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1150":{"range":{"start":{"row":317,"column":0},"end":{"row":318,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1151":{"range":{"start":{"row":320,"column":0},"end":{"row":321,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1152":{"range":{"start":{"row":324,"column":0},"end":{"row":325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1153":{"range":{"start":{"row":327,"column":0},"end":{"row":328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1154":{"range":{"start":{"row":331,"column":0},"end":{"row":332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1155":{"range":{"start":{"row":334,"column":0},"end":{"row":335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1156":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1157":{"range":{"start":{"row":341,"column":0},"end":{"row":342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1158":{"range":{"start":{"row":345,"column":0},"end":{"row":346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1159":{"range":{"start":{"row":347,"column":0},"end":{"row":348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1160":{"range":{"start":{"row":351,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1161":{"range":{"start":{"row":354,"column":0},"end":{"row":355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1162":{"range":{"start":{"row":358,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1163":{"range":{"start":{"row":362,"column":0},"end":{"row":363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1164":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1165":{"range":{"start":{"row":369,"column":0},"end":{"row":370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1166":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1167":{"range":{"start":{"row":377,"column":0},"end":{"row":378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1168":{"range":{"start":{"row":381,"column":0},"end":{"row":382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1169":{"range":{"start":{"row":384,"column":0},"end":{"row":385,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1170":{"range":{"start":{"row":388,"column":0},"end":{"row":389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1171":{"range":{"start":{"row":390,"column":0},"end":{"row":391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1172":{"range":{"start":{"row":394,"column":0},"end":{"row":395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1173":{"range":{"start":{"row":397,"column":0},"end":{"row":398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1174":{"range":{"start":{"row":401,"column":0},"end":{"row":402,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1175":{"range":{"start":{"row":404,"column":0},"end":{"row":405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1176":{"range":{"start":{"row":410,"column":0},"end":{"row":411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1177":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1178":{"range":{"start":{"row":39,"column":0},"end":{"row":39,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1179":{"range":{"start":{"row":51,"column":0},"end":{"row":51,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1180":{"range":{"start":{"row":70,"column":0},"end":{"row":70,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1181":{"range":{"start":{"row":75,"column":0},"end":{"row":75,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1182":{"range":{"start":{"row":82,"column":0},"end":{"row":82,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1183":{"range":{"start":{"row":86,"column":0},"end":{"row":86,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1184":{"range":{"start":{"row":88,"column":0},"end":{"row":88,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1185":{"range":{"start":{"row":103,"column":0},"end":{"row":103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1186":{"range":{"start":{"row":107,"column":0},"end":{"row":110,"column":63}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1187":{"range":{"start":{"row":113,"column":0},"end":{"row":113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1188":{"range":{"start":{"row":118,"column":0},"end":{"row":118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1189":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1190":{"range":{"start":{"row":130,"column":0},"end":{"row":130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1191":{"range":{"start":{"row":148,"column":0},"end":{"row":148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1192":{"range":{"start":{"row":172,"column":0},"end":{"row":172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1193":{"range":{"start":{"row":175,"column":0},"end":{"row":175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1194":{"range":{"start":{"row":179,"column":0},"end":{"row":179,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1195":{"range":{"start":{"row":181,"column":0},"end":{"row":181,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1196":{"range":{"start":{"row":185,"column":0},"end":{"row":185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1197":{"range":{"start":{"row":188,"column":0},"end":{"row":188,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1198":{"range":{"start":{"row":192,"column":0},"end":{"row":192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1199":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1200":{"range":{"start":{"row":199,"column":0},"end":{"row":199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1201":{"range":{"start":{"row":201,"column":0},"end":{"row":201,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1202":{"range":{"start":{"row":206,"column":0},"end":{"row":206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1203":{"range":{"start":{"row":208,"column":0},"end":{"row":208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1204":{"range":{"start":{"row":213,"column":0},"end":{"row":213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1205":{"range":{"start":{"row":216,"column":0},"end":{"row":216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1206":{"range":{"start":{"row":220,"column":0},"end":{"row":220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1207":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1208":{"range":{"start":{"row":227,"column":0},"end":{"row":227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1209":{"range":{"start":{"row":230,"column":0},"end":{"row":230,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1210":{"range":{"start":{"row":234,"column":0},"end":{"row":234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1211":{"range":{"start":{"row":237,"column":0},"end":{"row":237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1212":{"range":{"start":{"row":255,"column":0},"end":{"row":255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1213":{"range":{"start":{"row":258,"column":0},"end":{"row":258,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1214":{"range":{"start":{"row":262,"column":0},"end":{"row":262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1215":{"range":{"start":{"row":265,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1216":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1217":{"range":{"start":{"row":272,"column":0},"end":{"row":272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1218":{"range":{"start":{"row":276,"column":0},"end":{"row":276,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1219":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1220":{"range":{"start":{"row":290,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1221":{"range":{"start":{"row":293,"column":0},"end":{"row":293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1222":{"range":{"start":{"row":297,"column":0},"end":{"row":297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1223":{"range":{"start":{"row":300,"column":0},"end":{"row":300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1224":{"range":{"start":{"row":304,"column":0},"end":{"row":304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1225":{"range":{"start":{"row":306,"column":0},"end":{"row":306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1226":{"range":{"start":{"row":310,"column":0},"end":{"row":310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1227":{"range":{"start":{"row":313,"column":0},"end":{"row":313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1228":{"range":{"start":{"row":317,"column":0},"end":{"row":317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1229":{"range":{"start":{"row":320,"column":0},"end":{"row":320,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1230":{"range":{"start":{"row":324,"column":0},"end":{"row":324,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1231":{"range":{"start":{"row":327,"column":0},"end":{"row":327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1232":{"range":{"start":{"row":331,"column":0},"end":{"row":331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1233":{"range":{"start":{"row":334,"column":0},"end":{"row":334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1234":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1235":{"range":{"start":{"row":341,"column":0},"end":{"row":341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1236":{"range":{"start":{"row":345,"column":0},"end":{"row":345,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1237":{"range":{"start":{"row":347,"column":0},"end":{"row":347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1238":{"range":{"start":{"row":351,"column":0},"end":{"row":351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1239":{"range":{"start":{"row":354,"column":0},"end":{"row":354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1240":{"range":{"start":{"row":358,"column":0},"end":{"row":358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1241":{"range":{"start":{"row":362,"column":0},"end":{"row":362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1242":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1243":{"range":{"start":{"row":369,"column":0},"end":{"row":369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1244":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1245":{"range":{"start":{"row":377,"column":0},"end":{"row":377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1246":{"range":{"start":{"row":381,"column":0},"end":{"row":381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1247":{"range":{"start":{"row":384,"column":0},"end":{"row":384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1248":{"range":{"start":{"row":388,"column":0},"end":{"row":388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1249":{"range":{"start":{"row":390,"column":0},"end":{"row":390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1250":{"range":{"start":{"row":394,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1251":{"range":{"start":{"row":397,"column":0},"end":{"row":397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1252":{"range":{"start":{"row":401,"column":0},"end":{"row":401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1253":{"range":{"start":{"row":404,"column":0},"end":{"row":404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1254":{"range":{"start":{"row":410,"column":0},"end":{"row":410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1255":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1412":{"range":{"start":{"row":39,"column":0},"end":{"row":40,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1413":{"range":{"start":{"row":51,"column":0},"end":{"row":52,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1414":{"range":{"start":{"row":70,"column":0},"end":{"row":71,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1415":{"range":{"start":{"row":75,"column":0},"end":{"row":76,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1416":{"range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1417":{"range":{"start":{"row":86,"column":0},"end":{"row":87,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1418":{"range":{"start":{"row":88,"column":0},"end":{"row":89,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1419":{"range":{"start":{"row":103,"column":0},"end":{"row":104,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1420":{"range":{"start":{"row":107,"column":0},"end":{"row":111,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1421":{"range":{"start":{"row":113,"column":0},"end":{"row":114,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1422":{"range":{"start":{"row":118,"column":0},"end":{"row":119,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1423":{"range":{"start":{"row":125,"column":0},"end":{"row":126,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1424":{"range":{"start":{"row":130,"column":0},"end":{"row":131,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1425":{"range":{"start":{"row":148,"column":0},"end":{"row":149,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1426":{"range":{"start":{"row":172,"column":0},"end":{"row":173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1427":{"range":{"start":{"row":175,"column":0},"end":{"row":176,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1428":{"range":{"start":{"row":179,"column":0},"end":{"row":180,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1429":{"range":{"start":{"row":181,"column":0},"end":{"row":182,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1430":{"range":{"start":{"row":185,"column":0},"end":{"row":186,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1431":{"range":{"start":{"row":188,"column":0},"end":{"row":189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1432":{"range":{"start":{"row":192,"column":0},"end":{"row":193,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1433":{"range":{"start":{"row":195,"column":0},"end":{"row":196,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1434":{"range":{"start":{"row":199,"column":0},"end":{"row":200,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1435":{"range":{"start":{"row":201,"column":0},"end":{"row":202,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1436":{"range":{"start":{"row":206,"column":0},"end":{"row":207,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1437":{"range":{"start":{"row":208,"column":0},"end":{"row":209,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1438":{"range":{"start":{"row":213,"column":0},"end":{"row":214,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1439":{"range":{"start":{"row":216,"column":0},"end":{"row":217,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1440":{"range":{"start":{"row":220,"column":0},"end":{"row":221,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1441":{"range":{"start":{"row":223,"column":0},"end":{"row":224,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1442":{"range":{"start":{"row":227,"column":0},"end":{"row":228,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1443":{"range":{"start":{"row":230,"column":0},"end":{"row":231,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1444":{"range":{"start":{"row":234,"column":0},"end":{"row":235,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1445":{"range":{"start":{"row":237,"column":0},"end":{"row":238,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1446":{"range":{"start":{"row":255,"column":0},"end":{"row":256,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1447":{"range":{"start":{"row":258,"column":0},"end":{"row":259,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1448":{"range":{"start":{"row":262,"column":0},"end":{"row":263,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1449":{"range":{"start":{"row":265,"column":0},"end":{"row":266,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1450":{"range":{"start":{"row":269,"column":0},"end":{"row":270,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1451":{"range":{"start":{"row":272,"column":0},"end":{"row":273,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1452":{"range":{"start":{"row":276,"column":0},"end":{"row":277,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1453":{"range":{"start":{"row":279,"column":0},"end":{"row":280,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1454":{"range":{"start":{"row":290,"column":0},"end":{"row":291,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1455":{"range":{"start":{"row":293,"column":0},"end":{"row":294,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1456":{"range":{"start":{"row":297,"column":0},"end":{"row":298,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1457":{"range":{"start":{"row":300,"column":0},"end":{"row":301,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1458":{"range":{"start":{"row":304,"column":0},"end":{"row":305,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1459":{"range":{"start":{"row":306,"column":0},"end":{"row":307,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1460":{"range":{"start":{"row":310,"column":0},"end":{"row":311,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1461":{"range":{"start":{"row":313,"column":0},"end":{"row":314,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1462":{"range":{"start":{"row":317,"column":0},"end":{"row":318,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1463":{"range":{"start":{"row":320,"column":0},"end":{"row":321,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1464":{"range":{"start":{"row":324,"column":0},"end":{"row":325,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1465":{"range":{"start":{"row":327,"column":0},"end":{"row":328,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1466":{"range":{"start":{"row":331,"column":0},"end":{"row":332,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1467":{"range":{"start":{"row":334,"column":0},"end":{"row":335,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1468":{"range":{"start":{"row":338,"column":0},"end":{"row":339,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1469":{"range":{"start":{"row":341,"column":0},"end":{"row":342,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1470":{"range":{"start":{"row":345,"column":0},"end":{"row":346,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1471":{"range":{"start":{"row":347,"column":0},"end":{"row":348,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1472":{"range":{"start":{"row":351,"column":0},"end":{"row":352,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1473":{"range":{"start":{"row":354,"column":0},"end":{"row":355,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1474":{"range":{"start":{"row":358,"column":0},"end":{"row":359,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1475":{"range":{"start":{"row":362,"column":0},"end":{"row":363,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1476":{"range":{"start":{"row":366,"column":0},"end":{"row":367,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1477":{"range":{"start":{"row":369,"column":0},"end":{"row":370,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1478":{"range":{"start":{"row":373,"column":0},"end":{"row":374,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1479":{"range":{"start":{"row":377,"column":0},"end":{"row":378,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1480":{"range":{"start":{"row":381,"column":0},"end":{"row":382,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1481":{"range":{"start":{"row":384,"column":0},"end":{"row":385,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1482":{"range":{"start":{"row":388,"column":0},"end":{"row":389,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1483":{"range":{"start":{"row":390,"column":0},"end":{"row":391,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1484":{"range":{"start":{"row":394,"column":0},"end":{"row":395,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1485":{"range":{"start":{"row":397,"column":0},"end":{"row":398,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1486":{"range":{"start":{"row":401,"column":0},"end":{"row":402,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1487":{"range":{"start":{"row":404,"column":0},"end":{"row":405,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1488":{"range":{"start":{"row":410,"column":0},"end":{"row":411,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1489":{"range":{"start":{"row":413,"column":0},"end":{"row":414,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1490":{"range":{"start":{"row":39,"column":0},"end":{"row":39,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1491":{"range":{"start":{"row":51,"column":0},"end":{"row":51,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1492":{"range":{"start":{"row":70,"column":0},"end":{"row":70,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1493":{"range":{"start":{"row":75,"column":0},"end":{"row":75,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1494":{"range":{"start":{"row":82,"column":0},"end":{"row":82,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1495":{"range":{"start":{"row":86,"column":0},"end":{"row":86,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1496":{"range":{"start":{"row":88,"column":0},"end":{"row":88,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1497":{"range":{"start":{"row":103,"column":0},"end":{"row":103,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1498":{"range":{"start":{"row":107,"column":0},"end":{"row":110,"column":63}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1499":{"range":{"start":{"row":113,"column":0},"end":{"row":113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1500":{"range":{"start":{"row":118,"column":0},"end":{"row":118,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1501":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1502":{"range":{"start":{"row":130,"column":0},"end":{"row":130,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1503":{"range":{"start":{"row":148,"column":0},"end":{"row":148,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1504":{"range":{"start":{"row":172,"column":0},"end":{"row":172,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1505":{"range":{"start":{"row":175,"column":0},"end":{"row":175,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1506":{"range":{"start":{"row":179,"column":0},"end":{"row":179,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1507":{"range":{"start":{"row":181,"column":0},"end":{"row":181,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1508":{"range":{"start":{"row":185,"column":0},"end":{"row":185,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1509":{"range":{"start":{"row":188,"column":0},"end":{"row":188,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1510":{"range":{"start":{"row":192,"column":0},"end":{"row":192,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1511":{"range":{"start":{"row":195,"column":0},"end":{"row":195,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1512":{"range":{"start":{"row":199,"column":0},"end":{"row":199,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1513":{"range":{"start":{"row":201,"column":0},"end":{"row":201,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1514":{"range":{"start":{"row":206,"column":0},"end":{"row":206,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1515":{"range":{"start":{"row":208,"column":0},"end":{"row":208,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1516":{"range":{"start":{"row":213,"column":0},"end":{"row":213,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1517":{"range":{"start":{"row":216,"column":0},"end":{"row":216,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1518":{"range":{"start":{"row":220,"column":0},"end":{"row":220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1519":{"range":{"start":{"row":223,"column":0},"end":{"row":223,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1520":{"range":{"start":{"row":227,"column":0},"end":{"row":227,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1521":{"range":{"start":{"row":230,"column":0},"end":{"row":230,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1522":{"range":{"start":{"row":234,"column":0},"end":{"row":234,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1523":{"range":{"start":{"row":237,"column":0},"end":{"row":237,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1524":{"range":{"start":{"row":255,"column":0},"end":{"row":255,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1525":{"range":{"start":{"row":258,"column":0},"end":{"row":258,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1526":{"range":{"start":{"row":262,"column":0},"end":{"row":262,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1527":{"range":{"start":{"row":265,"column":0},"end":{"row":265,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1528":{"range":{"start":{"row":269,"column":0},"end":{"row":269,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1529":{"range":{"start":{"row":272,"column":0},"end":{"row":272,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1530":{"range":{"start":{"row":276,"column":0},"end":{"row":276,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1531":{"range":{"start":{"row":279,"column":0},"end":{"row":279,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1532":{"range":{"start":{"row":290,"column":0},"end":{"row":290,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1533":{"range":{"start":{"row":293,"column":0},"end":{"row":293,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1534":{"range":{"start":{"row":297,"column":0},"end":{"row":297,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1535":{"range":{"start":{"row":300,"column":0},"end":{"row":300,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1536":{"range":{"start":{"row":304,"column":0},"end":{"row":304,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1537":{"range":{"start":{"row":306,"column":0},"end":{"row":306,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1538":{"range":{"start":{"row":310,"column":0},"end":{"row":310,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1539":{"range":{"start":{"row":313,"column":0},"end":{"row":313,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1540":{"range":{"start":{"row":317,"column":0},"end":{"row":317,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1541":{"range":{"start":{"row":320,"column":0},"end":{"row":320,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1542":{"range":{"start":{"row":324,"column":0},"end":{"row":324,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1543":{"range":{"start":{"row":327,"column":0},"end":{"row":327,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1544":{"range":{"start":{"row":331,"column":0},"end":{"row":331,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1545":{"range":{"start":{"row":334,"column":0},"end":{"row":334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1546":{"range":{"start":{"row":338,"column":0},"end":{"row":338,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1547":{"range":{"start":{"row":341,"column":0},"end":{"row":341,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1548":{"range":{"start":{"row":345,"column":0},"end":{"row":345,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1549":{"range":{"start":{"row":347,"column":0},"end":{"row":347,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1550":{"range":{"start":{"row":351,"column":0},"end":{"row":351,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1551":{"range":{"start":{"row":354,"column":0},"end":{"row":354,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1552":{"range":{"start":{"row":358,"column":0},"end":{"row":358,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1553":{"range":{"start":{"row":362,"column":0},"end":{"row":362,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1554":{"range":{"start":{"row":366,"column":0},"end":{"row":366,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1555":{"range":{"start":{"row":369,"column":0},"end":{"row":369,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1556":{"range":{"start":{"row":373,"column":0},"end":{"row":373,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1557":{"range":{"start":{"row":377,"column":0},"end":{"row":377,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1558":{"range":{"start":{"row":381,"column":0},"end":{"row":381,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1559":{"range":{"start":{"row":384,"column":0},"end":{"row":384,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1560":{"range":{"start":{"row":388,"column":0},"end":{"row":388,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1561":{"range":{"start":{"row":390,"column":0},"end":{"row":390,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1562":{"range":{"start":{"row":394,"column":0},"end":{"row":394,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1563":{"range":{"start":{"row":397,"column":0},"end":{"row":397,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1564":{"range":{"start":{"row":401,"column":0},"end":{"row":401,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1565":{"range":{"start":{"row":404,"column":0},"end":{"row":404,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1566":{"range":{"start":{"row":410,"column":0},"end":{"row":410,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-1567":{"range":{"start":{"row":413,"column":0},"end":{"row":413,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":12,"column":39},"end":{"row":12,"column":39}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":80,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":5,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"2":{"2-0":{"range":[[39,21],[39,21]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false},{"type":"group-start","snapshot":{"2":{"2-0":{"range":[[39,21],[39,21]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[39,21],[39,21]],"newRange":[[39,21],[39,22]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[413,0],[413,2]],"newRange":[[413,0],[413,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[410,0],[410,2]],"newRange":[[410,0],[410,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[404,0],[404,2]],"newRange":[[404,0],[404,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[401,0],[401,2]],"newRange":[[401,0],[401,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[397,0],[397,2]],"newRange":[[397,0],[397,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[394,0],[394,2]],"newRange":[[394,0],[394,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[390,0],[390,2]],"newRange":[[390,0],[390,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[388,0],[388,2]],"newRange":[[388,0],[388,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[384,0],[384,2]],"newRange":[[384,0],[384,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[381,0],[381,2]],"newRange":[[381,0],[381,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[377,0],[377,2]],"newRange":[[377,0],[377,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[373,0],[373,2]],"newRange":[[373,0],[373,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[369,0],[369,2]],"newRange":[[369,0],[369,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[366,0],[366,2]],"newRange":[[366,0],[366,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[362,0],[362,2]],"newRange":[[362,0],[362,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[358,0],[358,2]],"newRange":[[358,0],[358,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[354,0],[354,2]],"newRange":[[354,0],[354,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[351,0],[351,2]],"newRange":[[351,0],[351,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[347,0],[347,2]],"newRange":[[347,0],[347,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[345,0],[345,2]],"newRange":[[345,0],[345,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[341,0],[341,2]],"newRange":[[341,0],[341,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[338,0],[338,2]],"newRange":[[338,0],[338,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[334,0],[334,2]],"newRange":[[334,0],[334,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[331,0],[331,2]],"newRange":[[331,0],[331,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[327,0],[327,2]],"newRange":[[327,0],[327,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[324,0],[324,2]],"newRange":[[324,0],[324,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[320,0],[320,2]],"newRange":[[320,0],[320,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[317,0],[317,2]],"newRange":[[317,0],[317,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[313,0],[313,2]],"newRange":[[313,0],[313,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[310,0],[310,2]],"newRange":[[310,0],[310,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[306,0],[306,2]],"newRange":[[306,0],[306,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[304,0],[304,2]],"newRange":[[304,0],[304,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[300,0],[300,2]],"newRange":[[300,0],[300,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[297,0],[297,2]],"newRange":[[297,0],[297,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[293,0],[293,2]],"newRange":[[293,0],[293,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[290,0],[290,2]],"newRange":[[290,0],[290,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[279,0],[279,2]],"newRange":[[279,0],[279,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[276,0],[276,2]],"newRange":[[276,0],[276,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[272,0],[272,2]],"newRange":[[272,0],[272,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[269,0],[269,2]],"newRange":[[269,0],[269,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[265,0],[265,2]],"newRange":[[265,0],[265,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[262,0],[262,2]],"newRange":[[262,0],[262,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[258,0],[258,2]],"newRange":[[258,0],[258,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[255,0],[255,2]],"newRange":[[255,0],[255,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[237,0],[237,2]],"newRange":[[237,0],[237,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[234,0],[234,2]],"newRange":[[234,0],[234,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[230,0],[230,2]],"newRange":[[230,0],[230,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[227,0],[227,2]],"newRange":[[227,0],[227,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[223,0],[223,2]],"newRange":[[223,0],[223,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[220,0],[220,2]],"newRange":[[220,0],[220,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[216,0],[216,2]],"newRange":[[216,0],[216,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[213,0],[213,2]],"newRange":[[213,0],[213,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[208,0],[208,2]],"newRange":[[208,0],[208,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[206,0],[206,2]],"newRange":[[206,0],[206,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[201,0],[201,2]],"newRange":[[201,0],[201,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[199,0],[199,2]],"newRange":[[199,0],[199,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[195,0],[195,2]],"newRange":[[195,0],[195,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[192,0],[192,2]],"newRange":[[192,0],[192,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[188,0],[188,2]],"newRange":[[188,0],[188,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[185,0],[185,2]],"newRange":[[185,0],[185,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[181,0],[181,2]],"newRange":[[181,0],[181,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[179,0],[179,2]],"newRange":[[179,0],[179,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[175,0],[175,2]],"newRange":[[175,0],[175,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[172,0],[172,2]],"newRange":[[172,0],[172,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[148,0],[148,2]],"newRange":[[148,0],[148,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[130,0],[130,1]],"newRange":[[130,0],[130,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[125,0],[125,1]],"newRange":[[125,0],[125,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[118,0],[118,1]],"newRange":[[118,0],[118,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[113,0],[113,1]],"newRange":[[113,0],[113,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[110,63],[110,64]],"newRange":[[110,63],[110,63]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[109,64],[109,65]],"newRange":[[109,64],[109,64]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[108,61],[108,62]],"newRange":[[108,61],[108,61]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[107,0],[107,2]],"newRange":[[107,0],[107,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[103,0],[103,2]],"newRange":[[103,0],[103,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[88,0],[88,1]],"newRange":[[88,0],[88,0]],"oldText":"\t","newText":""}},{"type":"change","content":{"oldRange":[[86,0],[86,2]],"newRange":[[86,0],[86,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[82,0],[82,2]],"newRange":[[82,0],[82,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[75,0],[75,2]],"newRange":[[75,0],[75,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[70,0],[70,2]],"newRange":[[70,0],[70,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[51,0],[51,2]],"newRange":[[51,0],[51,0]],"oldText":"  ","newText":""}},{"type":"group-end","snapshot":{"2":{"2-0":{"range":[[12,40],[357,28]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/variable_structure.cpp","digestWhenLastPersisted":"e25d04379fa9cb36f38deee3c7368553e8c7e835","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file variable_structure.hpp\n * \\brief Headers of the main subroutines for storing all the variables for \n *        each kind of governing equation (direct, adjoint and linearized).\n *        The subroutines and functions are in the <i>variable_structure.cpp</i> file.\n * \\author F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#pragma once\n\n#include \"../../Common/include/mpi_structure.hpp\"\n\n#include <cmath>\n#include <iostream>\n#include <cstdlib>\n\n#include \"../../Common/include/config_structure.hpp\"\n#include \"fluid_model.hpp\"\n\n\nusing namespace std;\n\n/*! \n * \\class CVariable\n * \\brief Main class for defining the variables.\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CVariable {\nprotected:\n\n\tsu2double *Solution,\t\t/*!< \\brief Solution of the problem. */\n\t*Solution_Old;\t\t\t/*!< \\brief Old solution of the problem R-K. */\n  bool Non_Physical;\t\t\t/*!< \\brief Non-physical points in the solution (force first order). */\n\tsu2double *Solution_time_n,\t/*!< \\brief Solution of the problem at time n for dual-time stepping technique. */\n\t*Solution_time_n1;\t\t\t/*!< \\brief Solution of the problem at time n-1 for dual-time stepping technique. */\n\tsu2double **Gradient;\t\t/*!< \\brief Gradient of the solution of the problem. */ \n\tsu2double *Limiter;\t\t\t\t/*!< \\brief Limiter of the solution of the problem. */\n\tsu2double *Solution_Max;\t\t/*!< \\brief Max solution for limiter computation. */\n\tsu2double *Solution_Min;\t\t/*!< \\brief Min solution for limiter computation. */\n\tsu2double AuxVar;\t\t\t/*!< \\brief Auxiliar variable for gradient computation. */\n\tsu2double *Grad_AuxVar;\t/*!< \\brief Gradient of the auxiliar variable. */\n\tsu2double Delta_Time;\t/*!< \\brief Time step. */\n\tsu2double Max_Lambda,\t/*!< \\brief Maximun eingenvalue. */\n\tMax_Lambda_Inv,\t\t/*!< \\brief Maximun inviscid eingenvalue. */\n\tMax_Lambda_Visc,\t/*!< \\brief Maximun viscous eingenvalue. */\n\tLambda;\t\t\t\t/*!< \\brief Value of the eingenvalue. */\n\tsu2double Sensor;\t/*!< \\brief Pressure sensor for high order central scheme. */\n\tsu2double *Undivided_Laplacian;\t/*!< \\brief Undivided laplacian of the solution. */\n\tsu2double *Res_TruncError,\t/*!< \\brief Truncation error for multigrid cycle. */\n\t*Residual_Old,\t\t/*!< \\brief Auxiliar structure for residual smoothing. */\n\t*Residual_Sum;\t\t/*!< \\brief Auxiliar structure for residual smoothing. */\n\tstatic unsigned short nDim;\t\t/*!< \\brief Number of dimension of the problem. */\n\tunsigned short nVar;\t\t/*!< \\brief Number of variables of the problem, \n\t\t\t\t\t\t\t\t\t\t\t\t\t note that this variable cannnot be static, it is possible to \n\t\t\t\t\t\t\t\t\t\t\t\t\t have different number of nVar in the same problem. */\n  unsigned short nPrimVar, nPrimVarGrad;\t\t/*!< \\brief Number of variables of the problem,\n                                             note that this variable cannnot be static, it is possible to\n                                             have different number of nVar in the same problem. */\n  unsigned short nSecondaryVar, nSecondaryVarGrad;\t\t/*!< \\brief Number of variables of the problem,\n                                             note that this variable cannnot be static, it is possible to\n                                             have different number of nVar in the same problem. */\n  \npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCVariable(void);\n\n  /*!\n\t * \\overload\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCVariable(unsigned short val_nvar, CConfig *config);\n  \n\t/*!\n\t * \\overload \n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\n\tCVariable(unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\n\tvirtual ~CVariable(void);\n\n\t/*!\n\t * \\brief Set the value of the solution.\n\t * \\param[in] val_solution - Solution of the problem.\n\t */\n\tvoid SetSolution(su2double *val_solution);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution(unsigned short val_var, su2double val_solution);\n\n\t/*!\r\n\t * \\brief Add the value of the solution vector to the previous solution (incremental approach).\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\param[in] val_solution - Value of the solution for the index <i>val_var</i>.\r\n\t */\r\n\tvoid Add_DeltaSolution(unsigned short val_var, su2double val_solution);\r\n\r\n  /*!\n   * \\brief Set the value of the non-physical point.\n   * \\param[in] val_value - identification of the non-physical point.\n   */\n  void SetNon_Physical(bool val_value);\n  \n  /*!\n   * \\brief Get the value of the non-physical point.\n   * \\return Value of the Non-physical point.\n   */\n  su2double GetNon_Physical(void);\n  \n\t/*!\n\t * \\brief Get the solution.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tsu2double GetSolution(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the old solution of the problem (Runge-Kutta method)\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tsu2double GetSolution_Old(unsigned short val_var);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_Old(su2double *val_solution_old);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_old - Value of the old solution for the index <i>val_var</i>.\n\t */\t\n\tvoid SetSolution_Old(unsigned short val_var, su2double val_solution_old);\n\n\t/*!\n\t * \\brief Set old variables to the value of the current variables.\n\t */\n\tvoid Set_OldSolution(void);\n\n\t/*!\n\t * \\brief Set variables to the value of the old variables.\n\t */\n\tvoid Set_Solution(void);\t\n\n\t/*!\n\t * \\brief Set the variable solution at time n.\n\t */\t\n\tvoid Set_Solution_time_n(void);\n\n\t/*!\n\t * \\brief Set the variable solution at time n-1.\n\t */\t\n\tvoid Set_Solution_time_n1(void);\n\n  /*!\n   * \\brief Set the variable solution at time n.\n   */\n  void Set_Solution_time_n(su2double* val_sol);\n\n  /*!\n   * \\brief Set the variable solution at time n-1.\n   */\n  void Set_Solution_time_n1(su2double* val_sol);\n\n\t/*!\n\t * \\brief Set to zero the velocity components of the solution.\n\t */\n\tvoid SetVelSolutionZero(void);\n\n  /*!\n\t * \\brief Specify a vector to set the velocity components of the solution.\n   * \\param[in] val_vector - Pointer to the vector.\n\t */\n\tvoid SetVelSolutionVector(su2double *val_vector);\n  \n\t/*!\n\t * \\brief Set to zero velocity components of the solution.\n\t */\n\tvoid SetVelSolutionOldZero(void);\n\n  /*!\n\t * \\brief Specify a vector to set the velocity components of the old solution.\n   * \\param[in] val_vector - Pointer to the vector.\n\t */\n\tvoid SetVelSolutionOldVector(su2double *val_vector);\n  \n\t/*!\n\t * \\brief Set to zero the solution.\n\t */\t\n\tvoid SetSolutionZero(void);\n  \n  /*!\n\t * \\brief Set to zero a particular solution.\n\t */\n  void SetSolutionZero(unsigned short val_var);\n\n\t/*!\n\t * \\brief Add a value to the solution.\n\t * \\param[in] val_var - Number of the variable.\n\t * \\param[in] val_solution - Value that we want to add to the solution.\n\t */\n\tvoid AddSolution(unsigned short val_var, su2double val_solution);\n\n  /*!\n\t * \\brief Add a value to the solution, clipping the values.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the solution change.\n   * \\param[in] lowerlimit - Lower value.\n   * \\param[in] upperlimit - Upper value.\n\t */\n\tvoid AddClippedSolution(unsigned short val_var, su2double val_solution,\n                          su2double lowerlimit, su2double upperlimit);\n  \n\t/*!\n\t * \\brief Update the variables using a conservative format.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the solution change.\n\t * \\param[in] val_density - Value of the density.\n\t * \\param[in] val_density_old - Value of the old density.\n   * \\param[in] lowerlimit - Lower value.\n   * \\param[in] upperlimit - Upper value.\n\t */\n\tvoid AddConservativeSolution(unsigned short val_var, su2double val_solution,\n\t\t\tsu2double val_density, su2double val_density_old, su2double lowerlimit,\n\t\t\tsu2double upperlimit);\n\n\t/*!\n\t * \\brief Get the solution of the problem.\n\t * \\return Pointer to the solution vector.\n\t */\n\tsu2double *GetSolution(void);\n\n\t/*!\n\t * \\brief Get the old solution of the problem (Runge-Kutta method)\n\t * \\return Pointer to the old solution vector.\n\t */\n\tsu2double *GetSolution_Old(void);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\t\n\tsu2double *GetSolution_time_n(void);\n\n\t/*!\n\t * \\brief Get the solution at time n-1.\n\t * \\return Pointer to the solution (at time n-1) vector.\n\t */\t\n\tsu2double *GetSolution_time_n1(void);\n\n\t/*!\n\t * \\brief Set the value of the old residual.\n\t * \\param[in] val_residual_old - Pointer to the residual vector.\n\t */\n\tvoid SetResidual_Old(su2double *val_residual_old);\n\n\t/*!\n\t * \\brief Add a value to the summed residual vector.\n\t * \\param[in] val_residual - Pointer to the residual vector.\n\t */\n\tvoid AddResidual_Sum(su2double *val_residual);\n\n\t/*!\n\t * \\brief Set summed residual vector to zero value.\n\t */\n\tvoid SetResidualSumZero(void);\n  \n  /*!\n\t * \\brief Set the velocity of the truncation error to zero.\n\t */\n\tvirtual void SetVel_ResTruncError_Zero(unsigned short iSpecies);\n\n\t/*!\n\t * \\brief Get the value of the summed residual.\n\t * \\return Pointer to the summed residual.\n\t */\t\n\tsu2double *GetResidual_Sum(void);\n\n\t/*!\n\t * \\brief Get the value of the old residual.\n\t * \\return Pointer to the old residual.\n\t */\t\n\tsu2double *GetResidual_Old(void);\n\n\t/*!\n\t * \\brief Get the value of the summed residual.\n\t * \\param[in] val_residual - Pointer to the summed residual.\n\t */\t\n\tvoid GetResidual_Sum(su2double *val_residual);\n\n\t/*!\n\t * \\brief Set auxiliar variables, we are looking for the gradient of that variable.\n\t * \\param[in] val_auxvar - Value of the auxiliar variable.\n\t */\n\tvoid SetAuxVar(su2double val_auxvar);\n\n\t/*!\n\t * \\brief Get the value of the auxiliary variable.\n\t * \\return Value of the auxiliary variable.\n\t */\n\tsu2double GetAuxVar(void);\n\n\t/*!\n\t * \\brief Set the auxiliary variable gradient to zero value.\n\t */\n\tvoid SetAuxVarGradientZero(void);\n\n\t/*!\n\t * \\brief Set the value of the auxiliary variable gradient.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_gradient - Value of the gradient for the index <i>val_dim</i>.\n\t */\n\tvoid SetAuxVarGradient(unsigned short val_dim, su2double val_gradient);\n\n\t/*!\n\t * \\brief Add a value to the auxiliary variable gradient.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient to be added for the index <i>val_dim</i>.\n\t */\t\t\n\tvoid AddAuxVarGradient(unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Subtract a value to the auxiliary variable gradient.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient to be subtracted for the index <i>val_dim</i>.\n\t */\t\t\n\tvoid SubtractAuxVarGradient(unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Get the gradient of the auxiliary variable.\n\t * \\return Value of the gradient of the auxiliary variable.\n\t */\t\t\n\tsu2double *GetAuxVarGradient(void);\n\n\t/*!\n\t * \\brief Get the gradient of the auxiliary variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the gradient of the auxiliary variable for the dimension <i>val_dim</i>.\n\t */\t\t\n\tsu2double GetAuxVarGradient(unsigned short val_dim);\t\n\n\t/*!\n\t * \\brief Add a value to the truncation error.\n\t * \\param[in] val_truncation_error - Value that we want to add to the truncation error.\n\t */\t\t\n\tvoid AddRes_TruncError(su2double *val_truncation_error);\n\n\t/*!\n\t * \\brief Subtract a value to the truncation error.\n\t * \\param[in] val_truncation_error - Value that we want to subtract to the truncation error.\n\t */\t\t\n\tvoid SubtractRes_TruncError(su2double *val_truncation_error);\n\n\t/*!\n\t * \\brief Set the truncation error to zero.\n\t */\t\t\n\tvoid SetRes_TruncErrorZero(void);\n  \n  /*!\n\t * \\brief Set the truncation error to zero.\n\t */\n\tvoid SetVal_ResTruncError_Zero(unsigned short val_var);\n\n\t/*!\n\t * \\brief Set the velocity of the truncation error to zero.\n\t */\t\t\n\tvoid SetVel_ResTruncError_Zero(void);\n  \n  /*!\n\t * \\brief Set the velocity of the truncation error to zero.\n\t */\n\tvoid SetEnergy_ResTruncError_Zero(void);\n\n\t/*!\n\t * \\brief Get the truncation error.\n\t * \\return Pointer to the truncation error.\n\t */\t\n\tsu2double *GetResTruncError(void);\n\n\t/*!\n\t * \\brief Get the truncation error.\n\t * \\param[in] val_trunc_error - Pointer to the truncation error.\n\t */\t\n\tvoid GetResTruncError(su2double *val_trunc_error);\n\n\t/*!\n\t * \\brief Set the gradient of the solution.\n\t * \\param[in] val_gradient - Gradient of the solution.\n\t */\n\tvoid SetGradient(su2double **val_gradient);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvoid SetGradient(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Set to zero the gradient of the solution.\n\t */\n\tvoid SetGradientZero(void);\n\n\t/*!\n\t * \\brief Add <i>val_value</i> to the solution gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to add to the solution gradient.\n\t */\n\tvoid AddGradient(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Subtract <i>val_value</i> to the solution gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to subtract to the solution gradient.\n\t */\n\tvoid SubtractGradient(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Get the value of the solution gradient.\n\t * \\return Value of the gradient solution.\n\t */\n\tsu2double **GetGradient(void);\n\n\t/*!\n\t * \\brief Get the value of the solution gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the solution gradient.\n\t */\n\tsu2double GetGradient(unsigned short val_var, unsigned short val_dim);\n\n\t/*!\n\t * \\brief Set the value of the limiter.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_limiter - Value of the limiter for the index <i>val_var</i>.\n\t */\n\tvoid SetLimiter(unsigned short val_var, su2double val_limiter);\n  \n  /*!\n\t * \\brief Set the value of the limiter.\n\t * \\param[in] val_species - Index of the species .\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_limiter - Value of the limiter for the index <i>val_var</i>.\n\t */\n\tvirtual void SetLimiterPrimitive(unsigned short val_species, unsigned short val_var, su2double val_limiter);\n  \n  /*!\n\t * \\brief Set the value of the limiter.\n   * \\param[in] val_species - Index of the species .\n\t * \\param[in] val_var - Index of the variable.\n\t */\n  virtual su2double GetLimiterPrimitive(unsigned short val_species, unsigned short val_var);\n\t\n\t/*!\n\t * \\brief Set the value of the max solution.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the max solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution_Max(unsigned short val_var, su2double val_solution);\n\t\n\t/*!\n\t * \\brief Set the value of the min solution.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the min solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution_Min(unsigned short val_var, su2double val_solution);\n\n\t/*!\n\t * \\brief Get the value of the slope limiter.\n\t * \\return Pointer to the limiters vector.\n\t */\n\tsu2double *GetLimiter(void);\n\n\t/*!\n\t * \\brief Get the value of the slope limiter.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the limiter vector for the variable <i>val_var</i>.\n\t */\n\tsu2double GetLimiter(unsigned short val_var);\n\t\n\t/*!\n\t * \\brief Get the value of the min solution.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the min solution for the variable <i>val_var</i>.\n\t */\n\tsu2double GetSolution_Max(unsigned short val_var);\n\t\n\t/*!\n\t * \\brief Get the value of the min solution.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the min solution for the variable <i>val_var</i>.\n\t */\n\tsu2double GetSolution_Min(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the value of the preconditioner Beta.\n\t * \\return Value of the low Mach preconditioner variable Beta\n\t */\n\tvirtual su2double GetPreconditioner_Beta();\n\n\t/*!\n\t * \\brief Set the value of the preconditioner Beta.\n\t * \\param[in] val_Beta - Value of the low Mach preconditioner variable Beta\n\t */\n\tvirtual void SetPreconditioner_Beta(su2double val_Beta);\n\n       /*!\n\t * \\brief Get the value of the wind gust\n\t * \\return Value of the wind gust\n\t */\n\tvirtual su2double* GetWindGust();\n    \n\t/*!\n\t * \\brief Set the value of the wind gust\n\t * \\param[in] val_WindGust - Value of the wind gust\n\t */\n\tvirtual void SetWindGust(su2double* val_WindGust);\n    \n    /*!\n\t * \\brief Get the value of the derivatives of the wind gust\n\t * \\return Value of the derivatives of the wind gust\n\t */\n\tvirtual su2double* GetWindGustDer();\n    \n\t/*!\n\t * \\brief Set the value of the derivatives of the wind gust\n\t * \\param[in] val_WindGust - Value of the derivatives of the wind gust\n\t */\n\tvirtual void SetWindGustDer(su2double* val_WindGust);\n    \n\t/*!\n\t * \\brief Set the value of the time step.\n\t * \\param[in] val_delta_time - Value of the time step.\n\t */\n\tvoid SetDelta_Time(su2double val_delta_time);\n\n\t/*!\n\t * \\brief Set the value of the time step.\n\t * \\param[in] val_delta_time - Value of the time step.\n\t * \\param[in] iSpecies - Index of the Species .\n\t */\n\tvirtual void SetDelta_Time(su2double val_delta_time, unsigned short iSpecies);\n\n\t/*!\n\t * \\brief Get the value of the time step.\n\t * \\return Value of the time step.\n\t */\n\tsu2double GetDelta_Time(void);\n\n\t/*!\n\t * \\brief Get the value of the time step.\n\t * \\param[in] iSpecies - Index of the Species\n\t * \\return Value of the time step.\n\t */\n\tvirtual su2double GetDelta_Time(unsigned short iSpecies);\n\n\t/*!\n\t * \\brief Set the value of the maximum eigenvalue.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue.\n\t */\n\tvoid SetMax_Lambda(su2double val_max_lambda);\n\n\t/*!\n\t * \\brief Set the value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t */\n\tvoid SetMax_Lambda_Inv(su2double val_max_lambda);\n\n\t/*!\n\t * \\brief Set the value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\param[in] val_species - Value of the species index to set the maximum eigenvalue.\n\t */\n\tvirtual void SetMax_Lambda_Inv(su2double val_max_lambda, unsigned short val_species);\n\n\t/*!\n\t * \\brief Set the value of the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the viscous terms of the PDE.\n\t */\n\tvoid SetMax_Lambda_Visc(su2double val_max_lambda);\n\n\t/*!\n\t * \\brief Set the value of the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\param[in] val_species - Index of the species to set the maximum eigenvalue of the viscous terms.\n\t */\n\tvirtual void SetMax_Lambda_Visc(su2double val_max_lambda, unsigned short val_species);\n\n\t/*!\n\t * \\brief Add a value to the maximum eigenvalue.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue.\n\t */\n\tvoid AddMax_Lambda(su2double val_max_lambda);\n\n\t/*!\n\t * \\brief Add a value to the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t */\n\tvoid AddMax_Lambda_Inv(su2double val_max_lambda);\n\n\t/*!\n\t * \\brief Add a value to the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the viscous terms of the PDE.\n\t */\n\tvoid AddMax_Lambda_Visc(su2double val_max_lambda);\n\n\t/*!\n\t * \\brief Get the value of the maximum eigenvalue.\n\t * \\return the value of the maximum eigenvalue.\n\t */\n\tsu2double GetMax_Lambda(void);\n\n\t/*!\n\t * \\brief Get the value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\return the value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t */\t\n\tsu2double GetMax_Lambda_Inv(void);\n\n\t/*!\n\t * \\brief Get the value of the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\return the value of the maximum eigenvalue for the viscous terms of the PDE.\n\t */\n\tsu2double GetMax_Lambda_Visc(void);\n\n\t/*!\n\t * \\brief Set the value of the spectral radius.\n\t * \\param[in] val_lambda - Value of the spectral radius.\n\t */\n\tvoid SetLambda(su2double val_lambda);\n\n\t/*!\n\t * \\brief Set the value of the spectral radius.\n\t * \\param[in] val_lambda - Value of the spectral radius.\n\t * \\param[in] val_iSpecies -Index of species\n\t */\n\tvirtual void SetLambda(su2double val_lambda, unsigned short val_iSpecies);\n\n\t/*!\n\t * \\brief Add the value of the spectral radius.\n\t * \\param[in] val_lambda - Value of the spectral radius.\n\t */\n\tvoid AddLambda(su2double val_lambda);\n\n\t/*!\n\t * \\brief Add the value of the spectral radius.\n\t * \\param[in] val_iSpecies -Index of species\n\t * \\param[in] val_lambda - Value of the spectral radius.\n\t */\n\tvirtual void AddLambda(su2double val_lambda, unsigned short val_iSpecies);\n\n\t/*!\n\t * \\brief Get the value of the spectral radius.\n\t * \\return Value of the spectral radius.\n\t */\n\tsu2double GetLambda(void);\n\n\t/*!\n\t * \\brief Get the value of the spectral radius.\n\t * \\param[in] val_iSpecies -Index of species\n\t * \\return Value of the spectral radius.\n\t */\n\tvirtual su2double GetLambda(unsigned short val_iSpecies);\n\n\t/*!\n\t * \\brief Set pressure sensor.\n\t * \\param[in] val_sensor - Value of the pressure sensor.\n\t */\n\tvoid SetSensor(su2double val_sensor);\n\n\t/*!\n\t * \\brief Set pressure sensor.\n\t * \\param[in] val_sensor - Value of the pressure sensor.\n\t * \\param[in] iSpecies - Index of the species.\n\t */\n\tvirtual void SetSensor(su2double val_sensor, unsigned short iSpecies);\n\n\t/*!\n\t * \\brief Get the pressure sensor.\n\t * \\return Value of the pressure sensor.\n\t */\t\n\tsu2double GetSensor(void);\n\n\t/*!\n\t * \\brief Get the pressure sensor.\n\t * \\param[in] iSpecies - index of species\n\t * \\return Value of the pressure sensor.\n\t */\n\tvirtual su2double GetSensor(unsigned short iSpecies);\n\n\t/*!\n\t * \\brief Set the value of the undivided laplacian of the solution.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_undivided_laplacian - Value of the undivided solution for the index <i>val_var</i>.\n\t */\n\tvoid SetUndivided_Laplacian(unsigned short val_var, su2double val_undivided_laplacian);\n\n\t/*!\n\t * \\brief Add the value of the undivided laplacian of the solution.\n\t * \\param[in] val_und_lapl - Value of the undivided solution.\n\t */\t\n\tvoid AddUnd_Lapl(su2double *val_und_lapl);\n\n\t/*!\n\t * \\brief Subtract the value of the undivided laplacian of the solution.\n\t * \\param[in] val_und_lapl - Value of the undivided solution.\n\t */\t\t\n\tvoid SubtractUnd_Lapl(su2double *val_und_lapl);\n\n\t/*!\n\t * \\brief Subtract the value of the undivided laplacian of the solution.\n\t * \\param[in] val_var - Variable of the undivided laplacian.\n\t * \\param[in] val_und_lapl - Value of the undivided solution.\n\t */\t\t\n\tvoid SubtractUnd_Lapl(unsigned short val_var, su2double val_und_lapl);\n\n\t/*!\n\t * \\brief Set the undivided laplacian of the solution to zero.\n\t */\t\t\t\n\tvoid SetUnd_LaplZero(void);\n\n\t/*!\n\t * \\brief Set a value to the undivided laplacian.\n\t * \\param[in] val_var - Variable of the undivided laplacian.\n\t * \\param[in] val_und_lapl - Value of the undivided laplacian.\n\t */\t\n\tvoid SetUnd_Lapl(unsigned short val_var, su2double val_und_lapl);\n\n\t/*!\n\t * \\brief Get the undivided laplacian of the solution.\n\t * \\return Pointer to the undivided laplacian vector.\n\t */\n\tsu2double *GetUndivided_Laplacian(void);\n\n\t/*!\n\t * \\brief Get the undivided laplacian of the solution.\n\t * \\param[in] val_var - Variable of the undivided laplacian.\n\t * \\return Value of the undivided laplacian vector.\n\t */\n\tsu2double GetUndivided_Laplacian(unsigned short val_var);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the flow density.\n\t */\n\tvirtual su2double GetDensity(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the flow density.\n\t */\n\tvirtual su2double GetDensity(unsigned short val_iSpecies);\n  \n  /*!\n\t * \\brief A virtual member.\n   * \\param[in] val_Species - Index of species s.\n\t * \\return Value of the mass fraction of species s.\n\t */\n\tvirtual su2double GetMassFraction(unsigned short val_Species);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the flow energy.\n\t */\t\n\tvirtual su2double GetEnergy(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Pointer to the force projection vector.\n\t */\n\tvirtual su2double *GetForceProj_Vector(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Pointer to the objective function source.\n\t */\n\tvirtual su2double *GetObjFuncSource(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Pointer to the internal boundary vector.\n\t */\n\tvirtual su2double *GetIntBoundary_Jump(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the eddy viscosity.\n\t */\t\t\n\tvirtual su2double GetEddyViscosity(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the eddy viscosity.\n\t */\n\tvirtual su2double GetEddyViscosityInc(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the flow enthalpy.\n\t */\t\t\n\tvirtual su2double GetEnthalpy(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the flow pressure.\n\t */\n\tvirtual su2double GetPressure(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the flow pressure.\n\t */\n\tvirtual su2double GetPressureInc(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_vector - Direction of projection.\n\t * \\return Value of the projected velocity.\n\t */\t\t\n\tvirtual su2double GetProjVel(su2double *val_vector);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_vector - Direction of projection.\n\t * \\param[in] val_species - Index of the desired species.\n\t * \\return Value of the projected velocity.\n\t */\t\t\n\tvirtual su2double GetProjVel(su2double *val_vector, unsigned short val_species);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the sound speed.\n\t */\t\t\n\tvirtual su2double GetSoundSpeed(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the density for the incompressible flow.\n\t */\t\t\n\tvirtual su2double GetDensityInc(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the levelset for the freesurface flows.\n\t */\n\tvirtual su2double GetLevelSet(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the distance for the freesurface flows.\n\t */\n\tvirtual su2double GetDistance(void);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the beta for the incompressible flow.\n\t */\t\t\n\tvirtual su2double GetBetaInc2(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the temperature.\n\t */\t\t\n\tvirtual su2double GetTemperature(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the vibrational-electronic temperature.\n\t */\n\tvirtual su2double GetTemperature_ve(void);\n  \n  /*!\n   * \\brief A virtual member -- Get the mixture specific heat at constant volume (trans.-rot.).\n   * \\return \\f$\\rho C^{t-r}_{v} \\f$\n   */\n  virtual su2double GetRhoCv_tr(void);\n  \n  /*!\n   * \\brief A virtual member -- Get the mixture specific heat at constant volume (vib.-el.).\n   * \\return \\f$\\rho C^{v-e}_{v} \\f$\n   */\n  virtual su2double GetRhoCv_ve(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the velocity for the dimension <i>val_dim</i>.\n\t */\n\tvirtual su2double GetVelocity(unsigned short val_dim);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Norm 2 of the velocity vector.\n\t */\t\t\n\tvirtual su2double GetVelocity2(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Norm 2 of the velocity vector of Fluid val_species.\n\t */\t\n\tvirtual su2double GetVelocity2(unsigned short val_species);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return The laminar viscosity of the flow.\n\t */\t\t\n\tvirtual su2double GetLaminarViscosity(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return The laminar viscosity of the incompressible flow.\n\t */\t\t\n\tvirtual su2double GetLaminarViscosityInc(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return The laminar viscosity of the flow.\n\t */\n\tvirtual su2double GetLaminarViscosity(unsigned short iSpecies);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the species diffusion coefficient.\n   */\n  virtual su2double* GetDiffusionCoeff(void);\n  \n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the thermal conductivity (translational/rotational)\n   */\n  virtual su2double GetThermalConductivity(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the specific heat at constant P\n   */\n   virtual su2double GetSpecificHeatCp(void);\n\n  /*!\n   * \\brief A virtual member.\n   * \\return Value of the thermal conductivity (vibrational)\n   */\n  virtual su2double GetThermalConductivity_ve(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Sets separation intermittency\n\t */\n\tvirtual void SetGammaSep(su2double gamma_sep);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Sets separation intermittency\n\t */\n\tvirtual void SetGammaEff(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Returns intermittency\n\t */\n\tvirtual su2double GetIntermittency();\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the vorticity.\n\t */\t\t\n\tvirtual su2double *GetVorticity(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the rate of strain magnitude.\n\t */\n\tvirtual su2double GetStrainMag(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_ForceProj_Vector - Pointer to the force projection vector.\n\t */\t\t\n\tvirtual void SetForceProj_Vector(su2double *val_ForceProj_Vector);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_SetObjFuncSource - Pointer to the objective function source.\n\t */\n\tvirtual void SetObjFuncSource(su2double *val_SetObjFuncSource);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_IntBoundary_Jump - Pointer to the interior boundary jump.\n\t */\t\t\n\tvirtual void SetIntBoundary_Jump(su2double *val_IntBoundary_Jump);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] eddy_visc - Value of the eddy viscosity.\n\t */\t\t\n\tvirtual void SetEddyViscosity(su2double eddy_visc);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] eddy_visc - Value of the eddy viscosity.\n\t */\n\tvirtual void SetEddyViscosityInc(su2double eddy_visc);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual void SetEnthalpy(void);\n\t\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual bool SetPrimVar_Compressible(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\t virtual bool SetPrimVar_Compressible(CFluidModel *FluidModel);\n\n\t/*!\n     * \\brief A virtual member.\n\t */\n     virtual void SetSecondaryVar_Compressible(CFluidModel *FluidModel);\n\n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual bool Cons2PrimVar(CConfig *config, su2double *U, su2double *V,\n                            su2double *dPdU, su2double *dTdU,\n                            su2double *dTvedU);\n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void Prim2ConsVar(CConfig *config, su2double *V, su2double *U);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPrimVar_Compressible(su2double SharpEdge_Distance, bool check, CConfig *config);\n\t\n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPrimVar_Incompressible(su2double SharpEdge_Distance, bool check, CConfig *config);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPrimVar_FreeSurface(su2double SharpEdge_Distance, bool check, CConfig *config);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual bool SetPrimVar_Compressible(su2double eddy_visc, su2double turb_ke, CConfig *config);\n\t\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual bool SetPrimVar_Compressible(su2double eddy_visc, su2double turb_ke, CFluidModel *FluidModel);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPrimVar_Incompressible(su2double Density_Inf, CConfig *config);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPrimVar_FreeSurface(CConfig *config);\n\t\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual bool SetPrimVar_Incompressible(su2double Density_Inf, su2double Viscosity_Inf, su2double eddy_visc, su2double turb_ke, CConfig *config);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPrimVar_FreeSurface(su2double eddy_visc, su2double turb_ke, CConfig *config);\n\t\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double GetPrimitive(unsigned short val_var);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetPrimitive(unsigned short val_var, su2double val_prim);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetPrimitive(su2double *val_prim);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double *GetPrimitive(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double GetSecondary(unsigned short val_var);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetSecondary(unsigned short val_var, su2double val_secondary);\n  \n    /*!\n\t * \\brief A virtual member.\n\t */\n    virtual void SetSecondary(su2double *val_secondary);\n\n    /*!\n \t * \\brief A virtual member.\n \t */\n     virtual void SetdPdrho_e(su2double dPdrho_e);\n\n     /*!\n   \t * \\brief A virtual member.\n   \t */\n     virtual void SetdPde_rho(su2double dPde_rho);\n\n    /*!\n  \t * \\brief A virtual member.\n  \t */\n     virtual void SetdTdrho_e(su2double dTdrho_e);\n\n    /*!\n     * \\brief A virtual member.\n     */\n     virtual void SetdTde_rho(su2double dTde_rho);\n\n     /*!\n   \t * \\brief A virtual member.\n   \t */\n      virtual void Setdmudrho_T(su2double dmudrho_T);\n\n     /*!\n      * \\brief A virtual member.\n      */\n      virtual void SetdmudT_rho(su2double dmudT_rho);\n\n    /*!\n     * \\brief A virtual member.\n     */\n     virtual void Setdktdrho_T(su2double dktdrho_T);\n\n    /*!\n     * \\brief A virtual member.\n     */\n     virtual void SetdktdT_rho(su2double dktdT_rho);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\t virtual su2double *GetSecondary(void);\n\t\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual void SetDensityInc(su2double val_density);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetPressureInc(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetVelocityInc(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual void SetBetaInc2(su2double val_betainc2);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_phi - Value of the adjoint velocity.\n\t */\t\t\n\tvirtual void SetPhi_Old(su2double *val_phi);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Gamma - Ratio of Specific heats\n\t */\n\tvirtual bool SetPressure(su2double Gamma);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] config\n\t */\n\tvirtual bool SetPressure(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetPressure(su2double Gamma, su2double turb_ke);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetPressure(void);\n  \n  /*!\n   * \\brief Calculates vib.-el. energy per mass, \\f$e^{vib-el}_s\\f$, for input species (not including KE)\n   */\n  virtual su2double CalcEve(su2double *V, CConfig *config, unsigned short val_Species);\n  \n  /*!\n   * \\brief Calculates enthalpy per mass, \\f$h_s\\f$, for input species (not including KE)\n   */\n  virtual su2double CalcHs(su2double *V, CConfig *config, unsigned short val_Species);\n  \n  /*!\n   * \\brief Calculates enthalpy per mass, \\f$Cv_s\\f$, for input species (not including KE)\n   */\n  virtual su2double CalcCvve(su2double val_Tve, CConfig *config, unsigned short val_Species);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] V\n\t * \\param[in] config - Configuration settings\n\t * \\param[in] dPdU\n\t */\n\tvirtual void CalcdPdU(su2double *V, CConfig *config, su2double *dPdU);\n  \n  /*!\n   * \\brief Set partial derivative of temperature w.r.t. density \\f$\\frac{\\partial P}{\\partial \\rho_s}\\f$\n   * \\param[in] V\n   * \\param[in] config - Configuration settings\n   * \\param[in] dTdU\n   */\n  virtual void CalcdTdU(su2double *V, CConfig *config, su2double *dTdU);\n  \n  /*!\n   * \\brief Set partial derivative of temperature w.r.t. density \\f$\\frac{\\partial P}{\\partial \\rho_s}\\f$\n   * \\param[in] V\n   * \\param[in] config - Configuration settings\n   * \\param[in] dTdU\n   */\n  virtual void CalcdTvedU(su2double *V, CConfig *config, su2double *dTdU);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double *GetdPdU(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double *GetdTdU(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double *GetdTvedU(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetDensity(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_velocity - Value of the velocity.\n\t * \\param[in] Gamma - Ratio of Specific heats\n\t */\t\t\n\tvirtual void SetDeltaPressure(su2double *val_velocity, su2double Gamma);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Gamma - Ratio of specific heats.\n\t */\t\t\n\tvirtual bool SetSoundSpeed(su2double Gamma);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Configuration parameters.\n\t */\t\t\n\tvirtual bool SetSoundSpeed(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual bool SetSoundSpeed(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Gas_Constant - Value of the Gas Constant\n\t */\t\t\n\tvirtual bool SetTemperature(su2double Gas_Constant);\n  \n  /*!\n\t * \\brief Sets the vibrational electronic temperature of the flow.\n\t * \\return Value of the temperature of the flow.\n\t */\n  virtual bool SetTemperature_ve(su2double val_Tve);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Configuration parameters.\n\t */\n\tvirtual bool SetTemperature(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Configuration parameters.\n\t */\t\n\tvirtual void SetPrimitive(CConfig *config);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Configuration parameters.\n\t * \\param[in] Coord - Physical coordinates.\n\t */\n\tvirtual void SetPrimitive(CConfig *config, su2double *Coord);\n\t\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Temperature_Wall - Value of the Temperature at the wall\n\t */\n\tvirtual void SetWallTemperature(su2double Temperature_Wall);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Temperature_Wall - Value of the Temperature at the wall\n\t */\n\tvirtual void SetWallTemperature(su2double* Temperature_Wall);\n\n\t/*!\n\t * \\brief Set the thermal coefficient.\n\t * \\param[in] config - Configuration parameters.\n\t */\n\tvirtual void SetThermalCoeff(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetVelocity(void);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetStress(unsigned short iVar, unsigned short jVar, su2double val_stress);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t */\n  virtual void AddStress(unsigned short iVar, unsigned short jVar, su2double val_stress);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\r\n  virtual void SetStress_FEM(unsigned short iVar, su2double val_stress);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n  virtual void AddStress_FEM(unsigned short iVar, su2double val_stress);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\r\n\t */\r\n  virtual su2double *GetStress_FEM(void);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n   \n\t */\n  virtual su2double **GetStress(void);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetVonMises_Stress(su2double val_stress);\n  \n\t/*!\n\t * \\brief A virtual member.\n   \n\t */\n  virtual su2double GetVonMises_Stress(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetFlow_Pressure(su2double val_pressure);\n  \n\t/*!\n\t * \\brief A virtual member.\n   \n\t */\n  virtual su2double GetFlow_Pressure(void);\n\n    /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void Initialize_Connectivity(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual void Upgrade_Connectivity(void);\n\n  /*!\n\t * \\brief A virtual member.\n\t */\n  virtual unsigned short Get_Connectivity(void);\n\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n  virtual void SetTraction(unsigned short iVar, unsigned short jVar, su2double val_traction);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n  virtual void AddTraction(unsigned short iVar, unsigned short jVar, su2double val_traction);\n\n\t/*!\n\t * \\brief A virtual member.\n\n\t */\n  virtual su2double **GetTraction(void);\n\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Add_SurfaceLoad_Res(su2double *val_surfForce);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual su2double *Get_SurfaceLoad_Res(void);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual su2double Get_SurfaceLoad_Res(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Clear_SurfaceLoad_Res(void);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Set_SurfaceLoad_Res_n(void);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual su2double Get_SurfaceLoad_Res_n(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Set_FlowTraction(su2double *val_flowTraction);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Add_FlowTraction(su2double *val_flowTraction);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual su2double *Get_FlowTraction(void);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual su2double Get_FlowTraction(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Set_FlowTraction_n(void);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual su2double Get_FlowTraction_n(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief A virtual member.\r\n\t */\r\n\tvirtual void Clear_FlowTraction(void);\r\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual void SetVelocity2(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_velocity - Pointer to the velocity.\n\t */\n\tvirtual void SetVelocity_Old(su2double *val_velocity);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_velocity - Pointer to the velocity.\n\t */\n\tvirtual void SetVelocityInc_Old(su2double *val_velocity);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] laminarViscosity\n\t */\t\n\tvirtual void SetLaminarViscosity(su2double laminarViscosity);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tvirtual void SetLaminarViscosity(CConfig *config);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_laminar_viscosity_inc - Value of the laminar viscosity (incompressible flows).\n\t */\t\t\n\tvirtual void SetLaminarViscosityInc(su2double val_laminar_viscosity_inc);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] thermalConductivity\n\t */\n\tvirtual void SetThermalConductivity(su2double thermalConductivity);\n  \n  /*!\n   * \\brief A virtual member.\n   * \\param[in] config - Definition of the particular problem.\n   */\n  virtual void SetThermalConductivity(CConfig *config);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] Cp - Constant pressure specific heat.\n\t */\n\tvirtual void SetSpecificHeatCp(su2double Cp);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual bool SetVorticity(bool val_limiter);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual bool SetStrainMag(bool val_limiter);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetVelSolutionOldDVector(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetVelSolutionDVector(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetGradient_PrimitiveZero(unsigned short val_primvar);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to add to the gradient of the primitive variables.\n\t */\n\tvirtual void AddGradient_Primitive(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to subtract to the gradient of the primitive variables.\n\t */\n\tvirtual void SubtractGradient_Primitive(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tvirtual su2double GetGradient_Primitive(unsigned short val_var, unsigned short val_dim);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tvirtual su2double GetLimiter_Primitive(unsigned short val_var);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvirtual void SetGradient_Primitive(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvirtual void SetLimiter_Primitive(unsigned short val_var, su2double val_value);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tvirtual su2double **GetGradient_Primitive(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tvirtual su2double *GetLimiter_Primitive(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual void SetGradient_SecondaryZero(unsigned short val_secondaryvar);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to add to the gradient of the Secondary variables.\n\t */\n\tvirtual void AddGradient_Secondary(unsigned short val_var, unsigned short val_dim, su2double val_value);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to subtract to the gradient of the Secondary variables.\n\t */\n\tvirtual void SubtractGradient_Secondary(unsigned short val_var, unsigned short val_dim, su2double val_value);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the Secondary variables gradient.\n\t */\n\tvirtual su2double GetGradient_Secondary(unsigned short val_var, unsigned short val_dim);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the Secondary variables gradient.\n\t */\n\tvirtual su2double GetLimiter_Secondary(unsigned short val_var);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvirtual void SetGradient_Secondary(unsigned short val_var, unsigned short val_dim, su2double val_value);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvirtual void SetLimiter_Secondary(unsigned short val_var, su2double val_value);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t * \\return Value of the Secondary variables gradient.\n\t */\n\tvirtual su2double **GetGradient_Secondary(void);\n  \n  /*!\n\t * \\brief A virtual member.\n\t * \\return Value of the Secondary variables gradient.\n\t */\n\tvirtual su2double *GetLimiter_Secondary(void);\n  \n\t/*!\n\t * \\brief Set the blending function for the blending of k-w and k-eps.\n\t * \\param[in] val_viscosity - Value of the vicosity.\n\t * \\param[in] val_density - Value of the density.\n\t * \\param[in] val_dist - Value of the distance to the wall.\n\t */\n\tvirtual void SetBlendingFunc(su2double val_viscosity, su2double val_dist, su2double val_density);\n\n\t/*!\n\t * \\brief Get the first blending function of the SST model.\n\t */\n\tvirtual su2double GetF1blending(void);\n\n\t/*!\n\t * \\brief Get the second blending function of the SST model.\n\t */\n\tvirtual su2double GetF2blending(void);\n\n\t/*!\n\t * \\brief Get the value of the cross diffusion of tke and omega.\n\t */\n\tvirtual su2double GetCrossDiff(void) { return 0.0; };\n\n\t/*!\n\t * \\brief Get the value of the eddy viscosity.\n\t * \\return the value of the eddy viscosity.\n\t */\n\tvirtual su2double GetmuT(void);\n\n\t/*!\n\t * \\brief Set the value of the eddy viscosity.\n\t * \\param[in] val_muT\n\t */\n\tvirtual void SetmuT(su2double val_muT);\n\n\t/*!\n\t * \\brief Add a value to the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the inviscid terms of the PDE.\n\t * \\param[in] iSpecies - Value of iSpecies to which the eigenvalue belongs\n\t */\n\tvirtual void AddMax_Lambda_Inv(su2double val_max_lambda, unsigned short iSpecies);\n\n\t/*!\n\t * \\brief Add a value to the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\param[in] val_max_lambda - Value of the maximum eigenvalue for the viscous terms of the PDE.\n\t * \\param[in] iSpecies - Value of iSpecies to which the eigenvalue belongs\n\t */\n\tvirtual void AddMax_Lambda_Visc(su2double val_max_lambda, unsigned short iSpecies);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_difflevelset - Value of the diff level set (value-target).\n\t */\t\n\tvirtual void SetDiffLevelSet(su2double val_difflevelset);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\t\t\n\tvirtual su2double GetDiffLevelSet(void);\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_source - Value of the time spectral source.\n\t */\n\tvirtual void SetTimeSpectral_Source(unsigned short val_var, su2double val_source);\n\n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvirtual su2double GetTimeSpectral_Source(unsigned short val_var);\n\n\t/*!\n\t * \\brief Set the Eddy Viscosity Sensitivity of the problem.\n\t * \\param[in] val_EddyViscSens - Eddy Viscosity Sensitivity.\n\t * \\param[in] numTotalVar - Number of variables.\n\t */\n\tvirtual void SetEddyViscSens(su2double *val_EddyViscSens, unsigned short numTotalVar);\n\n\t/*!\n\t * \\brief Get the Eddy Viscosity Sensitivity of the problem.\n\t * \\return Pointer to the Eddy Viscosity Sensitivity.\n\t */\n\tvirtual su2double *GetEddyViscSens(void);\n  \n  /*!\n\t * \\brief A virtual member. Set the direct solution for the adjoint solver.\n\t * \\param[in] val_solution_direct - Value of the direct solution.\n\t */\n\tvirtual void SetSolution_Direct(su2double *val_solution_direct);\n  \n\t/*!\n\t * \\brief A virtual member. Get the direct solution for the adjoint solver.\n\t * \\return Pointer to the direct solution vector.\n\t */\n\tvirtual su2double *GetSolution_Direct(void);\n\n\n\t/*!\n\t * STRUCTURAL ANALYSIS: NEW VARIABLES\n\t */\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t */\n\tvirtual void SetSolution_time_n(void);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_time_n - Pointer to the residual vector.\n\t */\n\tvirtual void SetSolution_time_n(unsigned short val_var, su2double val_solution);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvirtual void SetSolution_time_n(su2double *val_solution_time_n);\n\n\n\t/*!\n\t * \\brief Set the value of the velocity (Structural Analysis).\n\t * \\param[in] val_solution - Solution of the problem (velocity).\n\t */\n\tvirtual void SetSolution_Vel(su2double *val_solution);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_vel - Value of the solution for the index <i>val_var</i>.\n\t */\n\tvirtual void SetSolution_Vel(unsigned short val_var, su2double val_solution_vel);\n\n\t/*!\n\t * \\brief Set the value of the velocity (Structural Analysis) at time n.\n\t * \\param[in] val_solution_vel_time_n - Value of the old solution.\n\t */\n\tvirtual void SetSolution_Vel_time_n(su2double *val_solution_vel_time_n);\n\n\t/*!\n\t * \\brief Set the value of the velocity (Structural Analysis) at time n.\n\t */\n\tvirtual void SetSolution_Vel_time_n(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_vel_time_n - Value of the old solution for the index <i>val_var</i>.\n\t */\n\tvirtual void SetSolution_Vel_time_n(unsigned short val_var, su2double val_solution_vel_time_n);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tvirtual su2double GetSolution_time_n(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the velocity (Structural Analysis).\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tvirtual su2double GetSolution_Vel(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution of the problem.\n\t * \\return Pointer to the solution vector.\n\t */\n\tvirtual su2double *GetSolution_Vel(void);\n\n\t/*!\n\t * \\brief Get the velocity of the nodes (Structural Analysis) at time n.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tvirtual su2double GetSolution_Vel_time_n(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tvirtual su2double *GetSolution_Vel_time_n(void);\n\n\n\t/*!\n\t * \\brief Set the value of the acceleration (Structural Analysis).\n\t * \\param[in] val_solution_accel - Solution of the problem (acceleration).\n\t */\n\tvirtual void SetSolution_Accel(su2double *val_solution_accel);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_accel - Value of the solution for the index <i>val_var</i>.\n\t */\n\tvirtual void SetSolution_Accel(unsigned short val_var, su2double val_solution_accel);\n\n\t/*!\n\t * \\brief Set the value of the acceleration (Structural Analysis) at time n.\n\t * \\param[in] val_solution_accel_time_n - Pointer to the residual vector.\n\t */\n\tvirtual void SetSolution_Accel_time_n(su2double *val_solution_accel_time_n);\n\n\t/*!\n\t * \\brief Set the value of the acceleration (Structural Analysis) at time n.\n\t */\n\tvirtual void SetSolution_Accel_time_n(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_accel_time_n - Value of the old solution for the index <i>val_var</i>.\n\t */\n\tvirtual void SetSolution_Accel_time_n(unsigned short val_var, su2double val_solution_accel_time_n);\n\n\t/*!\n\t * \\brief Get the acceleration (Structural Analysis).\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tvirtual su2double GetSolution_Accel(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution of the problem.\n\t * \\return Pointer to the solution vector.\n\t */\n\tvirtual su2double *GetSolution_Accel(void);\n\n\t/*!\n\t * \\brief Get the acceleration of the nodes (Structural Analysis) at time n.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tvirtual su2double GetSolution_Accel_time_n(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tvirtual su2double *GetSolution_Accel_time_n(void);\n\n\n\t/*!\n\t * \\brief  A virtual member. Set the value of the solution predictor.\n\t */\n\tvirtual void SetSolution_Pred(void);\n\n\t/*!\n\t * \\brief  A virtual member. Set the value of the old solution.\n\t * \\param[in] val_solution_pred - Pointer to the residual vector.\n\t */\n\tvirtual void SetSolution_Pred(su2double *val_solution_pred);\n\n\t/*!\n\t * \\brief  A virtual member. Set the value of the solution predicted.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvirtual void SetSolution_Pred(unsigned short val_var, su2double val_solution_pred);\r\n\r\n\t/*!\r\n\t * \\brief  A virtual member. Get the value of the solution predictor.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tvirtual su2double GetSolution_Pred(unsigned short val_var);\n\n\t/*!\n\t * \\brief  A virtual member. Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tvirtual su2double *GetSolution_Pred(void);\n\n\t/*!\n\t * \\brief  A virtual member. Set the value of the solution predictor.\n\t */\n\tvirtual void SetSolution_Pred_Old(void);\n\n\t/*!\n\t * \\brief  A virtual member. Set the value of the old solution.\n\t * \\param[in] val_solution_pred_Old - Pointer to the residual vector.\n\t */\n\tvirtual void SetSolution_Pred_Old(su2double *val_solution_pred_Old);\n\n\t/*!\n\t * \\brief  A virtual member. Set the value of the old solution predicted.\r\n\t * \\param[in] val_solution_pred_old - Pointer to the residual vector.\r\n\t */\r\n\tvirtual void SetSolution_Pred_Old(unsigned short val_var, su2double val_solution_pred_old);\r\n\r\n\t/*!\r\n\t * \\brief  A virtual member. Get the value of the solution predictor.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tvirtual su2double GetSolution_Pred_Old(unsigned short val_var);\n\n\t/*!\n\t * \\brief  A virtual member. Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tvirtual su2double *GetSolution_Pred_Old(void);\n  \n  /*!\n   * \\brief Register the variables in the solution array as input/output variable.\n   * \\param[in] input - input or output variables.\n   */\n  void RegisterSolution(bool input);\n\n  /*!\n   * \\brief Register the variables in the solution_time_n array as input/output variable.\n   */\n  void RegisterSolution_time_n();\n\n  /*!\n   * \\brief Register the variables in the solution_time_n1 array as input/output variable.\n   */\n  void RegisterSolution_time_n1();\n\n  /*!\n   * \\brief Set the adjoint values of the solution.\n   * \\param[in] adj_sol - The adjoint values of the solution.\n   */\n  void SetAdjointSolution(su2double *adj_sol);\n\n  /*!\n   * \\brief Get the adjoint values of the solution.\n   * \\param[in] adj_sol - The adjoint values of the solution.\n   */\n  void GetAdjointSolution(su2double *adj_sol);\n\n  /*!\n   * \\brief Set the adjoint values of the solution at time n.\n   * \\param[in] adj_sol - The adjoint values of the solution.\n   */\n  void SetAdjointSolution_time_n(su2double *adj_sol);\n\n  /*!\n   * \\brief Get the adjoint values of the solution at time n.\n   * \\param[in] adj_sol - The adjoint values of the solution.\n   */\n  void GetAdjointSolution_time_n(su2double *adj_sol);\n\n  /*!\n   * \\brief Set the adjoint values of the solution at time n-1.\n   * \\param[in] adj_sol - The adjoint values of the solution.\n   */\n  void SetAdjointSolution_time_n1(su2double *adj_sol);\n\n  /*!\n   * \\brief Get the adjoint values of the solution at time n-1.\n   * \\param[in] adj_sol - The adjoint values of the solution.\n   */\n  void GetAdjointSolution_time_n1(su2double *adj_sol);\n\n  /*!\n   * \\brief Set the sensitivity at the node\n   * \\param[in] iDim - spacial component\n   * \\param[in] val - value of the Sensitivity\n   */\n  virtual void SetSensitivity(unsigned short iDim, su2double val);\n\n  /*!\n   * \\brief Get the Sensitivity at the node\n   * \\param[in] iDim - spacial component\n   * \\return value of the Sensitivity\n   */\n  virtual su2double GetSensitivity(unsigned short iDim);\n\n  virtual void SetDual_Time_Derivative(unsigned short iVar, su2double der);\n\n  virtual void SetDual_Time_Derivative_n(unsigned short iVar, su2double der);\n\n  virtual su2double GetDual_Time_Derivative(unsigned short iVar);\n\n  virtual su2double GetDual_Time_Derivative_n(unsigned short iVar);\n};\n\n/*!\n * \\class CBaselineVariable\n * \\brief Main class for defining the variables of a baseline solution from a restart file (for output).\n * \\author F. Palacios, T. Economon.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CBaselineVariable : public CVariable {\npublic:\n  \n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCBaselineVariable(void);\n  \n\t/*!\n\t * \\overload\n\t * \\param[in] val_solution - Pointer to the flow value (initialization value).\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCBaselineVariable(su2double *val_solution, unsigned short val_nvar, CConfig *config);\n  \n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CBaselineVariable(void);\n  \n};\n\n/*! \n * \\class CPotentialVariable\n * \\brief Main class for defining the variables of the potential solver.\n * \\ingroup Potential_Flow_Equation\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CPotentialVariable : public CVariable {\n\tsu2double *Charge_Density;\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCPotentialVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_potential - Value of the potential solution (initialization value).\t\t \n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCPotentialVariable(su2double val_potential, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n  /*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CPotentialVariable(void);\n  \n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tsu2double* GetChargeDensity();\n\n\t/*!\n\t * \\brief A virtual member.\n\t * \\param[in] positive_charge - Mass density of positive charge.\n\t * \\param[in] negative_charge - Mass density of negative charge.\n\t */\n\tvoid SetChargeDensity(su2double positive_charge, su2double negative_charge);\n\n};\n\n/*! \n * \\class CWaveVariable\n * \\brief Main class for defining the variables of the wave equation solver.\n * \\ingroup Potential_Flow_Equation\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CWaveVariable : public CVariable {\nprotected:\n\tsu2double *Solution_Direct;  /*!< \\brief Direct solution container for use in the adjoint wave solver. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCWaveVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_wave - Values of the wave solution (initialization value).\t\t \n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCWaveVariable(su2double *val_wave, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\t~CWaveVariable(void);\n\n\t/*!\n\t * \\brief Set the direct solution for the adjoint solver.\n\t * \\param[in] val_solution_direct - Value of the direct solution.\n\t */\n\tvoid SetSolution_Direct(su2double *val_solution_direct);\n\n\t/*!\n\t * \\brief Get the direct solution for the adjoint solver.\n\t * \\return Pointer to the direct solution vector.\n\t */\n\tsu2double *GetSolution_Direct(void);\n\n};\n\n/*! \n * \\class CHeatVariable\n * \\brief Main class for defining the variables of the Heat equation solver.\n * \\ingroup Potential_Flow_Equation\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CHeatVariable : public CVariable {\nprotected:\n\tsu2double *Solution_Direct;  /*!< \\brief Direct solution container for use in the adjoint Heat solver. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCHeatVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_Heat - Values of the Heat solution (initialization value).\t\t \n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCHeatVariable(su2double *val_Heat, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\t~CHeatVariable(void);\n\n\t/*!\n\t * \\brief Set the direct solution for the adjoint solver.\n\t * \\param[in] val_solution_direct - Value of the direct solution.\n\t */\n\tvoid SetSolution_Direct(su2double *val_solution_direct);\n\n\t/*!\n\t * \\brief Get the direct solution for the adjoint solver.\n\t * \\return Pointer to the direct solution vector.\n\t */\n\tsu2double *GetSolution_Direct(void);\n\n};\n\n/*! \n * \\class CFEAVariable\n * \\brief Main class for defining the variables of the FEA equation solver.\n * \\ingroup Structural Finite Element Analysis Variables\n * \\author F. Palacios, R. Sanchez.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CFEAVariable : public CVariable {\nprotected:\n  su2double Flow_Pressure;\t\t\t\t\t/*!< \\brief Pressure of the fluid. */\n\n  bool dynamicFEA;\t\t\t/*!< \\brief Non-physical points in the solution (force first order). */\n\n  su2double **Stress;  \t\t\t\t\t/*!< \\brief Stress tensor. */\n  su2double VonMises_Stress; \t\t\t\t/*!< \\brief Von Mises stress. */\n  unsigned short nAttachedElements; \t/*!< \\brief Number of elements connected to the node. */\n\n  su2double *Solution_Vel,\t\t\t\t\t/*!< \\brief Velocity of the nodes. */\n  *Solution_Vel_time_n;\t\t\t\t\t/*!< \\brief Velocity of the nodes at time n. */\n\n  su2double *Solution_Accel,\t\t\t\t/*!< \\brief Acceleration of the nodes. */\n  *Solution_Accel_time_n;\t\t\t\t/*!< \\brief Acceleration of the nodes at time n. */\n\n  su2double *Solution_Pred;\t\t\t\t/*!< \\brief Predictor of the solution (for FSI applications) */\n  su2double *Solution_Pred_Old;\t\t/*!< \\brief Predictor of the solution (for FSI applications) in the iter k-1 */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCFEAVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_fea - Values of the fea solution (initialization value).\t\t \n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCFEAVariable(su2double *val_fea, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\t~CFEAVariable(void);\n  \n  /*!\n\t * \\brief Set the value of the stress.\n   * \\param[in] iVar - i index.\n\t * \\param[in] jVar - j index.\n\t * \\param[in] val_stress - Value of the stress.\n\t */\n  void SetStress(unsigned short iVar, unsigned short jVar, su2double val_stress);\n  \n  /*!\n\t * \\brief Add a value to the stress matrix in the element.\n   * \\param[in] iVar - i index.\n\t * \\param[in] jVar - j index.\n\t * \\param[in] val_stress - Value of the stress.\n\t */\n  void AddStress(unsigned short iVar, unsigned short jVar, su2double val_stress);\n\n  /*!\n\t * \\brief Get the value of the stress.\n   * \\return Value of the stress.\n\t */\n  su2double **GetStress(void);\n\n  /*!\n\t * \\brief Set the value of the Von Mises stress.\n\t * \\param[in] val_stress - Value of the Von Mises stress.\n\t */\n  void SetVonMises_Stress(su2double val_stress);\n  \n  /*!\n\t * \\brief Get the value of the Von Mises stress.\n   * \\return Value of the Von Mises stress.\n\t */\n  su2double GetVonMises_Stress(void);\n  \n  /*!\n\t * \\brief Set the value of the Von Mises stress.\n\t * \\param[in] val_stress - Value of the Von Mises stress.\n\t */\n  void SetFlow_Pressure(su2double val_pressure);\n  \n  /*!\n\t * \\brief Get the value of the Von Mises stress.\n   * \\return Value of the Von Mises stress.\n\t */\n  su2double GetFlow_Pressure(void);\n\n  /*!\n\t * \\brief Initialize the value of the number of attached elements to a node.\n   * \\return Value of the Von Mises stress.\n\t */\n  void Initialize_Connectivity(void);\n\n\n  /*!\n\t * \\brief Add a 1 to the value of the number of attached elements to a node.\n   * \\return Value of the Von Mises stress.\n\t */\n  void Upgrade_Connectivity(void);\n\n\n  /*!\n\t * \\brief Returns the value of the number of attached elements to a node.\n   * \\return Value of the Von Mises stress.\n\t */\n  unsigned short Get_Connectivity(void);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_time_n(void);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_time_n(su2double *val_solution_time_n);\n\n\n\t/*!\n\t * \\brief Set the value of the velocity (Structural Analysis).\n\t * \\param[in] val_solution - Solution of the problem (velocity).\n\t */\n\tvoid SetSolution_Vel(su2double *val_solution_vel);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution_Vel(unsigned short val_var, su2double val_solution_vel);\n\n\t/*!\n\t * \\brief Set the value of the velocity (Structural Analysis) at time n.\n\t * \\param[in] val_solution - Solution of the problem (acceleration).\n\t */\n\tvoid SetSolution_Vel_time_n(void);\n\n\t/*!\n\t * \\brief Set the value of the velocity (Structural Analysis) at time n.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_Vel_time_n(su2double *val_solution_vel_time_n);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_old - Value of the old solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution_Vel_time_n(unsigned short val_var, su2double val_solution_vel_time_n);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tsu2double GetSolution_time_n(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the velocity (Structural Analysis).\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tsu2double GetSolution_Vel(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution of the problem.\n\t * \\return Pointer to the solution vector.\n\t */\n\tsu2double *GetSolution_Vel(void);\n\n\t/*!\n\t * \\brief Get the velocity of the nodes (Structural Analysis) at time n.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tsu2double GetSolution_Vel_time_n(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tsu2double *GetSolution_Vel_time_n(void);\n\n\t/*!\n\t * \\brief Set the value of the acceleration (Structural Analysis).\n\t * \\param[in] val_solution - Solution of the problem (acceleration).\n\t */\n\tvoid SetSolution_Accel(su2double *val_solution_accel);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution_Accel(unsigned short val_var, su2double val_solution_accel);\n\n\t/*!\n\t * \\brief Set the value of the acceleration (Structural Analysis) at time n.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_Accel_time_n(su2double *val_solution_accel_time_n);\n\n\t/*!\n\t * \\brief Set the value of the acceleration (Structural Analysis) at time n.\n\t * \\param[in] val_solution - Solution of the problem (acceleration).\n\t */\n\tvoid SetSolution_Accel_time_n(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution_old - Value of the old solution for the index <i>val_var</i>.\n\t */\n\tvoid SetSolution_Accel_time_n(unsigned short val_var, su2double val_solution_accel_time_n);\n\n\t/*!\n\t * \\brief Get the acceleration (Structural Analysis).\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the solution for the index <i>val_var</i>.\n\t */\n\tsu2double GetSolution_Accel(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution of the problem.\n\t * \\return Pointer to the solution vector.\n\t */\n\tsu2double *GetSolution_Accel(void);\n\n\t/*!\n\t * \\brief Get the acceleration of the nodes (Structural Analysis) at time n.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tsu2double GetSolution_Accel_time_n(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tsu2double *GetSolution_Accel_time_n(void);\n\n\n\t/*!\n\t * \\brief Set the value of the solution predictor.\n\t */\n\tvoid SetSolution_Pred(void);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_pred - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_Pred(su2double *val_solution_pred);\n\n\t/*!\n\t * \\brief Get the value of the solution predictor.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tsu2double GetSolution_Pred(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tsu2double *GetSolution_Pred(void);\n\n\t/*!\n\t * \\brief Set the value of the solution predictor.\n\t */\n\tvoid SetSolution_Pred_Old(void);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_pred_Old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_Pred_Old(su2double *val_solution_pred_Old);\n\n\t/*!\n\t * \\brief Get the value of the solution predictor.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Pointer to the old solution vector.\n\t */\n\tsu2double GetSolution_Pred_Old(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the solution at time n.\n\t * \\return Pointer to the solution (at time n) vector.\n\t */\n\tsu2double *GetSolution_Pred_Old(void);\n\n\n\n};\n\n/*!\r\n * \\class CFEM_ElasVariable\r\n * \\brief Main class for defining the variables of the FEM Linear Elastic structural problem.\r\n * \\ingroup Structural Finite Element Analysis Variables\r\n * \\author F. Palacios, R. Sanchez.\r\n * \\version 4.0.0 \"Cardinal\"\r\n */\r\nclass CFEM_ElasVariable : public CVariable {\r\nprotected:\r\n\r\n\tbool dynamic_analysis;\t\t\t\t\t/*!< \\brief Bool which determines if the problem is dynamic. */\r\n\tbool fsi_analysis;\t\t\t\t\t\t/*!< \\brief Bool which determines if the problem is FSI. */\r\n\r\n\tsu2double *Stress;  \t\t\t\t\t\t/*!< \\brief Stress tensor. */\r\n\tsu2double *FlowTraction;\t\t\t\t\t/*!< \\brief Traction from the fluid field. */\r\n\tsu2double *FlowTraction_n;\t\t\t\t\t/*!< \\brief Traction from the fluid field at time n. */\r\n\r\n//\tsu2double *Residual_Int;\t\t\t\t\t/*!< \\brief Internal stress term for the calculation of the residual */\r\n\tsu2double *Residual_Ext_Surf;\t\t\t\t/*!< \\brief Term of the residual due to external forces */\r\n\tsu2double *Residual_Ext_Surf_n;\t\t\t\t/*!< \\brief Term of the residual due to external forces at time n */\r\n\tsu2double *Residual_Ext_Body;\t\t\t\t/*!< \\brief Term of the residual due to body forces */\r\n\r\n\tsu2double VonMises_Stress; \t\t\t\t/*!< \\brief Von Mises stress. */\r\n\r\n\tsu2double *Solution_time_n;\t\t\t\t/*!< \\brief Displacement at the nodes at time n */\r\n\r\n\tsu2double *Solution_Vel,\t\t\t\t\t/*!< \\brief Velocity of the nodes. */\r\n\t*Solution_Vel_time_n;\t\t\t\t\t/*!< \\brief Velocity of the nodes at time n. */\r\n\r\n\tsu2double *Solution_Accel,\t\t\t\t\t/*!< \\brief Acceleration of the nodes. */\r\n\t*Solution_Accel_time_n;\t\t\t\t\t/*!< \\brief Acceleration of the nodes at time n. */\r\n\r\n\tsu2double *Solution_Pred,\t\t\t\t\t/*!< \\brief Predictor of the solution for FSI purposes */\r\n\t*Solution_Pred_Old;\t\t\t\t\t\t/*!< \\brief Predictor of the solution at time n for FSI purposes */\r\n\r\n\r\npublic:\r\n\r\n\t/*!\r\n\t * \\brief Constructor of the class.\r\n\t */\r\n  \tCFEM_ElasVariable(void);\r\n\r\n\t/*!\r\n\t * \\overload\r\n\t * \\param[in] val_fea - Values of the fea solution (initialization value).\r\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\r\n\t * \\param[in] val_nvar - Number of variables of the problem.\r\n\t * \\param[in] config - Definition of the particular problem.\r\n\t */\r\n  \tCFEM_ElasVariable(su2double *val_fea, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\r\n\r\n\t/*!\r\n\t * \\brief Destructor of the class.\r\n\t */\r\n\t~CFEM_ElasVariable(void);\r\n\r\n\t/*!\r\n\t* \\brief Get the value of the stress.\r\n\t* \\return Value of the stress.\r\n\t*/\r\n\tsu2double *GetStress_FEM(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the stress at the node\r\n\t * \\param[in] iVar - index of the stress term\r\n\t * \\param[in] val_stress - value of the stress\r\n\t */\r\n    void SetStress_FEM(unsigned short iVar, su2double val_stress);\r\n\r\n\t/*!\r\n\t * \\brief Add a certain value to the value of the stress at the node\r\n\t * \\param[in] iVar - index of the stress term\r\n\t * \\param[in] val_stress - value of the stress\r\n\t */\r\n    void AddStress_FEM(unsigned short iVar, su2double val_stress);\r\n\r\n\r\n\t/*!\r\n\t * \\brief Add surface load to the residual term\r\n\t */\r\n\tvoid Add_SurfaceLoad_Res(su2double *val_surfForce);\r\n\r\n\t/*!\r\n\t * \\brief Get the residual term due to surface load\r\n\t */\r\n\tsu2double *Get_SurfaceLoad_Res(void);\r\n\r\n\t/*!\r\n\t * \\brief Get the residual term due to surface load\r\n\t */\r\n\tsu2double Get_SurfaceLoad_Res(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief Clear the surface load residual\r\n\t */\r\n\tvoid Clear_SurfaceLoad_Res(void);\r\n\r\n\t/*!\r\n\t * \\brief Store the surface load as the load for the previous time step.\r\n\t */\r\n\tvoid Set_SurfaceLoad_Res_n(void);\r\n\r\n\t/*!\r\n\t * \\brief Get the surface load from the previous time step.\r\n\t */\r\n\tsu2double Get_SurfaceLoad_Res_n(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief Set the flow traction at a node on the structural side\r\n\t */\r\n\tvoid Set_FlowTraction(su2double *val_flowTraction);\r\n\r\n\t/*!\r\n\t * \\brief Add a value to the flow traction at a node on the structural side\r\n\t */\r\n\tvoid Add_FlowTraction(su2double *val_flowTraction);\r\n\r\n\t/*!\r\n\t * \\brief Get the residual term due to the flow traction\r\n\t */\r\n\tsu2double *Get_FlowTraction(void);\r\n\r\n\t/*!\r\n\t * \\brief Get the residual term due to the flow traction\r\n\t */\r\n\tsu2double Get_FlowTraction(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the flow traction at the previous time step.\r\n\t */\r\n\tvoid Set_FlowTraction_n(void);\r\n\r\n\t/*!\r\n\t * \\brief Retrieve the value of the flow traction from the previous time step.\r\n\t */\r\n\tsu2double Get_FlowTraction_n(unsigned short iVar);\r\n\r\n\t/*!\r\n\t * \\brief Clear the flow traction residual\r\n\t */\r\n\tvoid Clear_FlowTraction(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the old solution.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvoid SetSolution_time_n(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the old solution.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvoid SetSolution_time_n(su2double *val_solution_time_n);\n\n\t/*!\n\t * \\brief Set the value of the old solution.\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\n\t */\n\tvoid SetSolution_time_n(unsigned short val_var, su2double val_solution);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the velocity (Structural Analysis).\r\n\t * \\param[in] val_solution - Solution of the problem (velocity).\r\n\t */\r\n\tvoid SetSolution_Vel(su2double *val_solution_vel);\r\n\r\n\t/*!\r\n\t * \\overload\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\param[in] val_solution - Value of the solution for the index <i>val_var</i>.\r\n\t */\r\n\tvoid SetSolution_Vel(unsigned short val_var, su2double val_solution_vel);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the velocity (Structural Analysis) at time n.\r\n\t * \\param[in] val_solution - Solution of the problem (acceleration).\r\n\t */\r\n\tvoid SetSolution_Vel_time_n(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the velocity (Structural Analysis) at time n.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvoid SetSolution_Vel_time_n(su2double *val_solution_vel_time_n);\r\n\r\n\t/*!\r\n\t * \\overload\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\param[in] val_solution_old - Value of the old solution for the index <i>val_var</i>.\r\n\t */\r\n\tvoid SetSolution_Vel_time_n(unsigned short val_var, su2double val_solution_vel_time_n);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution at time n.\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Value of the solution for the index <i>val_var</i>.\r\n\t */\r\n\tsu2double GetSolution_time_n(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the velocity (Structural Analysis).\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Value of the solution for the index <i>val_var</i>.\r\n\t */\r\n\tsu2double GetSolution_Vel(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution of the problem.\r\n\t * \\return Pointer to the solution vector.\r\n\t */\r\n\tsu2double *GetSolution_Vel(void);\r\n\r\n\t/*!\r\n\t * \\brief Get the velocity of the nodes (Structural Analysis) at time n.\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Pointer to the old solution vector.\r\n\t */\r\n\tsu2double GetSolution_Vel_time_n(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution at time n.\r\n\t * \\return Pointer to the solution (at time n) vector.\r\n\t */\r\n\tsu2double *GetSolution_Vel_time_n(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the acceleration (Structural Analysis).\r\n\t * \\param[in] val_solution - Solution of the problem (acceleration).\r\n\t */\r\n\tvoid SetSolution_Accel(su2double *val_solution_accel);\r\n\r\n\t/*!\r\n\t * \\overload\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\param[in] val_solution - Value of the solution for the index <i>val_var</i>.\r\n\t */\r\n\tvoid SetSolution_Accel(unsigned short val_var, su2double val_solution_accel);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the acceleration (Structural Analysis) at time n.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvoid SetSolution_Accel_time_n(su2double *val_solution_accel_time_n);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the acceleration (Structural Analysis) at time n.\r\n\t * \\param[in] val_solution - Solution of the problem (acceleration).\r\n\t */\r\n\tvoid SetSolution_Accel_time_n(void);\r\n\r\n\t/*!\r\n\t * \\overload\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\param[in] val_solution_old - Value of the old solution for the index <i>val_var</i>.\r\n\t */\r\n\tvoid SetSolution_Accel_time_n(unsigned short val_var, su2double val_solution_accel_time_n);\r\n\r\n\t/*!\r\n\t * \\brief Get the acceleration (Structural Analysis).\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Value of the solution for the index <i>val_var</i>.\r\n\t */\r\n\tsu2double GetSolution_Accel(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution of the problem.\r\n\t * \\return Pointer to the solution vector.\r\n\t */\r\n\tsu2double *GetSolution_Accel(void);\r\n\r\n\t/*!\r\n\t * \\brief Get the acceleration of the nodes (Structural Analysis) at time n.\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Pointer to the old solution vector.\r\n\t */\r\n\tsu2double GetSolution_Accel_time_n(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution at time n.\r\n\t * \\return Pointer to the solution (at time n) vector.\r\n\t */\r\n\tsu2double *GetSolution_Accel_time_n(void);\r\n\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the solution predictor.\r\n\t */\r\n\tvoid SetSolution_Pred(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the old solution.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvoid SetSolution_Pred(su2double *val_solution_pred);\r\n\r\n\t/*!\r\n\t * \\brief  Set the value of the predicted solution.\r\n\t * \\param[in] val_var - Index of the variable\r\n\t * \\param[in] val_solution_pred - Value of the predicted solution.\r\n\t */\r\n\tvoid SetSolution_Pred(unsigned short val_var, su2double val_solution_pred);\r\n\r\n\t/*!\r\n\t * \\brief Get the value of the solution predictor.\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Pointer to the old solution vector.\r\n\t */\r\n\tsu2double GetSolution_Pred(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution at time n.\r\n\t * \\return Pointer to the solution (at time n) vector.\r\n\t */\r\n\tsu2double *GetSolution_Pred(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the solution predictor.\r\n\t */\r\n\tvoid SetSolution_Pred_Old(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the old solution.\r\n\t * \\param[in] val_solution_old - Pointer to the residual vector.\r\n\t */\r\n\tvoid SetSolution_Pred_Old(su2double *val_solution_pred_Old);\r\n\r\n\t/*!\r\n\t * \\brief  A virtual member. Set the value of the old solution predicted.\r\n\t * \\param[in] val_var - Index of the variable\r\n\t * \\param[in] val_solution_pred_old - Value of the old predicted solution.\r\n\t */\r\n\tvoid SetSolution_Pred_Old(unsigned short val_var, su2double val_solution_pred_old);\r\n\r\n\t/*!\r\n\t * \\brief Get the value of the solution predictor.\r\n\t * \\param[in] val_var - Index of the variable.\r\n\t * \\return Pointer to the old solution vector.\r\n\t */\r\n\tsu2double GetSolution_Pred_Old(unsigned short val_var);\r\n\r\n\t/*!\r\n\t * \\brief Get the solution at time n.\r\n\t * \\return Pointer to the solution (at time n) vector.\r\n\t */\r\n\tsu2double *GetSolution_Pred_Old(void);\r\n\r\n\t/*!\r\n\t * \\brief Set the value of the Von Mises stress.\r\n\t * \\param[in] val_stress - Value of the Von Mises stress.\r\n\t */\r\n\t void SetVonMises_Stress(su2double val_stress);\r\n\r\n\t/*!\r\n\t * \\brief Get the value of the Von Mises stress.\r\n\t * \\return Value of the Von Mises stress.\r\n\t */\r\n     su2double GetVonMises_Stress(void);\r\n\r\n\r\n};\r\n\n/*!\n * \\class CFEABoundVariable\n * \\brief Main class for defining the variables on the FEA boundaries for FSI applications.\n * \\author R. Sanchez.\n * \\version 3.2.3 \"eagle\"\n */\nclass CFEABoundVariable : public CVariable {\nprotected:\n  su2double **Traction;  /*!< \\brief Stress tensor. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n    CFEABoundVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_fea - Values of the fea solution (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] val_nElBound - Number of elements in the boundary\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n    CFEABoundVariable(unsigned short val_nDim, unsigned short val_nvar, unsigned short val_nElBound, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CFEABoundVariable(void);\n\n  /*!\n\t * \\brief Set the value of the stress.\n     * \\param[in] iVar - index of the traction vector.\n\t * \\param[in] jVar - index of the boundary element.\n\t * \\param[in] val_stress - Value of the stress.\n\t */\n  void SetTraction(unsigned short iVar, unsigned short jVar, su2double val_traction);\n\n  /*!\n\t * \\brief Add a value to the stress matrix in the element.\n     * \\param[in] iVar - index of the traction vector.\n\t * \\param[in] jVar - index of the boundary element.\n\t * \\param[in] val_stress - Value of the stress.\n\t */\n  void AddTraction(unsigned short iVar, unsigned short jVar, su2double val_traction);\n\n  /*!\n\t * \\brief Get the value of the stress.\n   * \\return Value of the stress.\n\t */\n  su2double **GetTraction(void);\n\n};\n\n/*! \n * \\class CEulerVariable\n * \\brief Main class for defining the variables of the Euler's solver.\n * \\ingroup Euler_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CEulerVariable : public CVariable {\nprotected:\n\tsu2double Velocity2;\t\t\t/*!< \\brief Square of the velocity vector. */\n\tsu2double *TS_Source;\t\t/*!< \\brief Time spectral source term. */\n\tsu2double Precond_Beta;\t/*!< \\brief Low Mach number preconditioner value, Beta. */\n  su2double *WindGust;           /*! < \\brief Wind gust value */\n  su2double *WindGustDer;        /*! < \\brief Wind gust derivatives value */\n\n\t/*--- Primitive variable definition ---*/\n  \n\tsu2double *Primitive;\t/*!< \\brief Primitive variables (T, vx, vy, vz, P, rho, h, c) in compressible flows. */\n\tsu2double **Gradient_Primitive;\t/*!< \\brief Gradient of the primitive variables (T, vx, vy, vz, P, rho). */ \n  su2double *Limiter_Primitive;    /*!< \\brief Limiter of the primitive variables (T, vx, vy, vz, P, rho). */ \n\n  /*--- Secondary variable definition ---*/\n  \n\tsu2double *Secondary;\t/*!< \\brief Primitive variables (T, vx, vy, vz, P, rho, h, c) in compressible flows. */\n\tsu2double **Gradient_Secondary;\t/*!< \\brief Gradient of the primitive variables (T, vx, vy, vz, P, rho). */\n  su2double *Limiter_Secondary;    /*!< \\brief Limiter of the primitive variables (T, vx, vy, vz, P, rho). */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCEulerVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_density - Value of the flow density (initialization value).\n\t * \\param[in] val_velocity - Value of the flow velocity (initialization value).\n\t * \\param[in] val_energy - Value of the flow energy (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\t\t \n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\t\n\tCEulerVariable(su2double val_density, su2double *val_velocity, su2double val_energy, unsigned short val_nDim, \n\t\t\tunsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_solution - Pointer to the flow value (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\t\n\tCEulerVariable(su2double *val_solution, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\t\n\tvirtual ~CEulerVariable(void);\n\n\t/*!\n\t * \\brief Set to zero the gradient of the primitive variables.\n\t */\n\tvoid SetGradient_PrimitiveZero(unsigned short val_primvar);\n\n\t/*!\n\t * \\brief Add <i>val_value</i> to the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to add to the gradient of the primitive variables.\n\t */\n\tvoid AddGradient_Primitive(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Subtract <i>val_value</i> to the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to subtract to the gradient of the primitive variables.\n\t */\n\tvoid SubtractGradient_Primitive(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n\t/*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double GetGradient_Primitive(unsigned short val_var, unsigned short val_dim);\n  \n  /*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double GetLimiter_Primitive(unsigned short val_var);\n\n\t/*!\n\t * \\brief Set the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvoid SetGradient_Primitive(unsigned short val_var, unsigned short val_dim, su2double val_value);\n\n  /*!\n\t * \\brief Set the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvoid SetLimiter_Primitive(unsigned short val_var, su2double val_value);\n  \n\t/*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double **GetGradient_Primitive(void);\n  \n  /*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double *GetLimiter_Primitive(void);\n\n  /*!\n\t * \\brief Set to zero the gradient of the primitive variables.\n\t */\n\tvoid SetGradient_SecondaryZero(unsigned short val_secondaryvar);\n  \n\t/*!\n\t * \\brief Add <i>val_value</i> to the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to add to the gradient of the primitive variables.\n\t */\n\tvoid AddGradient_Secondary(unsigned short val_var, unsigned short val_dim, su2double val_value);\n  \n\t/*!\n\t * \\brief Subtract <i>val_value</i> to the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value to subtract to the gradient of the primitive variables.\n\t */\n\tvoid SubtractGradient_Secondary(unsigned short val_var, unsigned short val_dim, su2double val_value);\n  \n\t/*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double GetGradient_Secondary(unsigned short val_var, unsigned short val_dim);\n  \n  /*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double GetLimiter_Secondary(unsigned short val_var);\n  \n\t/*!\n\t * \\brief Set the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvoid SetGradient_Secondary(unsigned short val_var, unsigned short val_dim, su2double val_value);\n  \n  /*!\n\t * \\brief Set the gradient of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\param[in] val_value - Value of the gradient.\n\t */\n\tvoid SetLimiter_Secondary(unsigned short val_var, su2double val_value);\n  \n\t/*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double **GetGradient_Secondary(void);\n  \n  /*!\n\t * \\brief Get the value of the primitive variables gradient.\n\t * \\return Value of the primitive variables gradient.\n\t */\n\tsu2double *GetLimiter_Secondary(void);\n\n    /*!\n \t * \\brief A virtual member.\n \t */\n    void SetdPdrho_e(su2double dPdrho_e);\n\n     /*!\n   \t * \\brief A virtual member.\n   \t */\n    void SetdPde_rho(su2double dPde_rho);\n  \n\t/*!\n\t * \\brief Set the value of the pressure.\n\t */\n\tbool SetPressure(su2double Gamma);\n\n\t/*!\n\t * \\brief Set the value of the speed of the sound.\n\t * \\param[in] Gamma - Value of Gamma.\n\t */\n\tbool SetSoundSpeed(su2double Gamma);\n\n\t/*!\n\t * \\brief Set the value of the enthalpy.\n\t */\n\tvoid SetEnthalpy(void);\n\t\n//\t/*!\n//\t * \\brief Set all the primitive variables for compressible flows.\n//\t */\n//\tbool SetPrimVar_Compressible(CConfig *config);\n\n\t/*!\n\t * \\brief Set all the primitive variables for compressible flows.\n\t */\n\tbool SetPrimVar_Compressible(CFluidModel *FluidModel);\n  using CVariable::SetPrimVar_Compressible;\n  \n\t/*!\n\t * \\brief A virtual member.\n\t */\n\tvoid SetSecondaryVar_Compressible(CFluidModel *FluidModel);\n\n\t/*!\n\t * \\brief Set all the primitive variables for incompressible flows.\n\t */\n\tbool SetPrimVar_Incompressible(su2double Density_Inf, CConfig *config);\n  using CVariable::SetPrimVar_Incompressible;\n  \n  /*!\n\t * \\brief Set all the primitive variables for incompressible flows.\n\t */\n\tbool SetPrimVar_FreeSurface(CConfig *config);\n\tusing CVariable::SetPrimVar_FreeSurface;\n  \n\t/*!\n\t * \\brief Get the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the primitive variable for the index <i>val_var</i>.\n\t */\n\tsu2double GetPrimitive(unsigned short val_var);\n  \n  /*!\n\t * \\brief Set the value of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n   * \\param[in] val_var - Index of the variable.\n\t * \\return Set the value of the primitive variable for the index <i>val_var</i>.\n\t */\n\tvoid SetPrimitive(unsigned short val_var, su2double val_prim);\n  \n  /*!\n\t * \\brief Set the value of the primitive variables.\n\t * \\param[in] val_prim - Primitive variables.\n\t * \\return Set the value of the primitive variable for the index <i>val_var</i>.\n\t */\n\tvoid SetPrimitive(su2double *val_prim);\n\n\t/*!\n\t * \\brief Get the primitive variables of the problem.\n\t * \\return Pointer to the primitive variable vector.\n\t */\n\tsu2double *GetPrimitive(void);\n  \n  /*!\n\t * \\brief Get the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the primitive variable for the index <i>val_var</i>.\n\t */\n\tsu2double GetSecondary(unsigned short val_var);\n  \n  /*!\n\t * \\brief Set the value of the primitive variables.\n\t * \\param[in] val_var - Index of the variable.\n   * \\param[in] val_var - Index of the variable.\n\t * \\return Set the value of the primitive variable for the index <i>val_var</i>.\n\t */\n\tvoid SetSecondary(unsigned short val_var, su2double val_secondary);\n  \n  /*!\n\t * \\brief Set the value of the primitive variables.\n\t * \\param[in] val_prim - Primitive variables.\n\t * \\return Set the value of the primitive variable for the index <i>val_var</i>.\n\t */\n\tvoid SetSecondary(su2double *val_secondary);\n  \n\t/*!\n\t * \\brief Get the primitive variables of the problem.\n\t * \\return Pointer to the primitive variable vector.\n\t */\n\tsu2double *GetSecondary(void);\n  \n\t/*!\n\t * \\brief Set the value of the density for the incompressible flows.\n\t */\n\tvoid SetDensityInc(su2double val_density);\n  \n  /*!\n\t * \\brief Set the value of the density for the incompressible flows.\n\t */\n\tbool SetDensity(void);\n  \n  /*!\n\t * \\brief Set the value of the density for the incompressible flows.\n\t */\n\tvoid SetPressureInc(void);\n  \n  /*!\n\t * \\brief Set the value of the density for the incompressible flows.\n\t */\n\tvoid SetVelocityInc(void);\n\n\t/*!\n\t * \\brief Set the value of the beta coeffient for incompressible flows.\n\t */\n\tvoid SetBetaInc2(su2double val_betainc2);\n\n\t/*!\n\t * \\brief Set the value of the temperature.\n\t * \\param[in] Gas_Constant - Value of Gas Constant\n\t */\n\tbool SetTemperature(su2double Gas_Constant);\n\n\t/*!\n\t * \\brief Get the norm 2 of the velocity.\n\t * \\return Norm 2 of the velocity vector.\n\t */\n\tsu2double GetVelocity2(void);\n\n\t/*!\n\t * \\brief Get the flow pressure.\n\t * \\return Value of the flow pressure.\n\t */\n\tsu2double GetPressure(void);\n  \n  /*!\n\t * \\brief Get the flow pressure.\n\t * \\return Value of the flow pressure.\n\t */\n\tsu2double GetPressureInc(void);\n  \n\t/*!\n\t * \\brief Get the speed of the sound.\n\t * \\return Value of speed of the sound.\n\t */\n\tsu2double GetSoundSpeed(void);\n\n\t/*!\n\t * \\brief Get the value of density for the incompressible flow\n\t * \\return Value of beta squared.\n\t */\n\tsu2double GetDensityInc(void);\n\n  /*!\n\t * \\brief Get the value of levelset for the freesurface flows\n\t * \\return Value of beta squared.\n\t */\n\tsu2double GetLevelSet(void);\n  \n  /*!\n\t * \\brief Get the value of distance for the freesurface flows\n\t * \\return Value of beta squared.\n\t */\n\tsu2double GetDistance(void);\n  \n\t/*!\n\t * \\brief Get the value of beta squared for the incompressible flow\n\t * \\return Value of beta squared.\n\t */\n\tsu2double GetBetaInc2(void);\n\n\t/*!\n\t * \\brief Get the enthalpy of the flow.\n\t * \\return Value of the enthalpy of the flow.\n\t */\n\tsu2double GetEnthalpy(void);\n\n\t/*!\n\t * \\brief Get the density of the flow.\n\t * \\return Value of the density of the flow.\n\t */\n\tsu2double GetDensity(void);\n\n\t/*!\n\t * \\brief Get the energy of the flow.\n\t * \\return Value of the energy of the flow.\n\t */\n\tsu2double GetEnergy(void);\n\n\t/*!\n\t * \\brief Get the temperature of the flow.\n\t * \\return Value of the temperature of the flow.\n\t */\n\tsu2double GetTemperature(void);\n\n\t/*!\n\t * \\brief Get the velocity of the flow.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the velocity for the dimension <i>val_dim</i>.\n\t */\n\tsu2double GetVelocity(unsigned short val_dim);\n\n\t/*!\n\t * \\brief Get the projected velocity in a unitary vector direction (compressible solver).\n\t * \\param[in] val_vector - Direction of projection.\n\t * \\return Value of the projected velocity.\n\t */\n\tsu2double GetProjVel(su2double *val_vector);\n\n\t/*!\n\t * \\brief Set the velocity vector from the solution.\n\t * \\param[in] val_velocity - Pointer to the velocity.\n\t */\t\n\tvoid SetVelocity(void);\n\n\t/*!\n\t * \\brief Set the velocity vector from the old solution.\n\t * \\param[in] val_velocity - Pointer to the velocity.\n\t */\t\t\n\tvoid SetVelocity_Old(su2double *val_velocity);\n  \n  /*!\n\t * \\brief Set the velocity vector from the old solution.\n\t * \\param[in] val_velocity - Pointer to the velocity.\n\t */\n\tvoid SetVelocityInc_Old(su2double *val_velocity);\n\n\t/*!\n\t * \\brief Set the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the time spectral source term. for the index <i>val_var</i>.\n\t */\n\tvoid SetTimeSpectral_Source(unsigned short val_var, su2double val_source);\n\n\t/*!\n\t * \\brief Get the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the time spectral source term for the index <i>val_var</i>.\n\t */\n\tsu2double GetTimeSpectral_Source(unsigned short val_var);\n\n\t/*!\n\t * \\brief Get the value of the preconditioner Beta.\n\t * \\return Value of the low Mach preconditioner variable Beta\n\t */\n\tsu2double GetPreconditioner_Beta();\n\n\t/*!\n\t * \\brief Set the value of the preconditioner Beta.\n\t * \\param[in] Value of the low Mach preconditioner variable Beta\n\t */\n\tvoid SetPreconditioner_Beta(su2double val_Beta);\n    \n    /*!\n\t * \\brief Get the value of the wind gust\n\t * \\return Value of the wind gust\n\t */\n\tsu2double* GetWindGust();\n    \n\t/*!\n\t * \\brief Set the value of the wind gust\n\t * \\param[in] Value of the wind gust\n\t */\n\tvoid SetWindGust(su2double* val_WindGust);\n    \n    /*!\n\t * \\brief Get the value of the derivatives of the wind gust\n\t * \\return Value of the derivatives of the wind gust\n\t */\n\tsu2double* GetWindGustDer();\n    \n\t/*!\n\t * \\brief Set the value of the derivatives of the wind gust\n\t * \\param[in] Value of the derivatives of the wind gust\n\t */\n\tvoid SetWindGustDer(su2double* val_WindGust);\n};\n\n/*! \n * \\class CNSVariable\n * \\brief Main class for defining the variables of the Navier-Stokes' solver.\n * \\ingroup Navier_Stokes_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CNSVariable : public CEulerVariable {\nprivate:\n\tsu2double Prandtl_Lam;     /*!< \\brief Laminar Prandtl number. */\n\tsu2double Prandtl_Turb;    /*!< \\brief Turbulent Prandtl number. */\n\tsu2double Temperature_Ref; /*!< \\brief Reference temperature of the fluid. */\n\tsu2double Viscosity_Ref;   /*!< \\brief Reference viscosity of the fluid. */\n\tsu2double Viscosity_Inf;   /*!< \\brief Viscosity of the fluid at the infinity. */\n\tsu2double Vorticity[3];    /*!< \\brief Vorticity of the fluid. */\n\tsu2double StrainMag;       /*!< \\brief Magnitude of rate of strain tensor. */\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCNSVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_density - Value of the flow density (initialization value).\n\t * \\param[in] val_velocity - Value of the flow velocity (initialization value).\n\t * \\param[in] val_energy - Value of the flow energy (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\t\t \n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCNSVariable(su2double val_density, su2double *val_velocity, \n\t\t\tsu2double val_energy, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_solution - Pointer to the flow value (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t\n\t */\n\tCNSVariable(su2double *val_solution, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\t~CNSVariable(void);\n\n\t/*!\n\t * \\brief Set the laminar viscosity.\n\t */\n\tvoid SetLaminarViscosity(su2double laminarViscosity);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_laminar_viscosity_inc - Value of the laminar viscosity (incompressible flows).\n\t */\n\tvoid SetLaminarViscosityInc(su2double val_laminar_viscosity_inc);\n\n\t/*!\n\t * \\brief Set the laminar viscosity.\n\t */\n\tvoid SetThermalConductivity(su2double thermalConductivity);\n\n\t/*!\n\t * \\brief Set the specific heat Cp.\n\t */\n\tvoid SetSpecificHeatCp(su2double Cp);\n\n\t/*!\n\t * \\brief Set the vorticity value.\n\t */\n\tbool SetVorticity(bool val_limiter);\n\n\t/*!\n\t * \\brief Set the rate of strain magnitude.\n\t */\n\tbool SetStrainMag(bool val_limiter);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] eddy_visc - Value of the eddy viscosity.\n\t */\n\tvoid SetEddyViscosity(su2double eddy_visc);\n  \n  /*!\n\t * \\overload\n\t * \\param[in] eddy_visc - Value of the eddy viscosity.\n\t */\n\tvoid SetEddyViscosityInc(su2double eddy_visc);\n\n\t/*!\n\t * \\brief Get the laminar viscosity of the flow.\n\t * \\return Value of the laminar viscosity of the flow.\n\t */\n\tsu2double GetLaminarViscosity(void);\n\n\t/*!\n\t * \\brief Get the laminar viscosity of the incompressible flow.\n\t * \\return Value of the laminar viscosity of the incompressible flow.\n\t */\n\tsu2double GetLaminarViscosityInc(void);\n\n\t/*!\n\t * \\brief Get the thermal conductivity of the flow.\n\t * \\return Value of the laminar viscosity of the flow.\n\t */\n\tsu2double GetThermalConductivity(void);\n\n\t/*!\n\t * \\brief Get the eddy viscosity of the flow.\n\t * \\return The eddy viscosity of the flow.\n\t */\n\tsu2double GetEddyViscosity(void);\n\n\t/*!\n\t * \\brief Get the specific heat at constant P of the flow.\n\t * \\return Value of the specific heat at constant P  of the flow.\n\t */\n\tsu2double GetSpecificHeatCp(void);\n\n    /*!\n\t * \\brief Get the eddy viscosity of the flow.\n\t * \\return The eddy viscosity of the flow.\n\t */\n\tsu2double GetEddyViscosityInc(void);\n\n\t/*!\n\t * \\brief Set the temperature at the wall\n\t */\n\tvoid SetWallTemperature(su2double temperature_wall);\n\n\t/*!\n\t * \\brief Get the value of the vorticity.\n\t * \\param[in] val_dim - Index of the dimension.\n\t * \\return Value of the vorticity.\n\t */\t\n\tsu2double *GetVorticity(void);\n\n\t/*!\n\t * \\brief Get the value of the magnitude of rate of strain.\n\t * \\return Value of the rate of strain magnitude.\n\t */\n\tsu2double GetStrainMag(void);\n  \n  /*!\n   * \\brief Set the derivative of temperature with respect to density (at constant internal energy).\n   */\n  void SetdTdrho_e(su2double dTdrho_e);\n  \n  /*!\n   * \\brief Set the derivative of temperature with respect to internal energy (at constant density).\n   */\n  void SetdTde_rho(su2double dTde_rho);\n  \n  /*!\n   * \\brief Set the derivative of laminar viscosity with respect to density (at constant temperature).\n   */\n  void Setdmudrho_T(su2double dmudrho_T);\n  \n  /*!\n   * \\brief Set the derivative of laminar viscosity with respect to temperature (at constant density).\n   */\n  void SetdmudT_rho(su2double dmudT_rho);\n  \n  /*!\n   * \\brief Set the derivative of thermal conductivity with respect to density (at constant temperature).\n   */\n  void Setdktdrho_T(su2double dktdrho_T);\n  \n  /*!\n   * \\brief Set the derivative of thermal conductivity with respect to temperature (at constant density).\n   */\n  void SetdktdT_rho(su2double dktdT_rho);\n  \n  /*!\n   * \\brief Set all the primitive variables for compressible flows\n   */\n  bool SetPrimVar_Compressible(su2double eddy_visc, su2double turb_ke, CFluidModel *FluidModel);\n  using CVariable::SetPrimVar_Compressible;\n  \n\t/*!\n\t * \\brief Set all the secondary variables (partial derivatives) for compressible flows\n\t */\n\tvoid SetSecondaryVar_Compressible(CFluidModel *FluidModel);\n\n\t/*!\n\t * \\brief Set all the primitive variables for incompressible flows\n\t */\n\tbool SetPrimVar_Incompressible(su2double Density_Inf, su2double Viscosity_Inf, su2double eddy_visc, su2double turb_ke, CConfig *config);\n  using CVariable::SetPrimVar_Incompressible;\n  \n  /*!\n\t * \\brief Set all the primitive variables for incompressible flows\n\t */\n\tbool SetPrimVar_FreeSurface(su2double eddy_visc, su2double turb_ke, CConfig *config);\n  using CVariable::SetPrimVar_FreeSurface;\n  \n};\n\n/*! \n * \\class CTurbVariable\n * \\brief Main class for defining the variables of the turbulence model.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CTurbVariable : public CVariable {\nprotected:\n\tsu2double muT;                /*!< \\brief Eddy viscosity. */\n\tsu2double *TS_Source; \t       /*!< \\brief Time spectral source term. */\n\npublic:\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\t\n\tCTurbVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCTurbVariable(unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CTurbVariable(void);\n\n\t/*!\n\t * \\brief Get the value of the eddy viscosity.\n\t * \\return the value of the eddy viscosity.\n\t */\n\tsu2double GetmuT();\n\n\t/*!\n\t * \\brief Set the value of the eddy viscosity.\n\t * \\param[in] val_muT - Value of the eddy viscosity.\n\t */\n\tvoid SetmuT(su2double val_muT);\n};\n\n/*!\n * \\class CTurbSAVariable\n * \\brief Main class for defining the variables of the turbulence model.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTurbSAVariable : public CTurbVariable {\npublic:\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbSAVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_nu_tilde - Turbulent variable value (initialization value).\n\t * \\param[in] val_muT  - The eddy viscosity\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCTurbSAVariable(su2double val_nu_tilde, su2double val_muT, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\n\t~CTurbSAVariable(void);\n\n\t/*!\n\t * \\brief Set the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_source - Value of the time spectral source term. for the index <i>val_var</i>.\n\t */\n\tvoid SetTimeSpectral_Source(unsigned short val_var, su2double val_source);\n\n\t/*!\n\t * \\brief Get the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the time spectral source term for the index <i>val_var</i>.\n\t */\n\tsu2double GetTimeSpectral_Source(unsigned short val_var);\n\n};\n\n\n/*!\n * \\class CTurbMLVariable\n * \\brief Main class for defining the variables of the turbulence model.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTurbMLVariable : public CTurbVariable {\npublic:\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbMLVariable(void);\n  \n\t/*!\n\t * \\overload\n\t * \\param[in] val_nu_tilde - Turbulent variable value (initialization value).\n\t * \\param[in] val_muT  - The eddy viscosity\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCTurbMLVariable(su2double val_nu_tilde, su2double val_muT, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n  \n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CTurbMLVariable(void);\n  \n\t/*!\n\t * \\brief Set the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_source - Value of the time spectral source term. for the index <i>val_var</i>.\n\t */\n\tvoid SetTimeSpectral_Source(unsigned short val_var, su2double val_source);\n  \n\t/*!\n\t * \\brief Get the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the time spectral source term for the index <i>val_var</i>.\n\t */\n\tsu2double GetTimeSpectral_Source(unsigned short val_var);\n  \n};\n\n/*!\n * \\class CTransLMVariable\n * \\brief Main class for defining the variables of the turbulence model.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTransLMVariable : public CTurbVariable {\nprotected:\n  su2double gamma_sep;\n  \npublic:\n  \n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTransLMVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_nu_tilde - Turbulent variable value (initialization value).\n\t * \\param[in] val_intermittency\n\t * \\param[in] val_REth\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCTransLMVariable(su2double val_nu_tilde, su2double val_intermittency, su2double val_REth, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\n\t~CTransLMVariable(void);\n\n  /*!\n\t * \\brief ________________.\n\t */\n  su2double GetIntermittency(void);\n  \n  /*!\n\t * \\brief ________________.\n\t * \\param[in] gamma_sep_in\n\t */\n  void SetGammaSep(su2double gamma_sep_in);\n  \n  /*!\n\t * \\brief ________________.\n\t */\n  void SetGammaEff(void);\n  \n};\n\n/*! \n * \\class CTurbSSTVariable\n * \\brief Main class for defining the variables of the turbulence model.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\n\nclass CTurbSSTVariable : public CTurbVariable {\nprotected:\n\tsu2double sigma_om2,\n\tbeta_star;\n\tsu2double F1,\t\t/*!< \\brief Menter blending function for blending of k-w and k-eps. */\n\tF2,\t\t        /*!< \\brief Menter blending function for stress limiter. */\n\tCDkw;           /*!< \\brief Cross-diffusion. */\n  \npublic:\n\t/*!\n\t * \\brief Constructor of the class.\n\t */\n\tCTurbSSTVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_rho_kine - Turbulent variable value (initialization value).\n\t * \\param[in] val_rho_omega - Turbulent variable value (initialization value).\n   * \\param[in] val_muT - Turbulent variable value (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n   * \\param[in] constants -\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCTurbSSTVariable(su2double val_rho_kine, su2double val_rho_omega, su2double val_muT, unsigned short val_nDim, unsigned short val_nvar,\n\t\t\tsu2double *constants, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\t~CTurbSSTVariable(void);\n\n\t/*!\n\t * \\brief Set the blending function for the blending of k-w and k-eps.\n\t * \\param[in] val_viscosity - Value of the vicosity.\n\t * \\param[in] val_dist - Value of the distance to the wall.\n\t * \\param[in] val_density - Value of the density.\n\t */\n\tvoid SetBlendingFunc(su2double val_viscosity, su2double val_dist, su2double val_density);\n\n\t/*!\n\t * \\brief Get the first blending function.\n\t */\n\tsu2double GetF1blending(void);\n\n\t/*!\n\t * \\brief Get the second blending function.\n\t */\n\tsu2double GetF2blending(void);\n\n\t/*!\n\t * \\brief Get the value of the cross diffusion of tke and omega.\n\t */\n\tsu2double GetCrossDiff(void);\n};\n\n\n/*! \n * \\class CAdjEulerVariable\n * \\brief Main class for defining the variables of the adjoint Euler solver.\n * \\ingroup Euler_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjEulerVariable : public CVariable {\nprotected:\n\tsu2double *Psi;\t\t/*!< \\brief Vector of the adjoint variables. */\n\tsu2double *ForceProj_Vector;\t/*!< \\brief Vector d. */\n\tsu2double *ObjFuncSource;    /*!< \\brief Vector containing objective function sensitivity for discrete adjoint. */\n\tsu2double *IntBoundary_Jump;\t/*!< \\brief Interior boundary jump vector. */\n\tsu2double *TS_Source;\t\t/*!< \\brief Time spectral source term. */\n\tbool incompressible;\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\t\t\n\tCAdjEulerVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_psirho - Value of the adjoint density (initialization value).\n\t * \\param[in] val_phi - Value of the adjoint velocity (initialization value).\n\t * \\param[in] val_psie - Value of the adjoint energy (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\t\n\tCAdjEulerVariable(su2double val_psirho, su2double *val_phi, su2double val_psie, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_solution - Pointer to the adjoint value (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\t\n\tCAdjEulerVariable(su2double *val_solution, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\tvirtual ~CAdjEulerVariable(void);\n\n  /*!\n\t * \\brief Set all the primitive variables for compressible flows.\n\t */\n\tbool SetPrimVar_Compressible(su2double SharpEdge_Distance, bool check, CConfig *config);\n  using CVariable::SetPrimVar_Compressible;\n  \n  /*!\n\t * \\brief Set all the primitive variables for compressible flows.\n\t */\n\tbool SetPrimVar_Incompressible(su2double SharpEdge_Distance, bool check, CConfig *config);\n  using CVariable::SetPrimVar_Incompressible;\n  \n  /*!\n\t * \\brief Set all the primitive variables for compressible flows.\n\t */\n\tbool SetPrimVar_FreeSurface(su2double SharpEdge_Distance, bool check, CConfig *config);\n  using CVariable::SetPrimVar_FreeSurface;\n  \n\t/*!\n\t * \\brief Set the value of the adjoint velocity.\n\t * \\param[in] val_phi - Value of the adjoint velocity.\n\t */\t\n\tvoid SetPhi_Old(su2double *val_phi);\n\n\t/*!\n\t * \\brief Set the value of the force projection vector.\n\t * \\param[in] val_ForceProj_Vector - Pointer to the force projection vector.\n\t */\t\t\n\tvoid SetForceProj_Vector(su2double *val_ForceProj_Vector);\n\n\t/*!\n\t * \\brief Set the value of the objective function source.\n\t * \\param[in] val_SetObjFuncSource - Pointer to the objective function source.\n\t */\n\tvoid SetObjFuncSource(su2double *val_SetObjFuncSource);\n\n\t/*!\n\t * \\brief Set the value of the interior boundary jump vector vector.\n\t * \\param[in] val_IntBoundary_Jump - Pointer to the interior boundary jump vector.\n\t */\t\t\n\tvoid SetIntBoundary_Jump(su2double *val_IntBoundary_Jump);\n\n\t/*!\n\t * \\brief Get the value of the force projection vector.\n\t * \\return Pointer to the force projection vector.\n\t */\t\t\n\tsu2double *GetForceProj_Vector(void);\n\n\t/*!\n\t * \\brief Get the value of the objective function source.\n\t * \\param[in] val_SetObjFuncSource - Pointer to the objective function source.\n\t */\n\tsu2double *GetObjFuncSource(void);\n\n\t/*!\n\t * \\brief Get the value of the force projection vector.\n\t * \\return Pointer to the force projection vector.\n\t */\t\t\n\tsu2double *GetIntBoundary_Jump(void);\n\n\t/*!\n\t * \\brief Set the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\param[in] val_solution - Value of the time spectral source term. for the index <i>val_var</i>.\n\t */\n\tvoid SetTimeSpectral_Source(unsigned short val_var, su2double val_source);\n\n\t/*!\n\t * \\brief Get the time spectral source term.\n\t * \\param[in] val_var - Index of the variable.\n\t * \\return Value of the time spectral source term for the index <i>val_var</i>.\n\t */\n\tsu2double GetTimeSpectral_Source(unsigned short val_var);\n};\n\n/*! \n * \\class CAdjNSVariable\n * \\brief Main class for defining the variables of the adjoint Navier-Stokes solver.\n * \\ingroup Navier_Stokes_Equations\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjNSVariable : public CAdjEulerVariable {\t\nprivate:\n  \npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\t\n\tCAdjNSVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_psirho - Value of the adjoint density (initialization value).\n\t * \\param[in] val_phi - Value of the adjoint velocity (initialization value).\n\t * \\param[in] val_psie - Value of the adjoint energy (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCAdjNSVariable(su2double val_psirho, su2double *val_phi, su2double val_psie, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_solution - Pointer to the adjoint value (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\n\tCAdjNSVariable(su2double *val_solution, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\t~CAdjNSVariable(void);\n\n\t/*!\n\t * \\brief Set the value of the adjoint velocity.\n\t * \\param[in] val_phi - Value of the adjoint velocity.\n\t */\t\n\tvoid SetPhi_Old(su2double *val_phi);\n\n\t/*!\n\t * \\brief Set the value of the force projection vector.\n\t * \\param[in] val_ForceProj_Vector - Pointer to the force projection vector.\n\t */\n\tvoid SetForceProj_Vector(su2double *val_ForceProj_Vector);\n\n\t/*!\n\t * \\brief Get the value of the force projection vector.\n\t * \\return Pointer to the force projection vector.\n\t */\n\tsu2double *GetForceProj_Vector(void);\n\n\t/*!\n\t * \\brief Set the value of the force projection vector on the solution vector.\n\t */\n\tvoid SetVelSolutionOldDVector(void);\n\n\t/*!\n\t * \\brief Set the value of the force projection vector on the old solution vector.\n\t */\n\tvoid SetVelSolutionDVector(void);\n\n};\n\n/*! \n * \\class CAdjTurbVariable\n * \\brief Main class for defining the variables of the adjoint turbulence model.\n * \\ingroup Turbulence_Model\n * \\author A. Bueno.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjTurbVariable : public CVariable {\nprotected:\n\tsu2double *dmuT_dUTvar;       /*!< \\brief Sensitivity of eddy viscosity to mean flow and turbulence vars. */\n\tsu2double **dRTstar_dUTvar; \t/*!< \\brief Sensitivity of modified turbulence residual (no boundary flux)\n\t \t \t \t \t \t \t \t to mean flow and turbulence vars. */\n\tsu2double **dFT_dUTvar; \t/*!< \\brief Sensitivity of boundary flux\n\t\t \t \t \t \t \t \t \t to mean flow and turbulence vars. */\n\tsu2double *EddyViscSens;    /*!< \\brief Eddy Viscosity Sensitivity. */\n\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\t\t\n\tCAdjTurbVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_psinu_inf - Value of the adjoint turbulence variable at the infinity (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\t\n\tCAdjTurbVariable(su2double val_psinu_inf, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\t\n\t~CAdjTurbVariable(void);\n\n\t/*!\n\t * \\brief Set the Eddy Viscosity Sensitivity of the problem.\n\t * \\param[in] val_EddyViscSens - Eddy Viscosity Sensitivity.\n\t */\n\tvoid SetEddyViscSens(su2double *val_EddyViscSens, unsigned short numTotalVar);\n\n\t/*!\n\t * \\brief Get the Eddy Viscosity Sensitivity of the problem.\n\t * \\return Pointer to the Eddy Viscosity Sensitivity.\n\t */\n\tsu2double *GetEddyViscSens(void);\n};\n\n/*! \n * \\class CAdjLevelSetVariable\n * \\brief Main class for defining the variables of the Level Set.\n * \\ingroup LevelSet_Model\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CAdjLevelSetVariable : public CVariable {\npublic:\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\t\n\tCAdjLevelSetVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\n\t */\n\tCAdjLevelSetVariable(unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_levelset - Level set variable value (initialization value).\n\t * \\param[in] val_nDim - Number of dimensions of the problem.\n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCAdjLevelSetVariable(su2double val_levelset, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class.\n\t */\n\tvirtual ~CAdjLevelSetVariable(void);\n\n};\n\n/*! \n * \\class CTemplateVariable\n * \\brief Main class for defining the variables of the potential solver.\n * \\ingroup Potential_Flow_Equation\n * \\author F. Palacios\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CTemplateVariable : public CVariable {\npublic:\n\n\t/*!\n\t * \\brief Constructor of the class. \n\t */\n\tCTemplateVariable(void);\n\n\t/*!\n\t * \\overload\n\t * \\param[in] val_potential - Value of the potential solution (initialization value).\t\t \n\t * \\param[in] val_nDim - Number of dimensions of the problem.\t\t \n\t * \\param[in] val_nvar - Number of variables of the problem.\n\t * \\param[in] config - Definition of the particular problem.\t \n\t */\t\n\tCTemplateVariable(su2double val_potential, unsigned short val_nDim, unsigned short val_nvar, CConfig *config);\n\n\t/*!\n\t * \\brief Destructor of the class. \n\t */\t\n\t~CTemplateVariable(void);\n};\n\n/*!\n * \\class CDiscAdjVariable\n * \\brief Main class for defining the variables of the adjoint solver.\n * \\ingroup Discrete_Adjoint\n * \\author T. Albring.\n * \\version 4.1.0 \"Cardinal\"\n */\nclass CDiscAdjVariable : public CVariable {\nprivate:\n    su2double* Sensitivity; /* Vector holding the derivative of target functional with respect to the coordinates at this node*/\n    su2double* Solution_Direct;\n    su2double* DualTime_Derivative;\n    su2double* DualTime_Derivative_n;\n\npublic:\n    /*!\n     * \\brief Constructor of the class.\n     */\n    CDiscAdjVariable(void);\n\n    /*!\n     * \\brief Destructor of the class.\n     */\n    ~CDiscAdjVariable(void);\n\n    /*!\n     * \\overload\n     * \\param[in] val_solution - Pointer to the adjoint value (initialization value).\n     * \\param[in] val_ndim - Number of dimensions of the problem.\n     * \\param[in] val_nvar - Number of variables of the problem.\n     * \\param[in] config - Definition of the particular problem.\n     */\n    CDiscAdjVariable(su2double *val_solution, unsigned short val_ndim, unsigned short val_nvar, CConfig *config);\n\n    /*!\n     * \\brief Set the sensitivity at the node\n     * \\param[in] iDim - spacial component\n     * \\param[in] val - value of the Sensitivity\n     */\n    void SetSensitivity(unsigned short iDim, su2double val);\n\n    /*!\n     * \\brief Get the Sensitivity at the node\n     * \\param[in] iDim - spacial component\n     * \\return value of the Sensitivity\n     */\n    su2double GetSensitivity(unsigned short iDim);\n\n    void SetDual_Time_Derivative(unsigned short iVar, su2double der);\n\n    void SetDual_Time_Derivative_n(unsigned short iVar, su2double der);\n\n    su2double GetDual_Time_Derivative(unsigned short iVar);\n\n    su2double GetDual_Time_Derivative_n(unsigned short iVar);\n\n    void SetSolution_Direct(su2double *sol);\n\n    su2double* GetSolution_Direct();\n};\n\n\n#include \"variable_structure.inl\"\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":187,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":3034,"column":4},"end":{"row":3034,"column":4}},"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":44,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":4,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"2":{"2-0":{"range":[[8,46],[8,46]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"isBoundary":false}],"redoStack":[{"type":"group-end","snapshot":{"2":{"2-0":{"range":[[8,48],[8,48]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[8,47],[8,47]],"newRange":[[8,47],[8,48]],"oldText":"","newText":" "}},{"type":"group-start","snapshot":{"2":{"2-0":{"range":[[8,46],[8,46]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/variable_structure.hpp","digestWhenLastPersisted":"e8018c41763a6de4979149f1ebe42bef8662fe34","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file driver_structure.cpp\n * \\brief The main subroutines for driving single or multi-zone problems.\n * \\author T. Economon, H. Kline, R. Sanchez\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"../include/driver_structure.hpp\"\n\nCDriver::CDriver(CIteration **iteration_container,\n                 CSolver ****solver_container,\n                 CGeometry ***geometry_container,\n                 CIntegration ***integration_container,\n                 CNumerics *****numerics_container,\n                 CInterpolator ***interpolator_container,\n                 CTransfer ***transfer_container,\n                 CConfig **config_container,\n                 unsigned short val_nZone,\n                 unsigned short val_nDim) {\n  \n\n  unsigned short iMesh, iZone, jZone, iSol;\n  unsigned short nDim;\n  \n  bool fsi = config_container[ZONE_0]->GetFSI_Simulation();\n\n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Store the number of zones for the problem (class data member). ---*/\n  \n  nZone = val_nZone;\n  nDim = val_nDim;\n  \n  for (iZone = 0; iZone < nZone; iZone++) {\n    \n    /*--- Instantiate the type of physics iteration to be executed within each zone. For\n     example, one can execute the same physics across multiple zones (mixing plane),\n     different physics in different zones (fluid-structure interaction), or couple multiple\n     systems tightly within a single zone by creating a new iteration class (e.g., RANS). ---*/\n    if (rank == MASTER_NODE){\n      cout << endl <<\"------------------------ Iteration Preprocessing ------------------------\" << endl;\n    }\n    Iteration_Preprocessing(iteration_container, config_container, iZone);\n    \n    /*--- Definition of the solver class: solver_container[#ZONES][#MG_GRIDS][#EQ_SYSTEMS].\n     The solver classes are specific to a particular set of governing equations,\n     and they contain the subroutines with instructions for computing each spatial\n     term of the PDE, i.e. loops over the edges to compute convective and viscous\n     fluxes, loops over the nodes to compute source terms, and routines for\n     imposing various boundary condition type for the PDE. ---*/\n    if (rank == MASTER_NODE)\n      cout << endl <<\"------------------------- Solver Preprocessing --------------------------\" << endl;\n    \n    solver_container[iZone] = new CSolver** [config_container[iZone]->GetnMGLevels()+1];\n    for (iMesh = 0; iMesh <= config_container[iZone]->GetnMGLevels(); iMesh++)\n      solver_container[iZone][iMesh] = NULL;\n    \n    for (iMesh = 0; iMesh <= config_container[iZone]->GetnMGLevels(); iMesh++) {\n      solver_container[iZone][iMesh] = new CSolver* [MAX_SOLS];\n      for (iSol = 0; iSol < MAX_SOLS; iSol++)\n        solver_container[iZone][iMesh][iSol] = NULL;\n    }\n    Solver_Preprocessing(solver_container[iZone], geometry_container[iZone],\n                         config_container[iZone]);\n    \n    \n    if (rank == MASTER_NODE)\n      cout << endl <<\"----------------- Integration and Numerics Preprocessing ----------------\" << endl;\n    \n    /*--- Definition of the integration class: integration_container[#ZONES][#EQ_SYSTEMS].\n     The integration class orchestrates the execution of the spatial integration\n     subroutines contained in the solver class (including multigrid) for computing\n     the residual at each node, R(U) and then integrates the equations to a\n     steady state or time-accurately. ---*/\n    \n    integration_container[iZone] = new CIntegration*[MAX_SOLS];\n    Integration_Preprocessing(integration_container[iZone], geometry_container[iZone],\n                              config_container[iZone]);\n    \n    \n    if (rank == MASTER_NODE) cout << \"Integration Preprocessing.\" << endl;\n    \n    /*--- Definition of the numerical method class:\n     numerics_container[#ZONES][#MG_GRIDS][#EQ_SYSTEMS][#EQ_TERMS].\n     The numerics class contains the implementation of the numerical methods for\n     evaluating convective or viscous fluxes between any two nodes in the edge-based\n     data structure (centered, upwind, galerkin), as well as any source terms\n     (piecewise constant reconstruction) evaluated in each dual mesh volume. ---*/\n    \n    numerics_container[iZone] = new CNumerics***[config_container[iZone]->GetnMGLevels()+1];\n    Numerics_Preprocessing(numerics_container[iZone], solver_container[iZone],\n                           geometry_container[iZone], config_container[iZone]);\n    \n    if (rank == MASTER_NODE) cout << \"Numerics Preprocessing.\" << endl;\n    \n  }\n  \n\t/*--- Definition of the interface and transfer conditions between different zones.\n\t *--- The transfer container is defined for zones paired one to one.\n\t *--- This only works for a multizone FSI problem (nZone > 1).\n\t *--- Also, at the moment this capability is limited to two zones (nZone < 3).\n\t *--- This will change in the future. ---*/\n\n\tif ((rank == MASTER_NODE) && (fsi))\n\t\tcout << endl <<\"------------------- Multizone Interface Preprocessing -------------------\" << endl;\n\n\n\tif (((nZone > 1) && (nZone < 3)) && (fsi)) {\n\n\t\tfor (iZone = 0; iZone < nZone; iZone++){\n\t\t\ttransfer_container[iZone] = new CTransfer*[nZone];\n\t\t\tinterpolator_container[iZone] = new CInterpolator*[nZone];\n\t\t\tfor (jZone = 0; jZone < nZone; jZone++){\n\t\t\t\ttransfer_container[iZone][jZone] = NULL;\n\t\t\t\tinterpolator_container[iZone][jZone] = NULL;\n\t\t\t}\n\t\t}\n\n\t\tInterface_Preprocessing(transfer_container, interpolator_container, geometry_container,\n\t\t\t\tconfig_container, solver_container, nZone, nDim);\n\n\t}\n\n}\n\n\nvoid CDriver::Solver_Preprocessing(CSolver ***solver_container, CGeometry **geometry,\n                                   CConfig *config) {\n  \n  unsigned short iMGlevel;\n  bool euler, ns, turbulent,\n  adj_euler, adj_ns, adj_turb,\n  poisson, wave, fea, heat, fem,\n  spalart_allmaras, neg_spalart_allmaras, menter_sst, transition,\n  template_solver, disc_adj;\n  \n  /*--- Initialize some useful booleans ---*/\n  \n  euler            = false;  ns              = false;  turbulent = false;\n  adj_euler        = false;  adj_ns          = false;  adj_turb  = false;\n  spalart_allmaras = false;  menter_sst      = false;\n  poisson          = false;  neg_spalart_allmaras = false;\n  wave             = false;\t disc_adj        = false;\n  fea              = false;  fem = false;\n  heat             = false;\n  transition       = false;\n  template_solver  = false;\n  \n  /*--- Assign booleans ---*/\n  \n  switch (config->GetKind_Solver()) {\n    case TEMPLATE_SOLVER: template_solver = true; break;\n    case EULER : euler = true; break;\n    case NAVIER_STOKES: ns = true; break;\n    case RANS : ns = true; turbulent = true; if (config->GetKind_Trans_Model() == LM) transition = true; break;\n    case POISSON_EQUATION: poisson = true; break;\n    case WAVE_EQUATION: wave = true; break;\n    case HEAT_EQUATION: heat = true; break;\n    case LINEAR_ELASTICITY: fea = true; break;\n    case FEM_ELASTICITY: fem = true; break;\n    case ADJ_EULER : euler = true; adj_euler = true; break;\n    case ADJ_NAVIER_STOKES : ns = true; turbulent = (config->GetKind_Turb_Model() != NONE); adj_ns = true; break;\n    case ADJ_RANS : ns = true; turbulent = true; adj_ns = true; adj_turb = (!config->GetFrozen_Visc()); break;\n    case DISC_ADJ_EULER: euler = true; disc_adj = true; break;\n    case DISC_ADJ_NAVIER_STOKES: ns = true; disc_adj = true; break;\n    case DISC_ADJ_RANS: ns = true; turbulent = true; disc_adj = true; break;\n  }\n  \n  /*--- Assign turbulence model booleans ---*/\n  \n  if (turbulent)\n    switch (config->GetKind_Turb_Model()) {\n      case SA:     spalart_allmaras = true;     break;\n      case SA_NEG: neg_spalart_allmaras = true; break;\n      case SST:    menter_sst = true;           break;\n        \n      default: cout << \"Specified turbulence model unavailable or none selected\" << endl; exit(EXIT_FAILURE); break;\n    }\n  \n  /*--- Definition of the Class for the solution: solver_container[DOMAIN][MESH_LEVEL][EQUATION]. Note that euler, ns\n   and potential are incompatible, they use the same position in sol container ---*/\n  for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n    \n    /*--- Allocate solution for a template problem ---*/\n    if (template_solver) {\n      solver_container[iMGlevel][TEMPLATE_SOL] = new CTemplateSolver(geometry[iMGlevel], config);\n    }\n    \n    /*--- Allocate solution for direct problem, and run the preprocessing and postprocessing ---*/\n    if (euler) {\n      solver_container[iMGlevel][FLOW_SOL] = new CEulerSolver(geometry[iMGlevel], config, iMGlevel);\n      solver_container[iMGlevel][FLOW_SOL]->Preprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel, NO_RK_ITER, RUNTIME_FLOW_SYS, false);\n    }\n    if (ns) {\n      solver_container[iMGlevel][FLOW_SOL] = new CNSSolver(geometry[iMGlevel], config, iMGlevel);\n    }\n    if (turbulent) {\n      if (spalart_allmaras) {\n        solver_container[iMGlevel][TURB_SOL] = new CTurbSASolver(geometry[iMGlevel], config, iMGlevel, solver_container[iMGlevel][FLOW_SOL]->GetFluidModel() );\n        solver_container[iMGlevel][FLOW_SOL]->Preprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel, NO_RK_ITER, RUNTIME_FLOW_SYS, false);\n        solver_container[iMGlevel][TURB_SOL]->Postprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel);\n      }\n      else if (neg_spalart_allmaras) {\n        solver_container[iMGlevel][TURB_SOL] = new CTurbSASolver(geometry[iMGlevel], config, iMGlevel, solver_container[iMGlevel][FLOW_SOL]->GetFluidModel() );\n        solver_container[iMGlevel][FLOW_SOL]->Preprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel, NO_RK_ITER, RUNTIME_FLOW_SYS, false);\n        solver_container[iMGlevel][TURB_SOL]->Postprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel);\n      }\n      else if (menter_sst) {\n        solver_container[iMGlevel][TURB_SOL] = new CTurbSSTSolver(geometry[iMGlevel], config, iMGlevel);\n        solver_container[iMGlevel][FLOW_SOL]->Preprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel, NO_RK_ITER, RUNTIME_FLOW_SYS, false);\n        solver_container[iMGlevel][TURB_SOL]->Postprocessing(geometry[iMGlevel], solver_container[iMGlevel], config, iMGlevel);\n      }\n      if (transition) {\n        solver_container[iMGlevel][TRANS_SOL] = new CTransLMSolver(geometry[iMGlevel], config, iMGlevel);\n      }\n    }\n    if (poisson) {\n      solver_container[iMGlevel][POISSON_SOL] = new CPoissonSolver(geometry[iMGlevel], config);\n    }\n    if (wave) {\n      solver_container[iMGlevel][WAVE_SOL] = new CWaveSolver(geometry[iMGlevel], config);\n    }\n    if (heat) {\n      solver_container[iMGlevel][HEAT_SOL] = new CHeatSolver(geometry[iMGlevel], config);\n    }\n    if (fea) {\n      solver_container[iMGlevel][FEA_SOL] = new CFEASolver(geometry[iMGlevel], config);\n    }\n    if (fem) {\n      solver_container[iMGlevel][FEA_SOL] = new CFEM_ElasticitySolver(geometry[iMGlevel], config);\n    }\n    \n    /*--- Allocate solution for adjoint problem ---*/\n    if (adj_euler) {\n      solver_container[iMGlevel][ADJFLOW_SOL] = new CAdjEulerSolver(geometry[iMGlevel], config, iMGlevel);\n    }\n    if (adj_ns) {\n      solver_container[iMGlevel][ADJFLOW_SOL] = new CAdjNSSolver(geometry[iMGlevel], config, iMGlevel);\n    }\n    if (adj_turb) {\n      solver_container[iMGlevel][ADJTURB_SOL] = new CAdjTurbSolver(geometry[iMGlevel], config, iMGlevel);\n    }\n    \n    if (disc_adj) {\n      solver_container[iMGlevel][ADJFLOW_SOL] = new CDiscAdjSolver(geometry[iMGlevel], config, solver_container[iMGlevel][FLOW_SOL], RUNTIME_FLOW_SYS, iMGlevel);\n      if (turbulent)\n        solver_container[iMGlevel][ADJTURB_SOL] = new CDiscAdjSolver(geometry[iMGlevel], config, solver_container[iMGlevel][TURB_SOL], RUNTIME_TURB_SYS, iMGlevel);\n    }\n  }\n}\n\nvoid CDriver::Integration_Preprocessing(CIntegration **integration_container,\n                                        CGeometry **geometry, CConfig *config) {\n  \n  bool\n  euler, adj_euler,\n  ns, adj_ns,\n  turbulent, adj_turb,\n  poisson, wave, fea, fem, heat, template_solver, transition, disc_adj;\n  \n  /*--- Initialize some useful booleans ---*/\n  euler            = false; adj_euler        = false;\n  ns               = false; adj_ns           = false;\n  turbulent        = false; adj_turb         = false;\n  poisson          = false; disc_adj         = false;\n  wave             = false;\n  heat             = false;\n  fea              = false; fem = false;\n  transition       = false;\n  template_solver  = false;\n  \n  /*--- Assign booleans ---*/\n  switch (config->GetKind_Solver()) {\n    case TEMPLATE_SOLVER: template_solver = true; break;\n    case EULER : euler = true; break;\n    case NAVIER_STOKES: ns = true; break;\n    case RANS : ns = true; turbulent = true; if (config->GetKind_Trans_Model() == LM) transition = true; break;\n    case POISSON_EQUATION: poisson = true; break;\n    case WAVE_EQUATION: wave = true; break;\n    case HEAT_EQUATION: heat = true; break;\n    case LINEAR_ELASTICITY: fea = true; break;\n    case FEM_ELASTICITY: fem = true; break;\n    case ADJ_EULER : euler = true; adj_euler = true; break;\n    case ADJ_NAVIER_STOKES : ns = true; turbulent = (config->GetKind_Turb_Model() != NONE); adj_ns = true; break;\n    case ADJ_RANS : ns = true; turbulent = true; adj_ns = true; adj_turb = (!config->GetFrozen_Visc()); break;\n    case DISC_ADJ_EULER : euler = true; disc_adj = true; break;\n    case DISC_ADJ_NAVIER_STOKES: ns = true; disc_adj = true; break;\n    case DISC_ADJ_RANS : ns = true; turbulent = true; disc_adj = true; break;\n      \n  }\n  \n  /*--- Allocate solution for a template problem ---*/\n  if (template_solver) integration_container[TEMPLATE_SOL] = new CSingleGridIntegration(config);\n  \n  /*--- Allocate solution for direct problem ---*/\n  if (euler) integration_container[FLOW_SOL] = new CMultiGridIntegration(config);\n  if (ns) integration_container[FLOW_SOL] = new CMultiGridIntegration(config);\n  if (turbulent) integration_container[TURB_SOL] = new CSingleGridIntegration(config);\n  if (transition) integration_container[TRANS_SOL] = new CSingleGridIntegration(config);\n  if (poisson) integration_container[POISSON_SOL] = new CSingleGridIntegration(config);\n  if (wave) integration_container[WAVE_SOL] = new CSingleGridIntegration(config);\n  if (heat) integration_container[HEAT_SOL] = new CSingleGridIntegration(config);\n  if (fea) integration_container[FEA_SOL] = new CStructuralIntegration(config);\n  if (fem) integration_container[FEA_SOL] = new CStructuralIntegration(config);\n  \n  /*--- Allocate solution for adjoint problem ---*/\n  if (adj_euler) integration_container[ADJFLOW_SOL] = new CMultiGridIntegration(config);\n  if (adj_ns) integration_container[ADJFLOW_SOL] = new CMultiGridIntegration(config);\n  if (adj_turb) integration_container[ADJTURB_SOL] = new CSingleGridIntegration(config);\n  \n  if (disc_adj) integration_container[ADJFLOW_SOL] = new CIntegration(config);\n  \n}\n\nvoid CDriver::Numerics_Preprocessing(CNumerics ****numerics_container,\n                                     CSolver ***solver_container, CGeometry **geometry,\n                                     CConfig *config) {\n  \n  unsigned short iMGlevel, iSol, nDim,\n  \n  nVar_Template         = 0,\n  nVar_Flow             = 0,\n  nVar_Trans            = 0,\n  nVar_Turb             = 0,\n  nVar_Adj_Flow         = 0,\n  nVar_Adj_Turb         = 0,\n  nVar_Poisson          = 0,\n  nVar_FEA              = 0,\n  nVar_FEM\t\t\t\t= 0,\n  nVar_Wave             = 0,\n  nVar_Heat             = 0;\n  \n  su2double *constants = NULL;\n  \n  bool\n  euler, adj_euler,\n  ns, adj_ns,\n  turbulent, adj_turb,\n  spalart_allmaras, neg_spalart_allmaras, menter_sst,\n  poisson,\n  wave,\n  fea, fem,\n  heat,\n  transition,\n  template_solver;\n  \n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool ideal_gas = (config->GetKind_FluidModel() == STANDARD_AIR || config->GetKind_FluidModel() == IDEAL_GAS );\n  \n  /*--- Initialize some useful booleans ---*/\n  euler            = false;   ns               = false;   turbulent        = false;\n  poisson          = false;\n  adj_euler        = false;   adj_ns           = false;   adj_turb         = false;\n  wave             = false;   heat             = false;   fea              = false;  fem\t\t\t\t= false;\n  spalart_allmaras = false; neg_spalart_allmaras = false;\tmenter_sst       = false;\n  transition       = false;\n  template_solver  = false;\n  \n  /*--- Assign booleans ---*/\n  switch (config->GetKind_Solver()) {\n    case TEMPLATE_SOLVER: template_solver = true; break;\n    case EULER : case DISC_ADJ_EULER: euler = true; break;\n    case NAVIER_STOKES: case DISC_ADJ_NAVIER_STOKES: ns = true; break;\n    case RANS : case DISC_ADJ_RANS:  ns = true; turbulent = true; if (config->GetKind_Trans_Model() == LM) transition = true; break;\n    case POISSON_EQUATION: poisson = true; break;\n    case WAVE_EQUATION: wave = true; break;\n    case HEAT_EQUATION: heat = true; break;\n    case LINEAR_ELASTICITY: fea = true; break;\n    case FEM_ELASTICITY: fem = true; break;\n    case ADJ_EULER : euler = true; adj_euler = true; break;\n    case ADJ_NAVIER_STOKES : ns = true; turbulent = (config->GetKind_Turb_Model() != NONE); adj_ns = true; break;\n    case ADJ_RANS : ns = true; turbulent = true; adj_ns = true; adj_turb = (!config->GetFrozen_Visc()); break;\n  }\n  \n  /*--- Assign turbulence model booleans ---*/\n  \n  if (turbulent)\n    switch (config->GetKind_Turb_Model()) {\n      case SA:     spalart_allmaras = true;     break;\n      case SA_NEG: neg_spalart_allmaras = true; break;\n      case SST:    menter_sst = true; constants = solver_container[MESH_0][TURB_SOL]->GetConstants(); break;\n      default: cout << \"Specified turbulence model unavailable or none selected\" << endl; exit(EXIT_FAILURE); break;\n    }\n  \n  /*--- Number of variables for the template ---*/\n  \n  if (template_solver) nVar_Flow = solver_container[MESH_0][FLOW_SOL]->GetnVar();\n  \n  /*--- Number of variables for direct problem ---*/\n  \n  if (euler)        nVar_Flow = solver_container[MESH_0][FLOW_SOL]->GetnVar();\n  if (ns)           nVar_Flow = solver_container[MESH_0][FLOW_SOL]->GetnVar();\n  if (turbulent)    nVar_Turb = solver_container[MESH_0][TURB_SOL]->GetnVar();\n  if (transition)   nVar_Trans = solver_container[MESH_0][TRANS_SOL]->GetnVar();\n  if (poisson)      nVar_Poisson = solver_container[MESH_0][POISSON_SOL]->GetnVar();\n  \n  if (wave)\t\t\t\tnVar_Wave = solver_container[MESH_0][WAVE_SOL]->GetnVar();\n  if (fea)\t\t\t\tnVar_FEA = solver_container[MESH_0][FEA_SOL]->GetnVar();\n  if (fem)\t\t\t\tnVar_FEM = solver_container[MESH_0][FEA_SOL]->GetnVar();\n  if (heat)\t\t\t\tnVar_Heat = solver_container[MESH_0][HEAT_SOL]->GetnVar();\n  \n  /*--- Number of variables for adjoint problem ---*/\n  \n  if (adj_euler)        nVar_Adj_Flow = solver_container[MESH_0][ADJFLOW_SOL]->GetnVar();\n  if (adj_ns)           nVar_Adj_Flow = solver_container[MESH_0][ADJFLOW_SOL]->GetnVar();\n  if (adj_turb)         nVar_Adj_Turb = solver_container[MESH_0][ADJTURB_SOL]->GetnVar();\n  \n  /*--- Number of dimensions ---*/\n  \n  nDim = geometry[MESH_0]->GetnDim();\n  \n  /*--- Definition of the Class for the numerical method: numerics_container[MESH_LEVEL][EQUATION][EQ_TERM] ---*/\n  \n  for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n    numerics_container[iMGlevel] = new CNumerics** [MAX_SOLS];\n    for (iSol = 0; iSol < MAX_SOLS; iSol++)\n      numerics_container[iMGlevel][iSol] = new CNumerics* [MAX_TERMS];\n  }\n  \n  /*--- Solver definition for the template problem ---*/\n  if (template_solver) {\n    \n    /*--- Definition of the convective scheme for each equation and mesh level ---*/\n    switch (config->GetKind_ConvNumScheme_Template()) {\n      case SPACE_CENTERED : case SPACE_UPWIND :\n        for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n          numerics_container[iMGlevel][TEMPLATE_SOL][CONV_TERM] = new CConvective_Template(nDim, nVar_Template, config);\n        break;\n      default : cout << \"Convective scheme not implemented (template_solver).\" << endl; exit(EXIT_FAILURE); break;\n    }\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n      numerics_container[iMGlevel][TEMPLATE_SOL][VISC_TERM] = new CViscous_Template(nDim, nVar_Template, config);\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n      numerics_container[iMGlevel][TEMPLATE_SOL][SOURCE_FIRST_TERM] = new CSource_Template(nDim, nVar_Template, config);\n    \n    /*--- Definition of the boundary condition method ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      numerics_container[iMGlevel][TEMPLATE_SOL][CONV_BOUND_TERM] = new CConvective_Template(nDim, nVar_Template, config);\n    }\n    \n  }\n  \n  /*--- Solver definition for the Potential, Euler, Navier-Stokes problems ---*/\n  if ((euler) || (ns)) {\n    \n    /*--- Definition of the convective scheme for each equation and mesh level ---*/\n    switch (config->GetKind_ConvNumScheme_Flow()) {\n      case NO_CONVECTIVE :\n        cout << \"No convective scheme.\" << endl; exit(EXIT_FAILURE);\n        break;\n        \n      case SPACE_CENTERED :\n        if (compressible) {\n          /*--- Compressible flow ---*/\n          switch (config->GetKind_Centered_Flow()) {\n            case NO_CENTERED : cout << \"No centered scheme.\" << endl; break;\n            case LAX : numerics_container[MESH_0][FLOW_SOL][CONV_TERM] = new CCentLax_Flow(nDim, nVar_Flow, config); break;\n            case JST : numerics_container[MESH_0][FLOW_SOL][CONV_TERM] = new CCentJST_Flow(nDim, nVar_Flow, config); break;\n            case JST_KE : numerics_container[MESH_0][FLOW_SOL][CONV_TERM] = new CCentJST_KE_Flow(nDim, nVar_Flow, config); break;\n            default : cout << \"Centered scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n          \n          if (!config->GetLowFidelitySim()) {\n            for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n              numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CCentLax_Flow(nDim, nVar_Flow, config);\n          }\n          else {\n            numerics_container[MESH_1][FLOW_SOL][CONV_TERM] = new CCentJST_Flow(nDim, nVar_Flow, config);\n            for (iMGlevel = 2; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n              numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CCentLax_Flow(nDim, nVar_Flow, config);\n          }\n          \n          /*--- Definition of the boundary condition method ---*/\n          for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwRoe_Flow(nDim, nVar_Flow, config);\n          \n        }\n        if (incompressible) {\n          /*--- Incompressible flow, use artificial compressibility method ---*/\n          switch (config->GetKind_Centered_Flow()) {\n            case NO_CENTERED : cout << \"No centered scheme.\" << endl; break;\n            case LAX : numerics_container[MESH_0][FLOW_SOL][CONV_TERM] = new CCentLaxArtComp_Flow(nDim, nVar_Flow, config); break;\n            case JST : numerics_container[MESH_0][FLOW_SOL][CONV_TERM] = new CCentJSTArtComp_Flow(nDim, nVar_Flow, config); break;\n            default : cout << \"Centered scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n          for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CCentLaxArtComp_Flow(nDim, nVar_Flow, config);\n          \n          /*--- Definition of the boundary condition method ---*/\n          for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwArtComp_Flow(nDim, nVar_Flow, config);\n          \n        }\n        if (freesurface) {\n          /*--- FreeSurface flow, use artificial compressibility method ---*/\n          cout << \"Centered scheme not implemented.\" << endl; exit(EXIT_FAILURE);\n        }\n        break;\n      case SPACE_UPWIND :\n        if (compressible) {\n          /*--- Compressible flow ---*/\n          switch (config->GetKind_Upwind_Flow()) {\n            case NO_UPWIND : cout << \"No upwind scheme.\" << endl; break;\n            case ROE:\n              if (ideal_gas) {\n                \n                for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                  numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwRoe_Flow(nDim, nVar_Flow, config);\n                  numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwRoe_Flow(nDim, nVar_Flow, config);\n                }\n              } else {\n                \n                for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                  numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwGeneralRoe_Flow(nDim, nVar_Flow, config);\n                  numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwGeneralRoe_Flow(nDim, nVar_Flow, config);\n                }\n              }\n              break;\n              \n            case AUSM:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwAUSM_Flow(nDim, nVar_Flow, config);\n                numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwAUSM_Flow(nDim, nVar_Flow, config);\n              }\n              break;\n              \n            case TURKEL:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwTurkel_Flow(nDim, nVar_Flow, config);\n                numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwTurkel_Flow(nDim, nVar_Flow, config);\n              }\n              break;\n              \n            case HLLC:\n\t\tif (ideal_gas) {\n\t\t      for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n\t\t        numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwHLLC_Flow(nDim, nVar_Flow, config);\n\t\t        numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwHLLC_Flow(nDim, nVar_Flow, config);\n\t\t      }\n\t\t}\n\t\telse {\n\t\t      for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n\t\t        numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwGeneralHLLC_Flow(nDim, nVar_Flow, config);\n\t\t        numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwGeneralHLLC_Flow(nDim, nVar_Flow, config);\n\t\t      }\n\t\t}\n             \tbreak;\n              \n            case MSW:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwMSW_Flow(nDim, nVar_Flow, config);\n                numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwMSW_Flow(nDim, nVar_Flow, config);\n              }\n              break;\n              \n            case CUSP:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwCUSP_Flow(nDim, nVar_Flow, config);\n                numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwCUSP_Flow(nDim, nVar_Flow, config);\n              }\n              break;\n              \n            default : cout << \"Upwind scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n          \n        }\n        if (incompressible) {\n          /*--- Incompressible flow, use artificial compressibility method ---*/\n          switch (config->GetKind_Upwind_Flow()) {\n            case NO_UPWIND : cout << \"No upwind scheme.\" << endl; break;\n            case ROE:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwArtComp_Flow(nDim, nVar_Flow, config);\n                numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwArtComp_Flow(nDim, nVar_Flow, config);\n              }\n              break;\n            default : cout << \"Upwind scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n        }\n        if (freesurface) {\n          /*--- Incompressible flow, use artificial compressibility method ---*/\n          switch (config->GetKind_Upwind_Flow()) {\n            case NO_UPWIND : cout << \"No upwind scheme.\" << endl; break;\n            case ROE:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][FLOW_SOL][CONV_TERM] = new CUpwArtComp_FreeSurf_Flow(nDim, nVar_Flow, config);\n                numerics_container[iMGlevel][FLOW_SOL][CONV_BOUND_TERM] = new CUpwArtComp_FreeSurf_Flow(nDim, nVar_Flow, config);\n              }\n              break;\n            default : cout << \"Upwind scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n        }\n        \n        break;\n        \n      default :\n        cout << \"Convective scheme not implemented (euler and ns).\" << endl; exit(EXIT_FAILURE);\n        break;\n    }\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    if (compressible) {\n      if (ideal_gas) {\n        \n        /*--- Compressible flow Ideal gas ---*/\n        numerics_container[MESH_0][FLOW_SOL][VISC_TERM] = new CAvgGradCorrected_Flow(nDim, nVar_Flow, config);\n        for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n          numerics_container[iMGlevel][FLOW_SOL][VISC_TERM] = new CAvgGrad_Flow(nDim, nVar_Flow, config);\n        \n        /*--- Definition of the boundary condition method ---*/\n        for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n          numerics_container[iMGlevel][FLOW_SOL][VISC_BOUND_TERM] = new CAvgGrad_Flow(nDim, nVar_Flow, config);\n        \n      } else{\n        \n        /*--- Compressible flow Realgas ---*/\n        numerics_container[MESH_0][FLOW_SOL][VISC_TERM] = new CGeneralAvgGradCorrected_Flow(nDim, nVar_Flow, config);\n        for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n          numerics_container[iMGlevel][FLOW_SOL][VISC_TERM] = new CGeneralAvgGrad_Flow(nDim, nVar_Flow, config);\n        \n        /*--- Definition of the boundary condition method ---*/\n        for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n          numerics_container[iMGlevel][FLOW_SOL][VISC_BOUND_TERM] = new CGeneralAvgGrad_Flow(nDim, nVar_Flow, config);\n        \n      }\n    }\n    if (incompressible) {\n      /*--- Incompressible flow, use artificial compressibility method ---*/\n      numerics_container[MESH_0][FLOW_SOL][VISC_TERM] = new CAvgGradCorrectedArtComp_Flow(nDim, nVar_Flow, config);\n      for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n        numerics_container[iMGlevel][FLOW_SOL][VISC_TERM] = new CAvgGradArtComp_Flow(nDim, nVar_Flow, config);\n      \n      /*--- Definition of the boundary condition method ---*/\n      for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n        numerics_container[iMGlevel][FLOW_SOL][VISC_BOUND_TERM] = new CAvgGradArtComp_Flow(nDim, nVar_Flow, config);\n    }\n    if (freesurface) {\n      /*--- Freesurface flow, use artificial compressibility method ---*/\n      numerics_container[MESH_0][FLOW_SOL][VISC_TERM] = new CAvgGradCorrectedArtComp_Flow(nDim, nVar_Flow, config);\n      for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n        numerics_container[iMGlevel][FLOW_SOL][VISC_TERM] = new CAvgGradArtComp_Flow(nDim, nVar_Flow, config);\n      \n      /*--- Definition of the boundary condition method ---*/\n      for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n        numerics_container[iMGlevel][FLOW_SOL][VISC_BOUND_TERM] = new CAvgGradArtComp_Flow(nDim, nVar_Flow, config);\n    }\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      \n      if (config->GetRotating_Frame() == YES)\n        numerics_container[iMGlevel][FLOW_SOL][SOURCE_FIRST_TERM] = new CSourceRotatingFrame_Flow(nDim, nVar_Flow, config);\n      else if (config->GetAxisymmetric() == YES)\n        numerics_container[iMGlevel][FLOW_SOL][SOURCE_FIRST_TERM] = new CSourceAxisymmetric_Flow(nDim, nVar_Flow, config);\n      else if (config->GetGravityForce() == YES)\n        numerics_container[iMGlevel][FLOW_SOL][SOURCE_FIRST_TERM] = new CSourceGravity(nDim, nVar_Flow, config);\n      else if (config->GetWind_Gust() == YES)\n        numerics_container[iMGlevel][FLOW_SOL][SOURCE_FIRST_TERM] = new CSourceWindGust(nDim, nVar_Flow, config);\n      else\n        numerics_container[iMGlevel][FLOW_SOL][SOURCE_FIRST_TERM] = new CSourceNothing(nDim, nVar_Flow, config);\n      \n      numerics_container[iMGlevel][FLOW_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Flow, config);\n    }\n    \n  }\n  \n  /*--- Solver definition for the turbulent model problem ---*/\n  \n  if (turbulent) {\n    \n    /*--- Definition of the convective scheme for each equation and mesh level ---*/\n    \n    switch (config->GetKind_ConvNumScheme_Turb()) {\n      case NONE :\n        break;\n      case SPACE_UPWIND :\n        for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n          if (spalart_allmaras) numerics_container[iMGlevel][TURB_SOL][CONV_TERM] = new CUpwSca_TurbSA(nDim, nVar_Turb, config);\n          else if (neg_spalart_allmaras) numerics_container[iMGlevel][TURB_SOL][CONV_TERM] = new CUpwSca_TurbSA(nDim, nVar_Turb, config);\n          else if (menter_sst) numerics_container[iMGlevel][TURB_SOL][CONV_TERM] = new CUpwSca_TurbSST(nDim, nVar_Turb, config);\n        }\n        break;\n      default :\n        cout << \"Convective scheme not implemented (turbulent).\" << endl; exit(EXIT_FAILURE);\n        break;\n    }\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    \n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      if (spalart_allmaras) numerics_container[iMGlevel][TURB_SOL][VISC_TERM] = new CAvgGradCorrected_TurbSA(nDim, nVar_Turb, config);\n      else if (neg_spalart_allmaras) numerics_container[iMGlevel][TURB_SOL][VISC_TERM] = new CAvgGradCorrected_TurbSA_Neg(nDim, nVar_Turb, config);\n      else if (menter_sst) numerics_container[iMGlevel][TURB_SOL][VISC_TERM] = new CAvgGradCorrected_TurbSST(nDim, nVar_Turb, constants, config);\n    }\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    \n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      if (spalart_allmaras) numerics_container[iMGlevel][TURB_SOL][SOURCE_FIRST_TERM] = new CSourcePieceWise_TurbSA(nDim, nVar_Turb, config);\n      else if (neg_spalart_allmaras) numerics_container[iMGlevel][TURB_SOL][SOURCE_FIRST_TERM] = new CSourcePieceWise_TurbSA_Neg(nDim, nVar_Turb, config);\n      else if (menter_sst) numerics_container[iMGlevel][TURB_SOL][SOURCE_FIRST_TERM] = new CSourcePieceWise_TurbSST(nDim, nVar_Turb, constants, config);\n      numerics_container[iMGlevel][TURB_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Turb, config);\n    }\n    \n    /*--- Definition of the boundary condition method ---*/\n    \n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      if (spalart_allmaras) {\n        numerics_container[iMGlevel][TURB_SOL][CONV_BOUND_TERM] = new CUpwSca_TurbSA(nDim, nVar_Turb, config);\n        numerics_container[iMGlevel][TURB_SOL][VISC_BOUND_TERM] = new CAvgGrad_TurbSA(nDim, nVar_Turb, config);\n      }\n      else if (neg_spalart_allmaras) {\n        numerics_container[iMGlevel][TURB_SOL][CONV_BOUND_TERM] = new CUpwSca_TurbSA(nDim, nVar_Turb, config);\n        numerics_container[iMGlevel][TURB_SOL][VISC_BOUND_TERM] = new CAvgGrad_TurbSA_Neg(nDim, nVar_Turb, config);\n      }\n      else if (menter_sst) {\n        numerics_container[iMGlevel][TURB_SOL][CONV_BOUND_TERM] = new CUpwSca_TurbSST(nDim, nVar_Turb, config);\n        numerics_container[iMGlevel][TURB_SOL][VISC_BOUND_TERM] = new CAvgGrad_TurbSST(nDim, nVar_Turb, constants, config);\n      }\n    }\n  }\n  \n  /*--- Solver definition for the transition model problem ---*/\n  if (transition) {\n    \n    /*--- Definition of the convective scheme for each equation and mesh level ---*/\n    switch (config->GetKind_ConvNumScheme_Turb()) {\n      case NONE :\n        break;\n      case SPACE_UPWIND :\n        for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n          numerics_container[iMGlevel][TRANS_SOL][CONV_TERM] = new CUpwSca_TransLM(nDim, nVar_Trans, config);\n        }\n        break;\n      default :\n        cout << \"Convective scheme not implemented (transition).\" << endl; exit(EXIT_FAILURE);\n        break;\n    }\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      numerics_container[iMGlevel][TRANS_SOL][VISC_TERM] = new CAvgGradCorrected_TransLM(nDim, nVar_Trans, config);\n    }\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      numerics_container[iMGlevel][TRANS_SOL][SOURCE_FIRST_TERM] = new CSourcePieceWise_TransLM(nDim, nVar_Trans, config);\n      numerics_container[iMGlevel][TRANS_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Trans, config);\n    }\n    \n    /*--- Definition of the boundary condition method ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      numerics_container[iMGlevel][TRANS_SOL][CONV_BOUND_TERM] = new CUpwLin_TransLM(nDim, nVar_Trans, config);\n    }\n  }\n  \n  /*--- Solver definition for the poisson potential problem ---*/\n  if (poisson) {\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    numerics_container[MESH_0][POISSON_SOL][VISC_TERM] = new CGalerkin_Flow(nDim, nVar_Poisson, config);\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    numerics_container[MESH_0][POISSON_SOL][SOURCE_FIRST_TERM] = new CSourceNothing(nDim, nVar_Poisson, config);\n    numerics_container[MESH_0][POISSON_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Poisson, config);\n    \n  }\n  \n  /*--- Solver definition for the poisson potential problem ---*/\n  if (heat) {\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    numerics_container[MESH_0][HEAT_SOL][VISC_TERM] = new CGalerkin_Flow(nDim, nVar_Heat, config);\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    numerics_container[MESH_0][HEAT_SOL][SOURCE_FIRST_TERM] = new CSourceNothing(nDim, nVar_Heat, config);\n    numerics_container[MESH_0][HEAT_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Heat, config);\n    \n  }\n  \n  /*--- Solver definition for the flow adjoint problem ---*/\n  \n  if (adj_euler || adj_ns) {\n    \n    /*--- Definition of the convective scheme for each equation and mesh level ---*/\n    \n    switch (config->GetKind_ConvNumScheme_AdjFlow()) {\n      case NO_CONVECTIVE :\n        cout << \"No convective scheme.\" << endl; exit(EXIT_FAILURE);\n        break;\n        \n      case SPACE_CENTERED :\n        \n        if (compressible) {\n          \n          /*--- Compressible flow ---*/\n          \n          switch (config->GetKind_Centered_AdjFlow()) {\n            case NO_CENTERED : cout << \"No centered scheme.\" << endl; break;\n            case LAX : numerics_container[MESH_0][ADJFLOW_SOL][CONV_TERM] = new CCentLax_AdjFlow(nDim, nVar_Adj_Flow, config); break;\n            case JST : numerics_container[MESH_0][ADJFLOW_SOL][CONV_TERM] = new CCentJST_AdjFlow(nDim, nVar_Adj_Flow, config); break;\n            default : cout << \"Centered scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n          \n          for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][ADJFLOW_SOL][CONV_TERM] = new CCentLax_AdjFlow(nDim, nVar_Adj_Flow, config);\n          \n          for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][ADJFLOW_SOL][CONV_BOUND_TERM] = new CUpwRoe_AdjFlow(nDim, nVar_Adj_Flow, config);\n          \n        }\n        \n        if (incompressible || freesurface) {\n          \n          /*--- Incompressible flow, use artificial compressibility method ---*/\n          \n          switch (config->GetKind_Centered_AdjFlow()) {\n            case NO_CENTERED : cout << \"No centered scheme.\" << endl; break;\n            case LAX : numerics_container[MESH_0][ADJFLOW_SOL][CONV_TERM] = new CCentLaxArtComp_AdjFlow(nDim, nVar_Adj_Flow, config); break;\n            case JST : numerics_container[MESH_0][ADJFLOW_SOL][CONV_TERM] = new CCentJSTArtComp_AdjFlow(nDim, nVar_Adj_Flow, config); break;\n            default : cout << \"Centered scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n          \n          for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][ADJFLOW_SOL][CONV_TERM] = new CCentLaxArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n          \n          for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n            numerics_container[iMGlevel][ADJFLOW_SOL][CONV_BOUND_TERM] = new CUpwRoeArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n          \n        }\n        \n        break;\n        \n      case SPACE_UPWIND :\n        \n        if (compressible) {\n          \n          /*--- Compressible flow ---*/\n          \n          switch (config->GetKind_Upwind_AdjFlow()) {\n            case NO_UPWIND : cout << \"No upwind scheme.\" << endl; break;\n            case ROE:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][ADJFLOW_SOL][CONV_TERM] = new CUpwRoe_AdjFlow(nDim, nVar_Adj_Flow, config);\n                numerics_container[iMGlevel][ADJFLOW_SOL][CONV_BOUND_TERM] = new CUpwRoe_AdjFlow(nDim, nVar_Adj_Flow, config);\n              }\n              break;\n            default : cout << \"Upwind scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n        }\n        \n        if (incompressible || freesurface) {\n          \n          /*--- Incompressible flow, use artificial compressibility method ---*/\n          \n          switch (config->GetKind_Upwind_AdjFlow()) {\n            case NO_UPWIND : cout << \"No upwind scheme.\" << endl; break;\n            case ROE:\n              for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n                numerics_container[iMGlevel][ADJFLOW_SOL][CONV_TERM] = new CUpwRoeArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n                numerics_container[iMGlevel][ADJFLOW_SOL][CONV_BOUND_TERM] = new CUpwRoeArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n              }\n              break;\n            default : cout << \"Upwind scheme not implemented.\" << endl; exit(EXIT_FAILURE); break;\n          }\n        }\n        \n        break;\n        \n      default :\n        cout << \"Convective scheme not implemented (adj_euler and adj_ns).\" << endl; exit(EXIT_FAILURE);\n        break;\n    }\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    \n    if (compressible) {\n      \n      /*--- Compressible flow ---*/\n      \n      numerics_container[MESH_0][ADJFLOW_SOL][VISC_TERM] = new CAvgGradCorrected_AdjFlow(nDim, nVar_Adj_Flow, config);\n      numerics_container[MESH_0][ADJFLOW_SOL][VISC_BOUND_TERM] = new CAvgGrad_AdjFlow(nDim, nVar_Adj_Flow, config);\n      \n      for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n        numerics_container[iMGlevel][ADJFLOW_SOL][VISC_TERM] = new CAvgGrad_AdjFlow(nDim, nVar_Adj_Flow, config);\n        numerics_container[iMGlevel][ADJFLOW_SOL][VISC_BOUND_TERM] = new CAvgGrad_AdjFlow(nDim, nVar_Adj_Flow, config);\n      }\n      \n    }\n    \n    if (incompressible || freesurface) {\n      \n      /*--- Incompressible flow, use artificial compressibility method ---*/\n      \n      numerics_container[MESH_0][ADJFLOW_SOL][VISC_TERM] = new CAvgGradCorrectedArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n      numerics_container[MESH_0][ADJFLOW_SOL][VISC_BOUND_TERM] = new CAvgGradArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n      \n      for (iMGlevel = 1; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n        numerics_container[iMGlevel][ADJFLOW_SOL][VISC_TERM] = new CAvgGradArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n        numerics_container[iMGlevel][ADJFLOW_SOL][VISC_BOUND_TERM] = new CAvgGradArtComp_AdjFlow(nDim, nVar_Adj_Flow, config);\n      }\n      \n    }\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    \n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      \n      /*--- Note that RANS is incompatible with Axisymmetric or Rotational (Fix it!) ---*/\n      \n      if (compressible) {\n        \n        if (adj_ns) {\n          \n          numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_FIRST_TERM] = new CSourceViscous_AdjFlow(nDim, nVar_Adj_Flow, config);\n          \n          if (config->GetRotating_Frame() == YES)\n            numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_SECOND_TERM] = new CSourceRotatingFrame_AdjFlow(nDim, nVar_Adj_Flow, config);\n          else\n            numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_SECOND_TERM] = new CSourceConservative_AdjFlow(nDim, nVar_Adj_Flow, config);\n          \n        }\n        \n        else {\n          \n          if (config->GetRotating_Frame() == YES)\n            numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_FIRST_TERM] = new CSourceRotatingFrame_AdjFlow(nDim, nVar_Adj_Flow, config);\n          else if (config->GetAxisymmetric() == YES)\n            numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_FIRST_TERM] = new CSourceAxisymmetric_AdjFlow(nDim, nVar_Adj_Flow, config);\n          else\n            numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_FIRST_TERM] = new CSourceNothing(nDim, nVar_Adj_Flow, config);\n          \n          numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Adj_Flow, config);\n          \n        }\n        \n      }\n      \n      if (incompressible || freesurface) {\n        \n        numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_FIRST_TERM] = new CSourceNothing(nDim, nVar_Adj_Flow, config);\n        numerics_container[iMGlevel][ADJFLOW_SOL][SOURCE_SECOND_TERM] = new CSourceNothing(nDim, nVar_Adj_Flow, config);\n        \n      }\n      \n    }\n    \n  }\n    \n  /*--- Solver definition for the turbulent adjoint problem ---*/\n  if (adj_turb) {\n    /*--- Definition of the convective scheme for each equation and mesh level ---*/\n    switch (config->GetKind_ConvNumScheme_AdjTurb()) {\n      case NONE :\n        break;\n      case SPACE_UPWIND :\n        for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++)\n          if (spalart_allmaras) {\n            numerics_container[iMGlevel][ADJTURB_SOL][CONV_TERM] = new CUpwSca_AdjTurb(nDim, nVar_Adj_Turb, config);\n          }\n          else if (neg_spalart_allmaras) {cout << \"Adjoint Neg SA turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n          else if (menter_sst) {cout << \"Adjoint SST turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n        break;\n      default :\n        cout << \"Convective scheme not implemented (adj_turb).\" << endl; exit(EXIT_FAILURE);\n        break;\n    }\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      if (spalart_allmaras) {\n        numerics_container[iMGlevel][ADJTURB_SOL][VISC_TERM] = new CAvgGradCorrected_AdjTurb(nDim, nVar_Adj_Turb, config);\n      }\n      else if (neg_spalart_allmaras) {cout << \"Adjoint Neg SA turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n      else if (menter_sst) {cout << \"Adjoint SST turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n    }\n    \n    /*--- Definition of the source term integration scheme for each equation and mesh level ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      if (spalart_allmaras) {\n        numerics_container[iMGlevel][ADJTURB_SOL][SOURCE_FIRST_TERM] = new CSourcePieceWise_AdjTurb(nDim, nVar_Adj_Turb, config);\n        numerics_container[iMGlevel][ADJTURB_SOL][SOURCE_SECOND_TERM] = new CSourceConservative_AdjTurb(nDim, nVar_Adj_Turb, config);\n      }\n      else if (neg_spalart_allmaras) {cout << \"Adjoint Neg SA turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n      else if (menter_sst) {cout << \"Adjoint SST turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n    }\n    \n    /*--- Definition of the boundary condition method ---*/\n    for (iMGlevel = 0; iMGlevel <= config->GetnMGLevels(); iMGlevel++) {\n      if (spalart_allmaras) numerics_container[iMGlevel][ADJTURB_SOL][CONV_BOUND_TERM] = new CUpwLin_AdjTurb(nDim, nVar_Adj_Turb, config);\n      else if (neg_spalart_allmaras) {cout << \"Adjoint Neg SA turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n      else if (menter_sst) {cout << \"Adjoint SST turbulence model not implemented.\" << endl; exit(EXIT_FAILURE);}\n    }\n    \n  }\n  \n  /*--- Solver definition for the wave problem ---*/\n  if (wave) {\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    numerics_container[MESH_0][WAVE_SOL][VISC_TERM] = new CGalerkin_Flow(nDim, nVar_Wave, config);\n    \n  }\n  \n  /*--- Solver definition for the FEA problem ---*/\n  if (fea) {\n    \n    /*--- Definition of the viscous scheme for each equation and mesh level ---*/\n    numerics_container[MESH_0][FEA_SOL][VISC_TERM] = new CGalerkin_FEA(nDim, nVar_FEA, config);\n    \n  }\n  \n  /*--- Solver definition for the FEM problem ---*/\n  if (fem) {\n\tswitch (config->GetGeometricConditions()) {\n    \tcase SMALL_DEFORMATIONS :\n    \t\tswitch (config->GetMaterialModel()) {\n    \t\t\tcase LINEAR_ELASTIC: numerics_container[MESH_0][FEA_SOL][VISC_TERM] = new CFEM_LinearElasticity(nDim, nVar_FEM, config); break;\n    \t\t\tcase NEO_HOOKEAN : cout << \"Material model does not correspond to geometric conditions.\" << endl; exit(EXIT_FAILURE); break;\n    \t\t\tdefault: cout << \"Material model not implemented.\" << endl; exit(EXIT_FAILURE); break;\n    \t\t}\n    \t\tbreak;\n    \tcase LARGE_DEFORMATIONS :\n    \t\tswitch (config->GetMaterialModel()) {\n\t\t\t\tcase LINEAR_ELASTIC: cout << \"Material model does not correspond to geometric conditions.\" << endl; exit(EXIT_FAILURE); break;\n    \t\t\tcase NEO_HOOKEAN :\n    \t\t\t\tswitch (config->GetMaterialCompressibility()) {\n    \t\t\t\t\tcase COMPRESSIBLE_MAT : numerics_container[MESH_0][FEA_SOL][VISC_TERM] = new CFEM_NeoHookean_Comp(nDim, nVar_FEM, config); break;\n    \t\t\t\t\tcase INCOMPRESSIBLE_MAT : numerics_container[MESH_0][FEA_SOL][VISC_TERM] = new CFEM_NeoHookean_Incomp(nDim, nVar_FEM, config); break;\n    \t\t\t\t\tdefault: cout << \"Material model not implemented.\" << endl; exit(EXIT_FAILURE); break;\n    \t\t\t\t}\n    \t\t\t\tbreak;\n    \t\t\tdefault: cout << \"Material model not implemented.\" << endl; exit(EXIT_FAILURE); break;\n    \t\t}\n    \t\tbreak;\n    \tdefault: cout << \" Solver not implemented.\" << endl; exit(EXIT_FAILURE); break;\n\t}\n\n  }\n\n}\n\nvoid CDriver::Iteration_Preprocessing(CIteration **iteration_container, CConfig **config, unsigned short iZone) {\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Initial print to console for this zone. ---*/\n  \n  if (rank == MASTER_NODE) cout << \"Zone \" << iZone+1;\n  \n  /*--- Loop over all zones and instantiate the physics iteration. ---*/\n  \n  switch (config[iZone]->GetKind_Solver()) {\n      \n    case EULER: case NAVIER_STOKES: case RANS:\n      if (rank == MASTER_NODE)\n        cout << \": Euler/Navier-Stokes/RANS flow iteration.\" << endl;\n      iteration_container[iZone] = new CMeanFlowIteration(config[iZone]);\n      break;\n      \n    case WAVE_EQUATION:\n      if (rank == MASTER_NODE)\n        cout << \": wave iteration.\" << endl;\n      iteration_container[iZone] = new CWaveIteration(config[iZone]);\n      break;\n      \n    case HEAT_EQUATION:\n      if (rank == MASTER_NODE)\n        cout << \": heat iteration.\" << endl;\n      iteration_container[iZone] = new CHeatIteration(config[iZone]);\n      break;\n      \n    case POISSON_EQUATION:\n      if (rank == MASTER_NODE)\n        cout << \": poisson iteration.\" << endl;\n      iteration_container[iZone] = new CPoissonIteration(config[iZone]);\n      break;\n      \n    case LINEAR_ELASTICITY:\n      if (rank == MASTER_NODE)\n        cout << \": FEA iteration.\" << endl;\n      iteration_container[iZone] = new CFEAIteration(config[iZone]);\n      break;\n    case FEM_ELASTICITY:\n      if (rank == MASTER_NODE)\n        cout << \": FEM iteration.\" << endl;\n      iteration_container[iZone] = new CFEM_StructuralAnalysis(config[iZone]);\n      break;\n    case ADJ_EULER: case ADJ_NAVIER_STOKES: case ADJ_RANS:\n      if (rank == MASTER_NODE)\n        cout << \": adjoint Euler/Navier-Stokes/RANS flow iteration.\" << endl;\n      iteration_container[iZone] = new CAdjMeanFlowIteration(config[iZone]);\n      break;\n      \n    case DISC_ADJ_EULER: case DISC_ADJ_NAVIER_STOKES: case DISC_ADJ_RANS:\n      if (rank == MASTER_NODE)\n        cout << \": discrete adjoint Euler/Navier-Stokes/RANS flow iteration.\" << endl;\n      iteration_container[iZone] = new CDiscAdjMeanFlowIteration(config[iZone]);\n      break;\n  }\n  \n}\n\n\nvoid CDriver::Interface_Preprocessing(CTransfer ***transfer_container, CInterpolator ***interpolator_container,\n\t\t\t\t\t\t\t CGeometry ***geometry_container, CConfig **config_container,\n\t\t\t\t\t\t\t CSolver ****solver_container, unsigned short nZone, unsigned short nDim) {\n\n\tint rank = MASTER_NODE;\n\tunsigned short donorZone, targetZone;\n\tunsigned short nVar, nVarTransfer;\n\n\t/*--- Initialize some useful booleans ---*/\n\tbool fluid_donor, structural_donor;\n\tbool fluid_target, structural_target;\n\n\tbool matching_mesh;\n\n\tfluid_donor  = false;  structural_donor  = false;\n\tfluid_target  = false;  structural_target  = false;\n\n\n#ifdef HAVE_MPI\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n\n\t/*--- Coupling between zones (limited to two zones at the moment) ---*/\n\tfor (targetZone = 0; targetZone < nZone; targetZone++){\n\n    /*--- Initialize target booleans ---*/\n    fluid_target  = false;  structural_target  = false;\n\n    /*--- Set the target boolean: as of now, only Fluid-Structure Interaction considered ---*/\n    switch (config_container[targetZone]->GetKind_Solver()) {\n      case EULER : case NAVIER_STOKES: case RANS: fluid_target  = true;     break;\n      case FEM_ELASTICITY:            structural_target = true;   break;\n    }\n\n\t\tfor (donorZone = 0; donorZone < nZone; donorZone++){\n\t    /*--- Initialize donor booleans ---*/\n\t    fluid_donor  = false;  structural_donor  = false;\n\t    matching_mesh = config_container[donorZone]->GetMatchingMesh();\n\n\t    /*--- Set the donor boolean: as of now, only Fluid-Structure Interaction considered ---*/\n\t    switch (config_container[donorZone]->GetKind_Solver()) {\n\t      case EULER : case NAVIER_STOKES: case RANS: fluid_donor  = true;    break;\n\t      case FEM_ELASTICITY:            structural_donor = true;  break;\n\t    }\n\n\n\t\t\t/*--- Retrieve the number of conservative variables (for problems not involving structural analysis ---*/\n\t\t\tif (!structural_donor && !structural_target){\n\t\t\t\tnVar = solver_container[donorZone][MESH_0][FLOW_SOL]->GetnVar();\n\t\t\t}\n\t\t\telse{\n\t\t\t\t/*--- If at least one of the components is structural ---*/\n\t\t\t\tnVar = nDim;\n\t\t\t}\n\n\t\t\t/*--- Interface conditions are only defined between different zones ---*/\n\t\t\tif (donorZone != targetZone){\n\n\t\t\t\tif (rank == MASTER_NODE) cout << \"From zone \" << donorZone << \" to zone \" << targetZone << \": \";\n\n\t\t\t\t/*--- Match Zones ---*/\n\t\t\t\tif (rank == MASTER_NODE) cout << \"Setting coupling \"<<endl;\n\n\t\t\t\t/*--- If the mesh is matching: match points ---*/\n\t\t\t\tif (matching_mesh){\n\t\t\t\t\tif (rank == MASTER_NODE) cout << \"between matching meshes. \" << endl;\n\t\t\t\t\tgeometry_container[donorZone][MESH_0]->MatchZone(config_container[donorZone], geometry_container[targetZone][MESH_0],\n\t\t\t\t\t\t\tconfig_container[targetZone], donorZone, nZone);\n\t\t\t\t}\n\t\t\t\t/*--- Else: interpolate ---*/\n\t\t\t\telse {\n          switch (config_container[donorZone]->GetKindInterpolation()){\n            case NEAREST_NEIGHBOR:\n              interpolator_container[donorZone][targetZone] = new CNearestNeighbor(geometry_container, config_container, donorZone, targetZone);\n              if (rank == MASTER_NODE) cout << \"using a nearest-neighbor approach.\" << endl;\n              break;\n            case ISOPARAMETRIC:\n              interpolator_container[donorZone][targetZone] = new CIsoparametric(geometry_container, config_container, donorZone, targetZone);\n              if (rank == MASTER_NODE) cout << \"using an isoparametric approach.\" << endl;\n              break;\n            case CONSISTCONSERVE:\n              if (targetZone>0 && structural_target){\n                interpolator_container[donorZone][targetZone] = new CMirror(geometry_container, config_container, donorZone, targetZone);\n                if (rank == MASTER_NODE) cout << \"using a mirror approach: matching coefficients from opposite mesh.\" << endl;\n              }\n              else{\n                interpolator_container[donorZone][targetZone] = new CIsoparametric(geometry_container, config_container, donorZone, targetZone);\n                if (rank == MASTER_NODE) cout << \"using an isoparametric approach.\" << endl;\n              }\n              if (targetZone==0 && structural_target){\n                if (rank == MASTER_NODE) cout << \"Consistent and conservative interpolation assumes the structure model mesh is evaluated second. Somehow this has not happened. The isoparametric coefficients will be calculated for both meshes, and are not guaranteed to be consistent.\" << endl;\n              }\n              break;\n\t\t\t\t  }\n\t\t\t\t}\n\n\t\t\t\t/*--- Initialize the appropriate transfer strategy ---*/\n\t\t\t\tif (rank == MASTER_NODE) cout << \"Transferring \";\n\n\t\t\t\tif (fluid_donor && structural_target) {\n\t\t\t\t\tnVarTransfer = 2;\n\t\t\t\t\ttransfer_container[donorZone][targetZone] = new CTransfer_FlowTraction(nVar, nVarTransfer, config_container[donorZone]);\n\t\t\t\t\tif (rank == MASTER_NODE) cout << \"flow tractions. \"<< endl;\n\t\t\t\t}\n\t\t\t\telse if (structural_donor && fluid_target){\n\t\t\t\t\tnVarTransfer = 0;\n\t\t\t\t\ttransfer_container[donorZone][targetZone] = new CTransfer_StructuralDisplacements(nVar, nVarTransfer, config_container[donorZone]);\n\t\t\t\t\tif (rank == MASTER_NODE) cout << \"structural displacements. \"<< endl;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnVarTransfer = 0;\n\t\t\t\t\ttransfer_container[donorZone][targetZone] = new CTransfer_ConservativeVars(nVar, nVarTransfer, config_container[donorZone]);\n\t\t\t\t\tif (rank == MASTER_NODE) cout << \"generic conservative variables. \" << endl;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t}\n\n}\n\n\nCDriver::~CDriver(void) { }\n\n\nCSingleZoneDriver::CSingleZoneDriver(CIteration **iteration_container,\n                                     CSolver ****solver_container,\n                                     CGeometry ***geometry_container,\n                                     CIntegration ***integration_container,\n                                     CNumerics *****numerics_container,\n                                     CInterpolator ***interpolator_container,\n                                     CTransfer ***transfer_container,\n                                     CConfig **config_container,\n                                     unsigned short val_nZone,\n                                     unsigned short val_nDim) : CDriver(iteration_container,\n                                                                         solver_container,\n                                                                         geometry_container,\n                                                                         integration_container,\n                                                                         numerics_container,\n                                                                         interpolator_container,\n                                                                         transfer_container,\n                                                                         config_container,\n                                                                         val_nZone,\n                                                                         val_nDim) { }\n\nCSingleZoneDriver::~CSingleZoneDriver(void) { }\n\nvoid CSingleZoneDriver::Run(CIteration **iteration_container,\n                            COutput *output,\n                            CIntegration ***integration_container,\n                            CGeometry ***geometry_container,\n                            CSolver ****solver_container,\n                            CNumerics *****numerics_container,\n                            CConfig **config_container,\n                            CSurfaceMovement **surface_movement,\n                            CVolumetricMovement **grid_movement,\n                            CFreeFormDefBox*** FFDBox,\n                            CInterpolator ***interpolator_container,\n                            CTransfer ***transfer_container) {\n\n  /*--- Run an iteration of the physics within this single zone.\n   We assume that the zone of interest is in the ZONE_0 container position. ---*/\n  \n  iteration_container[ZONE_0]->Preprocess(output, integration_container, geometry_container,\n                                          solver_container, numerics_container, config_container,\n                                          surface_movement, grid_movement, FFDBox, ZONE_0);\n  \n  iteration_container[ZONE_0]->Iterate(output, integration_container, geometry_container,\n                                       solver_container, numerics_container, config_container,\n                                       surface_movement, grid_movement, FFDBox, ZONE_0);\n  \n  iteration_container[ZONE_0]->Update(output, integration_container, geometry_container,\n                                      solver_container, numerics_container, config_container,\n                                      surface_movement, grid_movement, FFDBox, ZONE_0);\n  \n  iteration_container[ZONE_0]->Monitor();     /*--- Does nothing for now. ---*/\n  \n  iteration_container[ZONE_0]->Output();      /*--- Does nothing for now. ---*/\n  \n  iteration_container[ZONE_0]->Postprocess(); /*--- Does nothing for now. ---*/\n  \n}\n\n\nCMultiZoneDriver::CMultiZoneDriver(CIteration **iteration_container,\n                                   CSolver ****solver_container,\n                                   CGeometry ***geometry_container,\n                                   CIntegration ***integration_container,\n                                   CNumerics *****numerics_container,\n                                   CInterpolator ***interpolator_container,\n                                   CTransfer ***transfer_container,\n                                   CConfig **config_container,\n                                   unsigned short val_nZone,\n                                   unsigned short val_nDim) : CDriver(iteration_container,\n                                                                       solver_container,\n                                                                       geometry_container,\n                                                                       integration_container,\n                                                                       numerics_container,\n                                                                       interpolator_container,\n                                                                       transfer_container,\n                                                                       config_container,\n                                                                       val_nZone,\n                                                                       val_nDim) { }\n\n\nCMultiZoneDriver::~CMultiZoneDriver(void) { }\n\nvoid CMultiZoneDriver::Run(CIteration **iteration_container,\n                           COutput *output,\n                           CIntegration ***integration_container,\n                           CGeometry ***geometry_container,\n                           CSolver ****solver_container,\n                           CNumerics *****numerics_container,\n                           CConfig **config_container,\n                           CSurfaceMovement **surface_movement,\n                           CVolumetricMovement **grid_movement,\n                           CFreeFormDefBox*** FFDBox,\n                           CInterpolator ***interpolator_container,\n                           CTransfer ***transfer_container) {\n  \n  unsigned short iZone;\n  \n  /*--- Run a single iteration of a multi-zone problem by looping over all\n   zones and executing the iterations. Note that data transers between zones\n   and other intermediate procedures may be required. ---*/\n  \n  for (iZone = 0; iZone < nZone; iZone++) {\n    \n    iteration_container[iZone]->Preprocess(output, integration_container, geometry_container,\n                                           solver_container, numerics_container, config_container,\n                                           surface_movement, grid_movement, FFDBox, iZone);\n    \n    iteration_container[iZone]->Iterate(output, integration_container, geometry_container,\n                                        solver_container, numerics_container, config_container,\n                                        surface_movement, grid_movement, FFDBox, iZone);\n    \n    iteration_container[iZone]->Update(output, integration_container, geometry_container,\n                                       solver_container, numerics_container, config_container,\n                                       surface_movement, grid_movement, FFDBox, iZone);\n    \n    iteration_container[iZone]->Monitor();     /*--- Does nothing for now. ---*/\n    \n    iteration_container[iZone]->Output();      /*--- Does nothing for now. ---*/\n    \n    iteration_container[iZone]->Postprocess(); /*--- Does nothing for now. ---*/\n    \n  }\n  \n}\n\nCSpectralDriver::CSpectralDriver(CIteration **iteration_container,\n                                 CSolver ****solver_container,\n                                 CGeometry ***geometry_container,\n                                 CIntegration ***integration_container,\n                                 CNumerics *****numerics_container,\n                                 CInterpolator ***interpolator_container,\n                                 CTransfer ***transfer_container,\n                                 CConfig **config_container,\n                                 unsigned short val_nZone,\n                                 unsigned short val_nDim) : CDriver(iteration_container,\n                                                                     solver_container,\n                                                                     geometry_container,\n                                                                     integration_container,\n                                                                     numerics_container,\n                                                                     interpolator_container,\n                                                                     transfer_container,\n                                                                     config_container,\n                                                                     val_nZone,\n                                                                     val_nDim) { }\n\nCSpectralDriver::~CSpectralDriver(void) { }\n\nvoid CSpectralDriver::Run(CIteration **iteration_container,\n        \t\t\t\tCOutput *output,\n        \t\t\t\tCIntegration ***integration_container,\n        \t\t\t\tCGeometry ***geometry_container,\n        \t\t\t\tCSolver ****solver_container,\n        \t\t\t\tCNumerics *****numerics_container,\n        \t\t\t\tCConfig **config_container,\n        \t\t\t\tCSurfaceMovement **surface_movement,\n        \t\t\t\tCVolumetricMovement **grid_movement,\n        \t\t\t\tCFreeFormDefBox*** FFDBox,\n        \t\t\t\tCInterpolator ***interpolator_container,\n        \t\t\t\tCTransfer ***transfer_container) {\n  \n  unsigned short iZone;\n  unsigned long ExtIter = config_container[ZONE_0]->GetExtIter();\n  \n  /*--- If this is the first iteration, set up the spectral operators,\n   initialize the source terms, and compute any grid veocities, if necessary. ---*/\n  \n  if (ExtIter == 0) {\n    SetTimeSpectral_Velocities(geometry_container, config_container, nZone);\n    for (iZone = 0; iZone < nZone; iZone++)\n      SetTimeSpectral(geometry_container, solver_container, config_container, nZone, (iZone+1)%nZone);\n  }\n  \n  /*--- Run a single iteration of a spectral method problem. Preprocess all\n   all zones before beginning the iteration. ---*/\n  \n  for (iZone = 0; iZone < nZone; iZone++)\n    iteration_container[iZone]->Preprocess(output, integration_container, geometry_container,\n                                           solver_container, numerics_container, config_container,\n                                           surface_movement, grid_movement, FFDBox, iZone);\n  \n  for (iZone = 0; iZone < nZone; iZone++) {\n    iteration_container[iZone]->Iterate(output, integration_container, geometry_container,\n                                        solver_container, numerics_container, config_container,\n                                        surface_movement, grid_movement, FFDBox, iZone);\n    \n    \n    /*--- Update the spectral source terms across all zones ---*/\n    \n    SetTimeSpectral(geometry_container, solver_container, config_container, nZone, (iZone+1)%nZone);\n    \n    iteration_container[iZone]->Update(output, integration_container, geometry_container,\n                                       solver_container, numerics_container, config_container,\n                                       surface_movement, grid_movement, FFDBox, iZone);\n    \n    iteration_container[iZone]->Monitor();     /*--- Does nothing for now. ---*/\n    \n    iteration_container[iZone]->Output();      /*--- Does nothing for now. ---*/\n    \n    iteration_container[iZone]->Postprocess(); /*--- Does nothing for now. ---*/\n    \n  }\n  \n}\n\nvoid CSpectralDriver::SetTimeSpectral(CGeometry ***geometry_container, CSolver ****solver_container,\n                                      CConfig **config_container, unsigned short nZone, unsigned short iZone) {\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  unsigned short iVar, jZone, kZone, iMGlevel;\n  unsigned short nVar = solver_container[ZONE_0][MESH_0][FLOW_SOL]->GetnVar();\n  unsigned long iPoint;\n  bool implicit = (config_container[ZONE_0]->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool adjoint = (config_container[ZONE_0]->GetAdjoint());\n  if (adjoint) {\n    implicit = (config_container[ZONE_0]->GetKind_TimeIntScheme_AdjFlow() == EULER_IMPLICIT);\n  }\n  \n  /*--- Retrieve values from the config file ---*/\n  su2double *U = new su2double[nVar];\n  su2double *U_old = new su2double[nVar];\n  su2double *Psi = new su2double[nVar];\n  su2double *Psi_old = new su2double[nVar];\n  su2double *Source = new su2double[nVar];\n  su2double deltaU, deltaPsi;\n  \n  /*--- Compute period of oscillation ---*/\n  su2double period = config_container[ZONE_0]->GetTimeSpectral_Period();\n  \n  /*--- allocate dynamic memory for D ---*/\n  su2double **D = new su2double*[nZone];\n  for (kZone = 0; kZone < nZone; kZone++) {\n    D[kZone] = new su2double[nZone];\n  }\n  \n  /*--- Build the time-spectral operator matrix ---*/\n  ComputeTimeSpectral_Operator(D, period, nZone);\n  //  for (kZone = 0; kZone < nZone; kZone++) {\n  //    for (jZone = 0; jZone < nZone; jZone++) {\n  //\n  //      if (nZone%2 == 0) {\n  //\n  //        /*--- For an even number of time instances ---*/\n  //        if (kZone == jZone) {\n  //          D[kZone][jZone] = 0.0;\n  //        }\n  //        else {\n  //          D[kZone][jZone] = (PI_NUMBER/period)*pow(-1.0,(kZone-jZone))*(1/tan(PI_NUMBER*(kZone-jZone)/nZone));\n  //        }\n  //      }\n  //      else {\n  //\n  //        /*--- For an odd number of time instances ---*/\n  //        if (kZone == jZone) {\n  //          D[kZone][jZone] = 0.0;\n  //        }\n  //        else {\n  //          D[kZone][jZone] = (PI_NUMBER/period)*pow(-1.0,(kZone-jZone))*(1/sin(PI_NUMBER*(kZone-jZone)/nZone));\n  //        }\n  //      }\n  //\n  //    }\n  //  }\n  \n  /*--- Compute various source terms for explicit direct, implicit direct, and adjoint problems ---*/\n  /*--- Loop over all grid levels ---*/\n  for (iMGlevel = 0; iMGlevel <= config_container[ZONE_0]->GetnMGLevels(); iMGlevel++) {\n    \n    /*--- Loop over each node in the volume mesh ---*/\n    for (iPoint = 0; iPoint < geometry_container[ZONE_0][iMGlevel]->GetnPoint(); iPoint++) {\n      \n      for (iVar = 0; iVar < nVar; iVar++) {\n        Source[iVar] = 0.0;\n      }\n      \n      /*--- Step across the columns ---*/\n      for (jZone = 0; jZone < nZone; jZone++) {\n        \n        /*--- Retrieve solution at this node in current zone ---*/\n        for (iVar = 0; iVar < nVar; iVar++) {\n          \n          if (!adjoint) {\n            U[iVar] = solver_container[jZone][iMGlevel][FLOW_SOL]->node[iPoint]->GetSolution(iVar);\n            Source[iVar] += U[iVar]*D[iZone][jZone];\n            \n            if (implicit) {\n              U_old[iVar] = solver_container[jZone][iMGlevel][FLOW_SOL]->node[iPoint]->GetSolution_Old(iVar);\n              deltaU = U[iVar] - U_old[iVar];\n              Source[iVar] += deltaU*D[iZone][jZone];\n            }\n            \n          }\n          \n          else {\n            Psi[iVar] = solver_container[jZone][iMGlevel][ADJFLOW_SOL]->node[iPoint]->GetSolution(iVar);\n            Source[iVar] += Psi[iVar]*D[jZone][iZone];\n            \n            if (implicit) {\n              Psi_old[iVar] = solver_container[jZone][iMGlevel][ADJFLOW_SOL]->node[iPoint]->GetSolution_Old(iVar);\n              deltaPsi = Psi[iVar] - Psi_old[iVar];\n              Source[iVar] += deltaPsi*D[jZone][iZone];\n            }\n          }\n        }\n        \n        /*--- Store sources for current row ---*/\n        for (iVar = 0; iVar < nVar; iVar++) {\n          if (!adjoint) {\n            solver_container[iZone][iMGlevel][FLOW_SOL]->node[iPoint]->SetTimeSpectral_Source(iVar, Source[iVar]);\n          }\n          else {\n            solver_container[iZone][iMGlevel][ADJFLOW_SOL]->node[iPoint]->SetTimeSpectral_Source(iVar, Source[iVar]);\n          }\n        }\n        \n      }\n    }\n  }\n  \n  //\t/*--- Loop over all grid levels ---*/\n  //\tfor (iMGlevel = 0; iMGlevel <= config_container[ZONE_0]->GetnMGLevels(); iMGlevel++) {\n  //\n  //\t\t/*--- Loop over each node in the volume mesh ---*/\n  //\t\tfor (iPoint = 0; iPoint < geometry_container[ZONE_0][iMGlevel]->GetnPoint(); iPoint++) {\n  //\n  //\t\t\tfor (iZone = 0; iZone < nZone; iZone++) {\n  //\t\t\t\tfor (iVar = 0; iVar < nVar; iVar++) Source[iVar] = 0.0;\n  //\t\t\t\tfor (jZone = 0; jZone < nZone; jZone++) {\n  //\n  //\t\t\t\t\t/*--- Retrieve solution at this node in current zone ---*/\n  //\t\t\t\t\tfor (iVar = 0; iVar < nVar; iVar++) {\n  //\t\t\t\t\t\tU[iVar] = solver_container[jZone][iMGlevel][FLOW_SOL]->node[iPoint]->GetSolution(iVar);\n  //\t\t\t\t\t\tSource[iVar] += U[iVar]*D[iZone][jZone];\n  //\t\t\t\t\t}\n  //\t\t\t\t}\n  //\t\t\t\t/*--- Store sources for current iZone ---*/\n  //\t\t\t\tfor (iVar = 0; iVar < nVar; iVar++)\n  //\t\t\t\t\tsolver_container[iZone][iMGlevel][FLOW_SOL]->node[iPoint]->SetTimeSpectral_Source(iVar, Source[iVar]);\n  //\t\t\t}\n  //\t\t}\n  //\t}\n  \n  /*--- Source term for a turbulence model ---*/\n  if (config_container[ZONE_0]->GetKind_Solver() == RANS) {\n    \n    /*--- Extra variables needed if we have a turbulence model. ---*/\n    unsigned short nVar_Turb = solver_container[ZONE_0][MESH_0][TURB_SOL]->GetnVar();\n    su2double *U_Turb = new su2double[nVar_Turb];\n    su2double *Source_Turb = new su2double[nVar_Turb];\n    \n    /*--- Loop over only the finest mesh level (turbulence is always solved\n     on the original grid only). ---*/\n    for (iPoint = 0; iPoint < geometry_container[ZONE_0][MESH_0]->GetnPoint(); iPoint++) {\n      for (iVar = 0; iVar < nVar_Turb; iVar++) Source_Turb[iVar] = 0.0;\n      for (jZone = 0; jZone < nZone; jZone++) {\n        \n        /*--- Retrieve solution at this node in current zone ---*/\n        for (iVar = 0; iVar < nVar_Turb; iVar++) {\n          U_Turb[iVar] = solver_container[jZone][MESH_0][TURB_SOL]->node[iPoint]->GetSolution(iVar);\n          Source_Turb[iVar] += U_Turb[iVar]*D[iZone][jZone];\n        }\n      }\n      \n      /*--- Store sources for current iZone ---*/\n      for (iVar = 0; iVar < nVar_Turb; iVar++)\n        solver_container[iZone][MESH_0][TURB_SOL]->node[iPoint]->SetTimeSpectral_Source(iVar, Source_Turb[iVar]);\n    }\n    \n    delete [] U_Turb;\n    delete [] Source_Turb;\n  }\n  \n  /*--- delete dynamic memory for D ---*/\n  for (kZone = 0; kZone < nZone; kZone++) {\n    delete [] D[kZone];\n  }\n  delete [] D;\n  delete [] U;\n  delete [] U_old;\n  delete [] Psi;\n  delete [] Psi_old;\n  delete [] Source;\n  \n  /*--- Write file with force coefficients ---*/\n  ofstream TS_Flow_file;\n  ofstream mean_TS_Flow_file;\n  \n  /*--- MPI Send/Recv buffers ---*/\n  su2double *sbuf_force = NULL,  *rbuf_force = NULL;\n  \n  /*--- Other variables ---*/\n  unsigned short nVar_Force = 8;\n  unsigned long current_iter = config_container[ZONE_0]->GetExtIter();\n  \n  /*--- Allocate memory for send buffer ---*/\n  sbuf_force = new su2double[nVar_Force];\n  \n  su2double *averages = new su2double[nVar_Force];\n  for (iVar = 0; iVar < nVar_Force; iVar++)\n    averages[iVar] = 0;\n  \n  /*--- Allocate memory for receive buffer ---*/\n  if (rank == MASTER_NODE) {\n    rbuf_force = new su2double[nVar_Force];\n    \n    TS_Flow_file.precision(15);\n    TS_Flow_file.open(\"TS_force_coefficients.csv\", ios::out);\n    TS_Flow_file <<  \"\\\"time_instance\\\",\\\"lift_coeff\\\",\\\"drag_coeff\\\",\\\"moment_coeff_x\\\",\\\"moment_coeff_y\\\",\\\"moment_coeff_z\\\"\" << endl;\n    \n    mean_TS_Flow_file.precision(15);\n    if (current_iter == 0 && iZone == 1) {\n      mean_TS_Flow_file.open(\"history_TS_forces.plt\", ios::trunc);\n      mean_TS_Flow_file << \"TITLE = \\\"SU2 TIME-SPECTRAL SIMULATION\\\"\" << endl;\n      mean_TS_Flow_file <<  \"VARIABLES = \\\"Iteration\\\",\\\"CLift\\\",\\\"CDrag\\\",\\\"CMx\\\",\\\"CMy\\\",\\\"CMz\\\",\\\"CT\\\",\\\"CQ\\\",\\\"CMerit\\\"\" << endl;\n      mean_TS_Flow_file << \"ZONE T= \\\"Average Convergence History\\\"\" << endl;\n    }\n    else\n      mean_TS_Flow_file.open(\"history_TS_forces.plt\", ios::out | ios::app);\n  }\n  \n  if (rank == MASTER_NODE) {\n    \n    /*--- Run through the zones, collecting the forces coefficients\n     N.B. Summing across processors within a given zone is being done\n     elsewhere. ---*/\n    for (kZone = 0; kZone < nZone; kZone++) {\n      \n      /*--- Flow solution coefficients (parallel) ---*/\n      sbuf_force[0] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CLift();\n      sbuf_force[1] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CDrag();\n      sbuf_force[2] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CMx();\n      sbuf_force[3] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CMy();\n      sbuf_force[4] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CMz();\n      sbuf_force[5] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CT();\n      sbuf_force[6] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CQ();\n      sbuf_force[7] = solver_container[kZone][MESH_0][FLOW_SOL]->GetTotal_CMerit();\n      \n      for (iVar = 0; iVar < nVar_Force; iVar++) {\n        rbuf_force[iVar] = sbuf_force[iVar];\n      }\n      \n      TS_Flow_file << kZone << \", \";\n      for (iVar = 0; iVar < nVar_Force; iVar++)\n        TS_Flow_file << rbuf_force[iVar] << \", \";\n      TS_Flow_file << endl;\n      \n      /*--- Increment the total contributions from each zone, dividing by nZone as you go ---*/\n      for (iVar = 0; iVar < nVar_Force; iVar++) {\n        averages[iVar] += (1.0/su2double(nZone))*rbuf_force[iVar];\n      }\n    }\n  }\n  \n  if (rank == MASTER_NODE && iZone == ZONE_0) {\n    \n    mean_TS_Flow_file << current_iter << \", \";\n    for (iVar = 0; iVar < nVar_Force; iVar++) {\n      mean_TS_Flow_file << averages[iVar];\n      if (iVar < nVar_Force-1)\n        mean_TS_Flow_file << \", \";\n    }\n    mean_TS_Flow_file << endl;\n  }\n  \n  if (rank == MASTER_NODE) {\n    TS_Flow_file.close();\n    mean_TS_Flow_file.close();\n    delete [] rbuf_force;\n  }\n  \n  delete [] sbuf_force;\n  delete [] averages;\n  \n}\n\nvoid CSpectralDriver::ComputeTimeSpectral_Operator(su2double **D, su2double period, unsigned short nZone) {\n  \n  unsigned short kZone, jZone;\n  \n  /*--- Build the time-spectral operator matrix ---*/\n  for (kZone = 0; kZone < nZone; kZone++) {\n    for (jZone = 0; jZone < nZone; jZone++) {\n      \n      if (nZone%2 == 0) {\n        \n        /*--- For an even number of time instances ---*/\n        if (kZone == jZone) {\n          D[kZone][jZone] = 0.0;\n        }\n        else {\n          D[kZone][jZone] = (PI_NUMBER/period)*pow(-1.0,(kZone-jZone))*(1/tan(PI_NUMBER*(kZone-jZone)/nZone));\n        }\n      }\n      else {\n        \n        /*--- For an odd number of time instances ---*/\n        if (kZone == jZone) {\n          D[kZone][jZone] = 0.0;\n        }\n        else {\n          D[kZone][jZone] = (PI_NUMBER/period)*pow(-1.0,(kZone-jZone))*(1/sin(PI_NUMBER*(kZone-jZone)/nZone));\n        }\n      }\n      \n    }\n  }\n  \n}\n\nvoid CSpectralDriver::SetTimeSpectral_Velocities(CGeometry ***geometry_container,\n                                                 CConfig **config_container, unsigned short nZone) {\n  \n  unsigned short iZone, jDegree, iDim, iMGlevel;\n  unsigned short nDim = geometry_container[ZONE_0][MESH_0]->GetnDim();\n  \n  su2double angular_interval = 2.0*PI_NUMBER/(su2double)(nZone);\n  su2double *Coord;\n  unsigned long iPoint;\n  \n  /*--- Compute period of oscillation & compute time interval using nTimeInstances ---*/\n  su2double period = config_container[ZONE_0]->GetTimeSpectral_Period();\n  su2double deltaT = period/(su2double)(config_container[ZONE_0]->GetnTimeInstances());\n  \n  /*--- allocate dynamic memory for angular positions (these are the abscissas) ---*/\n  su2double *angular_positions = new su2double [nZone];\n  for (iZone = 0; iZone < nZone; iZone++) {\n    angular_positions[iZone] = iZone*angular_interval;\n  }\n  \n  /*--- find the highest-degree trigonometric polynomial allowed by the Nyquist criterion---*/\n  su2double high_degree = (nZone-1)/2.0;\n  int highest_degree = SU2_TYPE::Int(high_degree);\n  \n  /*--- allocate dynamic memory for a given point's coordinates ---*/\n  su2double **coords = new su2double *[nZone];\n  for (iZone = 0; iZone < nZone; iZone++) {\n    coords[iZone] = new su2double [nDim];\n  }\n  \n  /*--- allocate dynamic memory for vectors of Fourier coefficients ---*/\n  su2double *a_coeffs = new su2double [highest_degree+1];\n  su2double *b_coeffs = new su2double [highest_degree+1];\n  \n  /*--- allocate dynamic memory for the interpolated positions and velocities ---*/\n  su2double *fitted_coords = new su2double [nZone];\n  su2double *fitted_velocities = new su2double [nZone];\n  \n  /*--- Loop over all grid levels ---*/\n  for (iMGlevel = 0; iMGlevel <= config_container[ZONE_0]->GetnMGLevels(); iMGlevel++) {\n    \n    /*--- Loop over each node in the volume mesh ---*/\n    for (iPoint = 0; iPoint < geometry_container[ZONE_0][iMGlevel]->GetnPoint(); iPoint++) {\n      \n      /*--- Populate the 2D coords array with the\n       coordinates of a given mesh point across\n       the time instances (i.e. the Zones) ---*/\n      /*--- Loop over each zone ---*/\n      for (iZone = 0; iZone < nZone; iZone++) {\n        /*--- get the coordinates of the given point ---*/\n        Coord = geometry_container[iZone][iMGlevel]->node[iPoint]->GetCoord();\n        for (iDim = 0; iDim < nDim; iDim++) {\n          /*--- add them to the appropriate place in the 2D coords array ---*/\n          coords[iZone][iDim] = Coord[iDim];\n        }\n      }\n      \n      /*--- Loop over each Dimension ---*/\n      for (iDim = 0; iDim < nDim; iDim++) {\n        \n        /*--- compute the Fourier coefficients ---*/\n        for (jDegree = 0; jDegree < highest_degree+1; jDegree++) {\n          a_coeffs[jDegree] = 0;\n          b_coeffs[jDegree] = 0;\n          for (iZone = 0; iZone < nZone; iZone++) {\n            a_coeffs[jDegree] = a_coeffs[jDegree] + (2.0/(su2double)nZone)*cos(jDegree*angular_positions[iZone])*coords[iZone][iDim];\n            b_coeffs[jDegree] = b_coeffs[jDegree] + (2.0/(su2double)nZone)*sin(jDegree*angular_positions[iZone])*coords[iZone][iDim];\n          }\n        }\n        \n        /*--- find the interpolation of the coordinates and its derivative (the velocities) ---*/\n        for (iZone = 0; iZone < nZone; iZone++) {\n          fitted_coords[iZone] = a_coeffs[0]/2.0;\n          fitted_velocities[iZone] = 0.0;\n          for (jDegree = 1; jDegree < highest_degree+1; jDegree++) {\n            fitted_coords[iZone] = fitted_coords[iZone] + a_coeffs[jDegree]*cos(jDegree*angular_positions[iZone]) + b_coeffs[jDegree]*sin(jDegree*angular_positions[iZone]);\n            fitted_velocities[iZone] = fitted_velocities[iZone] + (angular_interval/deltaT)*jDegree*(b_coeffs[jDegree]*cos(jDegree*angular_positions[iZone]) - a_coeffs[jDegree]*sin(jDegree*angular_positions[iZone]));\n          }\n        }\n        \n        /*--- Store grid velocity for this point, at this given dimension, across the Zones ---*/\n        for (iZone = 0; iZone < nZone; iZone++) {\n          geometry_container[iZone][iMGlevel]->node[iPoint]->SetGridVel(iDim, fitted_velocities[iZone]);\n        }\n      }\n    }\n  }\n  \n  /*--- delete dynamic memory for the abscissas, coefficients, et cetera ---*/\n  delete [] angular_positions;\n  delete [] a_coeffs;\n  delete [] b_coeffs;\n  delete [] fitted_coords;\n  delete [] fitted_velocities;\n  for (iZone = 0; iZone < nZone; iZone++) {\n    delete [] coords[iZone];\n  }\n  delete [] coords;\n  \n}\n\nCFSIDriver::CFSIDriver(CIteration **iteration_container,\n                       CSolver ****solver_container,\n                       CGeometry ***geometry_container,\n                       CIntegration ***integration_container,\n                       CNumerics *****numerics_container,\n                       CInterpolator ***interpolator_container,\n                       CTransfer ***transfer_container,\n                       CConfig **config_container,\n                       unsigned short val_nZone,\n                       unsigned short val_nDim) : CDriver(iteration_container,\n                                                           solver_container,\n                                                           geometry_container,\n                                                           integration_container,\n                                                           numerics_container,\n                                                           interpolator_container,\n                                                           transfer_container,\n                                                           config_container,\n                                                           val_nZone,\n                                                           val_nDim) { }\n\nCFSIDriver::~CFSIDriver(void) { }\n\nvoid CFSIDriver::Run(CIteration **iteration_container,\n                     COutput *output,\n                     CIntegration ***integration_container,\n                     CGeometry ***geometry_container,\n                     CSolver ****solver_container,\n                     CNumerics *****numerics_container,\n                     CConfig **config_container,\n                     CSurfaceMovement **surface_movement,\n                     CVolumetricMovement **grid_movement,\n                     CFreeFormDefBox*** FFDBox,\n                     CInterpolator ***interpolator_container,\n                     CTransfer ***transfer_container) {\n\n\t/*--- As of now, we are coding it for just 2 zones. ---*/\n\t/*--- This will become more general, but we need to modify the configuration for that ---*/\n\tunsigned short ZONE_FLOW = 0, ZONE_STRUCT = 1;\n\tunsigned short iZone;\n\n\tunsigned long IntIter = 0; for (iZone = 0; iZone < nZone; iZone++) config_container[iZone]->SetIntIter(IntIter);\n\tunsigned long FSIIter = 0; for (iZone = 0; iZone < nZone; iZone++) config_container[iZone]->SetFSIIter(FSIIter);\n\tunsigned long nFSIIter = config_container[ZONE_FLOW]->GetnIterFSI();\n\n\n\tint rank = MASTER_NODE;\n#ifdef HAVE_MPI\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n\n\t /*--- If there is a restart, we need to get the old geometry from the fluid field ---*/\n\t bool restart = (config_container[ZONE_FLOW]->GetRestart() || config_container[ZONE_FLOW]->GetRestart_Flow());\n\t unsigned long ExtIter = config_container[ZONE_FLOW]->GetExtIter();\n\n\t if (restart && (long)ExtIter == config_container[ZONE_FLOW]->GetUnst_RestartIter()){\n\t\tunsigned short ZONE_FLOW = 0;\n\t\tsolver_container[ZONE_FLOW][MESH_0][FLOW_SOL]->Restart_OldGeometry(geometry_container[ZONE_FLOW][MESH_0],config_container[ZONE_FLOW]);\n\t }\n\n\t/*-----------------------------------------------------------------*/\n\t/*---------------- Predict structural displacements ---------------*/\n\t/*-----------------------------------------------------------------*/\n\n\tPredict_Displacements(output, integration_container, geometry_container,\n            \t\t      solver_container, numerics_container, config_container,\n            \t\t      surface_movement, grid_movement, FFDBox,\n            \t\t      ZONE_STRUCT, ZONE_FLOW);\n\n\twhile (FSIIter < nFSIIter){\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*------------------- Transfer Displacements ----------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\tTransfer_Displacements(output, integration_container, geometry_container,\n                solver_container, numerics_container, config_container,\n                surface_movement, grid_movement, FFDBox, transfer_container,\n                ZONE_STRUCT, ZONE_FLOW);\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*-------------------- Fluid subiteration -------------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\titeration_container[ZONE_FLOW]->Preprocess(output, integration_container, geometry_container,\n\t\t                                       solver_container, numerics_container, config_container,\n\t\t                                       surface_movement, grid_movement, FFDBox, ZONE_FLOW);\n\n\t\titeration_container[ZONE_FLOW]->Iterate(output, integration_container, geometry_container,\n\t\t                                       solver_container, numerics_container, config_container,\n\t\t                                       surface_movement, grid_movement, FFDBox, ZONE_FLOW);\n\n\t\t/*--- Write the convergence history for the fluid (only screen output) ---*/\n\n\t\toutput->SetConvHistory_Body(NULL, geometry_container, solver_container, config_container, integration_container, true, 0.0, ZONE_FLOW);\n\n\t\t/*--- Set the fluid convergence to false (to make sure FSI subiterations converge) ---*/\n\n\t\tintegration_container[ZONE_FLOW][FLOW_SOL]->SetConvergence(false);\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*------------------- Set FEA loads from fluid --------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\tTransfer_Tractions(output, integration_container, geometry_container,\n                solver_container, numerics_container, config_container,\n                surface_movement, grid_movement, FFDBox, transfer_container,\n                ZONE_FLOW, ZONE_STRUCT);\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*------------------ Structural subiteration ----------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\titeration_container[ZONE_STRUCT]->Iterate(output, integration_container, geometry_container,\n\t\t                                       solver_container, numerics_container, config_container,\n\t\t                                       surface_movement, grid_movement, FFDBox, ZONE_STRUCT);\n\n\t\t/*--- Write the convergence history for the structure (only screen output) ---*/\n\n\t\toutput->SetConvHistory_Body(NULL, geometry_container, solver_container, config_container, integration_container, true, 0.0, ZONE_STRUCT);\n\n\t\t/*--- Set the fluid convergence to false (to make sure FSI subiterations converge) ---*/\n\n\t\tintegration_container[ZONE_STRUCT][FEA_SOL]->SetConvergence(false);\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*----------------- Displacements relaxation ----------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\tRelaxation_Displacements(output, geometry_container, solver_container, config_container,\n\t\t\t\t\t\t\t\t ZONE_STRUCT, ZONE_FLOW, FSIIter);\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*-------------------- Check convergence --------------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\tintegration_container[ZONE_STRUCT][FEA_SOL]->Convergence_Monitoring_FSI(geometry_container[ZONE_STRUCT][MESH_0], config_container[ZONE_STRUCT],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsolver_container[ZONE_STRUCT][MESH_0][FEA_SOL], FSIIter);\n\n\t\tif (integration_container[ZONE_STRUCT][FEA_SOL]->GetConvergence_FSI()) break;\n\n\t\t/*-----------------------------------------------------------------*/\n\t\t/*--------------------- Update FSIIter ---------------------------*/\n\t\t/*-----------------------------------------------------------------*/\n\n\t\tFSIIter++; for (iZone = 0; iZone < nZone; iZone++) config_container[iZone]->SetFSIIter(FSIIter);\n\n\t}\n\n\t/*-----------------------------------------------------------------*/\n  \t/*------------------ Update coupled solver ------------------------*/\n\t/*-----------------------------------------------------------------*/\n\n\tUpdate(output, integration_container, geometry_container,\n           solver_container, numerics_container, config_container,\n           surface_movement, grid_movement, FFDBox, transfer_container,\n           ZONE_FLOW, ZONE_STRUCT);\n\n\n\t/*-----------------------------------------------------------------*/\n  \t/*-------------------- Update fluid solver ------------------------*/\n\t/*-----------------------------------------------------------------*/\n\n\titeration_container[ZONE_FLOW]->Update(output, integration_container, geometry_container,\n\t          \t  \t  \t  \t  \t  \t  \t  solver_container, numerics_container, config_container,\n\t          \t  \t  \t  \t  \t  \t  \t  surface_movement, grid_movement, FFDBox, ZONE_FLOW);\n\n\t/*-----------------------------------------------------------------*/\n  \t/*----------------- Update structural solver ----------------------*/\n\t/*-----------------------------------------------------------------*/\n\n\titeration_container[ZONE_STRUCT]->Update(output, integration_container, geometry_container,\n\t          \t  \t  \t  \t  \t  \t  \t  solver_container, numerics_container, config_container,\n\t          \t  \t  \t  \t  \t  \t  \t  surface_movement, grid_movement, FFDBox, ZONE_STRUCT);\n\n\n\t/*-----------------------------------------------------------------*/\n\t/*--------------- Update convergence parameter --------------------*/\n\t/*-----------------------------------------------------------------*/\n\tintegration_container[ZONE_STRUCT][FEA_SOL]->SetConvergence_FSI(false);\n\n  \n}\n\nvoid CFSIDriver::Predict_Displacements(COutput *output, CIntegration ***integration_container, CGeometry ***geometry_container,\n\t\t     CSolver ****solver_container, CNumerics *****numerics_container, CConfig **config_container,\n\t\t\t CSurfaceMovement **surface_movement, CVolumetricMovement **grid_movement, CFreeFormDefBox*** FFDBox,\n\t\t\t unsigned short donorZone, unsigned short targetZone){\n\n#ifdef HAVE_MPI\n\tint rank;\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n\n\tsolver_container[donorZone][MESH_0][FEA_SOL]->PredictStruct_Displacement(geometry_container[donorZone], config_container[donorZone],\n\t\t\tsolver_container[donorZone]);\n\n\t/*--- For parallel simulations we need to communicate the predicted solution before updating the fluid mesh ---*/\n\n\tsolver_container[donorZone][MESH_0][FEA_SOL]->Set_MPI_Solution_Pred(geometry_container[donorZone][MESH_0], config_container[donorZone]);\n\n\n}\n\nvoid CFSIDriver::Predict_Tractions(COutput *output, CIntegration ***integration_container, CGeometry ***geometry_container,\n\t\t     CSolver ****solver_container, CNumerics *****numerics_container, CConfig **config_container,\n\t\t\t CSurfaceMovement **surface_movement, CVolumetricMovement **grid_movement, CFreeFormDefBox*** FFDBox,\n\t\t\t unsigned short donorZone, unsigned short targetZone){\n\n}\n\nvoid CFSIDriver::Transfer_Displacements(COutput *output, CIntegration ***integration_container, CGeometry ***geometry_container,\n\t\t     CSolver ****solver_container, CNumerics *****numerics_container, CConfig **config_container,\n\t\t\t CSurfaceMovement **surface_movement, CVolumetricMovement **grid_movement, CFreeFormDefBox*** FFDBox,\n\t\t\t CTransfer ***transfer_container, unsigned short donorZone, unsigned short targetZone){\n\n#ifdef HAVE_MPI\n\tint rank;\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n\n\tbool MatchingMesh = config_container[targetZone]->GetMatchingMesh();\n\n\t/*--- Select the transfer method and the appropriate mesh properties (matching or nonmatching mesh) ---*/\n\n\tswitch (config_container[targetZone]->GetKind_TransferMethod()) {\n\tcase BROADCAST_DATA:\n\t\tif (MatchingMesh){\n\t\t\ttransfer_container[donorZone][targetZone]->Broadcast_InterfaceData_Matching(solver_container[donorZone][MESH_0][FEA_SOL],solver_container[targetZone][MESH_0][FLOW_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t\t/*--- Set the volume deformation for the fluid zone ---*/\n//\t\t\tgrid_movement[targetZone]->SetVolume_Deformation(geometry_container[targetZone][MESH_0], config_container[targetZone], true);\n\n\t\t}\n\t\telse {\n\t\t\ttransfer_container[donorZone][targetZone]->Broadcast_InterfaceData_Interpolate(solver_container[donorZone][MESH_0][FEA_SOL],solver_container[targetZone][MESH_0][FLOW_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t\t/*--- Set the volume deformation for the fluid zone ---*/\n//\t\t\tgrid_movement[targetZone]->SetVolume_Deformation(geometry_container[targetZone][MESH_0], config_container[targetZone], true);\n\n\t\t}\n\t\tbreak;\n\tcase SCATTER_DATA:\n\t\tif (MatchingMesh){\n\t\t\ttransfer_container[donorZone][targetZone]->Scatter_InterfaceData(solver_container[donorZone][MESH_0][FEA_SOL],solver_container[targetZone][MESH_0][FLOW_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t\t/*--- Set the volume deformation for the fluid zone ---*/\n//\t\t\tgrid_movement[targetZone]->SetVolume_Deformation(geometry_container[targetZone][MESH_0], config_container[targetZone], true);\n\t\t}\n\t\telse {\n\t\t\tcout << \"Scatter method not implemented for non-matching meshes. Exiting...\" << endl;\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\tbreak;\n\tcase ALLGATHER_DATA:\n\t\tif (MatchingMesh){\n\t\t\tcout << \"Allgather method not yet implemented for matching meshes. Exiting...\" << endl;\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\telse {\n\t\t\ttransfer_container[donorZone][targetZone]->Allgather_InterfaceData(solver_container[donorZone][MESH_0][FEA_SOL],solver_container[targetZone][MESH_0][FLOW_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t\t/*--- Set the volume deformation for the fluid zone ---*/\n//\t\t\tgrid_movement[targetZone]->SetVolume_Deformation(geometry_container[targetZone][MESH_0], config_container[targetZone], true);\n\t\t}\n\t\tbreak;\n\tcase LEGACY_METHOD:\n\t\tif (MatchingMesh){\n\t\t\tsolver_container[targetZone][MESH_0][FLOW_SOL]->SetFlow_Displacement(geometry_container[targetZone], grid_movement[targetZone],\n\t\t\t\t\tconfig_container[targetZone], config_container[donorZone],\n\t\t\t\t\tgeometry_container[donorZone], solver_container[donorZone]);\n\t\t}\n\t\telse {\n\t\t\tsolver_container[targetZone][MESH_0][FLOW_SOL]->SetFlow_Displacement_Int(geometry_container[targetZone], grid_movement[targetZone],\n\t\t\t\t\tconfig_container[targetZone], config_container[donorZone],\n\t\t\t\t\tgeometry_container[donorZone], solver_container[donorZone]);\n\t\t}\n\t\tbreak;\n\t}\n\n}\n\nvoid CFSIDriver::Transfer_Tractions(COutput *output, CIntegration ***integration_container, CGeometry ***geometry_container,\n\t\t     CSolver ****solver_container, CNumerics *****numerics_container, CConfig **config_container,\n\t\t\t CSurfaceMovement **surface_movement, CVolumetricMovement **grid_movement, CFreeFormDefBox*** FFDBox,\n\t\t\t CTransfer ***transfer_container, unsigned short donorZone, unsigned short targetZone){\n\n#ifdef HAVE_MPI\n\tint rank;\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n\n\tbool MatchingMesh = config_container[donorZone]->GetMatchingMesh();\n\n\t/*--- Load transfer --  This will have to be modified for non-matching meshes ---*/\n\n\tunsigned short SolContainer_Position_fea = config_container[targetZone]->GetContainerPosition(RUNTIME_FEA_SYS);\n\n\t/*--- FEA equations -- Necessary as the SetFEA_Load routine is as of now contained in the structural solver ---*/\n\tunsigned long ExtIter = config_container[targetZone]->GetExtIter();\n\tconfig_container[targetZone]->SetGlobalParam(FEM_ELASTICITY, RUNTIME_FEA_SYS, ExtIter);\n\n\t/*--- Select the transfer method and the appropriate mesh properties (matching or nonmatching mesh) ---*/\n\n\tswitch (config_container[donorZone]->GetKind_TransferMethod()) {\n\tcase BROADCAST_DATA:\n\t\tif (MatchingMesh){\n\t\t\ttransfer_container[donorZone][targetZone]->Broadcast_InterfaceData_Matching(solver_container[donorZone][MESH_0][FLOW_SOL],solver_container[targetZone][MESH_0][FEA_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t}\n\t\telse {\n\t\t\ttransfer_container[donorZone][targetZone]->Broadcast_InterfaceData_Interpolate(solver_container[donorZone][MESH_0][FLOW_SOL],solver_container[targetZone][MESH_0][FEA_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t}\n\t\tbreak;\n\tcase SCATTER_DATA:\n\t\tif (MatchingMesh){\n\t\t\ttransfer_container[donorZone][targetZone]->Scatter_InterfaceData(solver_container[donorZone][MESH_0][FLOW_SOL],solver_container[targetZone][MESH_0][FEA_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t}\n\t\telse {\n\t\t\tcout << \"Scatter method not implemented for non-matching meshes. Exiting...\" << endl;\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\tbreak;\n\tcase ALLGATHER_DATA:\n\t\tif (MatchingMesh){\n\t\t\tcout << \"Allgather method not yet implemented for matching meshes. Exiting...\" << endl;\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\t\telse {\n\t\t\ttransfer_container[donorZone][targetZone]->Allgather_InterfaceData(solver_container[donorZone][MESH_0][FLOW_SOL],solver_container[targetZone][MESH_0][FEA_SOL],\n\t\t\t\t\tgeometry_container[donorZone][MESH_0],geometry_container[targetZone][MESH_0],\n\t\t\t\t\tconfig_container[donorZone], config_container[targetZone]);\n\t\t}\n\t\tbreak;\n\tcase LEGACY_METHOD:\n\t\tif (MatchingMesh){\n\t\t\tsolver_container[targetZone][MESH_0][FEA_SOL]->SetFEA_Load(solver_container[donorZone], geometry_container[targetZone], geometry_container[donorZone],\n\t\t\t\t\tconfig_container[targetZone], config_container[donorZone], numerics_container[targetZone][MESH_0][SolContainer_Position_fea][VISC_TERM]);\n\t\t}\n\t\telse {\n\t\t\tsolver_container[targetZone][MESH_0][FEA_SOL]->SetFEA_Load_Int(solver_container[donorZone], geometry_container[targetZone], geometry_container[donorZone],\n\t\t\t\t\tconfig_container[targetZone], config_container[donorZone], numerics_container[targetZone][MESH_0][SolContainer_Position_fea][VISC_TERM]);\n\t\t}\n\t\tbreak;\n\t}\n\n}\n\nvoid CFSIDriver::Relaxation_Displacements(COutput *output, CGeometry ***geometry_container, CSolver ****solver_container,\n\t\t\tCConfig **config_container, unsigned short donorZone, unsigned short targetZone, unsigned long FSIIter){\n\n#ifdef HAVE_MPI\n\tint rank;\n\tMPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n\n\t/*-------------------- Aitken's relaxation ------------------------*/\n\n\t/*------------------- Compute the coefficient ---------------------*/\n\n\tsolver_container[donorZone][MESH_0][FEA_SOL]->ComputeAitken_Coefficient(geometry_container[donorZone], config_container[donorZone],\n\t\t\tsolver_container[donorZone], FSIIter);\n\n\t/*----------------- Set the relaxation parameter ------------------*/\n\n\tsolver_container[donorZone][MESH_0][FEA_SOL]->SetAitken_Relaxation(geometry_container[donorZone], config_container[donorZone],\n\t\t\tsolver_container[donorZone]);\n\n\n\t/*----------------- Communicate the predicted solution and the old one ------------------*/\n\tsolver_container[donorZone][MESH_0][FEA_SOL]->Set_MPI_Solution_Pred_Old(geometry_container[donorZone][MESH_0], config_container[donorZone]);\n\n\n}\n\nvoid CFSIDriver::Relaxation_Tractions(COutput *output, CGeometry ***geometry_container, CSolver ****solver_container,\n\t\t\tCConfig **config_container, unsigned short donorZone, unsigned short targetZone, unsigned long FSIIter){\n\n}\n\nvoid CFSIDriver::Update(COutput *output, CIntegration ***integration_container, CGeometry ***geometry_container,\n\t\t\t CSolver ****solver_container, CNumerics *****numerics_container, CConfig **config_container,\n\t\t\t CSurfaceMovement **surface_movement, CVolumetricMovement **grid_movement, CFreeFormDefBox*** FFDBox,\n\t\t\t CTransfer ***transfer_container, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT){\n\n\tunsigned long IntIter = 0; // This doesn't affect here but has to go into the function\n\tunsigned long ExtIter = config_container[ZONE_FLOW]->GetExtIter();\n\n\n\t/*-----------------------------------------------------------------*/\n\t/*--------------------- Enforce continuity ------------------------*/\n\t/*-----------------------------------------------------------------*/\n\n\t/*--- Enforces that the geometry of the flow corresponds to the converged, relaxed solution ---*/\n\n\t/*-------------------- Transfer the displacements --------------------*/\n\n\tTransfer_Displacements(output, integration_container, geometry_container,\n            solver_container, numerics_container, config_container,\n            surface_movement, grid_movement, FFDBox, transfer_container,\n            ZONE_STRUCT, ZONE_FLOW);\n\n\t/*-------------------- Set the grid movement -------------------------*/\n\n\tSetGrid_Movement(geometry_container[ZONE_FLOW], surface_movement[ZONE_FLOW],\n\t\t\t\tgrid_movement[ZONE_FLOW], FFDBox[ZONE_FLOW], solver_container[ZONE_FLOW], config_container[ZONE_FLOW],\n\t\t\t\tZONE_FLOW, IntIter, ExtIter);\n\n\t/*----------- Store the solution_pred as solution_pred_old --------------*/\n\n}\n\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":293,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":24,"column":37},"end":{"row":24,"column":37}},"properties":{"type":"selection","autoscroll":false,"vim-mode-plus":null,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":71,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":3,"undoStack":[],"redoStack":[{"type":"group-end","snapshot":{"2":{"2-0":{"range":[[1278,64],[1278,71]],"properties":{"type":"selection","autoscroll":false,"vim-mode-plus":{"characterwise":{"head":{"row":1268,"column":16},"tail":{"row":1268,"column":0},"reversed":false}},"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1278,0],[1278,0]],"newRange":[[1278,0],[1279,0]],"oldText":"","newText":"                                     unsigned short val_nDim) : CDriver(iteration_container,\n"}},{"type":"group-start","snapshot":{"2":{"2-0":{"range":[[1277,64],[1277,71]],"properties":{"type":"selection","autoscroll":false,"vim-mode-plus":{"characterwise":{"head":{"row":1268,"column":16},"tail":{"row":1268,"column":0},"reversed":false}},"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}}]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/driver_structure.cpp","digestWhenLastPersisted":"9103dc5314f9f356f8bf5adbed30692ea638f9e4","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file braid_structure.hpp\n * \\brief Headers of structures and function for XBraid Integration\n *        The functions are in the <i>braid_wrapper.cpp</i> file.\n * \\author S. Guenther\n *\n */\n\n#pragma once\n\n#include <braid.hpp>\n\n\n/*!\n * \\brief XBraid structure that holds additional information needed to carry out an unseady simulation step.\n */\ntypedef struct _braid_App_struct\n{\n  // driver,\n  // config_container\n  // geometry_container\n  // iteration_container,\n  // solver_container,\n  // integration_container,\n  // numerics_container,\n  // interpolator_container,\n  // transfer_container,\n  // nZone, nDim)\n\n\n} my_App;\n\n/*!\n * \\brief XBraid structure that defines a state vector at a certain time value and any information related to this vector which is needed to evolve the vector to the next time value, like mesh information.\n  */\ntypedef struct _braid_Vector_struct\n{\n  CVariable** node;\t    /*!< \\brief Vector which defines the variables for each problem. */\n\n} my_Vector;\n\n/*!\n * \\brief This function tells XBraid how to take a time step. It advances the vector u from tstart to tstop.\n*/\nint my_Phi( braid_App app, braid_Vector u, braid_PhiStatus status );\n\n/*!\n *\\brief Tells XBraid, how to initialize a vector at time t\n */\nint my_Init( braid_App app, double t, braid_Vector *u_ptr );\n\n/*!\n *\\brief Tells XBraid, how to clone a vector u into a new vector, *v_ptr\n */\nint my_Clone( braid_App app, braid_Vector u, braid_Vector *v_ptr );\n\n/*!\n *\\brief Tells XBraid, how to free a vector\n */\nint my_Free( braid_App app, braid_Vector u );\n\n/*!\n *\\brief Tells XBraid, how to sum two vectors (y = ax + by)\n */\nint my_Sum( braid_App app, double alpha, braid_Vector x, double beta,\n    braid_Vector y );\n\n/*!\n *\\brief Tells XBraid, how to take the norm of a braid_Vector\n */\nint my_SpatialNorm( braid_App app, braid_Vector u, double *norm_ptr );\n\n/*!\n *\\brief Allows the user access to XBraid and the current solution vector at time t.\n */\nint my_Access( braid_App app, braid_Vector u, braid_AccessStatus astatus );\n\n/*!\n *\\brief XBraid function that computes the upper bound of the size of a solution vector.\n */\nint my_BufSize ( braid_App app, int *size_ptr );\n\n/*!\n *\\brief XBraid function that packs a vector into a void * buffer for MPI communication\n */\nint my_BufPack( braid_App app, braid_Vector u, void *buffer,\n                braid_Int *size_ptr );\n\n/*!\n *\\brief XBraid function that unpacks a void * buffer into a vector\n */\nint my_BufUnpack( braid_App app, void *buffer, braid_Vector *u_ptr );\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":142,"id":"0","maintainHistory":false,"markersById":{"0-102":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-103":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-104":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-105":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-122":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-123":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-124":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-125":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-130":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-131":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-132":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-133":{"range":{"start":{"row":92,"column":0},"end":{"row":92,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-138":{"range":{"start":{"row":18,"column":0},"end":{"row":29,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-139":{"range":{"start":{"row":37,"column":0},"end":{"row":38,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-140":{"range":{"start":{"row":18,"column":0},"end":{"row":28,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"0-141":{"range":{"start":{"row":37,"column":0},"end":{"row":37,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":37,"column":57},"end":{"row":37,"column":57}},"properties":{"type":"selection","goalScreenRange":null,"vim-mode-plus":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":89,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/braid_structure.hpp","digestWhenLastPersisted":"0cbf03bf84bbcc0caf88d3c9ec3fcf7c13dcce2f","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"/*!\n * \\file solution_direct_mean.cpp\n * \\brief Main subrotuines for solving direct problems (Euler, Navier-Stokes, etc.).\n * \\author F. Palacios, T. Economon\n * \\version 4.1.0 \"Cardinal\"\n *\n * SU2 Lead Developers: Dr. Francisco Palacios (Francisco.D.Palacios@boeing.com).\n *                      Dr. Thomas D. Economon (economon@stanford.edu).\n *\n * SU2 Developers: Prof. Juan J. Alonso's group at Stanford University.\n *                 Prof. Piero Colonna's group at Delft University of Technology.\n *                 Prof. Nicolas R. Gauger's group at Kaiserslautern University of Technology.\n *                 Prof. Alberto Guardone's group at Polytechnic University of Milan.\n *                 Prof. Rafael Palacios' group at Imperial College London.\n *\n * Copyright (C) 2012-2015 SU2, the open-source CFD code.\n *\n * SU2 is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * SU2 is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with SU2. If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"../include/solver_structure.hpp\"\n\nCEulerSolver::CEulerSolver(void) : CSolver() {\n  \n  /*--- Basic array initialization ---*/\n  \n  CDrag_Inv = NULL; CLift_Inv = NULL; CSideForce_Inv = NULL;  CEff_Inv = NULL;\n  CMx_Inv = NULL; CMy_Inv = NULL; CMz_Inv = NULL;\n  CFx_Inv = NULL; CFy_Inv = NULL; CFz_Inv = NULL;\n  \n  CPressure = NULL; CPressureTarget = NULL; HeatFlux = NULL; HeatFluxTarget = NULL; YPlus = NULL;\n  ForceInviscid = NULL; MomentInviscid = NULL;\n  \n  /*--- Surface based array initialization ---*/\n  \n  Surface_CLift_Inv = NULL; Surface_CDrag_Inv = NULL; Surface_CSideForce_Inv = NULL; Surface_CEff_Inv = NULL;\n  Surface_CFx_Inv = NULL; Surface_CFy_Inv = NULL; Surface_CFz_Inv = NULL;\n  Surface_CMx_Inv = NULL; Surface_CMy_Inv = NULL; Surface_CMz_Inv = NULL;\n  \n  Surface_CLift = NULL; Surface_CDrag = NULL; Surface_CSideForce = NULL; Surface_CEff = NULL;\n  Surface_CFx = NULL; Surface_CFy = NULL; Surface_CFz = NULL;\n  Surface_CMx = NULL; Surface_CMy = NULL; Surface_CMz = NULL;\n  \n  /*--- Rotorcraft simulation array initialization ---*/\n  \n  CMerit_Inv = NULL;  CT_Inv = NULL;  CQ_Inv = NULL;\n  \n  /*--- Supersonic simulation array initialization ---*/\n  \n  CEquivArea_Inv = NULL;\n  CNearFieldOF_Inv = NULL;\n  \n  /*--- Engine simulation array initialization ---*/\n  \n  Inflow_MassFlow = NULL;   Inflow_Pressure = NULL;\n  Inflow_Mach = NULL;       Inflow_Area = NULL;\n  Bleed_MassFlow = NULL;    Bleed_Pressure = NULL;\n  Bleed_Temperature = NULL; Inflow_Area = NULL;\n  Exhaust_Pressure = NULL;  Exhaust_Temperature = NULL;\n  Exhaust_MassFlow = NULL;  Exhaust_Area = NULL;\n  \n  /*--- Numerical methods array initialization ---*/\n  \n  iPoint_UndLapl = NULL;\n  jPoint_UndLapl = NULL;\n  LowMach_Precontioner = NULL;\n  Primitive = NULL; Primitive_i = NULL; Primitive_j = NULL;\n  CharacPrimVar = NULL;\n  \n  /*--- Fixed CL mode initialization (cauchy criteria) ---*/\n  \n  Cauchy_Value = 0;\n  Cauchy_Func = 0;\n  Old_Func = 0;\n  New_Func = 0;\n  Cauchy_Counter = 0;\n  Cauchy_Serie = NULL;\n  \n}\n\nCEulerSolver::CEulerSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh) : CSolver() {\n  \n  unsigned long iPoint, index, counter_local = 0, counter_global = 0, iVertex;\n  unsigned short iVar, iDim, iMarker, nLineLets;\n  su2double StaticEnergy, Density, Velocity2, Pressure, Temperature, dull_val;\n  int Unst_RestartIter;\n  ifstream restart_file;\n  unsigned short iZone = config->GetiZone();\n  unsigned short nZone = geometry->GetnZone();\n  bool restart = (config->GetRestart() || config->GetRestart_Flow());\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool dual_time = ((config->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n                    (config->GetUnsteady_Simulation() == DT_STEPPING_2ND));\n\tbool time_stepping = config->GetUnsteady_Simulation() == TIME_STEPPING;\n\tbool roe_turkel = (config->GetKind_Upwind_Flow() == TURKEL);\n  bool adjoint = config->GetAdjoint();\n  string filename = config->GetSolution_FlowFileName();\n  \n  unsigned short direct_diff = config->GetDirectDiff();\n  unsigned short nMarkerTurboPerf = config->Get_nMarkerTurboPerf();\n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Array initialization ---*/\n  \n  CDrag_Inv = NULL; CLift_Inv = NULL; CSideForce_Inv = NULL; CEff_Inv = NULL;\n  CMx_Inv = NULL;   CMy_Inv = NULL;   CMz_Inv = NULL;\n  CFx_Inv = NULL;   CFy_Inv = NULL;   CFz_Inv = NULL;\n  \n  Surface_CLift_Inv = NULL; Surface_CDrag_Inv = NULL; Surface_CSideForce_Inv = NULL; Surface_CEff_Inv = NULL;\n  Surface_CFx_Inv = NULL;   Surface_CFy_Inv = NULL;   Surface_CFz_Inv = NULL;\n  Surface_CMx_Inv = NULL;   Surface_CMy_Inv = NULL;   Surface_CMz_Inv = NULL;\n  \n  Surface_CLift = NULL; Surface_CDrag = NULL; Surface_CSideForce = NULL; Surface_CEff = NULL;\n  Surface_CFx = NULL;   Surface_CFy = NULL;   Surface_CFz = NULL;\n  Surface_CMx = NULL;   Surface_CMy = NULL;   Surface_CMz = NULL;\n  \n  ForceInviscid = NULL;  MomentInviscid = NULL;\n  CPressure = NULL;      CPressureTarget = NULL; HeatFlux = NULL;\n  HeatFluxTarget = NULL; YPlus = NULL;\n  \n  CMerit_Inv = NULL; CT_Inv = NULL; CQ_Inv = NULL;\n  \n  CEquivArea_Inv = NULL; CNearFieldOF_Inv = NULL;\n  \n  Inflow_MassFlow = NULL; Exhaust_MassFlow = NULL; Exhaust_Area = NULL;      Exhaust_Pressure = NULL;\n  Inflow_Pressure = NULL; Inflow_Mach = NULL;      Inflow_Area = NULL;       Exhaust_Temperature = NULL;\n  Bleed_MassFlow = NULL;  Bleed_Pressure = NULL;   Bleed_Temperature = NULL; Bleed_Area = NULL;\n  \n  iPoint_UndLapl = NULL;  jPoint_UndLapl = NULL;\n  LowMach_Precontioner = NULL;\n  Primitive = NULL; Primitive_i = NULL; Primitive_j = NULL;\n  Secondary = NULL; Secondary_i = NULL; Secondary_j = NULL;\n  CharacPrimVar = NULL;\n  Cauchy_Serie = NULL;\n  \n  /*--- Set the gamma value ---*/\n  \n  Gamma = config->GetGamma();\n  Gamma_Minus_One = Gamma - 1.0;\n  \n  /*--- Define geometry constants in the solver structure\n   Compressible flow, primitive variables (T, vx, vy, vz, P, rho, h, c, lamMu, EddyMu, ThCond, Cp)\n   Incompressible flow, primitive variables (P, vx, vy, vz, rho, beta, lamMu, EddyMu).\n   FreeSurface Incompressible flow, primitive variables (P, vx, vy, vz, rho, beta, lamMu, EddyMu, LevelSet, Dist).\n   ---*/\n  \n  nDim = geometry->GetnDim();\n  \n  if (incompressible) { nVar = nDim+1; nPrimVar = nDim+5; nPrimVarGrad = nDim+3; }\n  if (freesurface)    { nVar = nDim+2; nPrimVar = nDim+7; nPrimVarGrad = nDim+6; }\n  if (compressible)   { nVar = nDim+2;\n    nPrimVar = nDim+9; nPrimVarGrad = nDim+4;\n    nSecondaryVar = 2; nSecondaryVarGrad = 2;\n  }\n  \n  nMarker      = config->GetnMarker_All();\n  nPoint       = geometry->GetnPoint();\n  nPointDomain = geometry->GetnPointDomain();\n  \n  /*--- Perform the non-dimensionalization for the flow equations using the\n   specified reference values. ---*/\n  \n  SetNondimensionalization(geometry, config, iMesh);\n  \n  /*--- Allocate the node variables ---*/\n  \n  node = new CVariable*[nPoint];\n  \n  /*--- Define some auxiliary vectors related to the residual ---*/\n  \n  Residual      = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Residual[iVar]      = 0.0;\n  Residual_RMS  = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Residual_RMS[iVar]  = 0.0;\n  Residual_Max  = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Residual_Max[iVar]  = 0.0;\n  Residual_i    = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Residual_i[iVar]    = 0.0;\n  Residual_j    = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Residual_j[iVar]    = 0.0;\n  Res_Conv      = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Res_Conv[iVar]      = 0.0;\n  Res_Visc      = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Res_Visc[iVar]      = 0.0;\n  Res_Sour      = new su2double[nVar];         for (iVar = 0; iVar < nVar; iVar++) Res_Sour[iVar]      = 0.0;\n  \n  /*--- Define some structures for locating max residuals ---*/\n  \n  Point_Max     = new unsigned long[nVar];  for (iVar = 0; iVar < nVar; iVar++) Point_Max[iVar]     = 0;\n  Point_Max_Coord = new su2double*[nVar];\n  for (iVar = 0; iVar < nVar; iVar++) {\n    Point_Max_Coord[iVar] = new su2double[nDim];\n    for (iDim = 0; iDim < nDim; iDim++) Point_Max_Coord[iVar][iDim] = 0.0;\n  }\n  \n  /*--- Define some auxiliary vectors related to the solution ---*/\n  \n  Solution   = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Solution[iVar]   = 0.0;\n  Solution_i = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Solution_i[iVar] = 0.0;\n  Solution_j = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Solution_j[iVar] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the geometry ---*/\n  \n  Vector   = new su2double[nDim]; for (iDim = 0; iDim < nDim; iDim++) Vector[iDim]   = 0.0;\n  Vector_i = new su2double[nDim]; for (iDim = 0; iDim < nDim; iDim++) Vector_i[iDim] = 0.0;\n  Vector_j = new su2double[nDim]; for (iDim = 0; iDim < nDim; iDim++) Vector_j[iDim] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the primitive solution ---*/\n  \n  Primitive   = new su2double[nPrimVar]; for (iVar = 0; iVar < nPrimVar; iVar++) Primitive[iVar]   = 0.0;\n  Primitive_i = new su2double[nPrimVar]; for (iVar = 0; iVar < nPrimVar; iVar++) Primitive_i[iVar] = 0.0;\n  Primitive_j = new su2double[nPrimVar]; for (iVar = 0; iVar < nPrimVar; iVar++) Primitive_j[iVar] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the Secondary solution ---*/\n  \n  Secondary   = new su2double[nSecondaryVar]; for (iVar = 0; iVar < nSecondaryVar; iVar++) Secondary[iVar]   = 0.0;\n  Secondary_i = new su2double[nSecondaryVar]; for (iVar = 0; iVar < nSecondaryVar; iVar++) Secondary_i[iVar] = 0.0;\n  Secondary_j = new su2double[nSecondaryVar]; for (iVar = 0; iVar < nSecondaryVar; iVar++) Secondary_j[iVar] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the undivided lapalacian ---*/\n  \n  if (config->GetKind_ConvNumScheme_Flow() == SPACE_CENTERED) {\n    iPoint_UndLapl = new su2double [nPoint];\n    jPoint_UndLapl = new su2double [nPoint];\n  }\n  \n  /*--- Define some auxiliary vectors related to low-speed preconditioning ---*/\n  \n  if (roe_turkel) {\n    LowMach_Precontioner = new su2double* [nVar];\n    for (iVar = 0; iVar < nVar; iVar ++)\n      LowMach_Precontioner[iVar] = new su2double[nVar];\n  }\n  \n  /*--- Initialize the solution and right hand side vectors for storing\n   the residuals and updating the solution (always needed even for\n   explicit schemes). ---*/\n  \n  LinSysSol.Initialize(nPoint, nPointDomain, nVar, 0.0);\n  LinSysRes.Initialize(nPoint, nPointDomain, nVar, 0.0);\n  \n  /*--- Jacobians and vector structures for implicit computations ---*/\n  \n  if (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT) {\n    \n    Jacobian_i = new su2double* [nVar];\n    Jacobian_j = new su2double* [nVar];\n    for (iVar = 0; iVar < nVar; iVar++) {\n      Jacobian_i[iVar] = new su2double [nVar];\n      Jacobian_j[iVar] = new su2double [nVar];\n    }\n    \n    if (rank == MASTER_NODE) cout << \"Initialize Jacobian structure (Euler). MG level: \" << iMesh <<\".\" << endl;\n    Jacobian.Initialize(nPoint, nPointDomain, nVar, nVar, true, geometry, config);\n    \n    if ((config->GetKind_Linear_Solver_Prec() == LINELET) ||\n        (config->GetKind_Linear_Solver() == SMOOTHER_LINELET)) {\n      nLineLets = Jacobian.BuildLineletPreconditioner(geometry, config);\n      if (rank == MASTER_NODE) cout << \"Compute linelet structure. \" << nLineLets << \" elements in each line (average).\" << endl;\n    }\n    \n  }\n  \n  else {\n    if (rank == MASTER_NODE) cout << \"Explicit scheme. No Jacobian structure (Euler). MG level: \" << iMesh <<\".\" << endl;\n  }\n  \n  /*--- Define some auxiliary vectors for computing flow variable\n   gradients by least squares, S matrix := inv(R)*traspose(inv(R)),\n   c vector := transpose(WA)*(Wb) ---*/\n  \n  if (config->GetKind_Gradient_Method() == WEIGHTED_LEAST_SQUARES) {\n    \n    Smatrix = new su2double* [nDim];\n    for (iDim = 0; iDim < nDim; iDim++)\n      Smatrix[iDim] = new su2double [nDim];\n    \n    cvector = new su2double* [nPrimVarGrad];\n    for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n      cvector[iVar] = new su2double [nDim];\n    \n  }\n  \n  /*--- Store the value of the characteristic primitive variables at the boundaries ---*/\n  \n  CharacPrimVar = new su2double** [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    CharacPrimVar[iMarker] = new su2double* [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      CharacPrimVar[iMarker][iVertex] = new su2double [nPrimVar];\n      for (iVar = 0; iVar < nPrimVar; iVar++) {\n        CharacPrimVar[iMarker][iVertex][iVar] = 0.0;\n      }\n    }\n  }\n  \n  /*--- Force definition and coefficient arrays for all of the markers ---*/\n  \n  CPressure = new su2double* [nMarker];\n  CPressureTarget = new su2double* [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    CPressure[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    CPressureTarget[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      CPressure[iMarker][iVertex] = 0.0;\n      CPressureTarget[iMarker][iVertex] = 0.0;\n    }\n  }\n  \n  /*--- Non-dimensional coefficients ---*/\n  \n  ForceInviscid     = new su2double[nDim];\n  MomentInviscid    = new su2double[3];\n  CDrag_Inv         = new su2double[nMarker];\n  CLift_Inv         = new su2double[nMarker];\n  CSideForce_Inv    = new su2double[nMarker];\n  CMx_Inv           = new su2double[nMarker];\n  CMy_Inv           = new su2double[nMarker];\n  CMz_Inv           = new su2double[nMarker];\n  CEff_Inv          = new su2double[nMarker];\n  CFx_Inv           = new su2double[nMarker];\n  CFy_Inv           = new su2double[nMarker];\n  CFz_Inv           = new su2double[nMarker];\n  \n  Surface_CLift_Inv      = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CDrag_Inv      = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CSideForce_Inv = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CEff_Inv       = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFx_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFy_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFz_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMx_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMy_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMz_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CLift          = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CDrag          = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CSideForce     = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CEff           = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFx            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFy            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFz            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMx            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMy            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMz            = new su2double[config->GetnMarker_Monitoring()];\n  \n  /*--- Rotorcraft coefficients ---*/\n  \n  CT_Inv           = new su2double[nMarker];\n  CQ_Inv           = new su2double[nMarker];\n  CMerit_Inv       = new su2double[nMarker];\n  \n  /*--- Supersonic coefficients ---*/\n  \n  CEquivArea_Inv   = new su2double[nMarker];\n  CNearFieldOF_Inv = new su2double[nMarker];\n  \n  /*--- Engine simulation ---*/\n  \n  Inflow_MassFlow     = new su2double[nMarker];\n  Inflow_Pressure     = new su2double[nMarker];\n  Inflow_Mach         = new su2double[nMarker];\n  Inflow_Area         = new su2double[nMarker];\n  \n  Exhaust_MassFlow    = new su2double[nMarker];\n  Exhaust_Pressure    = new su2double[nMarker];\n  Exhaust_Temperature = new su2double[nMarker];\n  Exhaust_Area        = new su2double[nMarker];\n  \n  Bleed_MassFlow      = new su2double[nMarker];\n  Bleed_Pressure      = new su2double[nMarker];\n  Bleed_Temperature   = new su2double[nMarker];\n  Bleed_Area          = new su2double[nMarker];\n  \n  /*--- Init total coefficients ---*/\n  \n  Total_CDrag   = 0.0;\tTotal_CLift        = 0.0;  Total_CSideForce   = 0.0;\n  Total_CMx     = 0.0;\tTotal_CMy          = 0.0;  Total_CMz          = 0.0;\n  Total_CEff    = 0.0;\tTotal_CEquivArea   = 0.0;  Total_CNearFieldOF = 0.0;\n  Total_CFx     = 0.0;\tTotal_CFy          = 0.0;  Total_CFz          = 0.0;\n  Total_CT      = 0.0;\tTotal_CQ           = 0.0;  Total_CMerit       = 0.0;\n  Total_MaxHeat = 0.0;  Total_Heat         = 0.0;\n  Total_CpDiff  = 0.0;  Total_HeatFluxDiff = 0.0;\n  \n  /*--- Read farfield conditions ---*/\n  \n  Density_Inf     = config->GetDensity_FreeStreamND();\n  Pressure_Inf    = config->GetPressure_FreeStreamND();\n  Velocity_Inf    = config->GetVelocity_FreeStreamND();\n  Energy_Inf      = config->GetEnergy_FreeStreamND();\n  Temperature_Inf = config->GetTemperature_FreeStreamND();\n  Mach_Inf        = config->GetMach();\n  \n  /*--- Initialize the secondary values for direct derivative approxiations ---*/\n  \n  switch(direct_diff){\n    case NO_DERIVATIVE:\n      /*--- Default ---*/\n      break;\n    case D_DENSITY:\n      SU2_TYPE::SetDerivative(Density_Inf, 1.0);\n      break;\n    case D_PRESSURE:\n      SU2_TYPE::SetDerivative(Pressure_Inf, 1.0);\n      break;\n    case D_TEMPERATURE:\n      SU2_TYPE::SetDerivative(Temperature_Inf, 1.0);\n      break;\n    case D_MACH: case D_AOA:\n    case D_SIDESLIP: case D_REYNOLDS:\n    case D_TURB2LAM: case D_DESIGN:\n      /*--- Already done in postprocessing of config ---*/\n      break;\n    default:\n      break;\n  }\n  \n  \n  /*--- Initializate fan face pressure, fan face mach number, and mass flow rate ---*/\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    Inflow_MassFlow[iMarker]     = 0.0;\n    Inflow_Mach[iMarker]         = Mach_Inf;\n    Inflow_Pressure[iMarker]     = Pressure_Inf;\n    Inflow_Area[iMarker]         = 0.0;\n    \n    Exhaust_MassFlow[iMarker]    = 0.0;\n    Exhaust_Temperature[iMarker] = Temperature_Inf;\n    Exhaust_Pressure[iMarker]    = Pressure_Inf;\n    Exhaust_Area[iMarker]        = 0.0;\n    \n    Bleed_MassFlow[iMarker]      = 0.0;\n    Bleed_Temperature[iMarker]   = Temperature_Inf;\n    Bleed_Pressure[iMarker]      = Pressure_Inf;\n    Bleed_Area[iMarker]          = 0.0;\n  }\n  \n  /*--- Initializate quantities for the mixing process ---*/\n  \n  AveragedVelocity = new su2double* [nMarker];\n  AveragedNormal = new su2double* [nMarker];\n  AveragedGridVel = new su2double* [nMarker];\n  AveragedFlux = new su2double* [nMarker];\n  TotalFlux = new su2double* [nMarker];\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    AveragedVelocity[iMarker] = new su2double [nDim];\n    AveragedNormal[iMarker] = new su2double [nDim];\n    AveragedGridVel[iMarker] = new su2double [nDim];\n    for (iDim = 0; iDim < nDim; iDim++) {\n      AveragedVelocity[iMarker][iDim] = 0.0;\n      AveragedNormal[iMarker][iDim] = 0.0;\n      AveragedGridVel [iMarker][iDim] = 0.0;\n    }\n  }\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    AveragedFlux[iMarker] = new su2double [nVar];\n    TotalFlux[iMarker] = new su2double [nVar];\n    for (iVar = 0; iVar < nVar; iVar++) {\n      AveragedFlux[iMarker][iVar] = 0.0;\n      TotalFlux[iMarker][iVar] = 0.0;\n    }\n  }\n  \n  AveragedNormalVelocity = new su2double[nMarker];\n  AveragedTangVelocity = new su2double[nMarker];\n  ExtAveragedNormalVelocity = new su2double[nMarker];\n  ExtAveragedTangVelocity = new su2double[nMarker];\n  MassFlow= new su2double[nMarker];\n  FlowAngle= new su2double[nMarker];\n  AveragedEnthalpy  = new su2double[nMarker];\n  AveragedPressure  = new su2double[nMarker];\n  AveragedTotPressure  = new su2double[nMarker];\n  AveragedTotTemperature  = new su2double[nMarker];\n  ExtAveragedTotPressure  = new su2double[nMarker];\n  ExtAveragedTotTemperature  = new su2double[nMarker];\n  AveragedDensity   = new su2double[nMarker];\n  ExtAveragedPressure  = new su2double[nMarker];\n  ExtAveragedDensity   = new su2double[nMarker];\n  AveragedSoundSpeed= new su2double[nMarker];\n  AveragedEntropy   = new su2double[nMarker];\n  AveragedTangGridVelocity = new su2double[nMarker];\n  AveragedMach = new su2double[nMarker];\n  AveragedNormalMach = new su2double[nMarker];\n  AveragedTangMach = new su2double[nMarker];\n  \n  \n  /*--- Initializate quantities for turboperformace ---*/\n  \n  TotalStaticEfficiency = new su2double[nMarkerTurboPerf];\n  TotalTotalEfficiency = new su2double[nMarkerTurboPerf];\n  KineticEnergyLoss= new su2double[nMarkerTurboPerf];\n  TotalPressureLoss= new su2double[nMarkerTurboPerf];\n  MassFlowIn= new su2double[nMarkerTurboPerf];\n  MassFlowOut= new su2double[nMarkerTurboPerf];\n  FlowAngleIn= new su2double[nMarkerTurboPerf];\n  FlowAngleOut= new su2double[nMarkerTurboPerf];\n  EulerianWork= new su2double[nMarkerTurboPerf];\n  TotalEnthalpyIn= new su2double[nMarkerTurboPerf];\n  PressureRatio= new su2double[nMarkerTurboPerf];\n  PressureOut= new su2double[nMarkerTurboPerf];\n  EnthalpyOut= new su2double[nMarkerTurboPerf];\n  MachIn= new su2double[nMarkerTurboPerf];\n  MachOut= new su2double[nMarkerTurboPerf];\n  NormalMachIn= new su2double[nMarkerTurboPerf];\n  NormalMachOut= new su2double[nMarkerTurboPerf];\n  VelocityOutIs= new su2double[nMarkerTurboPerf];\n  \n  for (iMarker = 0; iMarker < nMarkerTurboPerf; iMarker++){\n    TotalStaticEfficiency[iMarker]= 0.0;\n    TotalTotalEfficiency[iMarker]= 0.0;\n    KineticEnergyLoss[iMarker]= 0.0;\n    TotalPressureLoss[iMarker]= 0.0;\n    MassFlowIn[iMarker]= 0.0;\n    MassFlowOut[iMarker]= 0.0;\n    FlowAngleIn[iMarker]= 0.0;\n    FlowAngleOut[iMarker]= 0.0;\n    EulerianWork[iMarker]= 0.0;\n    TotalEnthalpyIn[iMarker]= 0.0;\n    PressureRatio[iMarker]= 0.0;\n    PressureOut[iMarker]= 0.0;\n    EnthalpyOut[iMarker]= 0.0;\n    MachIn[iMarker]= 0.0;\n    MachOut[iMarker]= 0.0;\n    NormalMachIn[iMarker]= 0.0;\n    NormalMachOut[iMarker]= 0.0;\n    VelocityOutIs[iMarker]= 0.0;\n  }\n  \n  \n  /*--- Initialize the cauchy critera array for fixed CL mode ---*/\n  \n  if (config->GetFixed_CL_Mode())\n    \n    Cauchy_Serie = new su2double [config->GetCauchy_Elems()+1];\n  \n  /*--- Check for a restart and set up the variables at each node\n   appropriately. Coarse multigrid levels will be intitially set to\n   the farfield values bc the solver will immediately interpolate\n   the solution from the finest mesh to the coarser levels. ---*/\n  \n  if (!restart || (iMesh != MESH_0)) {\n    \n    /*--- Restart the solution from the free-stream state ---*/\n    \n    for (iPoint = 0; iPoint < nPoint; iPoint++)\n      node[iPoint] = new CEulerVariable(Density_Inf, Velocity_Inf, Energy_Inf, nDim, nVar, config);\n    \n  } else {\n\n    /*--- Multizone problems require the number of the zone to be appended. ---*/\n\n    if (nZone > 1)\n\t  filename = config->GetMultizone_FileName(filename, iZone);\n    \n    /*--- Modify file name for a dual-time unsteady restart ---*/\n    \n    if (dual_time) {\n      \n      if (adjoint) { Unst_RestartIter = SU2_TYPE::Int(config->GetUnst_AdjointIter()) - 1; }\n      else if (config->GetUnsteady_Simulation() == DT_STEPPING_1ST)\n        Unst_RestartIter = SU2_TYPE::Int(config->GetUnst_RestartIter())-1;\n      else\n        Unst_RestartIter = SU2_TYPE::Int(config->GetUnst_RestartIter())-2;\n      \n      filename = config->GetUnsteady_FileName(filename, Unst_RestartIter);\n    }\n    \n\t\t/*--- Modify file name for a time stepping unsteady restart ---*/\n\t\t\n\t\tif (time_stepping) {\n\t\t\tif (adjoint) {\n\t\t\t\tUnst_RestartIter = SU2_TYPE::Int(config->GetUnst_AdjointIter()) - 1;\n\t\t\t} else {\n\t\t\t\tUnst_RestartIter = SU2_TYPE::Int(config->GetUnst_RestartIter())-1;\n\t\t\t}\n\t\t\tfilename = config->GetUnsteady_FileName(filename, Unst_RestartIter);\n\t\t}\n\t\t\n\t\t\n\t\t/*--- Open the restart file, throw an error if this fails. ---*/\n    \n    restart_file.open(filename.data(), ios::in);\n    if (restart_file.fail()) {\n      if (rank == MASTER_NODE)\n        cout << \"There is no flow restart file!! \" << filename.data() << \".\"<< endl;\n      exit(EXIT_FAILURE);\n    }\n    \n    /*--- In case this is a parallel simulation, we need to perform the\n     Global2Local index transformation first. ---*/\n    \n    long *Global2Local = new long[geometry->GetGlobal_nPointDomain()];\n    \n    /*--- First, set all indices to a negative value by default ---*/\n    \n    for (iPoint = 0; iPoint < geometry->GetGlobal_nPointDomain(); iPoint++)\n      Global2Local[iPoint] = -1;\n    \n    /*--- Now fill array with the transform values only for local points ---*/\n    \n    for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n      Global2Local[geometry->node[iPoint]->GetGlobalIndex()] = iPoint;\n    \n    /*--- Read all lines in the restart file ---*/\n    \n    long iPoint_Local;\n    unsigned long iPoint_Global_Local = 0, iPoint_Global = 0; string text_line;\n    unsigned short rbuf_NotMatching = 0, sbuf_NotMatching = 0;\n    \n    /*--- The first line is the header ---*/\n    \n    getline (restart_file, text_line);\n    \n    while (getline (restart_file, text_line)) {\n      istringstream point_line(text_line);\n      \n      /*--- Retrieve local index. If this node from the restart file lives\n       on a different processor, the value of iPoint_Local will be -1.\n       Otherwise, the local index for this node on the current processor\n       will be returned and used to instantiate the vars. ---*/\n      \n      iPoint_Local = Global2Local[iPoint_Global];\n      \n      /*--- Load the solution for this node. Note that the first entry\n       on the restart file line is the global index, followed by the\n       node coordinates, and then the conservative variables. ---*/\n      \n      if (iPoint_Local >= 0) {\n        if (compressible) {\n          if (nDim == 2) point_line >> index >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n          if (nDim == 3) point_line >> index >> dull_val >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3] >> Solution[4];\n        }\n        if (incompressible) {\n          if (nDim == 2) point_line >> index >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2];\n          if (nDim == 3) point_line >> index >> dull_val >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n        }\n        if (freesurface) {\n          if (nDim == 2) point_line >> index >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n          if (nDim == 3) point_line >> index >> dull_val >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3] >> Solution[4];\n        }\n        node[iPoint_Local] = new CEulerVariable(Solution, nDim, nVar, config);\n        iPoint_Global_Local++;\n      }\n      iPoint_Global++;\n    }\n    \n    /*--- Detect a wrong solution file ---*/\n    \n    if (iPoint_Global_Local < nPointDomain) { sbuf_NotMatching = 1; }\n    \n#ifndef HAVE_MPI\n    rbuf_NotMatching = sbuf_NotMatching;\n#else\n    SU2_MPI::Allreduce(&sbuf_NotMatching, &rbuf_NotMatching, 1, MPI_UNSIGNED_SHORT, MPI_SUM, MPI_COMM_WORLD);\n#endif\n    \n    if (rbuf_NotMatching != 0) {\n      if (rank == MASTER_NODE) {\n        cout << endl << \"The solution file \" << filename.data() << \" doesn't match with the mesh file!\" << endl;\n        cout << \"It could be empty lines at the end of the file.\" << endl << endl;\n      }\n#ifndef HAVE_MPI\n      exit(EXIT_FAILURE);\n#else\n      MPI_Barrier(MPI_COMM_WORLD);\n      MPI_Abort(MPI_COMM_WORLD,1);\n      MPI_Finalize();\n#endif\n    }\n    \n    /*--- Instantiate the variable class with an arbitrary solution\n     at any halo/periodic nodes. The initial solution can be arbitrary,\n     because a send/recv is performed immediately in the solver. ---*/\n    \n    for (iPoint = nPointDomain; iPoint < nPoint; iPoint++)\n      node[iPoint] = new CEulerVariable(Solution, nDim, nVar, config);\n    \n    /*--- Close the restart file ---*/\n    \n    restart_file.close();\n    \n    /*--- Free memory needed for the transformation ---*/\n    \n    delete [] Global2Local;\n    \n  }\n  \n  /*--- Check that the initial solution is physical, report any non-physical nodes ---*/\n  \n  if (compressible) {\n    \n    counter_local = 0;\n    \n    for (iPoint = 0; iPoint < nPoint; iPoint++) {\n      \n      Density = node[iPoint]->GetSolution(0);\n      \n      Velocity2 = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Velocity2 += (node[iPoint]->GetSolution(iDim+1)/Density)*(node[iPoint]->GetSolution(iDim+1)/Density);\n      \n      StaticEnergy= node[iPoint]->GetSolution(nDim+1)/Density - 0.5*Velocity2;\n      \n      FluidModel->SetTDState_rhoe(Density, StaticEnergy);\n      Pressure= FluidModel->GetPressure();\n      Temperature= FluidModel->GetTemperature();\n      \n      /*--- Use the values at the infinity ---*/\n      \n      if ((Pressure < 0.0) || (Density < 0.0) || (Temperature < 0.0)) {\n        Solution[0] = Density_Inf;\n        for (iDim = 0; iDim < nDim; iDim++)\n          Solution[iDim+1] = Velocity_Inf[iDim]*Density_Inf;\n        Solution[nDim+1] = Energy_Inf*Density_Inf;\n        node[iPoint]->SetSolution(Solution);\n        node[iPoint]->SetSolution_Old(Solution);\n        counter_local++;\n      }\n      \n    }\n    \n    /*--- Warning message about non-physical points ---*/\n    \n    if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n#ifdef HAVE_MPI\n      SU2_MPI::Reduce(&counter_local, &counter_global, 1, MPI_UNSIGNED_LONG, MPI_SUM, MASTER_NODE, MPI_COMM_WORLD);\n#else\n      counter_global = counter_local;\n#endif\n      if ((rank == MASTER_NODE) && (counter_global != 0))\n        cout << \"Warning. The original solution contains \"<< counter_global << \" points that are not physical.\" << endl;\n    }\n    \n  }\n  \n  /*--- Define solver parameters needed for execution of destructor ---*/\n  \n  if (config->GetKind_ConvNumScheme_Flow() == SPACE_CENTERED ) space_centered = true;\n  else space_centered = false;\n  \n  if (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT) euler_implicit = true;\n  else euler_implicit = false;\n  \n  if (config->GetKind_Gradient_Method() == WEIGHTED_LEAST_SQUARES) least_squares = true;\n  else least_squares = false;\n  \n  /*--- Perform the MPI communication of the solution ---*/\n  \n  Set_MPI_Solution(geometry, config);\n  \n}\n\nCEulerSolver::~CEulerSolver(void) {\n  unsigned short iVar, iMarker;\n  \n  /*--- Array deallocation ---*/\n  if (CDrag_Inv != NULL)         delete [] CDrag_Inv;\n  if (CLift_Inv != NULL)         delete [] CLift_Inv;\n  if (CSideForce_Inv != NULL)    delete [] CSideForce_Inv;\n  if (CMx_Inv != NULL)           delete [] CMx_Inv;\n  if (CMy_Inv != NULL)           delete [] CMy_Inv;\n  if (CMz_Inv != NULL)           delete [] CMz_Inv;\n  if (CFx_Inv != NULL)           delete [] CFx_Inv;\n  if (CFy_Inv != NULL)           delete [] CFy_Inv;\n  if (CFz_Inv != NULL)           delete [] CFz_Inv;\n  if (Surface_CLift_Inv != NULL) delete[] Surface_CLift_Inv;\n  if (Surface_CDrag_Inv != NULL) delete[] Surface_CDrag_Inv;\n  if (Surface_CSideForce_Inv != NULL) delete[] Surface_CSideForce_Inv;\n  if (Surface_CEff_Inv != NULL) delete[] Surface_CEff_Inv;\n  if (Surface_CFx_Inv != NULL)  delete [] Surface_CFx_Inv;\n  if (Surface_CFy_Inv != NULL)  delete [] Surface_CFy_Inv;\n  if (Surface_CFz_Inv != NULL)  delete [] Surface_CFz_Inv;\n  if (Surface_CMx_Inv != NULL)  delete [] Surface_CMx_Inv;\n  if (Surface_CMy_Inv != NULL)  delete [] Surface_CMy_Inv;\n  if (Surface_CMz_Inv != NULL)  delete [] Surface_CMz_Inv;\n  if (Surface_CLift != NULL)    delete [] Surface_CLift;\n  if (Surface_CDrag != NULL)    delete [] Surface_CDrag;\n  if (Surface_CSideForce != NULL) delete [] Surface_CSideForce;\n  if (Surface_CEff != NULL) delete [] Surface_CEff;\n  if (Surface_CFx != NULL)      delete [] Surface_CFx;\n  if (Surface_CFy != NULL)      delete [] Surface_CFy;\n  if (Surface_CFz != NULL)      delete [] Surface_CFz;\n  if (Surface_CMx != NULL)      delete [] Surface_CMx;\n  if (Surface_CMy != NULL)      delete [] Surface_CMy;\n  if (Surface_CMz != NULL)      delete [] Surface_CMz;\n  if (CEff_Inv != NULL)          delete [] CEff_Inv;\n  if (CMerit_Inv != NULL)        delete [] CMerit_Inv;\n  if (CT_Inv != NULL)            delete [] CT_Inv;\n  if (CQ_Inv != NULL)            delete [] CQ_Inv;\n  if (CEquivArea_Inv != NULL)    delete [] CEquivArea_Inv;\n  if (CNearFieldOF_Inv != NULL)  delete [] CNearFieldOF_Inv;\n  if (ForceInviscid != NULL)     delete [] ForceInviscid;\n  if (MomentInviscid != NULL)    delete [] MomentInviscid;\n  if (Inflow_MassFlow != NULL)  delete [] Inflow_MassFlow;\n  if (Exhaust_MassFlow != NULL)  delete [] Exhaust_MassFlow;\n  if (Exhaust_Area != NULL)      delete [] Exhaust_Area;\n  if (Inflow_Pressure != NULL)  delete [] Inflow_Pressure;\n  if (Inflow_Mach != NULL)      delete [] Inflow_Mach;\n  if (Inflow_Area != NULL)      delete [] Inflow_Area;\n  if (Bleed_Pressure != NULL)  delete [] Bleed_Pressure;\n  if (Bleed_Temperature != NULL)      delete [] Bleed_Temperature;\n  if (Exhaust_Pressure != NULL)  delete [] Exhaust_Pressure;\n  if (Exhaust_Temperature != NULL)      delete [] Exhaust_Temperature;\n  if (Bleed_Area != NULL)      delete [] Bleed_Area;\n  if (iPoint_UndLapl != NULL)       delete [] iPoint_UndLapl;\n  if (jPoint_UndLapl != NULL)       delete [] jPoint_UndLapl;\n  if (Primitive != NULL)        delete [] Primitive;\n  if (Primitive_i != NULL)      delete [] Primitive_i;\n  if (Primitive_j != NULL)      delete [] Primitive_j;\n  //  if (Secondary != NULL)        delete [] Secondary;\n  if (Secondary_i != NULL)      delete [] Secondary_i;\n  if (Secondary_j != NULL)      delete [] Secondary_j;\n  \n  if (LowMach_Precontioner != NULL) {\n    for (iVar = 0; iVar < nVar; iVar ++)\n      delete LowMach_Precontioner[iVar];\n    delete [] LowMach_Precontioner;\n  }\n  \n  if (CPressure != NULL) {\n    for (iMarker = 0; iMarker < nMarker; iMarker++)\n      delete CPressure[iMarker];\n    delete [] CPressure;\n  }\n  \n  if (CPressureTarget != NULL) {\n    for (iMarker = 0; iMarker < nMarker; iMarker++)\n      delete CPressureTarget[iMarker];\n    delete [] CPressureTarget;\n  }\n  \n  //  if (CharacPrimVar != NULL) {\n  //    for (iMarker = 0; iMarker < nMarker; iMarker++) {\n  //      for (iVertex = 0; iVertex < nVertex; iVertex++) {\n  //        delete CharacPrimVar[iMarker][iVertex];\n  //      }\n  //    }\n  //    delete [] CharacPrimVar;\n  //  }\n  \n  if (HeatFlux != NULL) {\n    for (iMarker = 0; iMarker < nMarker; iMarker++) {\n      delete HeatFlux[iMarker];\n    }\n    delete [] HeatFlux;\n  }\n  \n  if (HeatFluxTarget != NULL) {\n    for (iMarker = 0; iMarker < nMarker; iMarker++) {\n      delete HeatFluxTarget[iMarker];\n    }\n    delete [] HeatFluxTarget;\n  }\n  \n  if (YPlus != NULL) {\n    for (iMarker = 0; iMarker < nMarker; iMarker++) {\n      delete YPlus[iMarker];\n    }\n    delete [] YPlus;\n  }\n  \n  if (Cauchy_Serie != NULL)\n    delete [] Cauchy_Serie;\n  \n}\n\nvoid CEulerSolver::Set_MPI_Solution(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi, *Buffer_Receive_U = NULL, *Buffer_Send_U = NULL;\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nVar;        nBufferR_Vector = nVertexR*nVar;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_U = new su2double [nBufferR_Vector];\n      Buffer_Send_U = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Send_U[iVar*nVertexS+iVertex] = node[iPoint]->GetSolution(iVar);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_U, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_U, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Receive_U[iVar*nVertexR+iVertex] = Buffer_Send_U[iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_U;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          Solution[iVar] = Buffer_Receive_U[iVar*nVertexR+iVertex];\n        \n        /*--- Rotate the momentum components. ---*/\n        if (nDim == 2) {\n          Solution[1] = rotMatrix[0][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_U[2*nVertexR+iVertex];\n          Solution[2] = rotMatrix[1][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_U[2*nVertexR+iVertex];\n        }\n        else {\n          Solution[1] = rotMatrix[0][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_U[2*nVertexR+iVertex] +\n          rotMatrix[0][2]*Buffer_Receive_U[3*nVertexR+iVertex];\n          Solution[2] = rotMatrix[1][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_U[2*nVertexR+iVertex] +\n          rotMatrix[1][2]*Buffer_Receive_U[3*nVertexR+iVertex];\n          Solution[3] = rotMatrix[2][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[2][1]*Buffer_Receive_U[2*nVertexR+iVertex] +\n          rotMatrix[2][2]*Buffer_Receive_U[3*nVertexR+iVertex];\n        }\n        \n        /*--- Copy transformed conserved variables back into buffer. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          node[iPoint]->SetSolution(iVar, Solution[iVar]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_U;\n      \n    }\n    \n  }\n  \n}\n\nvoid CEulerSolver::Set_MPI_Solution_Old(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n  *Buffer_Receive_U = NULL, *Buffer_Send_U = NULL;\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nVar;        nBufferR_Vector = nVertexR*nVar;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_U = new su2double [nBufferR_Vector];\n      Buffer_Send_U = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Send_U[iVar*nVertexS+iVertex] = node[iPoint]->GetSolution_Old(iVar);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_U, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_U, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Receive_U[iVar*nVertexR+iVertex] = Buffer_Send_U[iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_U;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          Solution[iVar] = Buffer_Receive_U[iVar*nVertexR+iVertex];\n        \n        /*--- Rotate the momentum components. ---*/\n        if (nDim == 2) {\n          Solution[1] = rotMatrix[0][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_U[2*nVertexR+iVertex];\n          Solution[2] = rotMatrix[1][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_U[2*nVertexR+iVertex];\n        }\n        else {\n          Solution[1] = rotMatrix[0][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_U[2*nVertexR+iVertex] +\n          rotMatrix[0][2]*Buffer_Receive_U[3*nVertexR+iVertex];\n          Solution[2] = rotMatrix[1][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_U[2*nVertexR+iVertex] +\n          rotMatrix[1][2]*Buffer_Receive_U[3*nVertexR+iVertex];\n          Solution[3] = rotMatrix[2][0]*Buffer_Receive_U[1*nVertexR+iVertex] +\n          rotMatrix[2][1]*Buffer_Receive_U[2*nVertexR+iVertex] +\n          rotMatrix[2][2]*Buffer_Receive_U[3*nVertexR+iVertex];\n        }\n        \n        /*--- Copy transformed conserved variables back into buffer. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          node[iPoint]->SetSolution_Old(iVar, Solution[iVar]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_U;\n      \n    }\n    \n  }\n}\n\nvoid CEulerSolver::Set_MPI_Undivided_Laplacian(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n  *Buffer_Receive_Undivided_Laplacian = NULL, *Buffer_Send_Undivided_Laplacian = NULL;\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nVar;        nBufferR_Vector = nVertexR*nVar;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Undivided_Laplacian = new su2double [nBufferR_Vector];\n      Buffer_Send_Undivided_Laplacian = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Send_Undivided_Laplacian[iVar*nVertexS+iVertex] = node[iPoint]->GetUndivided_Laplacian(iVar);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Undivided_Laplacian, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Undivided_Laplacian, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Receive_Undivided_Laplacian[iVar*nVertexR+iVertex] = Buffer_Send_Undivided_Laplacian[iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Undivided_Laplacian;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          Solution[iVar] = Buffer_Receive_Undivided_Laplacian[iVar*nVertexR+iVertex];\n        \n        /*--- Rotate the momentum components. ---*/\n        if (nDim == 2) {\n          Solution[1] = rotMatrix[0][0]*Buffer_Receive_Undivided_Laplacian[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_Undivided_Laplacian[2*nVertexR+iVertex];\n          Solution[2] = rotMatrix[1][0]*Buffer_Receive_Undivided_Laplacian[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_Undivided_Laplacian[2*nVertexR+iVertex];\n        }\n        else {\n          Solution[1] = rotMatrix[0][0]*Buffer_Receive_Undivided_Laplacian[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_Undivided_Laplacian[2*nVertexR+iVertex] +\n          rotMatrix[0][2]*Buffer_Receive_Undivided_Laplacian[3*nVertexR+iVertex];\n          Solution[2] = rotMatrix[1][0]*Buffer_Receive_Undivided_Laplacian[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_Undivided_Laplacian[2*nVertexR+iVertex] +\n          rotMatrix[1][2]*Buffer_Receive_Undivided_Laplacian[3*nVertexR+iVertex];\n          Solution[3] = rotMatrix[2][0]*Buffer_Receive_Undivided_Laplacian[1*nVertexR+iVertex] +\n          rotMatrix[2][1]*Buffer_Receive_Undivided_Laplacian[2*nVertexR+iVertex] +\n          rotMatrix[2][2]*Buffer_Receive_Undivided_Laplacian[3*nVertexR+iVertex];\n        }\n        \n        /*--- Copy transformed conserved variables back into buffer. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          node[iPoint]->SetUndivided_Laplacian(iVar, Solution[iVar]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Undivided_Laplacian;\n      \n    }\n    \n  }\n  \n}\n\nvoid CEulerSolver::Set_MPI_MaxEigenvalue(CGeometry *geometry, CConfig *config) {\n  unsigned short iMarker, MarkerS, MarkerR, *Buffer_Receive_Neighbor = NULL, *Buffer_Send_Neighbor = NULL;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double *Buffer_Receive_Lambda = NULL, *Buffer_Send_Lambda = NULL;\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS;        nBufferR_Vector = nVertexR;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Lambda = new su2double [nBufferR_Vector];\n      Buffer_Send_Lambda = new su2double[nBufferS_Vector];\n      Buffer_Receive_Neighbor = new unsigned short [nBufferR_Vector];\n      Buffer_Send_Neighbor = new unsigned short[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        Buffer_Send_Lambda[iVertex] = node[iPoint]->GetLambda();\n        Buffer_Send_Neighbor[iVertex] = geometry->node[iPoint]->GetnPoint();\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Lambda, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Lambda, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      SU2_MPI::Sendrecv(Buffer_Send_Neighbor, nBufferS_Vector, MPI_UNSIGNED_SHORT, send_to, 1,\n                        Buffer_Receive_Neighbor, nBufferR_Vector, MPI_UNSIGNED_SHORT, receive_from, 1, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        Buffer_Receive_Lambda[iVertex] = Buffer_Send_Lambda[iVertex];\n        Buffer_Receive_Neighbor[iVertex] = Buffer_Send_Neighbor[iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Lambda;\n      delete [] Buffer_Send_Neighbor;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        node[iPoint]->SetLambda(Buffer_Receive_Lambda[iVertex]);\n        geometry->node[iPoint]->SetnNeighbor(Buffer_Receive_Neighbor[iVertex]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Lambda;\n      delete [] Buffer_Receive_Neighbor;\n      \n    }\n    \n  }\n}\n\nvoid CEulerSolver::Set_MPI_Dissipation_Switch(CGeometry *geometry, CConfig *config) {\n  unsigned short iMarker, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double *Buffer_Receive_Lambda = NULL, *Buffer_Send_Lambda = NULL;\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS;        nBufferR_Vector = nVertexR;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Lambda = new su2double [nBufferR_Vector];\n      Buffer_Send_Lambda = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        Buffer_Send_Lambda[iVertex] = node[iPoint]->GetSensor();\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Lambda, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Lambda, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        Buffer_Receive_Lambda[iVertex] = Buffer_Send_Lambda[iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Lambda;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        node[iPoint]->SetSensor(Buffer_Receive_Lambda[iVertex]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Lambda;\n      \n    }\n    \n  }\n}\n\nvoid CEulerSolver::Set_MPI_Solution_Gradient(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iDim, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n  *Buffer_Receive_Gradient = NULL, *Buffer_Send_Gradient = NULL;\n  \n  su2double **Gradient = new su2double* [nVar];\n  for (iVar = 0; iVar < nVar; iVar++)\n    Gradient[iVar] = new su2double[nDim];\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nVar*nDim;        nBufferR_Vector = nVertexR*nVar*nDim;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Gradient = new su2double [nBufferR_Vector];\n      Buffer_Send_Gradient = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nVar; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            Buffer_Send_Gradient[iDim*nVar*nVertexS+iVar*nVertexS+iVertex] = node[iPoint]->GetGradient(iVar, iDim);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Gradient, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Gradient, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nVar; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            Buffer_Receive_Gradient[iDim*nVar*nVertexR+iVar*nVertexR+iVertex] = Buffer_Send_Gradient[iDim*nVar*nVertexR+iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Gradient;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            Gradient[iVar][iDim] = Buffer_Receive_Gradient[iDim*nVar*nVertexR+iVar*nVertexR+iVertex];\n        \n        /*--- Need to rotate the gradients for all conserved variables. ---*/\n        for (iVar = 0; iVar < nVar; iVar++) {\n          if (nDim == 2) {\n            Gradient[iVar][0] = rotMatrix[0][0]*Buffer_Receive_Gradient[0*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][1]*Buffer_Receive_Gradient[1*nVar*nVertexR+iVar*nVertexR+iVertex];\n            Gradient[iVar][1] = rotMatrix[1][0]*Buffer_Receive_Gradient[0*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][1]*Buffer_Receive_Gradient[1*nVar*nVertexR+iVar*nVertexR+iVertex];\n          }\n          else {\n            Gradient[iVar][0] = rotMatrix[0][0]*Buffer_Receive_Gradient[0*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][1]*Buffer_Receive_Gradient[1*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][2]*Buffer_Receive_Gradient[2*nVar*nVertexR+iVar*nVertexR+iVertex];\n            Gradient[iVar][1] = rotMatrix[1][0]*Buffer_Receive_Gradient[0*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][1]*Buffer_Receive_Gradient[1*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][2]*Buffer_Receive_Gradient[2*nVar*nVertexR+iVar*nVertexR+iVertex];\n            Gradient[iVar][2] = rotMatrix[2][0]*Buffer_Receive_Gradient[0*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[2][1]*Buffer_Receive_Gradient[1*nVar*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[2][2]*Buffer_Receive_Gradient[2*nVar*nVertexR+iVar*nVertexR+iVertex];\n          }\n        }\n        \n        /*--- Store the received information ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            node[iPoint]->SetGradient(iVar, iDim, Gradient[iVar][iDim]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Gradient;\n      \n    }\n    \n  }\n  \n  for (iVar = 0; iVar < nVar; iVar++)\n    delete [] Gradient[iVar];\n  delete [] Gradient;\n  \n}\n\nvoid CEulerSolver::Set_MPI_Solution_Limiter(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n  *Buffer_Receive_Limit = NULL, *Buffer_Send_Limit = NULL;\n  \n  su2double *Limiter = new su2double [nVar];\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nVar;        nBufferR_Vector = nVertexR*nVar;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Limit = new su2double [nBufferR_Vector];\n      Buffer_Send_Limit = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Send_Limit[iVar*nVertexS+iVertex] = node[iPoint]->GetLimiter(iVar);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Limit, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Limit, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nVar; iVar++)\n          Buffer_Receive_Limit[iVar*nVertexR+iVertex] = Buffer_Send_Limit[iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Limit;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          Limiter[iVar] = Buffer_Receive_Limit[iVar*nVertexR+iVertex];\n        \n        /*--- Rotate the momentum components. ---*/\n        if (nDim == 2) {\n          Limiter[1] = rotMatrix[0][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_Limit[2*nVertexR+iVertex];\n          Limiter[2] = rotMatrix[1][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_Limit[2*nVertexR+iVertex];\n        }\n        else {\n          Limiter[1] = rotMatrix[0][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_Limit[2*nVertexR+iVertex] +\n          rotMatrix[0][2]*Buffer_Receive_Limit[3*nVertexR+iVertex];\n          Limiter[2] = rotMatrix[1][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_Limit[2*nVertexR+iVertex] +\n          rotMatrix[1][2]*Buffer_Receive_Limit[3*nVertexR+iVertex];\n          Limiter[3] = rotMatrix[2][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[2][1]*Buffer_Receive_Limit[2*nVertexR+iVertex] +\n          rotMatrix[2][2]*Buffer_Receive_Limit[3*nVertexR+iVertex];\n        }\n        \n        /*--- Copy transformed conserved variables back into buffer. ---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n          node[iPoint]->SetLimiter(iVar, Limiter[iVar]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Limit;\n      \n    }\n    \n  }\n  \n  delete [] Limiter;\n  \n}\n\nvoid CEulerSolver::Set_MPI_Primitive_Gradient(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iDim, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n  *Buffer_Receive_Gradient = NULL, *Buffer_Send_Gradient = NULL;\n  \n  su2double **Gradient = new su2double* [nPrimVarGrad];\n  for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n    Gradient[iVar] = new su2double[nDim];\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nPrimVarGrad*nDim;        nBufferR_Vector = nVertexR*nPrimVarGrad*nDim;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Gradient = new su2double [nBufferR_Vector];\n      Buffer_Send_Gradient = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            Buffer_Send_Gradient[iDim*nPrimVarGrad*nVertexS+iVar*nVertexS+iVertex] = node[iPoint]->GetGradient_Primitive(iVar, iDim);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Gradient, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Gradient, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            Buffer_Receive_Gradient[iDim*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] = Buffer_Send_Gradient[iDim*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Gradient;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            Gradient[iVar][iDim] = Buffer_Receive_Gradient[iDim*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n        \n        /*--- Need to rotate the gradients for all conserved variables. ---*/\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n          if (nDim == 2) {\n            Gradient[iVar][0] = rotMatrix[0][0]*Buffer_Receive_Gradient[0*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][1]*Buffer_Receive_Gradient[1*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n            Gradient[iVar][1] = rotMatrix[1][0]*Buffer_Receive_Gradient[0*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][1]*Buffer_Receive_Gradient[1*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n          }\n          else {\n            Gradient[iVar][0] = rotMatrix[0][0]*Buffer_Receive_Gradient[0*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][1]*Buffer_Receive_Gradient[1*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][2]*Buffer_Receive_Gradient[2*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n            Gradient[iVar][1] = rotMatrix[1][0]*Buffer_Receive_Gradient[0*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][1]*Buffer_Receive_Gradient[1*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][2]*Buffer_Receive_Gradient[2*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n            Gradient[iVar][2] = rotMatrix[2][0]*Buffer_Receive_Gradient[0*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[2][1]*Buffer_Receive_Gradient[1*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[2][2]*Buffer_Receive_Gradient[2*nPrimVarGrad*nVertexR+iVar*nVertexR+iVertex];\n          }\n        }\n        \n        /*--- Store the received information ---*/\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            node[iPoint]->SetGradient_Primitive(iVar, iDim, Gradient[iVar][iDim]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Gradient;\n      \n    }\n    \n  }\n  \n  for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n    delete [] Gradient[iVar];\n  delete [] Gradient;\n  \n}\n\nvoid CEulerSolver::Set_MPI_Primitive_Limiter(CGeometry *geometry, CConfig *config) {\n  unsigned short iVar, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n  *Buffer_Receive_Limit = NULL, *Buffer_Send_Limit = NULL;\n  \n  su2double *Limiter = new su2double [nPrimVarGrad];\n  \n#ifdef HAVE_MPI\n  int send_to, receive_from;\n  MPI_Status status;\n#endif\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n      \n      MarkerS = iMarker;  MarkerR = iMarker+1;\n      \n#ifdef HAVE_MPI\n      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n#endif\n      \n      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n      nBufferS_Vector = nVertexS*nPrimVarGrad;        nBufferR_Vector = nVertexR*nPrimVarGrad;\n      \n      /*--- Allocate Receive and send buffers  ---*/\n      Buffer_Receive_Limit = new su2double [nBufferR_Vector];\n      Buffer_Send_Limit = new su2double[nBufferS_Vector];\n      \n      /*--- Copy the solution old that should be sended ---*/\n      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          Buffer_Send_Limit[iVar*nVertexS+iVertex] = node[iPoint]->GetLimiter_Primitive(iVar);\n      }\n      \n#ifdef HAVE_MPI\n      \n      /*--- Send/Receive information using Sendrecv ---*/\n      SU2_MPI::Sendrecv(Buffer_Send_Limit, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n                        Buffer_Receive_Limit, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n      \n#else\n      \n      /*--- Receive information without MPI ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          Buffer_Receive_Limit[iVar*nVertexR+iVertex] = Buffer_Send_Limit[iVar*nVertexR+iVertex];\n      }\n      \n#endif\n      \n      /*--- Deallocate send buffer ---*/\n      delete [] Buffer_Send_Limit;\n      \n      /*--- Do the coordinate transformation ---*/\n      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n        \n        /*--- Find point and its type of transformation ---*/\n        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n        \n        /*--- Retrieve the supplied periodic information. ---*/\n        angles = config->GetPeriodicRotation(iPeriodic_Index);\n        \n        /*--- Store angles separately for clarity. ---*/\n        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n        \n        /*--- Compute the rotation matrix. Note that the implicit\n         ordering is rotation about the x-axis, y-axis,\n         then z-axis. Note that this is the transpose of the matrix\n         used during the preprocessing stage. ---*/\n        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n        \n        /*--- Copy conserved variables before performing transformation. ---*/\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          Limiter[iVar] = Buffer_Receive_Limit[iVar*nVertexR+iVertex];\n        \n        /*--- Rotate the momentum components. ---*/\n        if (nDim == 2) {\n          Limiter[1] = rotMatrix[0][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_Limit[2*nVertexR+iVertex];\n          Limiter[2] = rotMatrix[1][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_Limit[2*nVertexR+iVertex];\n        }\n        else {\n          Limiter[1] = rotMatrix[0][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[0][1]*Buffer_Receive_Limit[2*nVertexR+iVertex] +\n          rotMatrix[0][2]*Buffer_Receive_Limit[3*nVertexR+iVertex];\n          Limiter[2] = rotMatrix[1][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[1][1]*Buffer_Receive_Limit[2*nVertexR+iVertex] +\n          rotMatrix[1][2]*Buffer_Receive_Limit[3*nVertexR+iVertex];\n          Limiter[3] = rotMatrix[2][0]*Buffer_Receive_Limit[1*nVertexR+iVertex] +\n          rotMatrix[2][1]*Buffer_Receive_Limit[2*nVertexR+iVertex] +\n          rotMatrix[2][2]*Buffer_Receive_Limit[3*nVertexR+iVertex];\n        }\n        \n        /*--- Copy transformed conserved variables back into buffer. ---*/\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          node[iPoint]->SetLimiter_Primitive(iVar, Limiter[iVar]);\n        \n      }\n      \n      /*--- Deallocate receive buffer ---*/\n      delete [] Buffer_Receive_Limit;\n      \n    }\n    \n  }\n  \n  delete [] Limiter;\n  \n}\n\n//void CEulerSolver::Set_MPI_Secondary_Gradient(CGeometry *geometry, CConfig *config) {\n//  unsigned short iVar, iDim, iMarker, iPeriodic_Index, MarkerS, MarkerR;\n//  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n//  su2double rotMatrix[3][3], *angles, theta, cosTheta, sinTheta, phi, cosPhi, sinPhi, psi, cosPsi, sinPsi,\n//  *Buffer_Receive_Gradient = NULL, *Buffer_Send_Gradient = NULL;\n//  int send_to, receive_from;\n//\n//  su2double **Gradient = new su2double* [nSecondaryVarGrad];\n//  for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//    Gradient[iVar] = new su2double[nDim];\n//\n//#ifdef HAVE_MPI\n//  MPI_Status status;\n//#endif\n//\n//  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n//\n//    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n//        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n//\n//      MarkerS = iMarker;  MarkerR = iMarker+1;\n//\n//      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n//      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n//\n//      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n//      nBufferS_Vector = nVertexS*nSecondaryVarGrad*nDim;        nBufferR_Vector = nVertexR*nSecondaryVarGrad*nDim;\n//\n//      /*--- Allocate Receive and send buffers  ---*/\n//      Buffer_Receive_Gradient = new su2double [nBufferR_Vector];\n//      Buffer_Send_Gradient = new su2double[nBufferS_Vector];\n//\n//      /*--- Copy the solution old that should be sended ---*/\n//      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n//        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          for (iDim = 0; iDim < nDim; iDim++)\n//            Buffer_Send_Gradient[iDim*nSecondaryVarGrad*nVertexS+iVar*nVertexS+iVertex] = node[iPoint]->GetGradient_Secondary(iVar, iDim);\n//      }\n//\n//#ifdef HAVE_MPI\n//\n//      /*--- Send/Receive information using Sendrecv ---*/\n//      SU2_MPI::Sendrecv(Buffer_Send_Gradient, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n//                   Buffer_Receive_Gradient, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n//\n//#else\n//\n//      /*--- Receive information without MPI ---*/\n//      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n//        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          for (iDim = 0; iDim < nDim; iDim++)\n//            Buffer_Receive_Gradient[iDim*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] = Buffer_Send_Gradient[iDim*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//      }\n//\n//#endif\n//\n//      /*--- Deallocate send buffer ---*/\n//      delete [] Buffer_Send_Gradient;\n//\n//      /*--- Do the coordinate transformation ---*/\n//      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n//\n//        /*--- Find point and its type of transformation ---*/\n//        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n//        iPeriodic_Index = geometry->vertex[MarkerR][iVertex]->GetRotation_Type();\n//\n//        /*--- Retrieve the supplied periodic information. ---*/\n//        angles = config->GetPeriodicRotation(iPeriodic_Index);\n//\n//        /*--- Store angles separately for clarity. ---*/\n//        theta    = angles[0];   phi    = angles[1];     psi    = angles[2];\n//        cosTheta = cos(theta);  cosPhi = cos(phi);      cosPsi = cos(psi);\n//        sinTheta = sin(theta);  sinPhi = sin(phi);      sinPsi = sin(psi);\n//\n//        /*--- Compute the rotation matrix. Note that the implicit\n//         ordering is rotation about the x-axis, y-axis,\n//         then z-axis. Note that this is the transpose of the matrix\n//         used during the preprocessing stage. ---*/\n//        rotMatrix[0][0] = cosPhi*cosPsi;    rotMatrix[1][0] = sinTheta*sinPhi*cosPsi - cosTheta*sinPsi;     rotMatrix[2][0] = cosTheta*sinPhi*cosPsi + sinTheta*sinPsi;\n//        rotMatrix[0][1] = cosPhi*sinPsi;    rotMatrix[1][1] = sinTheta*sinPhi*sinPsi + cosTheta*cosPsi;     rotMatrix[2][1] = cosTheta*sinPhi*sinPsi - sinTheta*cosPsi;\n//        rotMatrix[0][2] = -sinPhi;          rotMatrix[1][2] = sinTheta*cosPhi;                              rotMatrix[2][2] = cosTheta*cosPhi;\n//\n//        /*--- Copy conserved variables before performing transformation. ---*/\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          for (iDim = 0; iDim < nDim; iDim++)\n//            Gradient[iVar][iDim] = Buffer_Receive_Gradient[iDim*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//\n//        /*--- Need to rotate the gradients for all conserved variables. ---*/\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//          if (nDim == 2) {\n//            Gradient[iVar][0] = rotMatrix[0][0]*Buffer_Receive_Gradient[0*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][1]*Buffer_Receive_Gradient[1*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//            Gradient[iVar][1] = rotMatrix[1][0]*Buffer_Receive_Gradient[0*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][1]*Buffer_Receive_Gradient[1*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//          }\n//          else {\n//            Gradient[iVar][0] = rotMatrix[0][0]*Buffer_Receive_Gradient[0*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][1]*Buffer_Receive_Gradient[1*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[0][2]*Buffer_Receive_Gradient[2*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//            Gradient[iVar][1] = rotMatrix[1][0]*Buffer_Receive_Gradient[0*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][1]*Buffer_Receive_Gradient[1*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[1][2]*Buffer_Receive_Gradient[2*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//            Gradient[iVar][2] = rotMatrix[2][0]*Buffer_Receive_Gradient[0*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[2][1]*Buffer_Receive_Gradient[1*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex] + rotMatrix[2][2]*Buffer_Receive_Gradient[2*nSecondaryVarGrad*nVertexR+iVar*nVertexR+iVertex];\n//          }\n//        }\n//\n//        /*--- Store the received information ---*/\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          for (iDim = 0; iDim < nDim; iDim++)\n//            node[iPoint]->SetGradient_Secondary(iVar, iDim, Gradient[iVar][iDim]);\n//\n//      }\n//\n//      /*--- Deallocate receive buffer ---*/\n//      delete [] Buffer_Receive_Gradient;\n//\n//    }\n//\n//  }\n//\n//  for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//    delete [] Gradient[iVar];\n//  delete [] Gradient;\n//\n//}\n\n//void CEulerSolver::Set_MPI_Secondary_Limiter(CGeometry *geometry, CConfig *config) {\n//  unsigned short iVar, iMarker, MarkerS, MarkerR;\n//  unsigned long iVertex, iPoint, nVertexS, nVertexR, nBufferS_Vector, nBufferR_Vector;\n//  su2double *Buffer_Receive_Limit = NULL, *Buffer_Send_Limit = NULL;\n//  int send_to, receive_from;\n//\n//  su2double *Limiter = new su2double [nSecondaryVarGrad];\n//\n//#ifdef HAVE_MPI\n//  MPI_Status status;\n//#endif\n//\n//  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n//\n//    if ((config->GetMarker_All_KindBC(iMarker) == SEND_RECEIVE) &&\n//        (config->GetMarker_All_SendRecv(iMarker) > 0)) {\n//\n//      MarkerS = iMarker;  MarkerR = iMarker+1;\n//\n//      send_to = config->GetMarker_All_SendRecv(MarkerS)-1;\n//      receive_from = abs(config->GetMarker_All_SendRecv(MarkerR))-1;\n//\n//      nVertexS = geometry->nVertex[MarkerS];  nVertexR = geometry->nVertex[MarkerR];\n//      nBufferS_Vector = nVertexS*nSecondaryVarGrad;        nBufferR_Vector = nVertexR*nSecondaryVarGrad;\n//\n//      /*--- Allocate Receive and send buffers  ---*/\n//      Buffer_Receive_Limit = new su2double [nBufferR_Vector];\n//      Buffer_Send_Limit = new su2double[nBufferS_Vector];\n//\n//      /*--- Copy the solution old that should be sended ---*/\n//      for (iVertex = 0; iVertex < nVertexS; iVertex++) {\n//        iPoint = geometry->vertex[MarkerS][iVertex]->GetNode();\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          Buffer_Send_Limit[iVar*nVertexS+iVertex] = node[iPoint]->GetLimiter_Secondary(iVar);\n//      }\n//\n//#ifdef HAVE_MPI\n//\n//      /*--- Send/Receive information using Sendrecv ---*/\n//      SU2_MPI::Sendrecv(Buffer_Send_Limit, nBufferS_Vector, MPI_DOUBLE, send_to, 0,\n//                   Buffer_Receive_Limit, nBufferR_Vector, MPI_DOUBLE, receive_from, 0, MPI_COMM_WORLD, &status);\n//\n//#else\n//\n//      /*--- Receive information without MPI ---*/\n//      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n//        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          Buffer_Receive_Limit[iVar*nVertexR+iVertex] = Buffer_Send_Limit[iVar*nVertexR+iVertex];\n//      }\n//\n//#endif\n//\n//      /*--- Deallocate send buffer ---*/\n//      delete [] Buffer_Send_Limit;\n//\n//      /*--- Do the coordinate transformation ---*/\n//      for (iVertex = 0; iVertex < nVertexR; iVertex++) {\n//\n//        /*--- Find point and its type of transformation ---*/\n//        iPoint = geometry->vertex[MarkerR][iVertex]->GetNode();\n//\n//        /*--- Copy conserved variables before performing transformation. ---*/\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          Limiter[iVar] = Buffer_Receive_Limit[iVar*nVertexR+iVertex];\n//\n//        /*--- Copy transformed conserved variables back into buffer. ---*/\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          node[iPoint]->SetLimiter_Secondary(iVar, Limiter[iVar]);\n//\n//      }\n//\n//      /*--- Deallocate receive buffer ---*/\n//      delete [] Buffer_Receive_Limit;\n//\n//    }\n//\n//  }\n//\n//  delete [] Limiter;\n//\n//}\n\nvoid CEulerSolver::SetNondimensionalization(CGeometry *geometry, CConfig *config, unsigned short iMesh) {\n  \n  su2double Temperature_FreeStream = 0.0, Mach2Vel_FreeStream = 0.0, ModVel_FreeStream = 0.0,\n  Energy_FreeStream = 0.0, ModVel_FreeStreamND = 0.0, Velocity_Reynolds = 0.0,\n  Omega_FreeStream = 0.0, Omega_FreeStreamND = 0.0, Viscosity_FreeStream = 0.0,\n  Density_FreeStream = 0.0, Pressure_FreeStream = 0.0, Tke_FreeStream = 0.0,\n  Length_Ref = 0.0, Density_Ref = 0.0, Pressure_Ref = 0.0, Velocity_Ref = 0.0,\n  Temperature_Ref = 0.0, Time_Ref = 0.0, Omega_Ref = 0.0, Force_Ref = 0.0,\n  Gas_Constant_Ref = 0.0, Viscosity_Ref = 0.0, Conductivity_Ref = 0.0, Energy_Ref= 0.0,\n  Froude = 0.0, Pressure_FreeStreamND = 0.0, Density_FreeStreamND = 0.0,\n  Temperature_FreeStreamND = 0.0, Gas_ConstantND = 0.0,\n  Velocity_FreeStreamND[3] = {0.0, 0.0, 0.0}, Viscosity_FreeStreamND = 0.0,\n  Tke_FreeStreamND = 0.0, Energy_FreeStreamND = 0.0,\n  Total_UnstTimeND = 0.0, Delta_UnstTimeND = 0.0, TgammaR = 0.0;\n  \n  unsigned short iDim;\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Local variables ---*/\n  \n  su2double Alpha            = config->GetAoA()*PI_NUMBER/180.0;\n  su2double Beta             = config->GetAoS()*PI_NUMBER/180.0;\n  su2double Mach             = config->GetMach();\n  su2double Reynolds         = config->GetReynolds();\n  bool compressible       = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible     = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface        = (config->GetKind_Regime() == FREESURFACE);\n  bool unsteady           = (config->GetUnsteady_Simulation() != NO);\n  bool viscous            = config->GetViscous();\n  bool grid_movement      = config->GetGrid_Movement();\n  bool gravity            = config->GetGravityForce();\n  bool turbulent          = (config->GetKind_Solver() == RANS) || (config->GetKind_Solver() == DISC_ADJ_RANS);\n  bool tkeNeeded          = ((turbulent) && (config->GetKind_Turb_Model() == SST));\n  bool free_stream_temp   = (config->GetKind_FreeStreamOption() == TEMPERATURE_FS);\n  bool standard_air       = (config->GetKind_FluidModel() == STANDARD_AIR);\n  bool reynolds_init      = (config->GetKind_InitOption() == REYNOLDS);\n  bool aeroelastic        = config->GetAeroelastic_Simulation();\n  \n  /*--- Set temperature via the flutter speed index ---*/\n  if (aeroelastic) {\n    su2double vf             = config->GetAeroelastic_Flutter_Speed_Index();\n    su2double w_alpha        = config->GetAeroelastic_Frequency_Pitch();\n    su2double b              = config->GetLength_Reynolds()/2.0; // airfoil semichord, Reynolds length is by defaul 1.0\n    su2double mu             = config->GetAeroelastic_Airfoil_Mass_Ratio();\n    // The temperature times gamma times the gas constant. Depending on the FluidModel temp is calculated below.\n    TgammaR = ((vf*vf)*(b*b)*(w_alpha*w_alpha)*mu) / (Mach*Mach);\n  }\n  \n  /*--- Compressible non dimensionalization ---*/\n  \n  if (compressible) {\n    \n    /*--- Compute the Free Stream velocity, using the Mach number ---*/\n    \n    Pressure_FreeStream = config->GetPressure_FreeStream();\n    Density_FreeStream  = config->GetDensity_FreeStream();\n    Temperature_FreeStream  = config->GetTemperature_FreeStream();\n    \n    switch (config->GetKind_FluidModel()) {\n        \n      case STANDARD_AIR:\n        \n        if (config->GetSystemMeasurements() == SI) config->SetGas_Constant(287.058);\n        else if (config->GetSystemMeasurements() == US) config->SetGas_Constant(1716.49);\n        \n        FluidModel = new CIdealGas(1.4, config->GetGas_Constant());\n        if (free_stream_temp) {\n          if (aeroelastic) {\n            Temperature_FreeStream = TgammaR / (config->GetGas_Constant()*1.4);\n            config->SetTemperature_FreeStream(Temperature_FreeStream);\n          }\n          FluidModel->SetTDState_PT(Pressure_FreeStream, Temperature_FreeStream);\n          Density_FreeStream = FluidModel->GetDensity();\n          config->SetDensity_FreeStream(Density_FreeStream);\n        }\n        else {\n          FluidModel->SetTDState_Prho(Pressure_FreeStream, Density_FreeStream );\n          Temperature_FreeStream = FluidModel->GetTemperature();\n          config->SetTemperature_FreeStream(Temperature_FreeStream);\n        }\n        break;\n        \n      case IDEAL_GAS:\n        \n        FluidModel = new CIdealGas(Gamma, config->GetGas_Constant());\n        if (free_stream_temp) {\n          FluidModel->SetTDState_PT(Pressure_FreeStream, Temperature_FreeStream);\n          Density_FreeStream = FluidModel->GetDensity();\n          config->SetDensity_FreeStream(Density_FreeStream);\n        }\n        else {\n          FluidModel->SetTDState_Prho(Pressure_FreeStream, Density_FreeStream );\n          Temperature_FreeStream = FluidModel->GetTemperature();\n          config->SetTemperature_FreeStream(Temperature_FreeStream);\n        }\n        break;\n        \n      case VW_GAS:\n        \n        FluidModel = new CVanDerWaalsGas(Gamma, config->GetGas_Constant(),\n                                         config->GetPressure_Critical(), config->GetTemperature_Critical());\n        if (free_stream_temp) {\n          FluidModel->SetTDState_PT(Pressure_FreeStream, Temperature_FreeStream);\n          Density_FreeStream = FluidModel->GetDensity();\n          config->SetDensity_FreeStream(Density_FreeStream);\n        }\n        else {\n          FluidModel->SetTDState_Prho(Pressure_FreeStream, Density_FreeStream );\n          Temperature_FreeStream = FluidModel->GetTemperature();\n          config->SetTemperature_FreeStream(Temperature_FreeStream);\n        }\n        break;\n        \n      case PR_GAS:\n        \n        FluidModel = new CPengRobinson(Gamma, config->GetGas_Constant(), config->GetPressure_Critical(),\n                                       config->GetTemperature_Critical(), config->GetAcentric_Factor());\n        if (free_stream_temp) {\n          FluidModel->SetTDState_PT(Pressure_FreeStream, Temperature_FreeStream);\n          Density_FreeStream = FluidModel->GetDensity();\n          config->SetDensity_FreeStream(Density_FreeStream);\n        }\n        else {\n          FluidModel->SetTDState_Prho(Pressure_FreeStream, Density_FreeStream );\n          Temperature_FreeStream = FluidModel->GetTemperature();\n          config->SetTemperature_FreeStream(Temperature_FreeStream);\n        }\n        break;\n        \n    }\n    \n    Mach2Vel_FreeStream = FluidModel->GetSoundSpeed();\n    \n    /*--- Compute the Free Stream velocity, using the Mach number ---*/\n    \n    if (nDim == 2) {\n      config->GetVelocity_FreeStream()[0] = cos(Alpha)*Mach*Mach2Vel_FreeStream;\n      config->GetVelocity_FreeStream()[1] = sin(Alpha)*Mach*Mach2Vel_FreeStream;\n    }\n    if (nDim == 3) {\n      config->GetVelocity_FreeStream()[0] = cos(Alpha)*cos(Beta)*Mach*Mach2Vel_FreeStream;\n      config->GetVelocity_FreeStream()[1] = sin(Beta)*Mach*Mach2Vel_FreeStream;\n      config->GetVelocity_FreeStream()[2] = sin(Alpha)*cos(Beta)*Mach*Mach2Vel_FreeStream;\n    }\n    \n    /*--- Compute the modulus of the free stream velocity ---*/\n    \n    ModVel_FreeStream = 0.0;\n    for (iDim = 0; iDim < nDim; iDim++)\n      ModVel_FreeStream += config->GetVelocity_FreeStream()[iDim]*config->GetVelocity_FreeStream()[iDim];\n    ModVel_FreeStream = sqrt(ModVel_FreeStream); config->SetModVel_FreeStream(ModVel_FreeStream);\n    \n    /*--- Viscous initialization ---*/\n    \n    if (viscous) {\n      \n      /*--- Reynolds based initialization ---*/\n      \n      if (reynolds_init) {\n        \n        /*--- First, check if there is mesh motion. If yes, use the Mach\n         number relative to the body to initialize the flow. ---*/\n        \n        if (grid_movement) Velocity_Reynolds = config->GetMach_Motion()*Mach2Vel_FreeStream;\n        else Velocity_Reynolds = ModVel_FreeStream;\n        \n        /*--- Change of measurement system, hard coded value working only with STANDAR AIR model ---*/\n        \n        if (standard_air) {\n          if (config->GetSystemMeasurements() == SI) {\n            config->SetMu_RefND(1.716E-5);\n            config->SetMu_SND(110.4);\n            config->SetMu_Temperature_RefND(273.15);\n          }\n          if (config->GetSystemMeasurements() == US) {\n            config->SetMu_RefND(3.62E-7);\n            config->SetMu_SND(198.72);\n            config->SetMu_Temperature_RefND(518.7);\n          }\n        }\n        \n        /*--- For viscous flows, pressure will be computed from a density\n         that is found from the Reynolds number. The viscosity is computed\n         from the dimensional version of Sutherland's law ---*/\n        \n        FluidModel->SetLaminarViscosityModel(config);\n        \n        Viscosity_FreeStream = FluidModel->GetLaminarViscosity();\n        config->SetViscosity_FreeStream(Viscosity_FreeStream);\n        \n        Density_FreeStream = Reynolds*Viscosity_FreeStream/(Velocity_Reynolds*config->GetLength_Reynolds());\n        config->SetDensity_FreeStream(Density_FreeStream);\n        FluidModel->SetTDState_rhoT(Density_FreeStream, Temperature_FreeStream);\n        Pressure_FreeStream = FluidModel->GetPressure();\n        config->SetPressure_FreeStream(Pressure_FreeStream);\n        Energy_FreeStream = FluidModel->GetStaticEnergy() + 0.5*ModVel_FreeStream*ModVel_FreeStream;\n        \n      }\n      \n      /*--- Thermodynamics quantities based initialization ---*/\n      \n      else {\n        \n        FluidModel->SetLaminarViscosityModel(config);\n        Viscosity_FreeStream = FluidModel->GetLaminarViscosity();\n        config->SetViscosity_FreeStream(Viscosity_FreeStream);\n        Energy_FreeStream = FluidModel->GetStaticEnergy() + 0.5*ModVel_FreeStream*ModVel_FreeStream;\n        \n      }\n      \n      /*--- Turbulence kinetic energy ---*/\n      \n      Tke_FreeStream  = 3.0/2.0*(ModVel_FreeStream*ModVel_FreeStream*config->GetTurbulenceIntensity_FreeStream()*config->GetTurbulenceIntensity_FreeStream());\n      \n    }\n    else {\n      \n      /*--- For inviscid flow, energy is calculated from the specified\n       FreeStream quantities using the proper gas law. ---*/\n      \n      Energy_FreeStream = FluidModel->GetStaticEnergy() + 0.5*ModVel_FreeStream*ModVel_FreeStream;\n      \n    }\n    \n    /*-- Compute the freestream energy. ---*/\n    \n    if (tkeNeeded) { Energy_FreeStream += Tke_FreeStream; }; config->SetEnergy_FreeStream(Energy_FreeStream);\n    \n    /*--- Compute non dimensional quantities. By definition,\n     Lref is one because we have converted the grid to meters. ---*/\n    \n    if (config->GetRef_NonDim() == DIMENSIONAL) {\n      Pressure_Ref      = 1.0;\n      Density_Ref       = 1.0;\n      Temperature_Ref   = 1.0;\n    }\n    else if (config->GetRef_NonDim() == FREESTREAM_PRESS_EQ_ONE) {\n      Pressure_Ref      = Pressure_FreeStream;     // Pressure_FreeStream = 1.0\n      Density_Ref       = Density_FreeStream;      // Density_FreeStream = 1.0\n      Temperature_Ref   = Temperature_FreeStream;  // Temperature_FreeStream = 1.0\n    }\n    else if (config->GetRef_NonDim() == FREESTREAM_VEL_EQ_MACH) {\n      Pressure_Ref      = Gamma*Pressure_FreeStream; // Pressure_FreeStream = 1.0/Gamma\n      Density_Ref       = Density_FreeStream;        // Density_FreeStream = 1.0\n      Temperature_Ref   = Temperature_FreeStream;    // Temp_FreeStream = 1.0\n    }\n    else if (config->GetRef_NonDim() == FREESTREAM_VEL_EQ_ONE) {\n      Pressure_Ref      = Mach*Mach*Gamma*Pressure_FreeStream; // Pressure_FreeStream = 1.0/(Gamma*(M_inf)^2)\n      Density_Ref       = Density_FreeStream;        // Density_FreeStream = 1.0\n      Temperature_Ref   = Temperature_FreeStream;    // Temp_FreeStream = 1.0\n    }\n    config->SetPressure_Ref(Pressure_Ref);\n    config->SetDensity_Ref(Density_Ref);\n    config->SetTemperature_Ref(Temperature_Ref);\n    \n    Length_Ref        = 1.0;                                                         config->SetLength_Ref(Length_Ref);\n    Velocity_Ref      = sqrt(config->GetPressure_Ref()/config->GetDensity_Ref());    config->SetVelocity_Ref(Velocity_Ref);\n    Time_Ref          = Length_Ref/Velocity_Ref;                                     config->SetTime_Ref(Time_Ref);\n    Omega_Ref         = Velocity_Ref/Length_Ref;                                     config->SetOmega_Ref(Omega_Ref);\n    Force_Ref         = Velocity_Ref*Velocity_Ref/Length_Ref;                        config->SetForce_Ref(Force_Ref);\n    Gas_Constant_Ref  = Velocity_Ref*Velocity_Ref/config->GetTemperature_Ref();      config->SetGas_Constant_Ref(Gas_Constant_Ref);\n    Viscosity_Ref     = config->GetDensity_Ref()*Velocity_Ref*Length_Ref;            config->SetViscosity_Ref(Viscosity_Ref);\n    Conductivity_Ref  = Viscosity_Ref*Gas_Constant_Ref;                              config->SetConductivity_Ref(Conductivity_Ref);\n    Froude            = ModVel_FreeStream/sqrt(STANDART_GRAVITY*Length_Ref);         config->SetFroude(Froude);\n    \n  }\n  \n  /*--- Incompressible non dimensionalization ---*/\n  \n  else {\n    \n    /*--- Reference length = 1 (by default)\n     Reference density   = liquid density or freestream\n     Reference viscosity = liquid viscosity or freestream\n     Reference velocity  = liquid velocity or freestream\n     Reference pressure  = Reference density * Reference velocity * Reference velocity\n     Reynolds number based on the liquid or reference viscosity ---*/\n    \n    Pressure_FreeStream = 0.0; config->SetPressure_FreeStream(Pressure_FreeStream);\n    Density_FreeStream  = config->GetDensity_FreeStream();\n    ModVel_FreeStream   = 0.0;\n    for (iDim = 0; iDim < nDim; iDim++)\n      ModVel_FreeStream += config->GetVelocity_FreeStream()[iDim]*config->GetVelocity_FreeStream()[iDim];\n    ModVel_FreeStream = sqrt(ModVel_FreeStream); config->SetModVel_FreeStream(ModVel_FreeStream);\n    \n    /*--- Additional reference values defined by Pref, Tref, Rho_ref. By definition,\n     Lref is one because we have converted the grid to meters.---*/\n    \n    Length_Ref   = config->GetLength_Reynolds();              config->SetLength_Ref(Length_Ref);\n    Density_Ref  = Density_FreeStream;                        config->SetDensity_Ref(Density_Ref);\n    Velocity_Ref = ModVel_FreeStream;                         config->SetVelocity_Ref(Velocity_Ref);\n    Pressure_Ref = Density_Ref*(Velocity_Ref*Velocity_Ref);   config->SetPressure_Ref(Pressure_Ref);\n    \n    if (viscous) {\n      Viscosity_FreeStream = config->GetViscosity_FreeStream();\n      Reynolds = Density_Ref*Velocity_Ref*Length_Ref / Viscosity_FreeStream; config->SetReynolds(Reynolds);\n      Viscosity_Ref = Viscosity_FreeStream * Reynolds;                       config->SetViscosity_Ref(Viscosity_Ref);\n    }\n    \n    /*--- Compute Mach number ---*/\n    \n    Mach = ModVel_FreeStream / sqrt(config->GetBulk_Modulus()/Density_FreeStream);   config->SetMach(Mach);\n    \n    /*--- Compute Alpha angle ---*/\n    \n    if (nDim == 2) Alpha = atan(config->GetVelocity_FreeStream()[1]/config->GetVelocity_FreeStream()[0])*180.0/PI_NUMBER;\n    else Alpha = atan(config->GetVelocity_FreeStream()[2]/config->GetVelocity_FreeStream()[0])*180.0/PI_NUMBER;\n    config->SetAoA(Alpha);\n    \n    /*--- Compute Beta angle ---*/\n    \n    if (nDim == 2) Beta = 0.0;\n    else Beta = asin(config->GetVelocity_FreeStream()[1]/ModVel_FreeStream)*180.0/PI_NUMBER;\n    config->SetAoS(Beta);\n    \n    /*--- Compute Froude ---*/\n    \n    Froude = ModVel_FreeStream/sqrt(STANDART_GRAVITY*Length_Ref);   config->SetFroude(Froude);\n    Time_Ref = Length_Ref/Velocity_Ref;                             config->SetTime_Ref(Time_Ref);\n    \n  }\n  \n  /*--- Divide by reference values, to compute the non-dimensional free-stream values ---*/\n  \n  Pressure_FreeStreamND = Pressure_FreeStream/config->GetPressure_Ref();  config->SetPressure_FreeStreamND(Pressure_FreeStreamND);\n  Density_FreeStreamND  = Density_FreeStream/config->GetDensity_Ref();    config->SetDensity_FreeStreamND(Density_FreeStreamND);\n  \n  for (iDim = 0; iDim < nDim; iDim++) {\n    Velocity_FreeStreamND[iDim] = config->GetVelocity_FreeStream()[iDim]/Velocity_Ref; config->SetVelocity_FreeStreamND(Velocity_FreeStreamND[iDim], iDim);\n  }\n  \n  Temperature_FreeStreamND = Temperature_FreeStream/config->GetTemperature_Ref(); config->SetTemperature_FreeStreamND(Temperature_FreeStreamND);\n  \n  Gas_ConstantND = config->GetGas_Constant()/Gas_Constant_Ref;    config->SetGas_ConstantND(Gas_ConstantND);\n  \n  \n  ModVel_FreeStreamND = 0.0;\n  for (iDim = 0; iDim < nDim; iDim++) ModVel_FreeStreamND += Velocity_FreeStreamND[iDim]*Velocity_FreeStreamND[iDim];\n  ModVel_FreeStreamND    = sqrt(ModVel_FreeStreamND); config->SetModVel_FreeStreamND(ModVel_FreeStreamND);\n  \n  Viscosity_FreeStreamND = Viscosity_FreeStream / Viscosity_Ref;   config->SetViscosity_FreeStreamND(Viscosity_FreeStreamND);\n  \n  Tke_FreeStream  = 3.0/2.0*(ModVel_FreeStream*ModVel_FreeStream*config->GetTurbulenceIntensity_FreeStream()*config->GetTurbulenceIntensity_FreeStream());\n  config->SetTke_FreeStream(Tke_FreeStream);\n  \n  Tke_FreeStreamND  = 3.0/2.0*(ModVel_FreeStreamND*ModVel_FreeStreamND*config->GetTurbulenceIntensity_FreeStream()*config->GetTurbulenceIntensity_FreeStream());\n  config->SetTke_FreeStreamND(Tke_FreeStreamND);\n  \n  Omega_FreeStream = Density_FreeStream*Tke_FreeStream/(Viscosity_FreeStream*config->GetTurb2LamViscRatio_FreeStream());\n  config->SetOmega_FreeStream(Omega_FreeStream);\n  \n  Omega_FreeStreamND = Density_FreeStreamND*Tke_FreeStreamND/(Viscosity_FreeStreamND*config->GetTurb2LamViscRatio_FreeStream());\n  config->SetOmega_FreeStreamND(Omega_FreeStreamND);\n  \n  /*--- Initialize the dimensionless Fluid Model that will be used to solve the dimensionless problem ---*/\n  \n  switch (config->GetKind_FluidModel()) {\n      \n    case STANDARD_AIR:\n      FluidModel = new CIdealGas(1.4, Gas_ConstantND);\n      FluidModel->SetEnergy_Prho(Pressure_FreeStreamND, Density_FreeStreamND);\n      break;\n      \n    case IDEAL_GAS:\n      FluidModel = new CIdealGas(Gamma, Gas_ConstantND);\n      FluidModel->SetEnergy_Prho(Pressure_FreeStreamND, Density_FreeStreamND);\n      break;\n      \n    case VW_GAS:\n      FluidModel = new CVanDerWaalsGas(Gamma, Gas_ConstantND, config->GetPressure_Critical() /config->GetPressure_Ref(),\n                                       config->GetTemperature_Critical()/config->GetTemperature_Ref());\n      FluidModel->SetEnergy_Prho(Pressure_FreeStreamND, Density_FreeStreamND);\n      break;\n      \n    case PR_GAS:\n      FluidModel = new CPengRobinson(Gamma, Gas_ConstantND, config->GetPressure_Critical() /config->GetPressure_Ref(),\n                                     config->GetTemperature_Critical()/config->GetTemperature_Ref(), config->GetAcentric_Factor());\n      FluidModel->SetEnergy_Prho(Pressure_FreeStreamND, Density_FreeStreamND);\n      break;\n      \n  }\n  \n  Energy_FreeStreamND = FluidModel->GetStaticEnergy() + 0.5*ModVel_FreeStreamND*ModVel_FreeStreamND;\n  \n  if (viscous) {\n    \n    /*--- Constant viscosity model ---*/\n    config->SetMu_ConstantND(config->GetMu_ConstantND()/Viscosity_Ref);\n    \n    /*--- Sutherland's model ---*/\n    \n    config->SetMu_RefND(config->GetMu_RefND()/Viscosity_Ref);\n    config->SetMu_SND(config->GetMu_SND()/config->GetTemperature_Ref());\n    config->SetMu_Temperature_RefND(config->GetMu_Temperature_RefND()/config->GetTemperature_Ref());\n    \n    /* constant thermal conductivity model */\n    config->SetKt_ConstantND(config->GetKt_ConstantND()/Conductivity_Ref);\n    \n    FluidModel->SetLaminarViscosityModel(config);\n    FluidModel->SetThermalConductivityModel(config);\n    \n  }\n  \n  if (tkeNeeded) { Energy_FreeStreamND += Tke_FreeStreamND; };  config->SetEnergy_FreeStreamND(Energy_FreeStreamND);\n  \n  Energy_Ref = Energy_FreeStream/Energy_FreeStreamND; config->SetEnergy_Ref(Energy_Ref);\n  \n  Total_UnstTimeND = config->GetTotal_UnstTime() / Time_Ref;    config->SetTotal_UnstTimeND(Total_UnstTimeND);\n  Delta_UnstTimeND = config->GetDelta_UnstTime() / Time_Ref;    config->SetDelta_UnstTimeND(Delta_UnstTimeND);\n  \n  /*--- Write output to the console if this is the master node and first domain ---*/\n  \n  if ((rank == MASTER_NODE) && (iMesh == MESH_0)) {\n    \n    cout.precision(6);\n    \n    if (compressible) {\n      if (viscous) {\n        cout << \"Viscous flow: Computing pressure using the ideal gas law\" << endl;\n        cout << \"based on the free-stream temperature and a density computed\" << endl;\n        cout << \"from the Reynolds number.\" << endl;\n      } else {\n        cout << \"Inviscid flow: Computing density based on free-stream\" << endl;\n        cout << \"temperature and pressure using the ideal gas law.\" << endl;\n      }\n    }\n    \n    if (grid_movement) cout << \"Force coefficients computed using MACH_MOTION.\" << endl;\n    else cout << \"Force coefficients computed using free-stream values.\" << endl;\n    \n    if (incompressible || freesurface) {\n      cout << \"Viscous and Inviscid flow: rho_ref, and vel_ref\" << endl;\n      cout << \"are based on the free-stream values, p_ref = rho_ref*vel_ref^2.\" << endl;\n      cout << \"The free-stream value of the pressure is 0.\" << endl;\n      cout << \"Mach number: \"<< config->GetMach() << \", computed using the Bulk modulus.\" << endl;\n      cout << \"Angle of attack (deg): \"<< config->GetAoA() << \", computed using the the free-stream velocity.\" << endl;\n      cout << \"Side slip angle (deg): \"<< config->GetAoS() << \", computed using the the free-stream velocity.\" << endl;\n      if (viscous) cout << \"Reynolds number: \" << config->GetReynolds() << \", computed using free-stream values.\"<< endl;\n      cout << \"Only dimensional computation, the grid should be dimensional.\" << endl;\n    }\n    \n    cout <<\"-- Input conditions:\"<< endl;\n    \n    if (compressible) {\n      switch (config->GetKind_FluidModel()) {\n          \n        case STANDARD_AIR:\n          cout << \"Fluid Model: STANDARD_AIR \"<< endl;\n          cout << \"Specific gas constant: \" << config->GetGas_Constant();\n          if (config->GetSystemMeasurements() == SI) cout << \" N.m/kg.K.\" << endl;\n          else if (config->GetSystemMeasurements() == US) cout << \" lbf.ft/slug.R.\" << endl;\n          cout << \"Specific gas constant (non-dim): \" << config->GetGas_ConstantND()<< endl;\n          cout << \"Specific Heat Ratio: \"<< Gamma << endl;\n          break;\n          \n        case IDEAL_GAS:\n          cout << \"Fluid Model: IDEAL_GAS \"<< endl;\n          cout << \"Specific gas constant: \" << config->GetGas_Constant() << \" N.m/kg.K.\" << endl;\n          cout << \"Specific gas constant (non-dim): \" << config->GetGas_ConstantND()<< endl;\n          cout << \"Specific Heat Ratio: \"<< Gamma << endl;\n          break;\n          \n        case VW_GAS:\n          cout << \"Fluid Model: Van der Waals \"<< endl;\n          cout << \"Specific gas constant: \" << config->GetGas_Constant() << \" N.m/kg.K.\" << endl;\n          cout << \"Specific gas constant (non-dim): \" << config->GetGas_ConstantND()<< endl;\n          cout << \"Specific Heat Ratio: \"<< Gamma << endl;\n          cout << \"Critical Pressure:   \" << config->GetPressure_Critical()  << \" Pa.\" << endl;\n          cout << \"Critical Temperature:  \" << config->GetTemperature_Critical() << \" K.\" << endl;\n          cout << \"Critical Pressure (non-dim):   \" << config->GetPressure_Critical() /config->GetPressure_Ref() << endl;\n          cout << \"Critical Temperature (non-dim) :  \" << config->GetTemperature_Critical() /config->GetTemperature_Ref() << endl;\n          break;\n          \n        case PR_GAS:\n          cout << \"Fluid Model: Peng-Robinson \"<< endl;\n          cout << \"Specific gas constant: \" << config->GetGas_Constant() << \" N.m/kg.K.\" << endl;\n          cout << \"Specific gas constant (non-dim): \" << config->GetGas_ConstantND()<< endl;\n          cout << \"Specific Heat Ratio: \"<< Gamma << endl;\n          cout << \"Critical Pressure:   \" << config->GetPressure_Critical()  << \" Pa.\" << endl;\n          cout << \"Critical Temperature:  \" << config->GetTemperature_Critical() << \" K.\" << endl;\n          cout << \"Critical Pressure (non-dim):   \" << config->GetPressure_Critical() /config->GetPressure_Ref() << endl;\n          cout << \"Critical Temperature (non-dim) :  \" << config->GetTemperature_Critical() /config->GetTemperature_Ref() << endl;\n          break;\n          \n      }\n      if (viscous) {\n        switch (config->GetKind_ViscosityModel()) {\n            \n          case CONSTANT_VISCOSITY:\n            cout << \"Viscosity Model: CONSTANT_VISCOSITY  \"<< endl;\n            cout << \"Laminar Viscosity: \" << config->GetMu_ConstantND()*Viscosity_Ref;\n            if (config->GetSystemMeasurements() == SI) cout << \" N.s/m^2.\" << endl;\n            else if (config->GetSystemMeasurements() == US) cout << \" lbf.s/ft^2.\" << endl;\n            cout << \"Laminar Viscosity (non-dim): \" << config->GetMu_ConstantND()<< endl;\n            break;\n            \n          case SUTHERLAND:\n            cout << \"Viscosity Model: SUTHERLAND \"<< endl;\n            cout << \"Ref. Laminar Viscosity: \" << config->GetMu_RefND()*Viscosity_Ref;\n            if (config->GetSystemMeasurements() == SI) cout << \" N.s/m^2.\" << endl;\n            else if (config->GetSystemMeasurements() == US) cout << \" lbf.s/ft^2.\" << endl;\n            cout << \"Ref. Temperature: \" << config->GetMu_Temperature_RefND()*config->GetTemperature_Ref();\n            if (config->GetSystemMeasurements() == SI) cout << \" K.\" << endl;\n            else if (config->GetSystemMeasurements() == US) cout << \" R.\" << endl;\n            cout << \"Sutherland Constant: \"<< config->GetMu_SND()*config->GetTemperature_Ref();\n            if (config->GetSystemMeasurements() == SI) cout << \" K.\" << endl;\n            else if (config->GetSystemMeasurements() == US) cout << \" R.\" << endl;\n            cout << \"Laminar Viscosity (non-dim): \" << config->GetMu_ConstantND()<< endl;\n            cout << \"Ref. Temperature (non-dim): \" << config->GetMu_Temperature_RefND()<< endl;\n            cout << \"Sutherland constant (non-dim): \"<< config->GetMu_SND()<< endl;\n            break;\n            \n        }\n        switch (config->GetKind_ConductivityModel()) {\n            \n          case CONSTANT_PRANDTL:\n            cout << \"Conductivity Model: CONSTANT_PRANDTL  \"<< endl;\n            cout << \"Prandtl: \" << config->GetPrandtl_Lam()<< endl;\n            break;\n            \n          case CONSTANT_CONDUCTIVITY:\n            cout << \"Conductivity Model: CONSTANT_CONDUCTIVITY \"<< endl;\n            cout << \"Molecular Conductivity: \" << config->GetKt_ConstantND()*Conductivity_Ref<< \" W/m^2.K.\" << endl;\n            cout << \"Molecular Conductivity (non-dim): \" << config->GetKt_ConstantND()<< endl;\n            break;\n            \n        }\n      }\n    }\n    \n    if (incompressible || freesurface) {\n      cout << \"Bulk modulus: \" << config->GetBulk_Modulus();\n      if (config->GetSystemMeasurements() == SI) cout << \" Pa.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" psf.\" << endl;\n      cout << \"Artificial compressibility factor: \" << config->GetArtComp_Factor();\n      if (config->GetSystemMeasurements() == SI) cout << \" Pa.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" psf.\" << endl;\n    }\n    \n    cout << \"Free-stream static pressure: \" << config->GetPressure_FreeStream();\n    if (config->GetSystemMeasurements() == SI) cout << \" Pa.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" psf.\" << endl;\n    \n    cout << \"Free-stream total pressure: \" << config->GetPressure_FreeStream() * pow( 1.0+Mach*Mach*0.5*(Gamma-1.0), Gamma/(Gamma-1.0) );\n    if (config->GetSystemMeasurements() == SI) cout << \" Pa.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" psf.\" << endl;\n    \n    if (compressible) {\n      cout << \"Free-stream temperature: \" << config->GetTemperature_FreeStream();\n      if (config->GetSystemMeasurements() == SI) cout << \" K.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" R.\" << endl;\n    }\n    \n    cout << \"Free-stream density: \" << config->GetDensity_FreeStream();\n    if (config->GetSystemMeasurements() == SI) cout << \" kg/m^3.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" slug/ft^3.\" << endl;\n    \n    if (nDim == 2) {\n      cout << \"Free-stream velocity: (\" << config->GetVelocity_FreeStream()[0] << \", \";\n      cout << config->GetVelocity_FreeStream()[1] << \")\";\n    }\n    if (nDim == 3) {\n      cout << \"Free-stream velocity: (\" << config->GetVelocity_FreeStream()[0] << \", \";\n      cout << config->GetVelocity_FreeStream()[1] << \", \" << config->GetVelocity_FreeStream()[2] << \")\";\n    }\n    if (config->GetSystemMeasurements() == SI) cout << \" m/s. \";\n    else if (config->GetSystemMeasurements() == US) cout << \" ft/s. \";\n    \n    cout << \"Magnitude: \"\t<< config->GetModVel_FreeStream();\n    if (config->GetSystemMeasurements() == SI) cout << \" m/s.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" ft/s.\" << endl;\n    \n    if (compressible) {\n      cout << \"Free-stream total energy per unit mass: \" << config->GetEnergy_FreeStream();\n      if (config->GetSystemMeasurements() == SI) cout << \" m^2/s^2.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" ft^2/s^2.\" << endl;\n    }\n    \n    if (viscous) {\n      cout << \"Free-stream viscosity: \" << config->GetViscosity_FreeStream();\n      if (config->GetSystemMeasurements() == SI) cout << \" N.s/m^2.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" lbf.s/ft^2.\" << endl;\n      if (turbulent) {\n        cout << \"Free-stream turb. kinetic energy per unit mass: \" << config->GetTke_FreeStream();\n        if (config->GetSystemMeasurements() == SI) cout << \" m^2/s^2.\" << endl;\n        else if (config->GetSystemMeasurements() == US) cout << \" ft^2/s^2.\" << endl;\n        cout << \"Free-stream specific dissipation: \" << config->GetOmega_FreeStream();\n        if (config->GetSystemMeasurements() == SI) cout << \" 1/s.\" << endl;\n        else if (config->GetSystemMeasurements() == US) cout << \" 1/s.\" << endl;\n      }\n    }\n    \n    if (unsteady) { cout << \"Total time: \" << config->GetTotal_UnstTime() << \" s. Time step: \" << config->GetDelta_UnstTime() << \" s.\" << endl; }\n    \n    /*--- Print out reference values. ---*/\n    \n    cout <<\"-- Reference values:\"<< endl;\n    \n    if (compressible) {\n      cout << \"Reference specific gas constant: \" << config->GetGas_Constant_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \" N.m/kg.K.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" lbf.ft/slug.R.\" << endl;\n    }\n    \n    cout << \"Reference pressure: \" << config->GetPressure_Ref();\n    if (config->GetSystemMeasurements() == SI) cout << \" Pa.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" psf.\" << endl;\n    \n    if (compressible) {\n      cout << \"Reference temperature: \" << config->GetTemperature_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \" K.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" R.\" << endl;\n    }\n    \n    cout << \"Reference density: \" << config->GetDensity_Ref();\n    if (config->GetSystemMeasurements() == SI) cout << \" kg/m^3.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" slug/ft^3.\" << endl;\n    \n    cout << \"Reference velocity: \" << config->GetVelocity_Ref();\n    if (config->GetSystemMeasurements() == SI) cout << \" m/s.\" << endl;\n    else if (config->GetSystemMeasurements() == US) cout << \" ft/s.\" << endl;\n    \n    if (compressible) {\n      cout << \"Reference energy per unit mass: \" << config->GetEnergy_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \" m^2/s^2.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" ft^2/s^2.\" << endl;\n    }\n    \n    if (incompressible || freesurface) {\n      cout << \"Reference length: \" << config->GetLength_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \" m.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" in.\" << endl;\n    }\n    \n    if (viscous) {\n      cout << \"Reference viscosity: \" << config->GetViscosity_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \" N.s/m^2.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" lbf.s/ft^2.\" << endl;\n      if (compressible){\n        cout << \"Reference conductivity: \" << config->GetConductivity_Ref();\n        if (config->GetSystemMeasurements() == SI) cout << \" W/m^2.K.\" << endl;\n        else if (config->GetSystemMeasurements() == US) cout << \" lbf/ft.s.R.\" << endl;\n      }\n    }\n    \n    \n    if (unsteady) cout << \"Reference time: \" << config->GetTime_Ref() <<\" s.\" << endl;\n    \n    /*--- Print out resulting non-dim values here. ---*/\n    \n    cout << \"-- Resulting non-dimensional state:\" << endl;\n    cout << \"Mach number (non-dim): \" << config->GetMach() << endl;\n    if (viscous) {\n      cout << \"Reynolds number (non-dim): \" << config->GetReynolds() <<\". Re length: \" << config->GetLength_Reynolds();\n      if (config->GetSystemMeasurements() == SI) cout << \" m.\" << endl;\n      else if (config->GetSystemMeasurements() == US) cout << \" ft.\" << endl;\n    }\n    if (gravity) {\n      cout << \"Froude number (non-dim): \" << Froude << endl;\n      cout << \"Lenght of the baseline wave (non-dim): \" << 2.0*PI_NUMBER*Froude*Froude << endl;\n    }\n    \n    if (compressible) {\n      cout << \"Specific gas constant (non-dim): \" << config->GetGas_ConstantND() << endl;\n      cout << \"Free-stream temperature (non-dim): \" << config->GetTemperature_FreeStreamND() << endl;\n    }\n    \n    cout << \"Free-stream pressure (non-dim): \" << config->GetPressure_FreeStreamND() << endl;\n    \n    cout << \"Free-stream density (non-dim): \" << config->GetDensity_FreeStreamND() << endl;\n    \n    if (nDim == 2) {\n      cout << \"Free-stream velocity (non-dim): (\" << config->GetVelocity_FreeStreamND()[0] << \", \";\n      cout << config->GetVelocity_FreeStreamND()[1] << \"). \";\n    } else {\n      cout << \"Free-stream velocity (non-dim): (\" << config->GetVelocity_FreeStreamND()[0] << \", \";\n      cout << config->GetVelocity_FreeStreamND()[1] << \", \" << config->GetVelocity_FreeStreamND()[2] << \"). \";\n    }\n    cout << \"Magnitude: \"\t << config->GetModVel_FreeStreamND() << endl;\n    \n    if (compressible)\n      cout << \"Free-stream total energy per unit mass (non-dim): \" << config->GetEnergy_FreeStreamND() << endl;\n    \n    if (viscous) {\n      cout << \"Free-stream viscosity (non-dim): \" << config->GetViscosity_FreeStreamND() << endl;\n      if (turbulent) {\n        cout << \"Free-stream turb. kinetic energy (non-dim): \" << config->GetTke_FreeStreamND() << endl;\n        cout << \"Free-stream specific dissipation (non-dim): \" << config->GetOmega_FreeStreamND() << endl;\n      }\n    }\n    \n    if (unsteady) {\n      cout << \"Total time (non-dim): \" << config->GetTotal_UnstTimeND() << endl;\n      cout << \"Time step (non-dim): \" << config->GetDelta_UnstTimeND() << endl;\n    }\n    \n    cout << endl;\n    \n  }\n  \n}\n\nvoid CEulerSolver::SetInitialCondition(CGeometry **geometry, CSolver ***solver_container, CConfig *config, unsigned long ExtIter) {\n  \n  unsigned long iPoint, Point_Fine;\n  unsigned short iMesh, iChildren, iVar, iDim;\n  su2double Density, Pressure, yFreeSurface, PressFreeSurface, Froude, yCoord, Velx, Vely, Velz, RhoVelx, RhoVely, RhoVelz, YCoord = 0.0,\n  ZCoord = 0.0, DensityInc, ViscosityInc, Heaviside, LevelSet, lambda, Area_Children, Area_Parent, LevelSet_Fine, epsilon,\n  *Solution_Fine, *Solution, PressRef, yCoordRef;\n  \n  unsigned short nDim = geometry[MESH_0]->GetnDim();\n  bool restart = (config->GetRestart() || config->GetRestart_Flow());\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool rans = ((config->GetKind_Solver() == RANS) ||\n               (config->GetKind_Solver() == ADJ_RANS) ||\n               (config->GetKind_Solver() == DISC_ADJ_RANS));\n\tbool dual_time = ((config->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n                    (config->GetUnsteady_Simulation() == DT_STEPPING_2ND));\n  bool gravity = (config->GetGravityForce() == YES);\n  bool engine_intake = config->GetEngine_Intake();\n  \n  \n  /*--- Set the location and value of the free-surface ---*/\n  \n  if (freesurface) {\n    \n    for (iMesh = 0; iMesh <= config->GetnMGLevels(); iMesh++) {\n      \n      for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n        \n        /*--- Set initial boundary condition at iter 0 ---*/\n        \n        if ((ExtIter == 0) && (!restart)) {\n          \n          /*--- Compute the level set value in all the MG levels (basic case, distance to\n           the Y/Z plane, and interpolate the solution to the coarse levels ---*/\n          \n          if (iMesh == MESH_0) {\n            YCoord = geometry[iMesh]->node[iPoint]->GetCoord(1);\n            if (nDim == 2) LevelSet = YCoord - config->GetFreeSurface_Zero();\n            else {\n              ZCoord = geometry[iMesh]->node[iPoint]->GetCoord(2);\n              LevelSet = ZCoord - config->GetFreeSurface_Zero();\n            }\n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(nDim+1, LevelSet);\n          }\n          else {\n            Area_Parent = geometry[iMesh]->node[iPoint]->GetVolume();\n            LevelSet = 0.0;\n            for (iChildren = 0; iChildren < geometry[iMesh]->node[iPoint]->GetnChildren_CV(); iChildren++) {\n              Point_Fine = geometry[iMesh]->node[iPoint]->GetChildren_CV(iChildren);\n              Area_Children = geometry[iMesh-1]->node[Point_Fine]->GetVolume();\n              LevelSet_Fine = solver_container[iMesh-1][FLOW_SOL]->node[Point_Fine]->GetSolution(nDim+1);\n              LevelSet += LevelSet_Fine*Area_Children/Area_Parent;\n            }\n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(nDim+1, LevelSet);\n          }\n          \n          /*--- Compute the flow solution using the level set value. ---*/\n          \n          epsilon = config->GetFreeSurface_Thickness();\n          Heaviside = 0.0;\n          if (LevelSet < -epsilon) Heaviside = 1.0;\n          if (fabs(LevelSet) <= epsilon) Heaviside = 1.0 - (0.5*(1.0+(LevelSet/epsilon)+(1.0/PI_NUMBER)*sin(PI_NUMBER*LevelSet/epsilon)));\n          if (LevelSet > epsilon) Heaviside = 0.0;\n          \n          /*--- Set the value of the incompressible density for free surface flows (density ratio g/l) ---*/\n          \n          lambda = config->GetRatioDensity();\n          DensityInc = (lambda + (1.0 - lambda)*Heaviside)*config->GetDensity_FreeStreamND();\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetDensityInc(DensityInc);\n          \n          /*--- Set the value of the incompressible viscosity for free surface flows (viscosity ratio g/l) ---*/\n          \n          lambda = config->GetRatioViscosity();\n          ViscosityInc = (lambda + (1.0 - lambda)*Heaviside)*config->GetViscosity_FreeStreamND();\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetLaminarViscosityInc(ViscosityInc);\n          \n          /*--- Update solution with the new pressure ---*/\n          \n          yFreeSurface = config->GetFreeSurface_Zero();\n          PressFreeSurface = solver_container[iMesh][FLOW_SOL]->GetPressure_Inf();\n          Density = solver_container[iMesh][FLOW_SOL]->node[iPoint]->GetDensityInc();\n          Froude = config->GetFroude();\n          yCoord = geometry[iMesh]->node[iPoint]->GetCoord(nDim-1);\n          Pressure = PressFreeSurface + Density*((yFreeSurface-yCoord)/(Froude*Froude));\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(0, Pressure);\n          \n          /*--- Update solution with the new velocity ---*/\n          \n          Velx = solver_container[iMesh][FLOW_SOL]->GetVelocity_Inf(0);\n          Vely = solver_container[iMesh][FLOW_SOL]->GetVelocity_Inf(1);\n          RhoVelx = Velx * Density; RhoVely = Vely * Density;\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(1, RhoVelx);\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(2, RhoVely);\n          if (nDim == 3) {\n            Velz = solver_container[iMesh][FLOW_SOL]->GetVelocity_Inf(2);\n            RhoVelz = Velz * Density;\n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(3, RhoVelz);\n          }\n          \n        }\n        \n      }\n      \n      /*--- Set the MPI communication ---*/\n      \n      solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution(geometry[iMesh], config);\n      solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution_Old(geometry[iMesh], config);\n      \n    }\n    \n  }\n  \n  /*--- Set the pressure value in simulations with gravity ---*/\n  \n  \n  if (incompressible && gravity ) {\n    \n    \n    for (iMesh = 0; iMesh <= config->GetnMGLevels(); iMesh++) {\n      \n      for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n        \n        /*--- Set initial boundary condition at iter 0 ---*/\n        \n        if ((ExtIter == 0) && (!restart)) {\n          \n          /*--- Update solution with the new pressure ---*/\n          \n          PressRef = solver_container[iMesh][FLOW_SOL]->GetPressure_Inf();\n          Density = solver_container[iMesh][FLOW_SOL]->GetDensity_Inf();\n          yCoordRef = 0.0;\n          yCoord = geometry[iMesh]->node[iPoint]->GetCoord(nDim-1);\n          Pressure = PressRef + Density*((yCoordRef-yCoord)/(config->GetFroude()*config->GetFroude()));\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(0, Pressure);\n          \n        }\n        \n      }\n      \n      /*--- Set the MPI communication ---*/\n      \n      solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution(geometry[iMesh], config);\n      solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution_Old(geometry[iMesh], config);\n      \n    }\n    \n  }\n  \n  \n  /*--- Set subsonic initial condition for engine intakes ---*/\n  \n  if (engine_intake) {\n    \n    /*--- Set initial boundary condition at iteration 0 ---*/\n    \n    if ((ExtIter == 0) && (!restart)) {\n      \n      su2double Velocity_Box[3] = {0.0, 0.0, 0.0}, Velocity_BoxND[3] = {0.0, 0.0, 0.0}, Viscosity_Box,\n      Density_Box, Density_BoxND, Pressure_Box, Pressure_BoxND, ModVel_Box, ModVel_BoxND, Energy_BoxND,\n      T_ref = 0.0, S = 0.0, Mu_ref = 0.0, *Coord, MinCoordValues[3],\n      MaxCoordValues[3], *Subsonic_Engine_Box;\n      \n      su2double Mach = 0.40;\n      su2double Alpha = config->GetAoA()*PI_NUMBER/180.0;\n      su2double Beta  = config->GetAoS()*PI_NUMBER/180.0;\n      \n      su2double Gamma_Minus_One = Gamma - 1.0;\n      su2double Gas_Constant = config->GetGas_Constant();\n      \n      su2double Temperature_Box = config->GetTemperature_FreeStream();\n      su2double Mach2Vel_Box = sqrt(Gamma*Gas_Constant*Temperature_Box);\n      \n      for (iMesh = 0; iMesh <= config->GetnMGLevels(); iMesh++) {\n        \n        for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n          \n          Velocity_Box[0] = cos(Alpha)*cos(Beta)*Mach*Mach2Vel_Box;\n          Velocity_Box[1] = sin(Beta)*Mach*Mach2Vel_Box;\n          Velocity_Box[2] = sin(Alpha)*cos(Beta)*Mach*Mach2Vel_Box;\n          \n          ModVel_Box = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            ModVel_Box += Velocity_Box[iDim]*Velocity_Box[iDim];\n          }\n          ModVel_Box = sqrt(ModVel_Box);\n          \n          if (config->GetViscous()) {\n            if (config->GetSystemMeasurements() == SI) { T_ref = 273.15; S = 110.4; Mu_ref = 1.716E-5; }\n            if (config->GetSystemMeasurements() == US) { T_ref = 518.7; S = 198.72; Mu_ref = 3.62E-7; }\n            Viscosity_Box = Mu_ref*(pow(Temperature_Box/T_ref, 1.5) * (T_ref+S)/(Temperature_Box+S));\n            Density_Box   = config->GetReynolds()*Viscosity_Box/(ModVel_Box*config->GetLength_Reynolds());\n            Pressure_Box  = Density_Box*Gas_Constant*Temperature_Box;\n          }\n          else {\n            Pressure_Box = config->GetPressure_FreeStream();\n            Density_Box = Pressure_Box/(Gas_Constant*Temperature_Box);\n          }\n          \n          Density_BoxND  = Density_Box/config->GetDensity_Ref();\n          Pressure_BoxND = Pressure_Box/config->GetPressure_Ref();\n          \n          for (iDim = 0; iDim < nDim; iDim++) {\n            Velocity_BoxND[iDim] = Velocity_Box[iDim]/config->GetVelocity_Ref();\n          }\n          \n          ModVel_BoxND = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            ModVel_BoxND += Velocity_BoxND[iDim]*Velocity_BoxND[iDim];\n          }\n          ModVel_BoxND = sqrt(ModVel_BoxND);\n          \n          Energy_BoxND = Pressure_BoxND/(Density_BoxND*Gamma_Minus_One)+0.5*ModVel_BoxND*ModVel_BoxND;\n          \n          Coord = geometry[iMesh]->node[iPoint]->GetCoord();\n          \n          Subsonic_Engine_Box = config->GetSubsonic_Engine_Box();\n          \n          MinCoordValues[0] = Subsonic_Engine_Box[0]; MinCoordValues[1] = Subsonic_Engine_Box[1]; MinCoordValues[2] = Subsonic_Engine_Box[2];\n          MaxCoordValues[0] = Subsonic_Engine_Box[3]; MaxCoordValues[1] = Subsonic_Engine_Box[4]; MaxCoordValues[2] = Subsonic_Engine_Box[5];\n          \n          if (((Coord[0] >= MinCoordValues[0]) && (Coord[0] <= MaxCoordValues[0])) &&\n              ((Coord[1] >= MinCoordValues[1]) && (Coord[1] <= MaxCoordValues[1])) &&\n              ((Coord[2] >= MinCoordValues[2]) && (Coord[2] <= MaxCoordValues[2]))) {\n            \n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(0, Density_BoxND);\n            for (iDim = 0; iDim < nDim; iDim++)\n              solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(iDim+1, Density_BoxND*Velocity_BoxND[iDim]);\n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(nVar-1, Density_BoxND*Energy_BoxND);\n            \n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution_Old(0, Density_BoxND);\n            for (iDim = 0; iDim < nDim; iDim++)\n              solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution_Old(iDim+1, Density_BoxND*Velocity_BoxND[iDim]);\n            solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution_Old(nVar-1, Density_BoxND*Energy_BoxND);\n            \n          }\n          \n        }\n        \n        /*--- Set the MPI communication ---*/\n        \n        solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution(geometry[iMesh], config);\n        solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution_Old(geometry[iMesh], config);\n        \n      }\n      \n    }\n    \n  }\n  \n  /*--- If restart solution, then interpolate the flow solution to\n   all the multigrid levels, this is important with the dual time strategy ---*/\n  \n  if (restart && (ExtIter == 0)) {\n    \n    Solution = new su2double[nVar];\n    for (iMesh = 1; iMesh <= config->GetnMGLevels(); iMesh++) {\n      for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n        Area_Parent = geometry[iMesh]->node[iPoint]->GetVolume();\n        for (iVar = 0; iVar < nVar; iVar++) Solution[iVar] = 0.0;\n        for (iChildren = 0; iChildren < geometry[iMesh]->node[iPoint]->GetnChildren_CV(); iChildren++) {\n          Point_Fine = geometry[iMesh]->node[iPoint]->GetChildren_CV(iChildren);\n          Area_Children = geometry[iMesh-1]->node[Point_Fine]->GetVolume();\n          Solution_Fine = solver_container[iMesh-1][FLOW_SOL]->node[Point_Fine]->GetSolution();\n          for (iVar = 0; iVar < nVar; iVar++) {\n            Solution[iVar] += Solution_Fine[iVar]*Area_Children/Area_Parent;\n          }\n        }\n        solver_container[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(Solution);\n      }\n      solver_container[iMesh][FLOW_SOL]->Set_MPI_Solution(geometry[iMesh], config);\n    }\n    delete [] Solution;\n    \n    /*--- Interpolate the turblence variable also, if needed ---*/\n    \n    if (rans) {\n      \n      unsigned short nVar_Turb = solver_container[MESH_0][TURB_SOL]->GetnVar();\n      Solution = new su2double[nVar_Turb];\n      for (iMesh = 1; iMesh <= config->GetnMGLevels(); iMesh++) {\n        for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n          Area_Parent = geometry[iMesh]->node[iPoint]->GetVolume();\n          for (iVar = 0; iVar < nVar_Turb; iVar++) Solution[iVar] = 0.0;\n          for (iChildren = 0; iChildren < geometry[iMesh]->node[iPoint]->GetnChildren_CV(); iChildren++) {\n            Point_Fine = geometry[iMesh]->node[iPoint]->GetChildren_CV(iChildren);\n            Area_Children = geometry[iMesh-1]->node[Point_Fine]->GetVolume();\n            Solution_Fine = solver_container[iMesh-1][TURB_SOL]->node[Point_Fine]->GetSolution();\n            for (iVar = 0; iVar < nVar_Turb; iVar++) {\n              Solution[iVar] += Solution_Fine[iVar]*Area_Children/Area_Parent;\n            }\n          }\n          solver_container[iMesh][TURB_SOL]->node[iPoint]->SetSolution(Solution);\n        }\n        solver_container[iMesh][TURB_SOL]->Set_MPI_Solution(geometry[iMesh], config);\n        solver_container[iMesh][TURB_SOL]->Postprocessing(geometry[iMesh], solver_container[iMesh], config, iMesh);\n      }\n      delete [] Solution;\n    }\n    \n  }\n  \n  /*--- The value of the solution for the first iteration of the dual time ---*/\n  \n  if (dual_time && (ExtIter == 0 || (restart && (long)ExtIter == config->GetUnst_RestartIter()))) {\n    \n    /*--- Push back the initial condition to previous solution containers\n     for a 1st-order restart or when simply intitializing to freestream. ---*/\n    \n    for (iMesh = 0; iMesh <= config->GetnMGLevels(); iMesh++) {\n      for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n        solver_container[iMesh][FLOW_SOL]->node[iPoint]->Set_Solution_time_n();\n        solver_container[iMesh][FLOW_SOL]->node[iPoint]->Set_Solution_time_n1();\n        if (rans) {\n          solver_container[iMesh][TURB_SOL]->node[iPoint]->Set_Solution_time_n();\n          solver_container[iMesh][TURB_SOL]->node[iPoint]->Set_Solution_time_n1();\n        }\n      }\n    }\n    \n    if ((restart && (long)ExtIter == config->GetUnst_RestartIter()) &&\n        (config->GetUnsteady_Simulation() == DT_STEPPING_2ND)) {\n      \n      /*--- Load an additional restart file for a 2nd-order restart ---*/\n      \n      solver_container[MESH_0][FLOW_SOL]->LoadRestart(geometry, solver_container, config, SU2_TYPE::Int(config->GetUnst_RestartIter()-1));\n      \n      /*--- Load an additional restart file for the turbulence model ---*/\n      if (rans)\n        solver_container[MESH_0][TURB_SOL]->LoadRestart(geometry, solver_container, config, SU2_TYPE::Int(config->GetUnst_RestartIter()-1));\n      \n      /*--- Push back this new solution to time level N. ---*/\n      \n      for (iMesh = 0; iMesh <= config->GetnMGLevels(); iMesh++) {\n        for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n          solver_container[iMesh][FLOW_SOL]->node[iPoint]->Set_Solution_time_n();\n          if (rans) {\n            solver_container[iMesh][TURB_SOL]->node[iPoint]->Set_Solution_time_n();\n          }\n        }\n      }\n    }\n  }\n}\n\nvoid CEulerSolver::Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output) {\n  \n  unsigned long ErrorCounter = 0;\n  \n#ifdef HAVE_MPI\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  unsigned long ExtIter = config->GetExtIter();\n  bool adjoint          = config->GetAdjoint();\n  bool implicit         = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool low_fidelity     = (config->GetLowFidelitySim() && (iMesh == MESH_1));\n  bool second_order     = ((config->GetSpatialOrder_Flow() == SECOND_ORDER) || (config->GetSpatialOrder_Flow() == SECOND_ORDER_LIMITER) || (adjoint && config->GetKind_ConvNumScheme_AdjFlow() == ROE));\n  bool limiter          = ((config->GetSpatialOrder_Flow() == SECOND_ORDER_LIMITER) && (!low_fidelity) && (ExtIter <= config->GetLimiterIter()));\n  bool center           = (config->GetKind_ConvNumScheme_Flow() == SPACE_CENTERED) || (adjoint && config->GetKind_ConvNumScheme_AdjFlow() == SPACE_CENTERED);\n  bool center_jst       = center && (config->GetKind_Centered_Flow() == JST);\n  bool freesurface      = (config->GetKind_Regime() == FREESURFACE);\n  bool engine           = ((config->GetnMarker_EngineInflow() != 0) || (config->GetnMarker_EngineBleed() != 0) || (config->GetnMarker_EngineExhaust() != 0));\n  bool actuator_disk    = ((config->GetnMarker_ActDisk_Inlet() != 0) || (config->GetnMarker_ActDisk_Outlet() != 0));\n  bool fixed_cl         = config->GetFixed_CL_Mode();\n  \n  /*--- Compute the engine properties ---*/\n  \n  if (engine) { GetEngine_Properties(geometry, config, iMesh, Output); }\n  \n  /*--- Compute the actuator disk properties ---*/\n  \n  if (actuator_disk) { GetActuatorDisk_Properties(geometry, config, iMesh, Output); }\n  \n  /*--- Update the angle of attack at the far-field for fixed CL calculations. ---*/\n  \n  if (fixed_cl) { SetFarfield_AoA(geometry, solver_container, config, iMesh, Output); }\n  \n  /*--- Compute distance function to zero level set (Set LevelSet and Distance primitive variables)---*/\n  \n  if (freesurface) { SetFreeSurface_Distance(geometry, config); }\n  \n  /*--- Set the primitive variables ---*/\n  \n  ErrorCounter = SetPrimitive_Variables(solver_container, config, Output);\n  \n  /*--- Upwind second order reconstruction ---*/\n  \n  if ((second_order && !center) && ((iMesh == MESH_0) || low_fidelity) && !Output) {\n    \n    /*--- Gradient computation ---*/\n    \n    if (config->GetKind_Gradient_Method() == GREEN_GAUSS) {\n      SetPrimitive_Gradient_GG(geometry, config);\n      //    \tif (compressible && !ideal_gas) SetSecondary_Gradient_GG(geometry, config);\n    }\n    if (config->GetKind_Gradient_Method() == WEIGHTED_LEAST_SQUARES) {\n      SetPrimitive_Gradient_LS(geometry, config);\n      //    \tif (compressible && !ideal_gas) SetSecondary_Gradient_LS(geometry, config);\n    }\n    \n    \n    /*--- Limiter computation ---*/\n    \n    if ((limiter) && (iMesh == MESH_0) && !Output) {\n      SetPrimitive_Limiter(geometry, config);\n      //    \tif (compressible && !ideal_gas) SetSecondary_Limiter(geometry, config);\n    }\n    \n  }\n  \n  /*--- Artificial dissipation ---*/\n  \n  if (center && !Output) {\n    SetMax_Eigenvalue(geometry, config);\n    if ((center_jst) && ((iMesh == MESH_0) || low_fidelity)) {\n      SetDissipation_Switch(geometry, config);\n      SetUndivided_Laplacian(geometry, config);\n    }\n  }\n  \n  /*--- Initialize the Jacobian matrices ---*/\n  \n  if (implicit && !config->GetDiscrete_Adjoint()) Jacobian.SetValZero();\n  \n  /*--- Error message ---*/\n  \n  if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n#ifdef HAVE_MPI\n    unsigned long MyErrorCounter = ErrorCounter; ErrorCounter = 0;\n    SU2_MPI::Allreduce(&MyErrorCounter, &ErrorCounter, 1, MPI_UNSIGNED_LONG, MPI_SUM, MPI_COMM_WORLD);\n#endif\n    if (iMesh == MESH_0) config->SetNonphysical_Points(ErrorCounter);\n  }\n  \n}\n\nvoid CEulerSolver::Postprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                  unsigned short iMesh) { }\n\nunsigned long CEulerSolver::SetPrimitive_Variables(CSolver **solver_container, CConfig *config, bool Output) {\n  \n  unsigned long iPoint, ErrorCounter = 0;\n  bool RightSol = true;\n  \n  bool compressible         = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible       = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface          = (config->GetKind_Regime() == FREESURFACE);\n  \n  for (iPoint = 0; iPoint < nPoint; iPoint ++) {\n    \n    /*--- Initialize the non-physical points vector ---*/\n    \n    node[iPoint]->SetNon_Physical(false);\n    \n    /*--- Incompressible flow, primitive variables nDim+3, (P, vx, vy, vz, rho, beta),\n     FreeSurface Incompressible flow, primitive variables nDim+4, (P, vx, vy, vz, rho, beta, dist),\n     Compressible flow, primitive variables nDim+5, (T, vx, vy, vz, P, rho, h, c, lamMu, eddyMu, ThCond, Cp) ---*/\n    \n    if (compressible) {\n      RightSol = node[iPoint]->SetPrimVar_Compressible(FluidModel);\n      node[iPoint]->SetSecondaryVar_Compressible(FluidModel);\n    }\n    \n    if (incompressible) {\n      RightSol = node[iPoint]->SetPrimVar_Incompressible(Density_Inf, config);\n    }\n    \n    \n    if (freesurface){\n      RightSol = node[iPoint]->SetPrimVar_FreeSurface(config);\n    }\n    \n    if (!RightSol) { node[iPoint]->SetNon_Physical(true); ErrorCounter++; }\n    \n    /*--- Initialize the convective, source and viscous residual vector ---*/\n    \n    if (!Output) LinSysRes.SetBlock_Zero(iPoint);\n    \n  }\n  \n  return ErrorCounter;\n}\nvoid CEulerSolver::SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                unsigned short iMesh, unsigned long Iteration) {\n  \n  su2double *Normal, Area, Vol, Mean_SoundSpeed = 0.0, Mean_ProjVel = 0.0, Mean_BetaInc2, Lambda, Local_Delta_Time, Mean_DensityInc, Mean_LevelSet,\n  Global_Delta_Time = 1E6, Global_Delta_UnstTimeND, ProjVel, ProjVel_i, ProjVel_j, Delta = 0.0, a, b, c, e, f;\n  unsigned long iEdge, iVertex, iPoint, jPoint;\n  unsigned short iDim, iMarker;\n  \n  su2double epsilon = config->GetFreeSurface_Thickness();\n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement = config->GetGrid_Movement();\n\tbool time_steping = config->GetUnsteady_Simulation() == TIME_STEPPING;\n  bool dual_time = ((config->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n                    (config->GetUnsteady_Simulation() == DT_STEPPING_2ND));\n  \n  Min_Delta_Time = 1.E6; Max_Delta_Time = 0.0;\n  \n  /*--- Set maximum inviscid eigenvalue to zero, and compute sound speed ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n    node[iPoint]->SetMax_Lambda_Inv(0.0);\n  \n  /*--- Loop interior edges ---*/\n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Point identification, Normal vector and area ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    Normal = geometry->edge[iEdge]->GetNormal();\n    Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n    \n    /*--- Mean Values ---*/\n    \n    if (compressible) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_SoundSpeed = 0.5 * (node[iPoint]->GetSoundSpeed() + node[jPoint]->GetSoundSpeed()) * Area;\n    }\n    if (incompressible) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_BetaInc2 = 0.5 * (node[iPoint]->GetBetaInc2() + node[jPoint]->GetBetaInc2());\n      Mean_DensityInc = 0.5 * (node[iPoint]->GetDensityInc() + node[jPoint]->GetDensityInc());\n      Mean_SoundSpeed = sqrt(Mean_ProjVel*Mean_ProjVel + (Mean_BetaInc2/Mean_DensityInc)*Area*Area);\n    }\n    if (freesurface) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_BetaInc2 = 0.5 * (node[iPoint]->GetBetaInc2() + node[jPoint]->GetBetaInc2());\n      Mean_DensityInc = 0.5 * (node[iPoint]->GetDensityInc() + node[jPoint]->GetDensityInc());\n      Mean_LevelSet = 0.5 * (node[iPoint]->GetLevelSet() + node[jPoint]->GetLevelSet());\n      \n      if (Mean_LevelSet < -epsilon) Delta = 0.0;\n      if (fabs(Mean_LevelSet) <= epsilon) Delta = 0.5*(1.0+cos(PI_NUMBER*Mean_LevelSet/epsilon))/epsilon;\n      if (Mean_LevelSet > epsilon) Delta = 0.0;\n      \n      a = Mean_BetaInc2/Mean_DensityInc, b = Mean_LevelSet/Mean_DensityInc;\n      c = (1.0 - config->GetRatioDensity())*Delta*config->GetDensity_FreeStreamND();\n      e = (2.0*fabs(Mean_ProjVel) + b*c*fabs(Mean_ProjVel)), f = sqrt(4.0*a*Area*Area + e*e);\n      Mean_SoundSpeed = 0.5*f;\n      Mean_ProjVel = 0.5*e;\n      \n    }\n    \n    /*--- Adjustment for grid movement ---*/\n    \n    if (grid_movement) {\n      su2double *GridVel_i = geometry->node[iPoint]->GetGridVel();\n      su2double *GridVel_j = geometry->node[jPoint]->GetGridVel();\n      ProjVel_i = 0.0; ProjVel_j = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        ProjVel_i += GridVel_i[iDim]*Normal[iDim];\n        ProjVel_j += GridVel_j[iDim]*Normal[iDim];\n      }\n      Mean_ProjVel -= 0.5 * (ProjVel_i + ProjVel_j);\n    }\n    \n    /*--- Inviscid contribution ---*/\n    \n    Lambda = fabs(Mean_ProjVel) + Mean_SoundSpeed;\n    if (geometry->node[iPoint]->GetDomain()) node[iPoint]->AddMax_Lambda_Inv(Lambda);\n    if (geometry->node[jPoint]->GetDomain()) node[jPoint]->AddMax_Lambda_Inv(Lambda);\n    \n  }\n  \n  /*--- Loop boundary edges ---*/\n  \n  for (iMarker = 0; iMarker < geometry->GetnMarker(); iMarker++) {\n    for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n      \n      /*--- Point identification, Normal vector and area ---*/\n      \n      iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n      Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n      Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n      \n      /*--- Mean Values ---*/\n      \n      if (compressible) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_SoundSpeed = node[iPoint]->GetSoundSpeed() * Area;\n      }\n      if (incompressible) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_BetaInc2 = node[iPoint]->GetBetaInc2();\n        Mean_DensityInc = node[iPoint]->GetDensityInc();\n        Mean_SoundSpeed = sqrt(Mean_ProjVel*Mean_ProjVel + (Mean_BetaInc2/Mean_DensityInc)*Area*Area);\n      }\n      if (freesurface) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_BetaInc2 = node[iPoint]->GetBetaInc2();\n        Mean_DensityInc = node[iPoint]->GetDensityInc();\n        Mean_LevelSet = node[iPoint]->GetLevelSet();\n        \n        if (Mean_LevelSet < -epsilon) Delta = 0.0;\n        if (fabs(Mean_LevelSet) <= epsilon) Delta = 0.5*(1.0+cos(PI_NUMBER*Mean_LevelSet/epsilon))/epsilon;\n        if (Mean_LevelSet > epsilon) Delta = 0.0;\n        \n        a = Mean_BetaInc2/Mean_DensityInc; b = Mean_LevelSet/Mean_DensityInc;\n        c = (1.0 - config->GetRatioDensity())*Delta*config->GetDensity_FreeStreamND();\n        e = (2.0*fabs(Mean_ProjVel) + b*c*fabs(Mean_ProjVel)); f = sqrt(4.0*a*Area*Area + e*e);\n        Mean_SoundSpeed = 0.5*f;\n        Mean_ProjVel = 0.5*e;\n      }\n      \n      /*--- Adjustment for grid movement ---*/\n      \n      if (grid_movement) {\n        su2double *GridVel = geometry->node[iPoint]->GetGridVel();\n        ProjVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjVel += GridVel[iDim]*Normal[iDim];\n        Mean_ProjVel -= ProjVel;\n      }\n      \n      /*--- Inviscid contribution ---*/\n      Lambda = fabs(Mean_ProjVel) + Mean_SoundSpeed;\n      if (geometry->node[iPoint]->GetDomain()) {\n        node[iPoint]->AddMax_Lambda_Inv(Lambda);\n      }\n      \n    }\n  }\n  \n  /*--- Each element uses their own speed, steady state simulation ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    \n    Vol = geometry->node[iPoint]->GetVolume();\n    \n    if (Vol != 0.0) {\n      Local_Delta_Time = config->GetCFL(iMesh)*Vol / node[iPoint]->GetMax_Lambda_Inv();\n      Global_Delta_Time = min(Global_Delta_Time, Local_Delta_Time);\n      Min_Delta_Time = min(Min_Delta_Time, Local_Delta_Time);\n      Max_Delta_Time = max(Max_Delta_Time, Local_Delta_Time);\n      if (Local_Delta_Time > config->GetMax_DeltaTime())\n        Local_Delta_Time = config->GetMax_DeltaTime();\n      node[iPoint]->SetDelta_Time(Local_Delta_Time);\n    }\n    else {\n      node[iPoint]->SetDelta_Time(0.0);\n    }\n    \n  }\n  \n  \n  /*--- Compute the max and the min dt (in parallel) ---*/\n  if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n#ifdef HAVE_MPI\n    su2double rbuf_time, sbuf_time;\n    sbuf_time = Min_Delta_Time;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MIN, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Min_Delta_Time = rbuf_time;\n    \n    sbuf_time = Max_Delta_Time;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MAX, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Max_Delta_Time = rbuf_time;\n#endif\n  }\n  \n  /*--- For exact time solution use the minimum delta time of the whole mesh ---*/\n  \n  if (time_steping) {\n#ifdef HAVE_MPI\n    su2double rbuf_time, sbuf_time;\n    sbuf_time = Global_Delta_Time;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MIN, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Global_Delta_Time = rbuf_time;\n#endif\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++){\n\t\t\t\n\t\t\t/*--- Sets the regular CFL equal to the unsteady CFL ---*/\n\t\t\tconfig->SetCFL(iMesh,config->GetUnst_CFL());\n\t\t\t\n\t\t\t/*--- If the unsteady CFL is set to zero, it uses the defined unsteady time step, otherwise\n\t\t\t it computes the time step based on the unsteady CFL ---*/\n\t\t\tif (config->GetCFL(iMesh) == 0.0){\n\t\t\t\tnode[iPoint]->SetDelta_Time(config->GetDelta_UnstTime());\n\t\t\t} else {\n\t\t\t\tnode[iPoint]->SetDelta_Time(Global_Delta_Time);\n\t\t\t}\n\t\t}\n  }\n  \n  /*--- Recompute the unsteady time step for the dual time strategy\n   if the unsteady CFL is diferent from 0 ---*/\n  \n  if ((dual_time) && (Iteration == 0) && (config->GetUnst_CFL() != 0.0) && (iMesh == MESH_0)) {\n    Global_Delta_UnstTimeND = config->GetUnst_CFL()*Global_Delta_Time/config->GetCFL(iMesh);\n    \n#ifdef HAVE_MPI\n    su2double rbuf_time, sbuf_time;\n    sbuf_time = Global_Delta_UnstTimeND;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MIN, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Global_Delta_UnstTimeND = rbuf_time;\n#endif\n    config->SetDelta_UnstTimeND(Global_Delta_UnstTimeND);\n  }\n  \n  /*--- The pseudo local time (explicit integration) cannot be greater than the physical time ---*/\n  \n  if (dual_time)\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      if (!implicit) {\n        Local_Delta_Time = min((2.0/3.0)*config->GetDelta_UnstTimeND(), node[iPoint]->GetDelta_Time());\n        node[iPoint]->SetDelta_Time(Local_Delta_Time);\n      }\n    }\n  \n}\n\nvoid CEulerSolver::Centered_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                     CConfig *config, unsigned short iMesh, unsigned short iRKStep) {\n  \n  unsigned long iEdge, iPoint, jPoint;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool second_order = ((config->GetKind_Centered_Flow() == JST) && (iMesh == MESH_0));\n  bool low_fidelity = (config->GetLowFidelitySim() && (iMesh == MESH_1));\n  bool grid_movement = config->GetGrid_Movement();\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Points in edge, set normal vectors, and number of neighbors ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0); jPoint = geometry->edge[iEdge]->GetNode(1);\n    numerics->SetNormal(geometry->edge[iEdge]->GetNormal());\n    numerics->SetNeighbor(geometry->node[iPoint]->GetnNeighbor(), geometry->node[jPoint]->GetnNeighbor());\n    \n    /*--- Set primitive variables w/o reconstruction ---*/\n    \n    numerics->SetPrimitive(node[iPoint]->GetPrimitive(), node[jPoint]->GetPrimitive());\n    \n    /*--- Set the largest convective eigenvalue ---*/\n    \n    numerics->SetLambda(node[iPoint]->GetLambda(), node[jPoint]->GetLambda());\n    \n    /*--- Set undivided laplacian an pressure based sensor ---*/\n    \n    if ((second_order || low_fidelity)) {\n      numerics->SetUndivided_Laplacian(node[iPoint]->GetUndivided_Laplacian(), node[jPoint]->GetUndivided_Laplacian());\n      numerics->SetSensor(node[iPoint]->GetSensor(), node[jPoint]->GetSensor());\n    }\n    \n    /*--- Grid movement ---*/\n    \n    if (grid_movement) {\n      numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(), geometry->node[jPoint]->GetGridVel());\n    }\n    \n    /*--- Compute residuals, and Jacobians ---*/\n    \n    numerics->ComputeResidual(Res_Conv, Jacobian_i, Jacobian_j, config);\n    \n    /*--- Update convective and artificial dissipation residuals ---*/\n    \n    LinSysRes.AddBlock(iPoint, Res_Conv);\n    LinSysRes.SubtractBlock(jPoint, Res_Conv);\n    \n    /*--- Set implicit computation ---*/\n    if (implicit) {\n      Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      Jacobian.AddBlock(iPoint, jPoint, Jacobian_j);\n      Jacobian.SubtractBlock(jPoint, iPoint, Jacobian_i);\n      Jacobian.SubtractBlock(jPoint, jPoint, Jacobian_j);\n    }\n  }\n  \n}\n\nvoid CEulerSolver::Upwind_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                   CConfig *config, unsigned short iMesh) {\n  \n  su2double **Gradient_i, **Gradient_j, Project_Grad_i, Project_Grad_j, RoeVelocity[3] = {0.0,0.0,0.0}, R, sq_vel, RoeEnthalpy,\n  *V_i, *V_j, *S_i, *S_j, *Limiter_i = NULL, *Limiter_j = NULL, YDistance, GradHidrosPress, sqvel, Non_Physical = 1.0;\n  unsigned long iEdge, iPoint, jPoint, counter_local = 0, counter_global = 0;\n  unsigned short iDim, iVar;\n  bool neg_density_i = false, neg_density_j = false, neg_pressure_i = false, neg_pressure_j = false, neg_sound_speed = false;\n  \n  \n  bool implicit         = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool low_fidelity     = (config->GetLowFidelitySim() && (iMesh == MESH_1));\n  bool second_order     = (((config->GetSpatialOrder_Flow() == SECOND_ORDER) || (config->GetSpatialOrder_Flow() == SECOND_ORDER_LIMITER)) && ((iMesh == MESH_0) || low_fidelity));\n  bool limiter          = ((config->GetSpatialOrder_Flow() == SECOND_ORDER_LIMITER) && !low_fidelity);\n  bool freesurface      = (config->GetKind_Regime() == FREESURFACE);\n  bool compressible     = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool grid_movement    = config->GetGrid_Movement();\n  bool roe_turkel       = (config->GetKind_Upwind_Flow() == TURKEL);\n  bool ideal_gas        = (config->GetKind_FluidModel() == STANDARD_AIR || config->GetKind_FluidModel() == IDEAL_GAS );\n  bool low_mach_corr    = config->Low_Mach_Correction();\n\n  /*--- Loop over all the edges ---*/\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Points in edge and normal vectors ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0); jPoint = geometry->edge[iEdge]->GetNode(1);\n    numerics->SetNormal(geometry->edge[iEdge]->GetNormal());\n    \n    /*--- Roe Turkel preconditioning ---*/\n    \n    if (roe_turkel) {\n      sqvel = 0.0;\n      for (iDim = 0; iDim < nDim; iDim ++)\n        sqvel += config->GetVelocity_FreeStream()[iDim]*config->GetVelocity_FreeStream()[iDim];\n      numerics->SetVelocity2_Inf(sqvel);\n    }\n    \n    /*--- Grid movement ---*/\n    \n    if (grid_movement)\n      numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(), geometry->node[jPoint]->GetGridVel());\n    \n    /*--- Get primitive variables ---*/\n    \n    V_i = node[iPoint]->GetPrimitive(); V_j = node[jPoint]->GetPrimitive();\n    S_i = node[iPoint]->GetSecondary(); S_j = node[jPoint]->GetSecondary();\n\n    /*--- The zero order reconstruction includes the gradient\n     of the hydrostatic pressure contribution ---*/\n\n    if (freesurface) {\n      \n      YDistance = 0.5*(geometry->node[jPoint]->GetCoord(nDim-1)-geometry->node[iPoint]->GetCoord(nDim-1));\n      GradHidrosPress = node[iPoint]->GetDensityInc()/(config->GetFroude()*config->GetFroude());\n      Primitive_i[0] = V_i[0] - GradHidrosPress*YDistance;\n      GradHidrosPress = node[jPoint]->GetDensityInc()/(config->GetFroude()*config->GetFroude());\n      Primitive_j[0] = V_j[0] + GradHidrosPress*YDistance;\n    \n      for (iVar = 1; iVar < nPrimVar; iVar++) {\n        Primitive_i[iVar] = V_i[iVar]+EPS;\n        Primitive_j[iVar] = V_j[iVar]+EPS;\n      }\n      \n    }\n\n    /*--- High order reconstruction using MUSCL strategy ---*/\n    \n    if (second_order) {\n      \n      for (iDim = 0; iDim < nDim; iDim++) {\n        Vector_i[iDim] = 0.5*(geometry->node[jPoint]->GetCoord(iDim) - geometry->node[iPoint]->GetCoord(iDim));\n        Vector_j[iDim] = 0.5*(geometry->node[iPoint]->GetCoord(iDim) - geometry->node[jPoint]->GetCoord(iDim));\n      }\n      \n      Gradient_i = node[iPoint]->GetGradient_Primitive();\n      Gradient_j = node[jPoint]->GetGradient_Primitive();\n      if (limiter) {\n        Limiter_i = node[iPoint]->GetLimiter_Primitive();\n        Limiter_j = node[jPoint]->GetLimiter_Primitive();\n      }\n      \n      for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n        Project_Grad_i = 0.0; Project_Grad_j = 0.0;\n        Non_Physical = node[iPoint]->GetNon_Physical()*node[jPoint]->GetNon_Physical();\n        for (iDim = 0; iDim < nDim; iDim++) {\n          Project_Grad_i += Vector_i[iDim]*Gradient_i[iVar][iDim]*Non_Physical;\n          Project_Grad_j += Vector_j[iDim]*Gradient_j[iVar][iDim]*Non_Physical;\n        }\n        if (limiter) {\n          Primitive_i[iVar] = V_i[iVar] + Limiter_i[iVar]*Project_Grad_i;\n          Primitive_j[iVar] = V_j[iVar] + Limiter_j[iVar]*Project_Grad_j;\n        }\n        else {\n          Primitive_i[iVar] = V_i[iVar] + Project_Grad_i;\n          Primitive_j[iVar] = V_j[iVar] + Project_Grad_j;\n        }\n      }\n\n      /*--- Recompute the extrapolated quantities in a\n       thermodynamic consistent way  ---*/\n\n      if (!ideal_gas || low_mach_corr) { ComputeConsExtrapolation(config); }\n\n      /*--- Low-Mach number correction ---*/\n\n      if (low_mach_corr) {\n        su2double z, velocity2_i = 0.0, velocity2_j = 0.0, mach_i, mach_j, vel_i_corr[3], vel_j_corr[3];\n\n        for (iDim = 0; iDim < nDim; iDim++) {\n          velocity2_i += Primitive_i[iDim+1]*Primitive_i[iDim+1];\n          velocity2_j += Primitive_j[iDim+1]*Primitive_j[iDim+1];\n        }\n        mach_i = sqrt(velocity2_i)/Primitive_i[nDim+4];\n        mach_j = sqrt(velocity2_j)/Primitive_j[nDim+4];\n\n        z = min(max(mach_i,mach_j),1.0);\n        velocity2_i = 0.0;\n        velocity2_j = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n        \tvel_i_corr[iDim+1] = ( Primitive_i[iDim+1] + Primitive_j[iDim+1] )/2.0 \\\n        \t\t\t+ z * ( Primitive_i[iDim+1] - Primitive_j[iDim+1] )/2.0;\n        \tvel_j_corr[iDim+1] = ( Primitive_i[iDim+1] + Primitive_j[iDim+1] )/2.0 \\\n        \t\t\t+ z * ( Primitive_j[iDim+1] - Primitive_i[iDim+1] )/2.0;\n\n        \tvelocity2_j += vel_j_corr[iDim+1]*vel_j_corr[iDim+1];\n        \tvelocity2_i += vel_i_corr[iDim+1]*vel_i_corr[iDim+1];\n\n        \tPrimitive_i[iDim+1] = vel_i_corr[iDim+1];\n        \tPrimitive_j[iDim+1] = vel_j_corr[iDim+1];\n        }\n\n        FluidModel->SetEnergy_Prho(Primitive_i[nDim+1],Primitive_i[nDim+2]);\n        Primitive_i[nDim+3]= FluidModel->GetStaticEnergy() + Primitive_i[nDim+1]/Primitive_i[nDim+2] + 0.5*velocity2_i;\n        FluidModel->SetEnergy_Prho(Primitive_j[nDim+1],Primitive_j[nDim+2]);\n        Primitive_j[nDim+3]= FluidModel->GetStaticEnergy() + Primitive_j[nDim+1]/Primitive_j[nDim+2] + 0.5*velocity2_j;\n      }\n      \n      /*--- Check for non-physical solutions after reconstruction. If found,\n       use the cell-average value of the solution. This results in a locally\n       first-order approximation, but this is typically only active\n       during the start-up of a calculation. If non-physical, use the \n       cell-averaged state. ---*/\n      \n      if (compressible) {\n        \n        neg_pressure_i = (Primitive_i[nDim+1] < 0.0); neg_pressure_j = (Primitive_j[nDim+1] < 0.0);\n        neg_density_i  = (Primitive_i[nDim+2] < 0.0); neg_density_j  = (Primitive_j[nDim+2] < 0.0);\n        \n        R = sqrt(fabs(Primitive_j[nDim+2]/Primitive_i[nDim+2]));\n        sq_vel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n          RoeVelocity[iDim] = (R*Primitive_j[iDim+1]+Primitive_i[iDim+1])/(R+1);\n          sq_vel += RoeVelocity[iDim]*RoeVelocity[iDim];\n        }\n        RoeEnthalpy = (R*Primitive_j[nDim+3]+Primitive_i[nDim+3])/(R+1);\n        neg_sound_speed = ((Gamma-1)*(RoeEnthalpy-0.5*sq_vel) < 0.0);\n        \n      }\n      \n      if (neg_sound_speed) {\n        for (iVar = 0; iVar < nPrimVar; iVar++) {\n          Primitive_i[iVar] = V_i[iVar];\n          Primitive_j[iVar] = V_j[iVar]; }\n        if (compressible) {\n          Secondary_i[0] = S_i[0]; Secondary_i[1] = S_i[1];\n          Secondary_j[0] = S_i[0]; Secondary_j[1] = S_i[1]; }\n        counter_local++;\n      }\n      \n      if (neg_density_i || neg_pressure_i) {\n        for (iVar = 0; iVar < nPrimVar; iVar++) Primitive_i[iVar] = V_i[iVar];\n        if (compressible) { Secondary_i[0] = S_i[0]; Secondary_i[1] = S_i[1]; }\n        counter_local++;\n      }\n      \n      if (neg_density_j || neg_pressure_j) {\n        for (iVar = 0; iVar < nPrimVar; iVar++) Primitive_j[iVar] = V_j[iVar];\n        if (compressible) { Secondary_j[0] = S_j[0]; Secondary_j[1] = S_j[1]; }\n        counter_local++;\n      }\n\n      numerics->SetPrimitive(Primitive_i, Primitive_j);\n      numerics->SetSecondary(Secondary_i, Secondary_j);\n      \n    }\n    else {\n      \n      /*--- Set conservative variables without reconstruction ---*/\n      \n      numerics->SetPrimitive(V_i, V_j);\n      numerics->SetSecondary(S_i, S_j);\n      \n      if (freesurface) {\n        numerics->SetPrimitive(Primitive_i, Primitive_j);\n      }\n      \n    }\n    \n    /*--- Compute the residual ---*/\n    \n    numerics->ComputeResidual(Res_Conv, Jacobian_i, Jacobian_j, config);\n\n    /*--- Update residual value ---*/\n    \n    LinSysRes.AddBlock(iPoint, Res_Conv);\n    LinSysRes.SubtractBlock(jPoint, Res_Conv);\n    \n    /*--- Set implicit Jacobians ---*/\n    \n    if (implicit) {\n      Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      Jacobian.AddBlock(iPoint, jPoint, Jacobian_j);\n      Jacobian.SubtractBlock(jPoint, iPoint, Jacobian_i);\n      Jacobian.SubtractBlock(jPoint, jPoint, Jacobian_j);\n    }\n    \n    /*--- Roe Turkel preconditioning, set the value of beta ---*/\n    \n    if (roe_turkel) {\n      node[iPoint]->SetPreconditioner_Beta(numerics->GetPrecond_Beta());\n      node[jPoint]->SetPreconditioner_Beta(numerics->GetPrecond_Beta());\n    }\n    \n  }\n  \n  /*--- Warning message about non-physical reconstructions ---*/\n  \n  if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n#ifdef HAVE_MPI\n    MPI_Reduce(&counter_local, &counter_global, 1, MPI_UNSIGNED_LONG, MPI_SUM, MASTER_NODE, MPI_COMM_WORLD);\n#else\n    counter_global = counter_local;\n#endif\n    if (iMesh == MESH_0) config->SetNonphysical_Reconstr(counter_global);\n  }\n  \n}\n\nvoid CEulerSolver::ComputeConsExtrapolation(CConfig *config) {\n  \n  unsigned short iDim;\n  \n  su2double density_i = Primitive_i[nDim+2];\n  su2double pressure_i = Primitive_i[nDim+1];\n  su2double velocity2_i = 0.0;\n  for (iDim = 0; iDim < nDim; iDim++) {\n    velocity2_i += Primitive_i[iDim+1]*Primitive_i[iDim+1];\n  }\n  \n  FluidModel->SetTDState_Prho(pressure_i, density_i);\n  \n  Primitive_i[0]= FluidModel->GetTemperature();\n  Primitive_i[nDim+3]= FluidModel->GetStaticEnergy() + Primitive_i[nDim+1]/Primitive_i[nDim+2] + 0.5*velocity2_i;\n  Primitive_i[nDim+4]= FluidModel->GetSoundSpeed();\n  Secondary_i[0]=FluidModel->GetdPdrho_e();\n  Secondary_i[1]=FluidModel->GetdPde_rho();\n  \n  \n  su2double density_j = Primitive_j[nDim+2];\n  su2double pressure_j = Primitive_j[nDim+1];\n  su2double velocity2_j = 0.0;\n  for (iDim = 0; iDim < nDim; iDim++) {\n    velocity2_j += Primitive_j[iDim+1]*Primitive_j[iDim+1];\n  }\n  \n  FluidModel->SetTDState_Prho(pressure_j, density_j);\n  \n  Primitive_j[0]= FluidModel->GetTemperature();\n  Primitive_j[nDim+3]= FluidModel->GetStaticEnergy() + Primitive_j[nDim+1]/Primitive_j[nDim+2] + 0.5*velocity2_j;\n  Primitive_j[nDim+4]=FluidModel->GetSoundSpeed();\n  Secondary_j[0]=FluidModel->GetdPdrho_e();\n  Secondary_j[1]=FluidModel->GetdPde_rho();\n  \n}\n\nvoid CEulerSolver::Source_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CNumerics *second_numerics,\n                                   CConfig *config, unsigned short iMesh) {\n  \n  unsigned short iVar, jVar;\n  unsigned long iPoint;\n  bool implicit       = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool rotating_frame = config->GetRotating_Frame();\n  bool axisymmetric   = config->GetAxisymmetric();\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface    = (config->GetKind_Regime() == FREESURFACE);\n  bool gravity        = (config->GetGravityForce() == YES);\n  bool time_spectral  = (config->GetUnsteady_Simulation() == TIME_SPECTRAL);\n  bool windgust       = config->GetWind_Gust();\n  \n  /*--- Initialize the source residual to zero ---*/\n  for (iVar = 0; iVar < nVar; iVar++) Residual[iVar] = 0.0;\n  \n  if (rotating_frame) {\n    \n    /*--- Loop over all points ---*/\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Load the conservative variables ---*/\n      numerics->SetConservative(node[iPoint]->GetSolution(),\n                                node[iPoint]->GetSolution());\n      \n      /*--- Load the volume of the dual mesh cell ---*/\n      numerics->SetVolume(geometry->node[iPoint]->GetVolume());\n      \n      /*--- Compute the rotating frame source residual ---*/\n      numerics->ComputeResidual(Residual, Jacobian_i, config);\n      \n      /*--- Add the source residual to the total ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Add the implicit Jacobian contribution ---*/\n      if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n    }\n  }\n  \n  if (axisymmetric) {\n    \n    /*--- Zero out Jacobian structure ---*/\n    if (implicit) {\n      for (iVar = 0; iVar < nVar; iVar ++)\n        for (unsigned short jVar = 0; jVar < nVar; jVar ++)\n          Jacobian_i[iVar][jVar] = 0.0;\n    }\n    \n    /*--- loop over points ---*/\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Set solution  ---*/\n      numerics->SetConservative(node[iPoint]->GetSolution(), node[iPoint]->GetSolution());\n      \n      if (incompressible || freesurface) {\n        /*--- Set incompressible density  ---*/\n        numerics->SetDensityInc(node[iPoint]->GetDensityInc(), node[iPoint]->GetDensityInc());\n      }\n      \n      /*--- Set control volume ---*/\n      numerics->SetVolume(geometry->node[iPoint]->GetVolume());\n      \n      /*--- Set y coordinate ---*/\n      numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[iPoint]->GetCoord());\n      \n      /*--- Compute Source term Residual ---*/\n      numerics->ComputeResidual(Residual, Jacobian_i, config);\n      \n      /*--- Add Residual ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Implicit part ---*/\n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n    }\n  }\n  \n  if (gravity) {\n    \n    /*--- loop over points ---*/\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Set solution  ---*/\n      numerics->SetConservative(node[iPoint]->GetSolution(), node[iPoint]->GetSolution());\n      \n      /*--- Set incompressible density  ---*/\n      if (incompressible || freesurface) {\n        numerics->SetDensityInc(node[iPoint]->GetDensityInc(), node[iPoint]->GetDensityInc());\n      }\n      \n      /*--- Set control volume ---*/\n      numerics->SetVolume(geometry->node[iPoint]->GetVolume());\n      \n      /*--- Compute Source term Residual ---*/\n      numerics->ComputeResidual(Residual, config);\n      \n      /*--- Add Residual ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n    }\n    \n  }\n  \n  if (freesurface) {\n    \n    unsigned long iPoint;\n    su2double Vol, x_o, x_od, x, z, levelset, DampingFactor;\n    su2double factor = config->GetFreeSurface_Damping_Length();\n    \n    x_o = config->GetFreeSurface_Outlet();\n    x_od = x_o - factor*2.0*PI_NUMBER*config->GetFroude()*config->GetFroude();\n    \n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      Vol = geometry->node[iPoint]->GetVolume();\n      x = geometry->node[iPoint]->GetCoord()[0];\n      z = geometry->node[iPoint]->GetCoord()[nDim-1]-config->GetFreeSurface_Zero();\n      levelset = node[iPoint]->GetSolution(nDim+1);\n      \n      DampingFactor = 0.0;\n      if (x >= x_od)\n        DampingFactor = config->GetFreeSurface_Damping_Coeff()*pow((x-x_od)/(x_o-x_od), 2.0);\n      \n      for (iVar = 0; iVar < nVar; iVar++) {\n        Residual[iVar] = 0.0;\n        for (jVar = 0; jVar < nVar; jVar++)\n          Jacobian_i[iVar][jVar] = 0.0;\n      }\n      \n      Residual[nDim+1] = Vol*(levelset-z)*DampingFactor;\n      Jacobian_i[nDim+1][nDim+1] = Vol*DampingFactor;\n      \n      LinSysRes.AddBlock(iPoint, Residual);\n      if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n    }\n    \n  }\n  \n  if (time_spectral) {\n    \n    su2double Volume, Source;\n    \n    /*--- loop over points ---*/\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Get control volume ---*/\n      Volume = geometry->node[iPoint]->GetVolume();\n      \n      /*--- Get stored time spectral source term ---*/\n      for (iVar = 0; iVar < nVar; iVar++) {\n        Source = node[iPoint]->GetTimeSpectral_Source(iVar);\n        Residual[iVar] = Source*Volume;\n      }\n      \n      /*--- Add Residual ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n    }\n  }\n  \n  if (windgust) {\n    \n    /*--- Loop over all points ---*/\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Load the wind gust ---*/\n      numerics->SetWindGust(node[iPoint]->GetWindGust(), node[iPoint]->GetWindGust());\n      \n      /*--- Load the wind gust derivatives ---*/\n      numerics->SetWindGustDer(node[iPoint]->GetWindGustDer(), node[iPoint]->GetWindGustDer());\n      \n      /*--- Load the primitive variables ---*/\n      numerics->SetPrimitive(node[iPoint]->GetPrimitive(), node[iPoint]->GetPrimitive());\n      \n      /*--- Load the volume of the dual mesh cell ---*/\n      numerics->SetVolume(geometry->node[iPoint]->GetVolume());\n      \n      /*--- Compute the rotating frame source residual ---*/\n      numerics->ComputeResidual(Residual, Jacobian_i, config);\n      \n      /*--- Add the source residual to the total ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Add the implicit Jacobian contribution ---*/\n      if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n    }\n  }\n  \n}\n\nvoid CEulerSolver::Source_Template(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                   CConfig *config, unsigned short iMesh) {\n  \n  /* This method should be used to call any new source terms for a particular problem*/\n  /* This method calls the new child class in CNumerics, where the new source term should be implemented.  */\n  \n  /* Next we describe how to get access to some important quanties for this method */\n  /* Access to all points in the current geometric mesh by saying: nPointDomain */\n  /* Get the vector of conservative variables at some point iPoint = node[iPoint]->GetSolution() */\n  /* Get the volume (or area in 2D) associated with iPoint = node[iPoint]->GetVolume() */\n  /* Get the vector of geometric coordinates of point iPoint = node[iPoint]->GetCoord() */\n  \n}\n\nvoid CEulerSolver::SetMax_Eigenvalue(CGeometry *geometry, CConfig *config) {\n  \n  su2double *Normal, Area, Mean_SoundSpeed = 0.0, Mean_ProjVel = 0.0, Mean_BetaInc2, Lambda, Mean_DensityInc,\n  ProjVel, ProjVel_i, ProjVel_j, *GridVel, *GridVel_i, *GridVel_j;\n  unsigned long iEdge, iVertex, iPoint, jPoint;\n  unsigned short iDim, iMarker;\n  \n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement = config->GetGrid_Movement();\n  \n  /*--- Set maximum inviscid eigenvalue to zero, and compute sound speed ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    node[iPoint]->SetLambda(0.0);\n  }\n  \n  /*--- Loop interior edges ---*/\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Point identification, Normal vector and area ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    Normal = geometry->edge[iEdge]->GetNormal();\n    Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n    \n    /*--- Mean Values ---*/\n    \n    if (compressible) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_SoundSpeed = 0.5 * (node[iPoint]->GetSoundSpeed() + node[jPoint]->GetSoundSpeed()) * Area;\n    }\n    if (incompressible || freesurface) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_BetaInc2 = 0.5 * (node[iPoint]->GetBetaInc2() + node[jPoint]->GetBetaInc2());\n      Mean_DensityInc = 0.5 * (node[iPoint]->GetDensityInc() + node[jPoint]->GetDensityInc());\n      Mean_SoundSpeed = sqrt(Mean_ProjVel*Mean_ProjVel + (Mean_BetaInc2/Mean_DensityInc)*Area*Area);\n    }\n    \n    /*--- Adjustment for grid movement ---*/\n    \n    if (grid_movement) {\n      GridVel_i = geometry->node[iPoint]->GetGridVel();\n      GridVel_j = geometry->node[jPoint]->GetGridVel();\n      ProjVel_i = 0.0; ProjVel_j =0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        ProjVel_i += GridVel_i[iDim]*Normal[iDim];\n        ProjVel_j += GridVel_j[iDim]*Normal[iDim];\n      }\n      Mean_ProjVel -= 0.5 * (ProjVel_i + ProjVel_j);\n    }\n    \n    /*--- Inviscid contribution ---*/\n    \n    Lambda = fabs(Mean_ProjVel) + Mean_SoundSpeed;\n    if (geometry->node[iPoint]->GetDomain()) node[iPoint]->AddLambda(Lambda);\n    if (geometry->node[jPoint]->GetDomain()) node[jPoint]->AddLambda(Lambda);\n    \n  }\n  \n  /*--- Loop boundary edges ---*/\n  \n  for (iMarker = 0; iMarker < geometry->GetnMarker(); iMarker++) {\n    for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n      \n      /*--- Point identification, Normal vector and area ---*/\n      \n      iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n      Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n      Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n      \n      /*--- Mean Values ---*/\n      \n      if (compressible) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_SoundSpeed = node[iPoint]->GetSoundSpeed() * Area;\n      }\n      if (incompressible || freesurface) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_BetaInc2 = node[iPoint]->GetBetaInc2();\n        Mean_DensityInc = node[iPoint]->GetDensityInc();\n        Mean_SoundSpeed = sqrt(Mean_ProjVel*Mean_ProjVel + (Mean_BetaInc2/Mean_DensityInc)*Area*Area);\n      }\n      \n      /*--- Adjustment for grid movement ---*/\n      \n      if (grid_movement) {\n        GridVel = geometry->node[iPoint]->GetGridVel();\n        ProjVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjVel += GridVel[iDim]*Normal[iDim];\n        Mean_ProjVel -= ProjVel;\n      }\n      \n      /*--- Inviscid contribution ---*/\n      \n      Lambda = fabs(Mean_ProjVel) + Mean_SoundSpeed;\n      if (geometry->node[iPoint]->GetDomain()) {\n        node[iPoint]->AddLambda(Lambda);\n      }\n      \n    }\n  }\n  \n  /*--- MPI parallelization ---*/\n  \n  Set_MPI_MaxEigenvalue(geometry, config);\n  \n}\n\nvoid CEulerSolver::SetUndivided_Laplacian(CGeometry *geometry, CConfig *config) {\n  \n  unsigned long iPoint, jPoint, iEdge;\n  su2double Pressure_i = 0, Pressure_j = 0, *Diff;\n  unsigned short iVar;\n  bool boundary_i, boundary_j;\n  \n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  \n  Diff = new su2double[nVar];\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n    node[iPoint]->SetUnd_LaplZero();\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    /*--- Solution differences ---*/\n    \n    for (iVar = 0; iVar < nVar; iVar++)\n      Diff[iVar] = node[iPoint]->GetSolution(iVar) - node[jPoint]->GetSolution(iVar);\n    \n    /*--- Correction for compressible flows which use the enthalpy ---*/\n    \n    if (compressible) {\n      Pressure_i = node[iPoint]->GetPressure();\n      Pressure_j = node[jPoint]->GetPressure();\n      Diff[nVar-1] = (node[iPoint]->GetSolution(nVar-1) + Pressure_i) - (node[jPoint]->GetSolution(nVar-1) + Pressure_j);\n    }\n    \n    boundary_i = geometry->node[iPoint]->GetPhysicalBoundary();\n    boundary_j = geometry->node[jPoint]->GetPhysicalBoundary();\n    \n    /*--- Both points inside the domain, or both in the boundary ---*/\n    \n    if ((!boundary_i && !boundary_j) || (boundary_i && boundary_j)) {\n      if (geometry->node[iPoint]->GetDomain()) node[iPoint]->SubtractUnd_Lapl(Diff);\n      if (geometry->node[jPoint]->GetDomain()) node[jPoint]->AddUnd_Lapl(Diff);\n    }\n    \n    /*--- iPoint inside the domain, jPoint on the boundary ---*/\n    \n    if (!boundary_i && boundary_j)\n      if (geometry->node[iPoint]->GetDomain()) node[iPoint]->SubtractUnd_Lapl(Diff);\n    \n    /*--- jPoint inside the domain, iPoint on the boundary ---*/\n    \n    if (boundary_i && !boundary_j)\n      if (geometry->node[jPoint]->GetDomain()) node[jPoint]->AddUnd_Lapl(Diff);\n    \n  }\n  \n  /*--- MPI parallelization ---*/\n  \n  Set_MPI_Undivided_Laplacian(geometry, config);\n  \n  delete [] Diff;\n  \n}\n\nvoid CEulerSolver::SetDissipation_Switch(CGeometry *geometry, CConfig *config) {\n  \n  unsigned long iEdge, iPoint, jPoint;\n  su2double Pressure_i = 0.0, Pressure_j = 0.0;\n  bool boundary_i, boundary_j;\n  \n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  \n  /*--- Reset variables to store the undivided pressure ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    iPoint_UndLapl[iPoint] = 0.0;\n    jPoint_UndLapl[iPoint] = 0.0;\n  }\n  \n  /*--- Evaluate the pressure sensor ---*/\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    /*--- Get the pressure, or density for incompressible solvers ---*/\n    \n    if (compressible) {\n      Pressure_i = node[iPoint]->GetPressure();\n      Pressure_j = node[jPoint]->GetPressure();\n    }\n    if (incompressible || freesurface) {\n      Pressure_i = node[iPoint]->GetDensityInc();\n      Pressure_j = node[jPoint]->GetDensityInc();\n    }\n    \n    boundary_i = geometry->node[iPoint]->GetPhysicalBoundary();\n    boundary_j = geometry->node[jPoint]->GetPhysicalBoundary();\n    \n    /*--- Both points inside the domain, or both on the boundary ---*/\n    \n    if ((!boundary_i && !boundary_j) || (boundary_i && boundary_j)) {\n      if (geometry->node[iPoint]->GetDomain()) { iPoint_UndLapl[iPoint] += (Pressure_j - Pressure_i); jPoint_UndLapl[iPoint] += (Pressure_i + Pressure_j); }\n      if (geometry->node[jPoint]->GetDomain()) { iPoint_UndLapl[jPoint] += (Pressure_i - Pressure_j); jPoint_UndLapl[jPoint] += (Pressure_i + Pressure_j); }\n    }\n    \n    /*--- iPoint inside the domain, jPoint on the boundary ---*/\n    \n    if (!boundary_i && boundary_j)\n      if (geometry->node[iPoint]->GetDomain()) { iPoint_UndLapl[iPoint] += (Pressure_j - Pressure_i); jPoint_UndLapl[iPoint] += (Pressure_i + Pressure_j); }\n    \n    /*--- jPoint inside the domain, iPoint on the boundary ---*/\n    \n    if (boundary_i && !boundary_j)\n      if (geometry->node[jPoint]->GetDomain()) { iPoint_UndLapl[jPoint] += (Pressure_i - Pressure_j); jPoint_UndLapl[jPoint] += (Pressure_i + Pressure_j); }\n    \n  }\n  \n  /*--- Set pressure switch for each point ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n    node[iPoint]->SetSensor(fabs(iPoint_UndLapl[iPoint]) / jPoint_UndLapl[iPoint]);\n  \n  /*--- MPI parallelization ---*/\n  \n  Set_MPI_Dissipation_Switch(geometry, config);\n  \n}\n\nvoid CEulerSolver::Inviscid_Forces(CGeometry *geometry, CConfig *config) {\n  \n  unsigned long iVertex, iPoint;\n  unsigned short iDim, iMarker, Boundary, Monitoring, iMarker_Monitoring;\n  su2double Pressure = 0.0, *Normal = NULL, MomentDist[3] = {0.0,0.0,0.0}, *Coord, Area,\n  factor, NFPressOF, RefVel2, RefTemp, RefDensity, RefPressure, Mach2Vel, Mach_Motion,\n  Force[3] = {0.0,0.0,0.0};\n  string Marker_Tag, Monitoring_Tag;\n  \n#ifdef HAVE_MPI\n  su2double MyAllBound_CDrag_Inv, MyAllBound_CLift_Inv, MyAllBound_CSideForce_Inv, MyAllBound_CMx_Inv, MyAllBound_CMy_Inv, MyAllBound_CMz_Inv, MyAllBound_CFx_Inv, MyAllBound_CFy_Inv, MyAllBound_CFz_Inv, MyAllBound_CT_Inv, MyAllBound_CQ_Inv, MyAllBound_CNearFieldOF_Inv, *MySurface_CLift_Inv = NULL, *MySurface_CDrag_Inv = NULL, *MySurface_CSideForce_Inv = NULL, *MySurface_CEff_Inv = NULL, *MySurface_CFx_Inv = NULL, *MySurface_CFy_Inv = NULL, *MySurface_CFz_Inv = NULL, *MySurface_CMx_Inv = NULL, *MySurface_CMy_Inv = NULL, *MySurface_CMz_Inv = NULL;\n#endif\n  \n  su2double Alpha           = config->GetAoA()*PI_NUMBER/180.0;\n  su2double Beta            = config->GetAoS()*PI_NUMBER/180.0;\n  su2double RefAreaCoeff    = config->GetRefAreaCoeff();\n  su2double RefLengthMoment = config->GetRefLengthMoment();\n  su2double Gas_Constant    = config->GetGas_ConstantND();\n  su2double *Origin         = config->GetRefOriginMoment(0);\n  bool grid_movement        = config->GetGrid_Movement();\n  bool compressible         = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible       = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface          = (config->GetKind_Regime() == FREESURFACE);\n  \n  /*--- Evaluate reference values for non-dimensionalization.\n   For dynamic meshes, use the motion Mach number as a reference value\n   for computing the force coefficients. Otherwise, use the freestream\n   values, which is the standard convention. ---*/\n  \n  RefTemp     = Temperature_Inf;\n  RefDensity  = Density_Inf;\n  RefPressure = Pressure_Inf;\n  if (grid_movement) {\n    Mach2Vel = sqrt(Gamma*Gas_Constant*RefTemp);\n    Mach_Motion = config->GetMach_Motion();\n    RefVel2 = (Mach_Motion*Mach2Vel)*(Mach_Motion*Mach2Vel);\n  }\n  else {\n    RefVel2 = 0.0;\n    for (iDim = 0; iDim < nDim; iDim++)\n      RefVel2  += Velocity_Inf[iDim]*Velocity_Inf[iDim];\n  }\n  \n  factor = 1.0 / (0.5*RefDensity*RefAreaCoeff*RefVel2);\n  \n  /*-- Variables initialization ---*/\n  \n  Total_CDrag = 0.0;        Total_CLift = 0.0; Total_CSideForce = 0.0; Total_CEff = 0.0;\n  Total_CMx = 0.0;          Total_CMy = 0.0;   Total_CMz = 0.0;\n  Total_CFx = 0.0;          Total_CFy = 0.0;   Total_CFz = 0.0;\n  Total_CT = 0.0;           Total_CQ = 0.0;    Total_CMerit = 0.0;\n  Total_CNearFieldOF = 0.0; Total_Heat = 0.0;  Total_MaxHeat = 0.0;\n  \n  AllBound_CDrag_Inv = 0.0;        AllBound_CLift_Inv = 0.0; AllBound_CSideForce_Inv = 0.0;\n  AllBound_CMx_Inv = 0.0;          AllBound_CMy_Inv = 0.0;   AllBound_CMz_Inv = 0.0;\n  AllBound_CFx_Inv = 0.0;          AllBound_CFy_Inv = 0.0;   AllBound_CFz_Inv = 0.0;\n  AllBound_CT_Inv = 0.0;           AllBound_CQ_Inv = 0.0;    AllBound_CMerit_Inv = 0.0;\n  AllBound_CNearFieldOF_Inv = 0.0; AllBound_CEff_Inv = 0.0;\n  \n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n    Surface_CLift_Inv[iMarker_Monitoring]      = 0.0; Surface_CDrag_Inv[iMarker_Monitoring]      = 0.0;\n    Surface_CSideForce_Inv[iMarker_Monitoring] = 0.0; Surface_CEff_Inv[iMarker_Monitoring]       = 0.0;\n    Surface_CFx_Inv[iMarker_Monitoring]        = 0.0; Surface_CFy_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CFz_Inv[iMarker_Monitoring]        = 0.0; Surface_CMx_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CMy_Inv[iMarker_Monitoring]        = 0.0; Surface_CMz_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CLift[iMarker_Monitoring]          = 0.0; Surface_CDrag[iMarker_Monitoring]          = 0.0;\n    Surface_CSideForce[iMarker_Monitoring]     = 0.0; Surface_CEff[iMarker_Monitoring]           = 0.0;\n    Surface_CFx[iMarker_Monitoring]            = 0.0; Surface_CFy[iMarker_Monitoring]            = 0.0;\n    Surface_CFz[iMarker_Monitoring]            = 0.0; Surface_CMx[iMarker_Monitoring]            = 0.0;\n    Surface_CMy[iMarker_Monitoring]            = 0.0; Surface_CMz[iMarker_Monitoring]            = 0.0;\n  }\n  \n  /*--- Loop over the Euler and Navier-Stokes markers ---*/\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    Boundary   = config->GetMarker_All_KindBC(iMarker);\n    Monitoring = config->GetMarker_All_Monitoring(iMarker);\n    \n    /*--- Obtain the origin for the moment computation for a particular marker ---*/\n    \n    if (Monitoring == YES) {\n      for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n        Monitoring_Tag = config->GetMarker_Monitoring(iMarker_Monitoring);\n        Marker_Tag = config->GetMarker_All_TagBound(iMarker);\n        if (Marker_Tag == Monitoring_Tag)\n          Origin = config->GetRefOriginMoment(iMarker_Monitoring);\n      }\n    }\n    \n    if ((Boundary == EULER_WALL) || (Boundary == HEAT_FLUX) ||\n        (Boundary == ISOTHERMAL) || (Boundary == NEARFIELD_BOUNDARY)) {\n      \n      /*--- Forces initialization at each Marker ---*/\n      \n      CDrag_Inv[iMarker] = 0.0;        CLift_Inv[iMarker] = 0.0; CSideForce_Inv[iMarker] = 0.0;\n      CMx_Inv[iMarker] = 0.0;          CMy_Inv[iMarker] = 0.0;   CMz_Inv[iMarker] = 0.0;\n      CFx_Inv[iMarker] = 0.0;          CFy_Inv[iMarker] = 0.0;   CFz_Inv[iMarker] = 0.0;\n      CT_Inv[iMarker] = 0.0;           CQ_Inv[iMarker] = 0.0;    CMerit_Inv[iMarker] = 0.0;\n      CNearFieldOF_Inv[iMarker] = 0.0; CEff_Inv[iMarker] = 0.0;\n      \n      for (iDim = 0; iDim < nDim; iDim++) ForceInviscid[iDim] = 0.0;\n      MomentInviscid[0] = 0.0; MomentInviscid[1] = 0.0; MomentInviscid[2] = 0.0;\n      NFPressOF = 0.0;\n      \n      /*--- Loop over the vertices to compute the forces ---*/\n      \n      for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (compressible)   Pressure = node[iPoint]->GetPressure();\n        if (incompressible || freesurface) Pressure = node[iPoint]->GetPressureInc();\n        \n        CPressure[iMarker][iVertex] = (Pressure - RefPressure)*factor*RefAreaCoeff;\n        \n        /*--- Note that the pressure coefficient is computed at the\n         halo cells (for visualization purposes), but not the forces ---*/\n        \n        if ( (geometry->node[iPoint]->GetDomain()) && (Monitoring == YES) ) {\n          \n          Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n          Coord = geometry->node[iPoint]->GetCoord();\n          \n          /*--- Quadratic objective function for the near-field.\n           This uses the infinity pressure regardless of Mach number. ---*/\n          \n          NFPressOF += 0.5*(Pressure - Pressure_Inf)*(Pressure - Pressure_Inf)*Normal[nDim-1];\n          \n          Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n          for (iDim = 0; iDim < nDim; iDim++) {\n            MomentDist[iDim] = Coord[iDim] - Origin[iDim];\n          }\n          \n          /*--- Force computation, note the minus sign due to the\n           orientation of the normal (outward) ---*/\n          \n          for (iDim = 0; iDim < nDim; iDim++) {\n            Force[iDim] = -(Pressure - Pressure_Inf)*Normal[iDim]*factor;\n            ForceInviscid[iDim] += Force[iDim];\n          }\n          \n          /*--- Moment with respect to the reference axis ---*/\n          \n          if (nDim == 3) {\n            MomentInviscid[0] += (Force[2]*MomentDist[1]-Force[1]*MomentDist[2])/RefLengthMoment;\n            MomentInviscid[1] += (Force[0]*MomentDist[2]-Force[2]*MomentDist[0])/RefLengthMoment;\n          }\n          MomentInviscid[2] += (Force[1]*MomentDist[0]-Force[0]*MomentDist[1])/RefLengthMoment;\n        }\n        \n      }\n      \n      /*--- Project forces and store the non-dimensional coefficients ---*/\n      \n      if (Monitoring == YES) {\n        \n        if (Boundary != NEARFIELD_BOUNDARY) {\n          if (nDim == 2) {\n            CDrag_Inv[iMarker]  =  ForceInviscid[0]*cos(Alpha) + ForceInviscid[1]*sin(Alpha);\n            CLift_Inv[iMarker]  = -ForceInviscid[0]*sin(Alpha) + ForceInviscid[1]*cos(Alpha);\n            CEff_Inv[iMarker]   = CLift_Inv[iMarker] / (CDrag_Inv[iMarker]+EPS);\n            CMz_Inv[iMarker]    = MomentInviscid[2];\n            CFx_Inv[iMarker]    = ForceInviscid[0];\n            CFy_Inv[iMarker]    = ForceInviscid[1];\n            CT_Inv[iMarker]     = -CFx_Inv[iMarker];\n            CQ_Inv[iMarker]     = -CMz_Inv[iMarker];\n            CMerit_Inv[iMarker] = CT_Inv[iMarker] / (CQ_Inv[iMarker] + EPS);\n          }\n          if (nDim == 3) {\n            CDrag_Inv[iMarker]      =  ForceInviscid[0]*cos(Alpha)*cos(Beta) + ForceInviscid[1]*sin(Beta) + ForceInviscid[2]*sin(Alpha)*cos(Beta);\n            CLift_Inv[iMarker]      = -ForceInviscid[0]*sin(Alpha) + ForceInviscid[2]*cos(Alpha);\n            CSideForce_Inv[iMarker] = -ForceInviscid[0]*sin(Beta)*cos(Alpha) + ForceInviscid[1]*cos(Beta) - ForceInviscid[2]*sin(Beta)*sin(Alpha);\n            CEff_Inv[iMarker]       = CLift_Inv[iMarker] / (CDrag_Inv[iMarker] + EPS);\n            CMx_Inv[iMarker]        = MomentInviscid[0];\n            CMy_Inv[iMarker]        = MomentInviscid[1];\n            CMz_Inv[iMarker]        = MomentInviscid[2];\n            CFx_Inv[iMarker]        = ForceInviscid[0];\n            CFy_Inv[iMarker]        = ForceInviscid[1];\n            CFz_Inv[iMarker]        = ForceInviscid[2];\n            CT_Inv[iMarker]         = -CFz_Inv[iMarker];\n            CQ_Inv[iMarker]         = -CMz_Inv[iMarker];\n            CMerit_Inv[iMarker]     = CT_Inv[iMarker] / (CQ_Inv[iMarker] + EPS);\n          }\n          \n          AllBound_CDrag_Inv        += CDrag_Inv[iMarker];\n          AllBound_CLift_Inv        += CLift_Inv[iMarker];\n          AllBound_CSideForce_Inv   += CSideForce_Inv[iMarker];\n          AllBound_CEff_Inv          = AllBound_CLift_Inv / (AllBound_CDrag_Inv + EPS);\n          AllBound_CMx_Inv          += CMx_Inv[iMarker];\n          AllBound_CMy_Inv          += CMy_Inv[iMarker];\n          AllBound_CMz_Inv          += CMz_Inv[iMarker];\n          AllBound_CFx_Inv          += CFx_Inv[iMarker];\n          AllBound_CFy_Inv          += CFy_Inv[iMarker];\n          AllBound_CFz_Inv          += CFz_Inv[iMarker];\n          AllBound_CT_Inv           += CT_Inv[iMarker];\n          AllBound_CQ_Inv           += CQ_Inv[iMarker];\n          AllBound_CMerit_Inv        = AllBound_CT_Inv / (AllBound_CQ_Inv + EPS);\n          \n          /*--- Compute the coefficients per surface ---*/\n          \n          for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n            Monitoring_Tag = config->GetMarker_Monitoring(iMarker_Monitoring);\n            Marker_Tag = config->GetMarker_All_TagBound(iMarker);\n            if (Marker_Tag == Monitoring_Tag) {\n              Surface_CLift_Inv[iMarker_Monitoring]      += CLift_Inv[iMarker];\n              Surface_CDrag_Inv[iMarker_Monitoring]      += CDrag_Inv[iMarker];\n              Surface_CSideForce_Inv[iMarker_Monitoring] += CSideForce_Inv[iMarker];\n              Surface_CEff_Inv[iMarker_Monitoring]        = CLift_Inv[iMarker] / (CDrag_Inv[iMarker] + EPS);\n              Surface_CFx_Inv[iMarker_Monitoring]        += CFx_Inv[iMarker];\n              Surface_CFy_Inv[iMarker_Monitoring]        += CFy_Inv[iMarker];\n              Surface_CFz_Inv[iMarker_Monitoring]        += CFz_Inv[iMarker];\n              Surface_CMx_Inv[iMarker_Monitoring]        += CMx_Inv[iMarker];\n              Surface_CMy_Inv[iMarker_Monitoring]        += CMy_Inv[iMarker];\n              Surface_CMz_Inv[iMarker_Monitoring]        += CMz_Inv[iMarker];\n            }\n          }\n          \n        }\n        \n        /*--- At the Nearfield SU2 only cares about the pressure coeffient ---*/\n        \n        else {\n          CNearFieldOF_Inv[iMarker] = NFPressOF;\n          AllBound_CNearFieldOF_Inv += CNearFieldOF_Inv[iMarker];\n        }\n        \n      }\n      \n      \n    }\n  }\n  \n#ifdef HAVE_MPI\n  \n  /*--- Add AllBound information using all the nodes ---*/\n  \n  MyAllBound_CDrag_Inv        = AllBound_CDrag_Inv;        AllBound_CDrag_Inv = 0.0;\n  MyAllBound_CLift_Inv        = AllBound_CLift_Inv;        AllBound_CLift_Inv = 0.0;\n  MyAllBound_CSideForce_Inv   = AllBound_CSideForce_Inv;   AllBound_CSideForce_Inv = 0.0;\n  AllBound_CEff_Inv = 0.0;\n  MyAllBound_CMx_Inv          = AllBound_CMx_Inv;          AllBound_CMx_Inv = 0.0;\n  MyAllBound_CMy_Inv          = AllBound_CMy_Inv;          AllBound_CMy_Inv = 0.0;\n  MyAllBound_CMz_Inv          = AllBound_CMz_Inv;          AllBound_CMz_Inv = 0.0;\n  MyAllBound_CFx_Inv          = AllBound_CFx_Inv;          AllBound_CFx_Inv = 0.0;\n  MyAllBound_CFy_Inv          = AllBound_CFy_Inv;          AllBound_CFy_Inv = 0.0;\n  MyAllBound_CFz_Inv          = AllBound_CFz_Inv;          AllBound_CFz_Inv = 0.0;\n  MyAllBound_CT_Inv           = AllBound_CT_Inv;           AllBound_CT_Inv = 0.0;\n  MyAllBound_CQ_Inv           = AllBound_CQ_Inv;           AllBound_CQ_Inv = 0.0;\n  AllBound_CMerit_Inv = 0.0;\n  MyAllBound_CNearFieldOF_Inv = AllBound_CNearFieldOF_Inv; AllBound_CNearFieldOF_Inv = 0.0;\n  \n  SU2_MPI::Allreduce(&MyAllBound_CDrag_Inv, &AllBound_CDrag_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CLift_Inv, &AllBound_CLift_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CSideForce_Inv, &AllBound_CSideForce_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  AllBound_CEff_Inv = AllBound_CLift_Inv / (AllBound_CDrag_Inv + EPS);\n  SU2_MPI::Allreduce(&MyAllBound_CMx_Inv, &AllBound_CMx_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CMy_Inv, &AllBound_CMy_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CMz_Inv, &AllBound_CMz_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CFx_Inv, &AllBound_CFx_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CFy_Inv, &AllBound_CFy_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CFz_Inv, &AllBound_CFz_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CT_Inv, &AllBound_CT_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CQ_Inv, &AllBound_CQ_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  AllBound_CMerit_Inv = AllBound_CT_Inv / (AllBound_CQ_Inv + EPS);\n  SU2_MPI::Allreduce(&MyAllBound_CNearFieldOF_Inv, &AllBound_CNearFieldOF_Inv, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n  /*--- Add the forces on the surfaces using all the nodes ---*/\n  \n  MySurface_CLift_Inv      = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CDrag_Inv      = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CSideForce_Inv = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CEff_Inv       = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CFx_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CFy_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CFz_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CMx_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CMy_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CMz_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  \n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n    MySurface_CLift_Inv[iMarker_Monitoring]      = Surface_CLift_Inv[iMarker_Monitoring];\n    MySurface_CDrag_Inv[iMarker_Monitoring]      = Surface_CDrag_Inv[iMarker_Monitoring];\n    MySurface_CSideForce_Inv[iMarker_Monitoring] = Surface_CSideForce_Inv[iMarker_Monitoring];\n    MySurface_CEff_Inv[iMarker_Monitoring]       = Surface_CEff_Inv[iMarker_Monitoring];\n    MySurface_CFx_Inv[iMarker_Monitoring]        = Surface_CFx_Inv[iMarker_Monitoring];\n    MySurface_CFy_Inv[iMarker_Monitoring]        = Surface_CFy_Inv[iMarker_Monitoring];\n    MySurface_CFz_Inv[iMarker_Monitoring]        = Surface_CFz_Inv[iMarker_Monitoring];\n    MySurface_CMx_Inv[iMarker_Monitoring]        = Surface_CMx_Inv[iMarker_Monitoring];\n    MySurface_CMy_Inv[iMarker_Monitoring]        = Surface_CMy_Inv[iMarker_Monitoring];\n    MySurface_CMz_Inv[iMarker_Monitoring]        = Surface_CMz_Inv[iMarker_Monitoring];\n    \n    Surface_CLift_Inv[iMarker_Monitoring]      = 0.0;\n    Surface_CDrag_Inv[iMarker_Monitoring]      = 0.0;\n    Surface_CSideForce_Inv[iMarker_Monitoring] = 0.0;\n    Surface_CEff_Inv[iMarker_Monitoring]       = 0.0;\n    Surface_CFx_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CFy_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CFz_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CMx_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CMy_Inv[iMarker_Monitoring]        = 0.0;\n    Surface_CMz_Inv[iMarker_Monitoring]        = 0.0;\n  }\n  \n  SU2_MPI::Allreduce(MySurface_CLift_Inv, Surface_CLift_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CDrag_Inv, Surface_CDrag_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CSideForce_Inv, Surface_CSideForce_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++)\n    Surface_CEff_Inv[iMarker_Monitoring] = Surface_CLift_Inv[iMarker_Monitoring] / (Surface_CDrag_Inv[iMarker_Monitoring] + EPS);\n  SU2_MPI::Allreduce(MySurface_CFx_Inv, Surface_CFx_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CFy_Inv, Surface_CFy_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CFz_Inv, Surface_CFz_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CMx_Inv, Surface_CMx_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CMy_Inv, Surface_CMy_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CMz_Inv, Surface_CMz_Inv, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n  delete [] MySurface_CLift_Inv; delete [] MySurface_CDrag_Inv; delete [] MySurface_CSideForce_Inv;\n  delete [] MySurface_CEff_Inv;  delete [] MySurface_CFx_Inv;   delete [] MySurface_CFy_Inv;\n  delete [] MySurface_CFz_Inv;   delete [] MySurface_CMx_Inv;   delete [] MySurface_CMy_Inv;\n  delete [] MySurface_CMz_Inv;\n  \n#endif\n  \n  /*--- Update the total coefficients (note that all the nodes have the same value) ---*/\n  \n  Total_CDrag         = AllBound_CDrag_Inv;\n  Total_CLift         = AllBound_CLift_Inv;\n  Total_CSideForce    = AllBound_CSideForce_Inv;\n  Total_CEff          = Total_CLift / (Total_CDrag + EPS);\n  Total_CMx           = AllBound_CMx_Inv;\n  Total_CMy           = AllBound_CMy_Inv;\n  Total_CMz           = AllBound_CMz_Inv;\n  Total_CFx           = AllBound_CFx_Inv;\n  Total_CFy           = AllBound_CFy_Inv;\n  Total_CFz           = AllBound_CFz_Inv;\n  Total_CT            = AllBound_CT_Inv;\n  Total_CQ            = AllBound_CQ_Inv;\n  Total_CMerit        = Total_CT / (Total_CQ + EPS);\n  Total_CNearFieldOF  = AllBound_CNearFieldOF_Inv;\n  \n  /*--- Update the total coefficients per surface (note that all the nodes have the same value)---*/\n  \n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n    Surface_CLift[iMarker_Monitoring]      = Surface_CLift_Inv[iMarker_Monitoring];\n    Surface_CDrag[iMarker_Monitoring]      = Surface_CDrag_Inv[iMarker_Monitoring];\n    Surface_CSideForce[iMarker_Monitoring] = Surface_CSideForce_Inv[iMarker_Monitoring];\n    Surface_CEff[iMarker_Monitoring]       = Surface_CLift_Inv[iMarker_Monitoring] / (Surface_CDrag_Inv[iMarker_Monitoring] + EPS);\n    Surface_CFx[iMarker_Monitoring]        = Surface_CFx_Inv[iMarker_Monitoring];\n    Surface_CFy[iMarker_Monitoring]        = Surface_CFy_Inv[iMarker_Monitoring];\n    Surface_CFz[iMarker_Monitoring]        = Surface_CFz_Inv[iMarker_Monitoring];\n    Surface_CMx[iMarker_Monitoring]        = Surface_CMx_Inv[iMarker_Monitoring];\n    Surface_CMy[iMarker_Monitoring]        = Surface_CMy_Inv[iMarker_Monitoring];\n    Surface_CMz[iMarker_Monitoring]        = Surface_CMz_Inv[iMarker_Monitoring];\n  }\n  \n}\n\nvoid CEulerSolver::TurboPerformance(CSolver *solver, CConfig *config, unsigned short inMarker,  unsigned short outMarker, unsigned short Kind_TurboPerf, unsigned short inMarkerTP ){\n  \n  su2double  avgVel2In, avgVel2Out,avgVelRel2In, avgVelRel2Out, avgGridVel2In, avgGridVel2Out, avgTotalEnthalpyIn= 0.0,avgTotalRothalpyIn,\n  avgTotalEnthalpyOut, avgTotalRothalpyOut, avgTotalEnthalpyOutIs, avgEnthalpyOut, avgEnthalpyOutIs,\n  avgPressureOut, avgTotalRelPressureIn, avgTotalRelPressureOut, avgEntropyIn, avgEntropyOut;\n  unsigned short iDim;\n  \n  \n  /*--- compute or retrieve inlet information ---*/\n  avgVelRel2In= 0.0;\n  avgGridVel2In= 0.0;\n  avgVel2In= 0.0;\n  for (iDim = 0; iDim < nDim; iDim++){\n    avgVelRel2In +=( AveragedVelocity[inMarker][iDim] - AveragedGridVel[inMarker][iDim])*( AveragedVelocity[inMarker][iDim] - AveragedGridVel[inMarker][iDim]);\n    avgGridVel2In += AveragedGridVel[inMarker][iDim]*AveragedGridVel[inMarker][iDim];\n    avgVel2In += AveragedVelocity[inMarker][iDim]*AveragedVelocity[inMarker][iDim];\n  }\n  \n  avgTotalRothalpyIn = AveragedEnthalpy[inMarker] + 0.5*avgVelRel2In - 0.5*avgGridVel2In;\n  avgTotalEnthalpyIn = AveragedEnthalpy[inMarker] + 0.5*avgVel2In;\n  avgEntropyIn = AveragedEntropy[inMarker];\n  FluidModel->SetTDState_hs(avgTotalRothalpyIn, avgEntropyIn);\n  avgTotalRelPressureIn  = FluidModel->GetPressure();\n  \n  \n  \n  /*--- compute or retrieve outlet information ---*/\n  avgVelRel2Out = 0.0;\n  avgGridVel2Out = 0.0;\n  avgVel2Out = 0.0;\n  for (iDim = 0; iDim < nDim; iDim++){\n    avgVelRel2Out += (solver->GetAveragedVelocity(outMarker)[iDim]- solver->GetAveragedGridVelocity(outMarker)[iDim])*(solver->GetAveragedVelocity(outMarker)[iDim]- solver->GetAveragedGridVelocity(outMarker)[iDim]);\n    avgGridVel2Out += solver->GetAveragedGridVelocity(outMarker)[iDim]*solver->GetAveragedGridVelocity(outMarker)[iDim];\n    avgVel2Out += solver->GetAveragedVelocity(outMarker)[iDim]*solver->GetAveragedVelocity(outMarker)[iDim];\n  }\n  avgTotalRothalpyOut = solver->GetAveragedEnthalpy(outMarker) + 0.5*avgVelRel2Out - 0.5*avgGridVel2Out;\n  avgTotalEnthalpyOut = solver->GetAveragedEnthalpy(outMarker) + 0.5*avgVel2Out;\n  avgEntropyOut = solver->GetAveragedEntropy(outMarker);\n  avgEnthalpyOut = solver->GetAveragedEnthalpy(outMarker);\n  FluidModel->SetTDState_hs(avgTotalRothalpyOut, avgEntropyOut);\n  avgTotalRelPressureOut  =  FluidModel->GetPressure();\n  avgPressureOut= solver->GetAveragedPressure(outMarker);\n  \n  /*--- compute outlet isoentropic conditions ---*/\n  FluidModel->SetTDState_Ps(avgPressureOut, avgEntropyIn);\n  avgEnthalpyOutIs = FluidModel->GetStaticEnergy() + avgPressureOut/FluidModel->GetDensity();\n  avgTotalEnthalpyOutIs = avgEnthalpyOutIs + 0.5*avgVel2Out;\n  \n  /*--- store turboperformance informations ---*/\n  PressureOut[inMarkerTP] = avgPressureOut;\n  PressureRatio[inMarkerTP] = avgTotalRelPressureIn/avgPressureOut;\n  \n  switch(Kind_TurboPerf){\n    case BLADE:\n      \n      TotalPressureLoss[inMarkerTP] = (avgTotalRelPressureIn - avgTotalRelPressureOut)/(avgTotalRelPressureOut - avgPressureOut) ;\n      KineticEnergyLoss[inMarkerTP] = (avgEnthalpyOut - avgEnthalpyOutIs)/(avgTotalRothalpyIn - avgEnthalpyOut + 0.5*avgGridVel2Out);\n      EulerianWork[inMarkerTP] = avgTotalEnthalpyIn - avgTotalEnthalpyOut;\n      TotalEnthalpyIn[inMarkerTP] = avgTotalRothalpyIn;\n      FlowAngleIn[inMarkerTP]= FlowAngle[inMarker];\n      FlowAngleOut[inMarkerTP]= solver->GetFlowAngle(outMarker);\n      MassFlowIn[inMarkerTP]= MassFlow[inMarker];\n      MassFlowOut[inMarkerTP]= solver->GetMassFlow(outMarker);\n      MachIn[inMarkerTP]= AveragedMach[inMarker];\n      MachOut[inMarkerTP]= solver->GetAveragedMach(outMarker);\n      NormalMachIn[inMarkerTP]= AveragedNormalMach[inMarker];\n      NormalMachOut[inMarkerTP]= solver->GetAveragedNormalMach(outMarker);\n      EnthalpyOut[inMarkerTP]= avgEnthalpyOut;\n      VelocityOutIs[inMarkerTP]=sqrt(2.0*(avgTotalRothalpyIn - avgEnthalpyOut + 0.5*avgGridVel2Out));\n      break;\n      \n    case STAGE: case TURBINE:\n      \n      TotalTotalEfficiency[inMarkerTP] = (avgTotalEnthalpyIn - avgTotalEnthalpyOut)/(avgTotalEnthalpyIn - avgTotalEnthalpyOutIs);\n      TotalStaticEfficiency[inMarkerTP] = (avgTotalEnthalpyIn - avgTotalEnthalpyOut)/(avgTotalEnthalpyIn - avgEnthalpyOutIs);\n      TotalEnthalpyIn[inMarkerTP]= avgTotalEnthalpyIn;\n      EnthalpyOut[inMarkerTP] = avgTotalEnthalpyOut;\n      break;\n      \n    default:\n      cout << \"Warning! Invalid TurboPerformance option!\" << endl;\n      exit(EXIT_FAILURE);\n      break;\n  }\n  \n  \n  \n  \n  \n}\n\nvoid CEulerSolver::ExplicitRK_Iteration(CGeometry *geometry, CSolver **solver_container,\n                                        CConfig *config, unsigned short iRKStep) {\n  su2double *Residual, *Res_TruncError, Vol, Delta, Res;\n  unsigned short iVar;\n  unsigned long iPoint;\n  \n  su2double RK_AlphaCoeff = config->Get_Alpha_RKStep(iRKStep);\n  bool adjoint = config->GetAdjoint();\n  \n  for (iVar = 0; iVar < nVar; iVar++) {\n    SetRes_RMS(iVar, 0.0);\n    SetRes_Max(iVar, 0.0, 0);\n  }\n  \n  /*--- Update the solution ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    Vol = geometry->node[iPoint]->GetVolume();\n    Delta = node[iPoint]->GetDelta_Time() / Vol;\n    \n    Res_TruncError = node[iPoint]->GetResTruncError();\n    Residual = LinSysRes.GetBlock(iPoint);\n    \n    if (!adjoint) {\n      for (iVar = 0; iVar < nVar; iVar++) {\n        Res = Residual[iVar] + Res_TruncError[iVar];\n        node[iPoint]->AddSolution(iVar, -Res*Delta*RK_AlphaCoeff);\n        AddRes_RMS(iVar, Res*Res);\n        AddRes_Max(iVar, fabs(Res), geometry->node[iPoint]->GetGlobalIndex(), geometry->node[iPoint]->GetCoord());\n      }\n    }\n    \n  }\n  \n  /*--- MPI solution ---*/\n  \n  Set_MPI_Solution(geometry, config);\n  \n  /*--- Compute the root mean square residual ---*/\n  \n  SetResidual_RMS(geometry, config);\n  \n  \n}\n\nvoid CEulerSolver::ExplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config) {\n  su2double *local_Residual, *local_Res_TruncError, Vol, Delta, Res;\n  unsigned short iVar;\n  unsigned long iPoint;\n  \n  bool adjoint = config->GetAdjoint();\n  \n  for (iVar = 0; iVar < nVar; iVar++) {\n    SetRes_RMS(iVar, 0.0);\n    SetRes_Max(iVar, 0.0, 0);\n  }\n  \n  /*--- Update the solution ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    Vol = geometry->node[iPoint]->GetVolume();\n    Delta = node[iPoint]->GetDelta_Time() / Vol;\n    \n    local_Res_TruncError = node[iPoint]->GetResTruncError();\n    local_Residual = LinSysRes.GetBlock(iPoint);\n    \n    if (!adjoint) {\n      for (iVar = 0; iVar < nVar; iVar++) {\n        Res = local_Residual[iVar] + local_Res_TruncError[iVar];\n        node[iPoint]->AddSolution(iVar, -Res*Delta);\n        AddRes_RMS(iVar, Res*Res);\n        AddRes_Max(iVar, fabs(Res), geometry->node[iPoint]->GetGlobalIndex(), geometry->node[iPoint]->GetCoord());\n      }\n    }\n    \n  }\n  \n  /*--- MPI solution ---*/\n  \n  Set_MPI_Solution(geometry, config);\n  \n  /*--- Compute the root mean square residual ---*/\n  \n  SetResidual_RMS(geometry, config);\n  \n}\n\nvoid CEulerSolver::ImplicitEuler_Iteration(CGeometry *geometry, CSolver **solver_container, CConfig *config) {\n  \n  unsigned short iVar, jVar;\n  unsigned long iPoint, total_index, IterLinSol = 0;\n  su2double Delta, *local_Res_TruncError, Vol;\n  \n  bool adjoint = config->GetAdjoint();\n  bool roe_turkel = config->GetKind_Upwind_Flow() == TURKEL;\n  \n  /*--- Set maximum residual to zero ---*/\n  \n  for (iVar = 0; iVar < nVar; iVar++) {\n    SetRes_RMS(iVar, 0.0);\n    SetRes_Max(iVar, 0.0, 0);\n  }\n  \n  /*--- Build implicit system ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    \n    /*--- Read the residual ---*/\n    \n    local_Res_TruncError = node[iPoint]->GetResTruncError();\n    \n    /*--- Read the volume ---*/\n    \n    Vol = geometry->node[iPoint]->GetVolume();\n    \n    /*--- Modify matrix diagonal to assure diagonal dominance ---*/\n    \n    \n    if (node[iPoint]->GetDelta_Time() != 0.0) {\n      Delta = Vol / node[iPoint]->GetDelta_Time();\n      if (roe_turkel) {\n        SetPreconditioner(config, iPoint);\n        for (iVar = 0; iVar < nVar; iVar ++ )\n          for (jVar = 0; jVar < nVar; jVar ++ )\n            LowMach_Precontioner[iVar][jVar] = Delta*LowMach_Precontioner[iVar][jVar];\n        Jacobian.AddBlock(iPoint, iPoint, LowMach_Precontioner);\n      }\n      else {\n        Jacobian.AddVal2Diag(iPoint, Delta);\n      }\n    }\n    else {\n      Jacobian.SetVal2Diag(iPoint, 1.0);\n      for (iVar = 0; iVar < nVar; iVar++) {\n        total_index = iPoint*nVar + iVar;\n        LinSysRes[total_index] = 0.0;\n        local_Res_TruncError[iVar] = 0.0;\n      }\n    }\n    \n    /*--- Right hand side of the system (-Residual) and initial guess (x = 0) ---*/\n    \n    for (iVar = 0; iVar < nVar; iVar++) {\n      total_index = iPoint*nVar + iVar;\n      LinSysRes[total_index] = - (LinSysRes[total_index] + local_Res_TruncError[iVar]);\n      LinSysSol[total_index] = 0.0;\n      AddRes_RMS(iVar, LinSysRes[total_index]*LinSysRes[total_index]);\n      AddRes_Max(iVar, fabs(LinSysRes[total_index]), geometry->node[iPoint]->GetGlobalIndex(), geometry->node[iPoint]->GetCoord());\n    }\n  }\n  \n  /*--- Initialize residual and solution at the ghost points ---*/\n  \n  for (iPoint = nPointDomain; iPoint < nPoint; iPoint++) {\n    for (iVar = 0; iVar < nVar; iVar++) {\n      total_index = iPoint*nVar + iVar;\n      LinSysRes[total_index] = 0.0;\n      LinSysSol[total_index] = 0.0;\n    }\n  }\n  \n  /*--- Solve or smooth the linear system ---*/\n  \n  CSysSolve system;\n  IterLinSol = system.Solve(Jacobian, LinSysRes, LinSysSol, geometry, config);\n  \n  /*--- The the number of iterations of the linear solver ---*/\n  \n  SetIterLinSolver(IterLinSol);\n  \n  /*--- Update solution (system written in terms of increments) ---*/\n  \n  if (!adjoint) {\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      for (iVar = 0; iVar < nVar; iVar++) {\n        node[iPoint]->AddSolution(iVar, config->GetRelaxation_Factor_Flow()*LinSysSol[iPoint*nVar+iVar]);\n      }\n    }\n  }\n  \n  /*--- MPI solution ---*/\n  \n  Set_MPI_Solution(geometry, config);\n  \n  /*--- Compute the root mean square residual ---*/\n  \n  SetResidual_RMS(geometry, config);\n  \n}\n\nvoid CEulerSolver::SetPrimitive_Gradient_GG(CGeometry *geometry, CConfig *config) {\n  unsigned long iPoint, jPoint, iEdge, iVertex;\n  unsigned short iDim, iVar, iMarker;\n  su2double *PrimVar_Vertex, *PrimVar_i, *PrimVar_j, PrimVar_Average,\n  Partial_Gradient, Partial_Res, *Normal;\n  \n  /*--- Gradient primitive variables compressible (temp, vx, vy, vz, P, rho)\n   Gradient primitive variables incompressible (rho, vx, vy, vz, beta) ---*/\n  PrimVar_Vertex = new su2double [nPrimVarGrad];\n  PrimVar_i = new su2double [nPrimVarGrad];\n  PrimVar_j = new su2double [nPrimVarGrad];\n  \n  /*--- Set Gradient_Primitive to zero ---*/\n  for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n    node[iPoint]->SetGradient_PrimitiveZero(nPrimVarGrad);\n  \n  /*--- Loop interior edges ---*/\n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n      PrimVar_i[iVar] = node[iPoint]->GetPrimitive(iVar);\n      PrimVar_j[iVar] = node[jPoint]->GetPrimitive(iVar);\n    }\n    \n    Normal = geometry->edge[iEdge]->GetNormal();\n    for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n      PrimVar_Average =  0.5 * ( PrimVar_i[iVar] + PrimVar_j[iVar] );\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Partial_Res = PrimVar_Average*Normal[iDim];\n        if (geometry->node[iPoint]->GetDomain())\n          node[iPoint]->AddGradient_Primitive(iVar, iDim, Partial_Res);\n        if (geometry->node[jPoint]->GetDomain())\n          node[jPoint]->SubtractGradient_Primitive(iVar, iDim, Partial_Res);\n      }\n    }\n  }\n  \n  /*--- Loop boundary edges ---*/\n  for (iMarker = 0; iMarker < geometry->GetnMarker(); iMarker++) {\n    for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n      iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n      if (geometry->node[iPoint]->GetDomain()) {\n        \n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          PrimVar_Vertex[iVar] = node[iPoint]->GetPrimitive(iVar);\n        \n        Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Partial_Res = PrimVar_Vertex[iVar]*Normal[iDim];\n            node[iPoint]->SubtractGradient_Primitive(iVar, iDim, Partial_Res);\n          }\n      }\n    }\n  }\n  \n  /*--- Update gradient value ---*/\n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Partial_Gradient = node[iPoint]->GetGradient_Primitive(iVar, iDim) / (geometry->node[iPoint]->GetVolume());\n        node[iPoint]->SetGradient_Primitive(iVar, iDim, Partial_Gradient);\n      }\n    }\n  }\n  \n  delete [] PrimVar_Vertex;\n  delete [] PrimVar_i;\n  delete [] PrimVar_j;\n  \n  Set_MPI_Primitive_Gradient(geometry, config);\n  \n}\n\nvoid CEulerSolver::SetPrimitive_Gradient_LS(CGeometry *geometry, CConfig *config) {\n  \n  unsigned short iVar, iDim, jDim, iNeigh;\n  unsigned long iPoint, jPoint;\n  su2double *PrimVar_i, *PrimVar_j, *Coord_i, *Coord_j, r11, r12, r13, r22, r23, r23_a,\n  r23_b, r33, weight, product, z11, z12, z13, z22, z23, z33, detR2;\n  bool singular;\n  \n  /*--- Loop over points of the grid ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    \n    /*--- Set the value of the singular ---*/\n    singular = false;\n    \n    /*--- Get coordinates ---*/\n    \n    Coord_i = geometry->node[iPoint]->GetCoord();\n    \n    /*--- Get primitives from CVariable ---*/\n    \n    PrimVar_i = node[iPoint]->GetPrimitive();\n    \n    /*--- Inizialization of variables ---*/\n    \n    for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n      for (iDim = 0; iDim < nDim; iDim++)\n        cvector[iVar][iDim] = 0.0;\n    \n    r11 = 0.0; r12 = 0.0;   r13 = 0.0;    r22 = 0.0;\n    r23 = 0.0; r23_a = 0.0; r23_b = 0.0;  r33 = 0.0;\n    \n    AD::StartPreacc();\n    AD::SetPreaccIn(PrimVar_i, nPrimVarGrad);\n    AD::SetPreaccIn(Coord_i, nDim);\n    \n    for (iNeigh = 0; iNeigh < geometry->node[iPoint]->GetnPoint(); iNeigh++) {\n      jPoint = geometry->node[iPoint]->GetPoint(iNeigh);\n      Coord_j = geometry->node[jPoint]->GetCoord();\n      \n      PrimVar_j = node[jPoint]->GetPrimitive();\n      \n      AD::SetPreaccIn(Coord_j, nDim);\n      AD::SetPreaccIn(PrimVar_j, nPrimVarGrad);\n\n      weight = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        weight += (Coord_j[iDim]-Coord_i[iDim])*(Coord_j[iDim]-Coord_i[iDim]);\n      \n      /*--- Sumations for entries of upper triangular matrix R ---*/\n      \n      if (weight != 0.0) {\n        \n        r11 += (Coord_j[0]-Coord_i[0])*(Coord_j[0]-Coord_i[0])/weight;\n        r12 += (Coord_j[0]-Coord_i[0])*(Coord_j[1]-Coord_i[1])/weight;\n        r22 += (Coord_j[1]-Coord_i[1])*(Coord_j[1]-Coord_i[1])/weight;\n        \n        if (nDim == 3) {\n          r13 += (Coord_j[0]-Coord_i[0])*(Coord_j[2]-Coord_i[2])/weight;\n          r23_a += (Coord_j[1]-Coord_i[1])*(Coord_j[2]-Coord_i[2])/weight;\n          r23_b += (Coord_j[0]-Coord_i[0])*(Coord_j[2]-Coord_i[2])/weight;\n          r33 += (Coord_j[2]-Coord_i[2])*(Coord_j[2]-Coord_i[2])/weight;\n        }\n        \n        /*--- Entries of c:= transpose(A)*b ---*/\n        \n        for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n          for (iDim = 0; iDim < nDim; iDim++)\n            cvector[iVar][iDim] += (Coord_j[iDim]-Coord_i[iDim])*(PrimVar_j[iVar]-PrimVar_i[iVar])/weight;\n        \n      }\n      \n    }\n    \n    /*--- Entries of upper triangular matrix R ---*/\n    \n    if (r11 >= 0.0) r11 = sqrt(r11); else r11 = 0.0;\n    if (r11 != 0.0) r12 = r12/r11; else r12 = 0.0;\n    if (r22-r12*r12 >= 0.0) r22 = sqrt(r22-r12*r12); else r22 = 0.0;\n    \n    if (nDim == 3) {\n      if (r11 != 0.0) r13 = r13/r11; else r13 = 0.0;\n      if ((r22 != 0.0) && (r11*r22 != 0.0)) r23 = r23_a/r22 - r23_b*r12/(r11*r22); else r23 = 0.0;\n      if (r33-r23*r23-r13*r13 >= 0.0) r33 = sqrt(r33-r23*r23-r13*r13); else r33 = 0.0;\n    }\n    \n    /*--- Compute determinant ---*/\n    \n    if (nDim == 2) detR2 = (r11*r22)*(r11*r22);\n    else detR2 = (r11*r22*r33)*(r11*r22*r33);\n    \n    /*--- Detect singular matrices ---*/\n    \n    if (abs(detR2) <= EPS) { detR2 = 1.0; singular = true; }\n    \n    /*--- S matrix := inv(R)*traspose(inv(R)) ---*/\n    \n    if (singular) {\n      for (iDim = 0; iDim < nDim; iDim++)\n        for (jDim = 0; jDim < nDim; jDim++)\n          Smatrix[iDim][jDim] = 0.0;\n    }\n    else {\n      if (nDim == 2) {\n        Smatrix[0][0] = (r12*r12+r22*r22)/detR2;\n        Smatrix[0][1] = -r11*r12/detR2;\n        Smatrix[1][0] = Smatrix[0][1];\n        Smatrix[1][1] = r11*r11/detR2;\n      }\n      else {\n        z11 = r22*r33; z12 = -r12*r33; z13 = r12*r23-r13*r22;\n        z22 = r11*r33; z23 = -r11*r23; z33 = r11*r22;\n        Smatrix[0][0] = (z11*z11+z12*z12+z13*z13)/detR2;\n        Smatrix[0][1] = (z12*z22+z13*z23)/detR2;\n        Smatrix[0][2] = (z13*z33)/detR2;\n        Smatrix[1][0] = Smatrix[0][1];\n        Smatrix[1][1] = (z22*z22+z23*z23)/detR2;\n        Smatrix[1][2] = (z23*z33)/detR2;\n        Smatrix[2][0] = Smatrix[0][2];\n        Smatrix[2][1] = Smatrix[1][2];\n        Smatrix[2][2] = (z33*z33)/detR2;\n      }\n    }\n    \n    /*--- Computation of the gradient: S*c ---*/\n    for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n      for (iDim = 0; iDim < nDim; iDim++) {\n        product = 0.0;\n        for (jDim = 0; jDim < nDim; jDim++) {\n          product += Smatrix[iDim][jDim]*cvector[iVar][jDim];\n        }\n        \n        node[iPoint]->SetGradient_Primitive(iVar, iDim, product);\n      }\n    }\n    \n    AD::SetPreaccOut(node[iPoint]->GetGradient_Primitive(), nPrimVarGrad, nDim);\n    AD::EndPreacc();\n  }\n  \n  Set_MPI_Primitive_Gradient(geometry, config);\n  \n}\n\nvoid CEulerSolver::SetPrimitive_Limiter(CGeometry *geometry, CConfig *config) {\n  \n  unsigned long iEdge, iPoint, jPoint;\n  unsigned short iVar, iDim;\n  su2double **Gradient_i, **Gradient_j, *Coord_i, *Coord_j, *Primitive_i, *Primitive_j,\n  dave, LimK, eps2, eps1, dm, dp, du, y, limiter;\n  \n  /*--- Initialize solution max and solution min and the limiter in the entire domain --*/\n  \n  for (iPoint = 0; iPoint < geometry->GetnPoint(); iPoint++) {\n    for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n      node[iPoint]->SetSolution_Max(iVar, -EPS);\n      node[iPoint]->SetSolution_Min(iVar, EPS);\n      node[iPoint]->SetLimiter_Primitive(iVar, 2.0);\n    }\n  }\n  \n  /*--- Establish bounds for Spekreijse monotonicity by finding max & min values of neighbor variables --*/\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Point identification, Normal vector and area ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    /*--- Get the primitive variables ---*/\n    \n    Primitive_i = node[iPoint]->GetPrimitive();\n    Primitive_j = node[jPoint]->GetPrimitive();\n    \n    /*--- Compute the maximum, and minimum values for nodes i & j ---*/\n    \n    for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n      du = (Primitive_j[iVar] - Primitive_i[iVar]);\n      node[iPoint]->SetSolution_Min(iVar, min(node[iPoint]->GetSolution_Min(iVar), du));\n      node[iPoint]->SetSolution_Max(iVar, max(node[iPoint]->GetSolution_Max(iVar), du));\n      node[jPoint]->SetSolution_Min(iVar, min(node[jPoint]->GetSolution_Min(iVar), -du));\n      node[jPoint]->SetSolution_Max(iVar, max(node[jPoint]->GetSolution_Max(iVar), -du));\n    }\n    \n  }\n  \n  \n  /*--- Barth-Jespersen limiter with Venkatakrishnan modification ---*/\n  \n  if (config->GetKind_SlopeLimit_Flow() == BARTH_JESPERSEN) {\n    \n    for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n      \n      iPoint     = geometry->edge[iEdge]->GetNode(0);\n      jPoint     = geometry->edge[iEdge]->GetNode(1);\n      Gradient_i = node[iPoint]->GetGradient_Primitive();\n      Gradient_j = node[jPoint]->GetGradient_Primitive();\n      Coord_i    = geometry->node[iPoint]->GetCoord();\n      Coord_j    = geometry->node[jPoint]->GetCoord();\n      \n      for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n        \n        /*--- Calculate the interface left gradient, delta- (dm) ---*/\n        \n        dm = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          dm += 0.5*(Coord_j[iDim]-Coord_i[iDim])*Gradient_i[iVar][iDim];\n        \n        if (dm == 0.0) { limiter = 2.0; }\n        else {\n          if ( dm > 0.0 ) dp = node[iPoint]->GetSolution_Max(iVar);\n          else dp = node[iPoint]->GetSolution_Min(iVar);\n          limiter = dp/dm;\n        }\n        \n        if (limiter < node[iPoint]->GetLimiter_Primitive(iVar))\n          node[iPoint]->SetLimiter_Primitive(iVar, limiter);\n        \n        /*--- Calculate the interface right gradient, delta+ (dp) ---*/\n        \n        dm = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          dm += 0.5*(Coord_i[iDim]-Coord_j[iDim])*Gradient_j[iVar][iDim];\n        \n        if (dm == 0.0) { limiter = 2.0; }\n        else {\n          if ( dm > 0.0 ) dp = node[jPoint]->GetSolution_Max(iVar);\n          else dp = node[jPoint]->GetSolution_Min(iVar);\n          limiter = dp/dm;\n        }\n        \n        if (limiter < node[jPoint]->GetLimiter_Primitive(iVar))\n          node[jPoint]->SetLimiter_Primitive(iVar, limiter);\n        \n      }\n      \n    }\n    \n    for (iPoint = 0; iPoint < geometry->GetnPoint(); iPoint++) {\n      for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n        y =  node[iPoint]->GetLimiter_Primitive(iVar);\n        limiter = (y*y + 2.0*y) / (y*y + y + 2.0);\n        node[iPoint]->SetLimiter_Primitive(iVar, limiter);\n      }\n    }\n    \n  }\n  \n  /*--- Venkatakrishnan limiter ---*/\n  \n  if (config->GetKind_SlopeLimit_Flow() == VENKATAKRISHNAN) {\n    \n    /*-- Get limiter parameters from the configuration file ---*/\n    \n    dave = config->GetRefElemLength();\n    LimK = config->GetLimiterCoeff();\n    eps1 = LimK*dave;\n    eps2 = eps1*eps1*eps1;\n    \n    for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n      \n      iPoint     = geometry->edge[iEdge]->GetNode(0);\n      jPoint     = geometry->edge[iEdge]->GetNode(1);\n      Gradient_i = node[iPoint]->GetGradient_Primitive();\n      Gradient_j = node[jPoint]->GetGradient_Primitive();\n      Coord_i    = geometry->node[iPoint]->GetCoord();\n      Coord_j    = geometry->node[jPoint]->GetCoord();\n      \n\n      AD::StartPreacc();\n      AD::SetPreaccIn(Gradient_i, nPrimVarGrad, nDim);\n      AD::SetPreaccIn(Gradient_j, nPrimVarGrad, nDim);\n      AD::SetPreaccIn(Coord_i, nDim); AD::SetPreaccIn(Coord_j, nDim);\n\n\n      for (iVar = 0; iVar < nPrimVarGrad; iVar++) {\n        \n        AD::SetPreaccIn(node[iPoint]->GetSolution_Max(iVar));\n        AD::SetPreaccIn(node[iPoint]->GetSolution_Min(iVar));\n        AD::SetPreaccIn(node[jPoint]->GetSolution_Max(iVar));\n        AD::SetPreaccIn(node[jPoint]->GetSolution_Min(iVar));\n\n        /*--- Calculate the interface left gradient, delta- (dm) ---*/\n        \n        dm = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          dm += 0.5*(Coord_j[iDim]-Coord_i[iDim])*Gradient_i[iVar][iDim];\n        \n        /*--- Calculate the interface right gradient, delta+ (dp) ---*/\n        \n        if ( dm > 0.0 ) dp = node[iPoint]->GetSolution_Max(iVar);\n        else dp = node[iPoint]->GetSolution_Min(iVar);\n        \n        limiter = ( dp*dp + 2.0*dp*dm + eps2 )/( dp*dp + dp*dm + 2.0*dm*dm + eps2);\n        \n        if (limiter < node[iPoint]->GetLimiter_Primitive(iVar)){\n          node[iPoint]->SetLimiter_Primitive(iVar, limiter);\n          AD::SetPreaccOut(node[iPoint]->GetLimiter_Primitive()[iVar]);\n        }\n        \n        /*-- Repeat for point j on the edge ---*/\n        \n        dm = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          dm += 0.5*(Coord_i[iDim]-Coord_j[iDim])*Gradient_j[iVar][iDim];\n        \n        if ( dm > 0.0 ) dp = node[jPoint]->GetSolution_Max(iVar);\n        else dp = node[jPoint]->GetSolution_Min(iVar);\n        \n        limiter = ( dp*dp + 2.0*dp*dm + eps2 )/( dp*dp + dp*dm + 2.0*dm*dm + eps2);\n        \n        if (limiter < node[jPoint]->GetLimiter_Primitive(iVar)){\n          node[jPoint]->SetLimiter_Primitive(iVar, limiter);\n          AD::SetPreaccOut(node[jPoint]->GetLimiter_Primitive()[iVar]);\n        }\n      }\n\n      AD::EndPreacc();\n      \n    }\n    \n  }\n  \n  /*--- Limiter MPI ---*/\n  \n  Set_MPI_Primitive_Limiter(geometry, config);\n  \n}\n\n//void CEulerSolver::SetSecondary_Gradient_GG(CGeometry *geometry, CConfig *config) {\n//  unsigned long iPoint, jPoint, iEdge, iVertex;\n//  unsigned short iDim, iVar, iMarker;\n//  su2double *SecondaryVar_Vertex, *SecondaryVar_i, *SecondaryVar_j, SecondaryVar_Average,\n//  Partial_Gradient, Partial_Res, *Normal;\n//\n//  /*--- Gradient Secondary variables compressible (temp, vx, vy, vz, P, rho)\n//   Gradient Secondary variables incompressible (rho, vx, vy, vz, beta) ---*/\n//  SecondaryVar_Vertex = new su2double [nSecondaryVarGrad];\n//  SecondaryVar_i = new su2double [nSecondaryVarGrad];\n//  SecondaryVar_j = new su2double [nSecondaryVarGrad];\n//\n//  /*--- Set Gradient_Secondary to zero ---*/\n//  for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n//    node[iPoint]->SetGradient_SecondaryZero(nSecondaryVarGrad);\n//\n//  /*--- Loop interior edges ---*/\n//  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n//    iPoint = geometry->edge[iEdge]->GetNode(0);\n//    jPoint = geometry->edge[iEdge]->GetNode(1);\n//\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      SecondaryVar_i[iVar] = node[iPoint]->GetSecondary(iVar);\n//      SecondaryVar_j[iVar] = node[jPoint]->GetSecondary(iVar);\n//    }\n//\n//    Normal = geometry->edge[iEdge]->GetNormal();\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      SecondaryVar_Average =  0.5 * ( SecondaryVar_i[iVar] + SecondaryVar_j[iVar] );\n//      for (iDim = 0; iDim < nDim; iDim++) {\n//        Partial_Res = SecondaryVar_Average*Normal[iDim];\n//        if (geometry->node[iPoint]->GetDomain())\n//          node[iPoint]->AddGradient_Secondary(iVar, iDim, Partial_Res);\n//        if (geometry->node[jPoint]->GetDomain())\n//          node[jPoint]->SubtractGradient_Secondary(iVar, iDim, Partial_Res);\n//      }\n//    }\n//  }\n//\n//  /*--- Loop boundary edges ---*/\n//  for (iMarker = 0; iMarker < geometry->GetnMarker(); iMarker++) {\n//    for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n//      iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n//      if (geometry->node[iPoint]->GetDomain()) {\n//\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          SecondaryVar_Vertex[iVar] = node[iPoint]->GetSecondary(iVar);\n//\n//        Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          for (iDim = 0; iDim < nDim; iDim++) {\n//            Partial_Res = SecondaryVar_Vertex[iVar]*Normal[iDim];\n//            node[iPoint]->SubtractGradient_Secondary(iVar, iDim, Partial_Res);\n//          }\n//      }\n//    }\n//  }\n//\n//  /*--- Update gradient value ---*/\n//  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      for (iDim = 0; iDim < nDim; iDim++) {\n//        Partial_Gradient = node[iPoint]->GetGradient_Secondary(iVar, iDim) / (geometry->node[iPoint]->GetVolume());\n//        node[iPoint]->SetGradient_Secondary(iVar, iDim, Partial_Gradient);\n//      }\n//    }\n//  }\n//\n//  delete [] SecondaryVar_Vertex;\n//  delete [] SecondaryVar_i;\n//  delete [] SecondaryVar_j;\n//\n//  Set_MPI_Secondary_Gradient(geometry, config);\n//\n//}\n\n//void CEulerSolver::SetSecondary_Gradient_LS(CGeometry *geometry, CConfig *config) {\n//\n//  unsigned short iVar, iDim, jDim, iNeigh;\n//  unsigned long iPoint, jPoint;\n//  su2double *SecondaryVar_i, *SecondaryVar_j, *Coord_i, *Coord_j, r11, r12, r13, r22, r23, r23_a,\n//  r23_b, r33, weight, product, z11, z12, z13, z22, z23, z33, detR2;\n//  bool singular;\n//\n//  /*--- Loop over points of the grid ---*/\n//\n//  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n//\n//    /*--- Set the value of the singular ---*/\n//    singular = false;\n//\n//    /*--- Get coordinates ---*/\n//\n//    Coord_i = geometry->node[iPoint]->GetCoord();\n//\n//    /*--- Get Secondarys from CVariable ---*/\n//\n//    SecondaryVar_i = node[iPoint]->GetSecondary();\n//\n//    /*--- Inizialization of variables ---*/\n//\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//      for (iDim = 0; iDim < nDim; iDim++)\n//        cvector[iVar][iDim] = 0.0;\n//\n//    r11 = 0.0; r12 = 0.0;   r13 = 0.0;    r22 = 0.0;\n//    r23 = 0.0; r23_a = 0.0; r23_b = 0.0;  r33 = 0.0; detR2 = 0.0;\n//\n//    for (iNeigh = 0; iNeigh < geometry->node[iPoint]->GetnPoint(); iNeigh++) {\n//      jPoint = geometry->node[iPoint]->GetPoint(iNeigh);\n//      Coord_j = geometry->node[jPoint]->GetCoord();\n//\n//      SecondaryVar_j = node[jPoint]->GetSecondary();\n//\n//      weight = 0.0;\n//      for (iDim = 0; iDim < nDim; iDim++)\n//        weight += (Coord_j[iDim]-Coord_i[iDim])*(Coord_j[iDim]-Coord_i[iDim]);\n//\n//      /*--- Sumations for entries of upper triangular matrix R ---*/\n//\n//      if (weight != 0.0) {\n//\n//        r11 += (Coord_j[0]-Coord_i[0])*(Coord_j[0]-Coord_i[0])/weight;\n//        r12 += (Coord_j[0]-Coord_i[0])*(Coord_j[1]-Coord_i[1])/weight;\n//        r22 += (Coord_j[1]-Coord_i[1])*(Coord_j[1]-Coord_i[1])/weight;\n//\n//        if (nDim == 3) {\n//          r13 += (Coord_j[0]-Coord_i[0])*(Coord_j[2]-Coord_i[2])/weight;\n//          r23_a += (Coord_j[1]-Coord_i[1])*(Coord_j[2]-Coord_i[2])/weight;\n//          r23_b += (Coord_j[0]-Coord_i[0])*(Coord_j[2]-Coord_i[2])/weight;\n//          r33 += (Coord_j[2]-Coord_i[2])*(Coord_j[2]-Coord_i[2])/weight;\n//        }\n//\n//        /*--- Entries of c:= transpose(A)*b ---*/\n//\n//        for (iVar = 0; iVar < nSecondaryVarGrad; iVar++)\n//          for (iDim = 0; iDim < nDim; iDim++)\n//            cvector[iVar][iDim] += (Coord_j[iDim]-Coord_i[iDim])*(SecondaryVar_j[iVar]-SecondaryVar_i[iVar])/weight;\n//\n//      }\n//\n//    }\n//\n//    /*--- Entries of upper triangular matrix R ---*/\n//\n//    if (r11 >= 0.0) r11 = sqrt(r11); else r11 = 0.0;\n//    if (r11 != 0.0) r12 = r12/r11; else r12 = 0.0;\n//    if (r22-r12*r12 >= 0.0) r22 = sqrt(r22-r12*r12); else r22 = 0.0;\n//\n//    if (nDim == 3) {\n//      if (r11 != 0.0) r13 = r13/r11; else r13 = 0.0;\n//      if ((r22 != 0.0) && (r11*r22 != 0.0)) r23 = r23_a/r22 - r23_b*r12/(r11*r22); else r23 = 0.0;\n//      if (r33-r23*r23-r13*r13 >= 0.0) r33 = sqrt(r33-r23*r23-r13*r13); else r33 = 0.0;\n//    }\n//\n//    /*--- Compute determinant ---*/\n//\n//    if (nDim == 2) detR2 = (r11*r22)*(r11*r22);\n//    else detR2 = (r11*r22*r33)*(r11*r22*r33);\n//\n//    /*--- Detect singular matrices ---*/\n//\n//    if (abs(detR2) <= EPS) { detR2 = 1.0; singular = true; }\n//\n//    /*--- S matrix := inv(R)*traspose(inv(R)) ---*/\n//\n//    if (singular) {\n//      for (iDim = 0; iDim < nDim; iDim++)\n//        for (jDim = 0; jDim < nDim; jDim++)\n//          Smatrix[iDim][jDim] = 0.0;\n//    }\n//    else {\n//      if (nDim == 2) {\n//        Smatrix[0][0] = (r12*r12+r22*r22)/detR2;\n//        Smatrix[0][1] = -r11*r12/detR2;\n//        Smatrix[1][0] = Smatrix[0][1];\n//        Smatrix[1][1] = r11*r11/detR2;\n//      }\n//      else {\n//        z11 = r22*r33; z12 = -r12*r33; z13 = r12*r23-r13*r22;\n//        z22 = r11*r33; z23 = -r11*r23; z33 = r11*r22;\n//        Smatrix[0][0] = (z11*z11+z12*z12+z13*z13)/detR2;\n//        Smatrix[0][1] = (z12*z22+z13*z23)/detR2;\n//        Smatrix[0][2] = (z13*z33)/detR2;\n//        Smatrix[1][0] = Smatrix[0][1];\n//        Smatrix[1][1] = (z22*z22+z23*z23)/detR2;\n//        Smatrix[1][2] = (z23*z33)/detR2;\n//        Smatrix[2][0] = Smatrix[0][2];\n//        Smatrix[2][1] = Smatrix[1][2];\n//        Smatrix[2][2] = (z33*z33)/detR2;\n//      }\n//    }\n//\n//    /*--- Computation of the gradient: S*c ---*/\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      for (iDim = 0; iDim < nDim; iDim++) {\n//        product = 0.0;\n//        for (jDim = 0; jDim < nDim; jDim++) {\n//          product += Smatrix[iDim][jDim]*cvector[iVar][jDim];\n//        }\n//\n//        node[iPoint]->SetGradient_Secondary(iVar, iDim, product);\n//      }\n//    }\n//\n//  }\n//\n//  Set_MPI_Secondary_Gradient(geometry, config);\n//\n//}\n\n//void CEulerSolver::SetSecondary_Limiter(CGeometry *geometry, CConfig *config) {\n//\n//  unsigned long iEdge, iPoint, jPoint;\n//  unsigned short iVar, iDim;\n//  su2double **Gradient_i, **Gradient_j, *Coord_i, *Coord_j, *Secondary_i, *Secondary_j,\n//  dave, LimK, eps2, dm, dp, du, limiter;\n//\n//  /*--- Initialize solution max and solution min in the entire domain --*/\n//  for (iPoint = 0; iPoint < geometry->GetnPoint(); iPoint++) {\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      node[iPoint]->SetSolution_Max(iVar, -EPS);\n//      node[iPoint]->SetSolution_Min(iVar, EPS);\n//    }\n//  }\n//\n//  /*--- Establish bounds for Spekreijse monotonicity by finding max & min values of neighbor variables --*/\n//  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n//\n//    /*--- Point identification, Normal vector and area ---*/\n//    iPoint = geometry->edge[iEdge]->GetNode(0);\n//    jPoint = geometry->edge[iEdge]->GetNode(1);\n//\n//    /*--- Get the conserved variables ---*/\n//    Secondary_i = node[iPoint]->GetSecondary();\n//    Secondary_j = node[jPoint]->GetSecondary();\n//\n//    /*--- Compute the maximum, and minimum values for nodes i & j ---*/\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      du = (Secondary_j[iVar] - Secondary_i[iVar]);\n//      node[iPoint]->SetSolution_Min(iVar, min(node[iPoint]->GetSolution_Min(iVar), du));\n//      node[iPoint]->SetSolution_Max(iVar, max(node[iPoint]->GetSolution_Max(iVar), du));\n//      node[jPoint]->SetSolution_Min(iVar, min(node[jPoint]->GetSolution_Min(iVar), -du));\n//      node[jPoint]->SetSolution_Max(iVar, max(node[jPoint]->GetSolution_Max(iVar), -du));\n//    }\n//  }\n//\n//  /*--- Initialize the limiter --*/\n//  for (iPoint = 0; iPoint < geometry->GetnPointDomain(); iPoint++) {\n//    for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//      node[iPoint]->SetLimiter_Secondary(iVar, 2.0);\n//    }\n//  }\n//\n//  /*--- Venkatakrishnan limiter ---*/\n//\n//  if (config->GetKind_SlopeLimit() == VENKATAKRISHNAN) {\n//\n//    /*-- Get limiter parameters from the configuration file ---*/\n//    dave = config->GetRefElemLength();\n//    LimK = config->GetLimiterCoeff();\n//    eps2 = pow((LimK*dave), 3.0);\n//\n//    for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n//\n//      iPoint     = geometry->edge[iEdge]->GetNode(0);\n//      jPoint     = geometry->edge[iEdge]->GetNode(1);\n//      Gradient_i = node[iPoint]->GetGradient_Secondary();\n//      Gradient_j = node[jPoint]->GetGradient_Secondary();\n//      Coord_i    = geometry->node[iPoint]->GetCoord();\n//      Coord_j    = geometry->node[jPoint]->GetCoord();\n//\n//      for (iVar = 0; iVar < nSecondaryVarGrad; iVar++) {\n//\n//        /*--- Calculate the interface left gradient, delta- (dm) ---*/\n//        dm = 0.0;\n//        for (iDim = 0; iDim < nDim; iDim++)\n//          dm += 0.5*(Coord_j[iDim]-Coord_i[iDim])*Gradient_i[iVar][iDim];\n//\n//        /*--- Calculate the interface right gradient, delta+ (dp) ---*/\n//        if ( dm > 0.0 ) dp = node[iPoint]->GetSolution_Max(iVar);\n//        else dp = node[iPoint]->GetSolution_Min(iVar);\n//\n//        limiter = ( dp*dp + 2.0*dp*dm + eps2 )/( dp*dp + dp*dm + 2.0*dm*dm + eps2);\n//\n//        if (limiter < node[iPoint]->GetLimiter_Secondary(iVar))\n//          if (geometry->node[iPoint]->GetDomain()) node[iPoint]->SetLimiter_Secondary(iVar, limiter);\n//\n//        /*-- Repeat for point j on the edge ---*/\n//        dm = 0.0;\n//        for (iDim = 0; iDim < nDim; iDim++)\n//          dm += 0.5*(Coord_i[iDim]-Coord_j[iDim])*Gradient_j[iVar][iDim];\n//\n//        if ( dm > 0.0 ) dp = node[jPoint]->GetSolution_Max(iVar);\n//        else dp = node[jPoint]->GetSolution_Min(iVar);\n//\n//        limiter = ( dp*dp + 2.0*dp*dm + eps2 )/( dp*dp + dp*dm + 2.0*dm*dm + eps2);\n//\n//        if (limiter < node[jPoint]->GetLimiter_Secondary(iVar))\n//          if (geometry->node[jPoint]->GetDomain()) node[jPoint]->SetLimiter_Secondary(iVar, limiter);\n//      }\n//    }\n//  }\n//\n//  /*--- Limiter MPI ---*/\n//  Set_MPI_Secondary_Limiter(geometry, config);\n//\n//}\n\nvoid CEulerSolver::SetPreconditioner(CConfig *config, unsigned long iPoint) {\n  unsigned short iDim, jDim, iVar, jVar;\n  su2double Beta, local_Mach, Beta2, rho, enthalpy, soundspeed, sq_vel;\n  su2double *U_i = NULL;\n  su2double Beta_min = config->GetminTurkelBeta();\n  su2double Beta_max = config->GetmaxTurkelBeta();\n  \n  \n  /*--- Variables to calculate the preconditioner parameter Beta ---*/\n  local_Mach = sqrt(node[iPoint]->GetVelocity2())/node[iPoint]->GetSoundSpeed();\n  Beta \t\t    = max(Beta_min, min(local_Mach, Beta_max));\n  Beta2 \t\t    = Beta*Beta;\n  \n  U_i = node[iPoint]->GetSolution();\n  \n  rho = U_i[0];\n  enthalpy = node[iPoint]->GetEnthalpy();\n  soundspeed = node[iPoint]->GetSoundSpeed();\n  sq_vel = node[iPoint]->GetVelocity2();\n  \n  /*---Calculating the inverse of the preconditioning matrix that multiplies the time derivative  */\n  LowMach_Precontioner[0][0] = 0.5*sq_vel;\n  LowMach_Precontioner[0][nVar-1] = 1.0;\n  for (iDim = 0; iDim < nDim; iDim ++)\n    LowMach_Precontioner[0][1+iDim] = -1.0*U_i[iDim+1]/rho;\n  \n  for (iDim = 0; iDim < nDim; iDim ++) {\n    LowMach_Precontioner[iDim+1][0] = 0.5*sq_vel*U_i[iDim+1]/rho;\n    LowMach_Precontioner[iDim+1][nVar-1] = U_i[iDim+1]/rho;\n    for (jDim = 0; jDim < nDim; jDim ++) {\n      LowMach_Precontioner[iDim+1][1+jDim] = -1.0*U_i[jDim+1]/rho*U_i[iDim+1]/rho;\n    }\n  }\n  \n  LowMach_Precontioner[nVar-1][0] = 0.5*sq_vel*enthalpy;\n  LowMach_Precontioner[nVar-1][nVar-1] = enthalpy;\n  for (iDim = 0; iDim < nDim; iDim ++)\n    LowMach_Precontioner[nVar-1][1+iDim] = -1.0*U_i[iDim+1]/rho*enthalpy;\n  \n  \n  for (iVar = 0; iVar < nVar; iVar ++ ) {\n    for (jVar = 0; jVar < nVar; jVar ++ ) {\n      LowMach_Precontioner[iVar][jVar] = (1.0/(Beta2+EPS) - 1.0) * (Gamma-1.0)/(soundspeed*soundspeed)*LowMach_Precontioner[iVar][jVar];\n      if (iVar == jVar)\n        LowMach_Precontioner[iVar][iVar] += 1.0;\n    }\n  }\n  \n}\n\nvoid CEulerSolver::GetEngine_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output) {\n  \n  unsigned short iDim, iMarker, iMarker_EngineInflow, iMarker_EngineBleed, iMarker_EngineExhaust, iVar;\n  unsigned long iVertex, iPoint;\n  su2double Pressure, Temperature, Velocity[3], Velocity2, MassFlow, Density, Energy, Area,\n  Mach, SoundSpeed, Flow_Dir[3], alpha;\n  \n  su2double Gas_Constant                  = config->GetGas_ConstantND();\n  unsigned short nMarker_EngineInflow  = config->GetnMarker_EngineInflow();\n  unsigned short nMarker_EngineBleed   = config->GetnMarker_EngineBleed();\n  unsigned short nMarker_EngineExhaust = config->GetnMarker_EngineExhaust();\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Compute the numerical fan face Mach number, and the total area of the inflow ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    Inflow_MassFlow[iMarker] = 0.0;\n    Inflow_Mach[iMarker] = 0.0;\n    Inflow_Pressure[iMarker] = 0.0;\n    Inflow_Area[iMarker] = 0.0;\n    \n    Bleed_MassFlow[iMarker] = 0.0;\n    Bleed_Pressure[iMarker] = 0.0;\n    Bleed_Temperature[iMarker] = 0.0;\n    Bleed_Area[iMarker] = 0.0;\n    \n    Exhaust_MassFlow[iMarker] = 0.0;\n    Exhaust_Pressure[iMarker] = 0.0;\n    Exhaust_Temperature[iMarker] = 0.0;\n    Exhaust_Area[iMarker] = 0.0;\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ENGINE_INFLOW) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          geometry->vertex[iMarker][iVertex]->GetNormal(Vector);\n          \n          Density = node[iPoint]->GetSolution(0);\n          Velocity2 = 0.0; Area = 0.0; MassFlow = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Area += Vector[iDim]*Vector[iDim];\n            Velocity[iDim] = node[iPoint]->GetSolution(iDim+1)/Density;\n            Velocity2 += Velocity[iDim]*Velocity[iDim];\n            MassFlow -= Vector[iDim]*node[iPoint]->GetSolution(iDim+1);\n          }\n          \n          Area       = sqrt (Area);\n          Energy     = node[iPoint]->GetSolution(nVar-1)/Density;\n          Pressure   = Gamma_Minus_One*Density*(Energy-0.5*Velocity2);\n          SoundSpeed = sqrt(Gamma*Pressure/Density);\n          Mach       = sqrt(Velocity2)/SoundSpeed;\n          \n          /*--- Compute the Inflow_MassFlow, Inflow_Pressure, Inflow_Mach, and Inflow_Area ---*/\n          \n          Inflow_MassFlow[iMarker] += MassFlow;\n          Inflow_Pressure[iMarker] += Pressure*Area;\n          Inflow_Mach[iMarker] += Mach*Area;\n          Inflow_Area[iMarker] += Area;\n          \n        }\n      }\n      \n    }\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ENGINE_BLEED) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          geometry->vertex[iMarker][iVertex]->GetNormal(Vector);\n          \n          Density = node[iPoint]->GetSolution(0);\n          Velocity2 = 0.0; Area = 0.0; MassFlow = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Area += Vector[iDim]*Vector[iDim];\n            Velocity[iDim] = node[iPoint]->GetSolution(iDim+1)/Density;\n            Velocity2 += Velocity[iDim]*Velocity[iDim];\n            MassFlow += Vector[iDim]*node[iPoint]->GetSolution(iDim+1);\n          }\n          \n          Area       = sqrt (Area);\n          Energy     = node[iPoint]->GetSolution(nVar-1)/Density;\n          Pressure   = Gamma_Minus_One*Density*(Energy-0.5*Velocity2);\n          Temperature = Pressure / (Gas_Constant * Density);\n          \n          /*--- Compute the Bleed_MassFlow, Bleed_Pressure, Bleed_Temperature, and Bleed_Area ---*/\n          \n          Bleed_MassFlow[iMarker] += MassFlow;\n          Bleed_Pressure[iMarker] += Pressure*Area;\n          Bleed_Temperature[iMarker] += Temperature*Area;\n          Bleed_Area[iMarker] += Area;\n          \n        }\n      }\n      \n    }\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ENGINE_EXHAUST) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          geometry->vertex[iMarker][iVertex]->GetNormal(Vector);\n          \n          Density = node[iPoint]->GetSolution(0);\n          Velocity2 = 0.0; Area = 0.0; MassFlow = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Area += Vector[iDim]*Vector[iDim];\n            Velocity[iDim] = node[iPoint]->GetSolution(iDim+1)/Density;\n            Velocity2 += Velocity[iDim]*Velocity[iDim];\n            MassFlow += Vector[iDim]*node[iPoint]->GetSolution(iDim+1);\n          }\n          \n          Area       = sqrt (Area);\n          Energy     = node[iPoint]->GetSolution(nVar-1)/Density;\n          Pressure   = Gamma_Minus_One*Density*(Energy-0.5*Velocity2);\n          Temperature = Pressure / (Gas_Constant * Density);\n          \n          /*--- Compute the mass Exhaust_MassFlow ---*/\n          \n          Exhaust_MassFlow[iMarker] += MassFlow;\n          Exhaust_Pressure[iMarker] += Pressure*Area;\n          Exhaust_Temperature[iMarker] += Temperature*Area;\n          Exhaust_Area[iMarker] += Area;\n          \n        }\n      }\n      \n    }\n    \n  }\n  \n  /*--- Copy to the appropriate structure ---*/\n  \n  su2double *Inflow_MassFlow_Local = new su2double [nMarker_EngineInflow];\n  su2double *Inflow_Mach_Local = new su2double [nMarker_EngineInflow];\n  su2double *Inflow_Pressure_Local = new su2double [nMarker_EngineInflow];\n  su2double *Inflow_Area_Local = new su2double [nMarker_EngineInflow];\n  \n  su2double *Inflow_MassFlow_Total = new su2double [nMarker_EngineInflow];\n  su2double *Inflow_Mach_Total = new su2double [nMarker_EngineInflow];\n  su2double *Inflow_Pressure_Total = new su2double [nMarker_EngineInflow];\n  su2double *Inflow_Area_Total = new su2double [nMarker_EngineInflow];\n  \n  for (iMarker_EngineInflow = 0; iMarker_EngineInflow < nMarker_EngineInflow; iMarker_EngineInflow++) {\n    Inflow_MassFlow_Local[iMarker_EngineInflow] = 0.0;\n    Inflow_Mach_Local[iMarker_EngineInflow] = 0.0;\n    Inflow_Pressure_Local[iMarker_EngineInflow] = 0.0;\n    Inflow_Area_Local[iMarker_EngineInflow] = 0.0;\n    \n    Inflow_MassFlow_Total[iMarker_EngineInflow] = 0.0;\n    Inflow_Mach_Total[iMarker_EngineInflow] = 0.0;\n    Inflow_Pressure_Total[iMarker_EngineInflow] = 0.0;\n    Inflow_Area_Total[iMarker_EngineInflow] = 0.0;\n  }\n  \n  su2double *Bleed_MassFlow_Local = new su2double [nMarker_EngineBleed];\n  su2double *Bleed_Temperature_Local = new su2double [nMarker_EngineBleed];\n  su2double *Bleed_Pressure_Local = new su2double [nMarker_EngineBleed];\n  su2double *Bleed_Area_Local = new su2double [nMarker_EngineBleed];\n  \n  su2double *Bleed_MassFlow_Total = new su2double [nMarker_EngineBleed];\n  su2double *Bleed_Temperature_Total = new su2double [nMarker_EngineBleed];\n  su2double *Bleed_Pressure_Total = new su2double [nMarker_EngineBleed];\n  su2double *Bleed_Area_Total = new su2double [nMarker_EngineBleed];\n  \n  for (iMarker_EngineBleed = 0; iMarker_EngineBleed < nMarker_EngineBleed; iMarker_EngineBleed++) {\n    Bleed_MassFlow_Local[iMarker_EngineBleed] = 0.0;\n    Bleed_Temperature_Local[iMarker_EngineBleed] = 0.0;\n    Bleed_Pressure_Local[iMarker_EngineBleed] = 0.0;\n    Bleed_Area_Local[iMarker_EngineBleed] = 0.0;\n    \n    Bleed_MassFlow_Total[iMarker_EngineBleed] = 0.0;\n    Bleed_Temperature_Total[iMarker_EngineBleed] = 0.0;\n    Bleed_Pressure_Total[iMarker_EngineBleed] = 0.0;\n    Bleed_Area_Total[iMarker_EngineBleed] = 0.0;\n  }\n  \n  su2double *Exhaust_MassFlow_Local = new su2double [nMarker_EngineExhaust];\n  su2double *Exhaust_Temperature_Local = new su2double [nMarker_EngineExhaust];\n  su2double *Exhaust_Pressure_Local = new su2double [nMarker_EngineExhaust];\n  su2double *Exhaust_Area_Local = new su2double [nMarker_EngineExhaust];\n  \n  su2double *Exhaust_MassFlow_Total = new su2double [nMarker_EngineExhaust];\n  su2double *Exhaust_Temperature_Total = new su2double [nMarker_EngineExhaust];\n  su2double *Exhaust_Pressure_Total = new su2double [nMarker_EngineExhaust];\n  su2double *Exhaust_Area_Total = new su2double [nMarker_EngineExhaust];\n  \n  for (iMarker_EngineExhaust = 0; iMarker_EngineExhaust < nMarker_EngineExhaust; iMarker_EngineExhaust++) {\n    Exhaust_MassFlow_Local[iMarker_EngineExhaust] = 0.0;\n    Exhaust_Temperature_Local[iMarker_EngineExhaust] = 0.0;\n    Exhaust_Pressure_Local[iMarker_EngineExhaust] = 0.0;\n    Exhaust_Area_Local[iMarker_EngineExhaust] = 0.0;\n    \n    Exhaust_MassFlow_Total[iMarker_EngineExhaust] = 0.0;\n    Exhaust_Temperature_Total[iMarker_EngineExhaust] = 0.0;\n    Exhaust_Pressure_Total[iMarker_EngineExhaust] = 0.0;\n    Exhaust_Area_Total[iMarker_EngineExhaust] = 0.0;\n  }\n  \n  /*--- Compute the numerical fan face Mach number, mach number, temperature and the total area ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ENGINE_INFLOW) {\n      \n      for (iMarker_EngineInflow = 0; iMarker_EngineInflow < nMarker_EngineInflow; iMarker_EngineInflow++) {\n        \n        /*--- Add the Inflow_MassFlow, Inflow_Mach, Inflow_Pressure and Inflow_Area to the particular boundary ---*/\n        \n        if (config->GetMarker_All_TagBound(iMarker) == config->GetMarker_EngineInflow(iMarker_EngineInflow)) {\n          Inflow_MassFlow_Local[iMarker_EngineInflow] += Inflow_MassFlow[iMarker];\n          Inflow_Mach_Local[iMarker_EngineInflow] += Inflow_Mach[iMarker];\n          Inflow_Pressure_Local[iMarker_EngineInflow] += Inflow_Pressure[iMarker];\n          Inflow_Area_Local[iMarker_EngineInflow] += Inflow_Area[iMarker];\n        }\n        \n      }\n      \n    }\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ENGINE_BLEED) {\n      \n      for (iMarker_EngineBleed = 0; iMarker_EngineBleed < nMarker_EngineBleed; iMarker_EngineBleed++) {\n        \n        /*--- Add the Bleed_MassFlow, Bleed_Temperature, Bleed_Pressure and Bleed_Area to the particular boundary ---*/\n        \n        if (config->GetMarker_All_TagBound(iMarker) == config->GetMarker_EngineBleed(iMarker_EngineBleed)) {\n          Bleed_MassFlow_Local[iMarker_EngineBleed] += Bleed_MassFlow[iMarker];\n          Bleed_Temperature_Local[iMarker_EngineBleed] += Bleed_Temperature[iMarker];\n          Bleed_Pressure_Local[iMarker_EngineBleed] += Bleed_Pressure[iMarker];\n          Bleed_Area_Local[iMarker_EngineBleed] += Bleed_Area[iMarker];\n        }\n        \n      }\n      \n    }\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ENGINE_EXHAUST) {\n      \n      for (iMarker_EngineExhaust= 0; iMarker_EngineExhaust < nMarker_EngineExhaust; iMarker_EngineExhaust++) {\n        \n        /*--- Add the Exhaust_MassFlow, and Exhaust_Area to the particular boundary ---*/\n        \n        if (config->GetMarker_All_TagBound(iMarker) == config->GetMarker_EngineExhaust(iMarker_EngineExhaust)) {\n          Exhaust_MassFlow_Local[iMarker_EngineExhaust] += Exhaust_MassFlow[iMarker];\n          Exhaust_Temperature_Local[iMarker_EngineExhaust] += Exhaust_Temperature[iMarker];\n          Exhaust_Pressure_Local[iMarker_EngineExhaust] += Exhaust_Pressure[iMarker];\n          Exhaust_Area_Local[iMarker_EngineExhaust] += Exhaust_Area[iMarker];\n        }\n        \n      }\n      \n    }\n    \n  }\n  \n#ifdef HAVE_MPI\n  \n  SU2_MPI::Allreduce(Inflow_MassFlow_Local, Inflow_MassFlow_Total, nMarker_EngineInflow, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Inflow_Mach_Local, Inflow_Mach_Total, nMarker_EngineInflow, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Inflow_Pressure_Local, Inflow_Pressure_Total, nMarker_EngineInflow, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Inflow_Area_Local, Inflow_Area_Total, nMarker_EngineInflow, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n  SU2_MPI::Allreduce(Bleed_MassFlow_Local, Bleed_MassFlow_Total, nMarker_EngineBleed, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Bleed_Temperature_Local, Bleed_Temperature_Total, nMarker_EngineBleed, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Bleed_Pressure_Local, Bleed_Pressure_Total, nMarker_EngineBleed, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Bleed_Area_Local, Bleed_Area_Total, nMarker_EngineBleed, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n  SU2_MPI::Allreduce(Exhaust_MassFlow_Local, Exhaust_MassFlow_Total, nMarker_EngineExhaust, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Exhaust_Temperature_Local, Exhaust_Temperature_Total, nMarker_EngineExhaust, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Exhaust_Pressure_Local, Exhaust_Pressure_Total, nMarker_EngineExhaust, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Exhaust_Area_Local, Exhaust_Area_Total, nMarker_EngineExhaust, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n#else\n  \n  for (iMarker_EngineInflow = 0; iMarker_EngineInflow < nMarker_EngineInflow; iMarker_EngineInflow++) {\n    Inflow_MassFlow_Total[iMarker_EngineInflow]   = Inflow_MassFlow_Local[iMarker_EngineInflow];\n    Inflow_Mach_Total[iMarker_EngineInflow]       = Inflow_Mach_Local[iMarker_EngineInflow];\n    Inflow_Pressure_Total[iMarker_EngineInflow]   = Inflow_Pressure_Local[iMarker_EngineInflow];\n    Inflow_Area_Total[iMarker_EngineInflow]       = Inflow_Area_Local[iMarker_EngineInflow];\n  }\n  \n  for (iMarker_EngineBleed = 0; iMarker_EngineBleed < nMarker_EngineBleed; iMarker_EngineBleed++) {\n    Bleed_MassFlow_Total[iMarker_EngineBleed]    = Bleed_MassFlow_Local[iMarker_EngineBleed];\n    Bleed_Temperature_Total[iMarker_EngineBleed] = Bleed_Temperature_Local[iMarker_EngineBleed];\n    Bleed_Pressure_Total[iMarker_EngineBleed]    = Bleed_Pressure_Local[iMarker_EngineBleed];\n    Bleed_Area_Total[iMarker_EngineBleed]        = Bleed_Area_Local[iMarker_EngineBleed];\n  }\n  \n  for (iMarker_EngineExhaust = 0; iMarker_EngineExhaust < nMarker_EngineExhaust; iMarker_EngineExhaust++) {\n    Exhaust_MassFlow_Total[iMarker_EngineExhaust]  = Exhaust_MassFlow_Local[iMarker_EngineExhaust];\n    Exhaust_Temperature_Total[iMarker_EngineExhaust] = Exhaust_Temperature_Local[iMarker_EngineExhaust];\n    Exhaust_Pressure_Total[iMarker_EngineExhaust]   = Exhaust_Pressure_Local[iMarker_EngineExhaust];\n    Exhaust_Area_Total[iMarker_EngineExhaust]      = Exhaust_Area_Local[iMarker_EngineExhaust];\n  }\n  \n#endif\n  \n  /*--- Compute the value of Inflow_Area_Total, and Inflow_Pressure_Total, and\n   set the value in the config structure for future use ---*/\n  \n  for (iMarker_EngineInflow = 0; iMarker_EngineInflow < nMarker_EngineInflow; iMarker_EngineInflow++) {\n    if (Inflow_Area_Total[iMarker_EngineInflow] != 0.0) Inflow_Mach_Total[iMarker_EngineInflow] /= Inflow_Area_Total[iMarker_EngineInflow];\n    else Inflow_Mach_Total[iMarker_EngineInflow] = 0.0;\n    if (Inflow_Area_Total[iMarker_EngineInflow] != 0.0) Inflow_Pressure_Total[iMarker_EngineInflow] /= Inflow_Area_Total[iMarker_EngineInflow];\n    else Inflow_Pressure_Total[iMarker_EngineInflow] = 0.0;\n    \n    if (iMesh == MESH_0) {\n      config->SetInflow_Mach(iMarker_EngineInflow, Inflow_Mach_Total[iMarker_EngineInflow]);\n      config->SetInflow_Pressure(iMarker_EngineInflow, Inflow_Pressure_Total[iMarker_EngineInflow]);\n    }\n    \n  }\n  \n  /*--- Compute the value of Bleed_Area_Total, and Bleed_Pressure_Total, and\n   set the value in the config structure for future use ---*/\n  \n  for (iMarker_EngineBleed = 0; iMarker_EngineBleed < nMarker_EngineBleed; iMarker_EngineBleed++) {\n    if (Bleed_Area_Total[iMarker_EngineBleed] != 0.0) Bleed_Temperature_Total[iMarker_EngineBleed] /= Bleed_Area_Total[iMarker_EngineBleed];\n    else Bleed_Temperature_Total[iMarker_EngineBleed] = 0.0;\n    if (Bleed_Area_Total[iMarker_EngineBleed] != 0.0) Bleed_Pressure_Total[iMarker_EngineBleed] /= Bleed_Area_Total[iMarker_EngineBleed];\n    else Bleed_Pressure_Total[iMarker_EngineBleed] = 0.0;\n    \n    if (iMesh == MESH_0) {\n      config->SetBleed_Temperature(iMarker_EngineBleed, Bleed_Temperature_Total[iMarker_EngineBleed]);\n      config->SetBleed_MassFlow(iMarker_EngineBleed, Bleed_MassFlow_Total[iMarker_EngineBleed]);\n      config->SetBleed_Pressure(iMarker_EngineBleed, Bleed_Pressure_Total[iMarker_EngineBleed]);\n    }\n    \n  }\n  \n  /*--- Compute the value of Exhaust_Area_Total, and Exhaust_Pressure_Total, and\n   set the value in the config structure for future use ---*/\n  \n  for (iMarker_EngineExhaust = 0; iMarker_EngineExhaust < nMarker_EngineExhaust; iMarker_EngineExhaust++) {\n    if (Exhaust_Area_Total[iMarker_EngineExhaust] != 0.0) Exhaust_Temperature_Total[iMarker_EngineExhaust] /= Exhaust_Area_Total[iMarker_EngineExhaust];\n    else Exhaust_Temperature_Total[iMarker_EngineExhaust] = 0.0;\n    if (Exhaust_Area_Total[iMarker_EngineExhaust] != 0.0) Exhaust_Pressure_Total[iMarker_EngineExhaust] /= Exhaust_Area_Total[iMarker_EngineExhaust];\n    else Exhaust_Pressure_Total[iMarker_EngineExhaust] = 0.0;\n    \n    if (iMesh == MESH_0) {\n      config->SetExhaust_Temperature(iMarker_EngineExhaust, Exhaust_Temperature_Total[iMarker_EngineExhaust]);\n      config->SetExhaust_Pressure(iMarker_EngineExhaust, Exhaust_Pressure_Total[iMarker_EngineExhaust]);\n    }\n    \n  }\n  \n  bool write_heads = (((config->GetExtIter() % (config->GetWrt_Con_Freq()*40)) == 0));\n  \n  if ((rank == MASTER_NODE) && (iMesh == MESH_0) && write_heads && Output) {\n    \n    cout.precision(4);\n    cout.setf(ios::fixed, ios::floatfield);\n    \n    cout << endl << \"---------------------------- Engine properties --------------------------\" << endl;\n    for (iMarker_EngineInflow = 0; iMarker_EngineInflow < nMarker_EngineInflow; iMarker_EngineInflow++) {\n      cout << \"Engine inflow (\"<< config->GetMarker_EngineInflow(iMarker_EngineInflow);\n      if (config->GetSystemMeasurements() == SI) cout << \"): Mass flow (kg/s): \";\n      else if (config->GetSystemMeasurements() == US) cout << \"): Mass flow (slug/s): \";\n      cout << Inflow_MassFlow_Total[iMarker_EngineInflow] * config->GetDensity_Ref() * config->GetVelocity_Ref()\n      << \", Mach: \" << Inflow_Mach_Total[iMarker_EngineInflow];\n      if (config->GetSystemMeasurements() == SI) cout << \", Area (m^2): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Area (ft^2): \";\n      cout << Inflow_Area_Total[iMarker_EngineInflow] <<\".\"<< endl;\n    }\n    \n    for (iMarker_EngineBleed = 0; iMarker_EngineBleed < nMarker_EngineBleed; iMarker_EngineBleed++) {\n      cout << \"Engine bleed (\"<< config->GetMarker_EngineBleed(iMarker_EngineBleed);\n      if (config->GetSystemMeasurements() == SI) cout << \"): Mass flow (kg/s): \";\n      else if (config->GetSystemMeasurements() == US) cout << \"): Mass flow (slug/s): \";\n      cout << Bleed_MassFlow_Total[iMarker_EngineBleed] * config->GetDensity_Ref() * config->GetVelocity_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Temp (K): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Temp (R): \";\n      cout << Bleed_Temperature_Total[iMarker_EngineBleed] * config->GetTemperature_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Area (m^2): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Area (ft^2): \";\n      cout << Bleed_Area_Total[iMarker_EngineBleed] <<\".\"<< endl;\n    }\n    \n    for (iMarker_EngineExhaust = 0; iMarker_EngineExhaust < nMarker_EngineExhaust; iMarker_EngineExhaust++) {\n      cout << \"Engine exhaust (\"<< config->GetMarker_EngineExhaust(iMarker_EngineExhaust);\n      if (config->GetSystemMeasurements() == SI) cout << \"): Mass flow (kg/s): \";\n      else if (config->GetSystemMeasurements() == US) cout << \"): Mass flow (slug/s): \";\n      cout << Exhaust_MassFlow_Total[iMarker_EngineExhaust] * config->GetDensity_Ref() * config->GetVelocity_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Temp (K): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Temp (R): \";\n      cout << Exhaust_Temperature_Total[iMarker_EngineExhaust] * config->GetTemperature_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Pressure (Pa): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Pressure (psf): \";\n      cout << Exhaust_Pressure_Total[iMarker_EngineExhaust] * config->GetPressure_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Area (m^2): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Area (ft^2): \";\n      cout << Exhaust_Area_Total[iMarker_EngineExhaust] <<\".\"<< endl;\n    }\n    cout << \"-------------------------------------------------------------------------\" << endl;\n    \n  }\n  \n  /*--- Check the flow orientation in the engine ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if ((config->GetMarker_All_KindBC(iMarker) == ENGINE_INFLOW) ||\n        (config->GetMarker_All_KindBC(iMarker) == ENGINE_EXHAUST) ||\n        (config->GetMarker_All_KindBC(iMarker) == ENGINE_BLEED)) {\n      \n      /*--- Loop over all the vertices on this boundary marker ---*/\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        /*--- Normal vector for this vertex (negate for outward convention) ---*/\n        \n        geometry->vertex[iMarker][iVertex]->GetNormal(Vector);\n        \n        for (iDim = 0; iDim < nDim; iDim++) Vector[iDim] = -Vector[iDim];\n        \n        Area = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          Area += Vector[iDim]*Vector[iDim];\n        Area = sqrt (Area);\n        \n        /*--- Compute unitary vector ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          Vector[iDim] /= Area;\n        \n        /*--- The flow direction is defined by the local velocity on the surface ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          Flow_Dir[iDim] = node[iPoint]->GetSolution(iDim+1) / node[iPoint]->GetSolution(0);\n        \n        /*--- Dot product of normal and flow direction. ---*/\n        \n        alpha = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          alpha += Vector[iDim]*Flow_Dir[iDim];\n        \n        /*--- Flow in the wrong direction. ---*/\n        \n        if (((config->GetMarker_All_KindBC(iMarker) == ENGINE_EXHAUST) ||\n             (config->GetMarker_All_KindBC(iMarker) == ENGINE_BLEED)) && (alpha > 0.0)) {\n          \n          /*--- Copy the old solution ---*/\n          for (iVar = 0; iVar < nVar; iVar++)\n            node[iPoint]->SetSolution(iVar, node[iPoint]->GetSolution_Old(iVar));\n          \n        }\n        \n        if ((config->GetMarker_All_KindBC(iMarker) == ENGINE_INFLOW) && (alpha < 0.0)) {\n          \n          /*--- Copy the old solution ---*/\n          for (iVar = 0; iVar < nVar; iVar++)\n            node[iPoint]->SetSolution(iVar, node[iPoint]->GetSolution_Old(iVar));\n          \n        }\n        \n      }\n      \n    }\n    \n  }\n  \n  \n  delete [] Inflow_MassFlow_Local;\n  delete [] Inflow_Mach_Local;\n  delete [] Inflow_Pressure_Local;\n  delete [] Inflow_Area_Local;\n  \n  delete [] Inflow_MassFlow_Total;\n  delete [] Inflow_Mach_Total;\n  delete [] Inflow_Pressure_Total;\n  delete [] Inflow_Area_Total;\n  \n  delete [] Exhaust_MassFlow_Local;\n  delete [] Exhaust_Temperature_Local;\n  delete [] Exhaust_Pressure_Local;\n  delete [] Exhaust_Area_Local;\n  \n  delete [] Exhaust_MassFlow_Total;\n  delete [] Exhaust_Temperature_Total;\n  delete [] Exhaust_Pressure_Total;\n  delete [] Exhaust_Area_Total;\n  \n  delete [] Bleed_MassFlow_Local;\n  delete [] Bleed_Temperature_Local;\n  delete [] Bleed_Pressure_Local;\n  delete [] Bleed_Area_Local;\n  \n  delete [] Bleed_MassFlow_Total;\n  delete [] Bleed_Temperature_Total;\n  delete [] Bleed_Pressure_Total;\n  delete [] Bleed_Area_Total;\n  \n}\n\nvoid CEulerSolver::GetActuatorDisk_Properties(CGeometry *geometry, CConfig *config, unsigned short iMesh, bool Output) {\n  \n  unsigned short iDim, iMarker;\n  unsigned long iVertex, iPoint;\n  su2double Pressure, Temperature, Velocity[3], Velocity2, MassFlow, Density, Energy, Area;\n  unsigned short iMarker_ActDiskInlet, iMarker_ActDiskOutlet;\n  \n  su2double Gas_Constant = config->GetGas_ConstantND();\n  \n  unsigned short nMarker_ActDiskInlet = config->GetnMarker_ActDisk_Inlet();\n  unsigned short nMarker_ActDiskOutlet = config->GetnMarker_ActDisk_Outlet();\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  su2double *Inlet_MassFlow = new su2double [config->GetnMarker_All()];\n  su2double *Inlet_Pressure = new su2double [config->GetnMarker_All()];\n  su2double *Inlet_Temperature = new su2double [config->GetnMarker_All()];\n  su2double *Inlet_Area = new su2double [config->GetnMarker_All()];\n  \n  su2double *Outlet_MassFlow = new su2double [config->GetnMarker_All()];\n  su2double *Outlet_Pressure = new su2double [config->GetnMarker_All()];\n  su2double *Outlet_Temperature = new su2double [config->GetnMarker_All()];\n  su2double *Outlet_Area = new su2double [config->GetnMarker_All()];\n  \n  /*--- Compute the numerical fan face Mach number, and the total area of the inflow ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    Inlet_MassFlow[iMarker] = 0.0;\n    Inlet_Pressure[iMarker] = 0.0;\n    Inlet_Temperature[iMarker] = 0.0;\n    Inlet_Area[iMarker] = 0.0;\n    \n    Outlet_MassFlow[iMarker] = 0.0;\n    Outlet_Pressure[iMarker] = 0.0;\n    Outlet_Temperature[iMarker] = 0.0;\n    Outlet_Area[iMarker] = 0.0;\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ACTDISK_INLET) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          geometry->vertex[iMarker][iVertex]->GetNormal(Vector);\n          \n          Density = node[iPoint]->GetSolution(0);\n          Velocity2 = 0.0; Area = 0.0; MassFlow = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Area += Vector[iDim]*Vector[iDim];\n            Velocity[iDim] = node[iPoint]->GetSolution(iDim+1)/Density;\n            Velocity2 += Velocity[iDim]*Velocity[iDim];\n            MassFlow += Vector[iDim]*node[iPoint]->GetSolution(iDim+1);\n          }\n          \n          Area       = sqrt (Area);\n          Energy     = node[iPoint]->GetSolution(nVar-1)/Density;\n          Pressure   = Gamma_Minus_One*Density*(Energy-0.5*Velocity2);\n          Temperature = Pressure / (Gas_Constant * Density);\n          \n          /*--- Compute the Inlet_MassFlow, Inlet_Pressure, Inlet_Temperature, and Inlet_Area ---*/\n          \n          Inlet_MassFlow[iMarker] += MassFlow;\n          Inlet_Pressure[iMarker] += Pressure*Area;\n          Inlet_Temperature[iMarker] += Temperature*Area;\n          Inlet_Area[iMarker] += Area;\n          \n        }\n      }\n      \n    }\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ACTDISK_OUTLET) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          geometry->vertex[iMarker][iVertex]->GetNormal(Vector);\n          \n          Density = node[iPoint]->GetSolution(0);\n          Velocity2 = 0.0; Area = 0.0; MassFlow = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Area += Vector[iDim]*Vector[iDim];\n            Velocity[iDim] = node[iPoint]->GetSolution(iDim+1)/Density;\n            Velocity2 += Velocity[iDim]*Velocity[iDim];\n            MassFlow += Vector[iDim]*node[iPoint]->GetSolution(iDim+1);\n          }\n          \n          Area       = sqrt (Area);\n          Energy     = node[iPoint]->GetSolution(nVar-1)/Density;\n          Pressure   = Gamma_Minus_One*Density*(Energy-0.5*Velocity2);\n          Temperature = Pressure / (Gas_Constant * Density);\n          \n          /*--- Compute the mass Outlet_MassFlow ---*/\n          \n          Outlet_MassFlow[iMarker] += MassFlow;\n          Outlet_Pressure[iMarker] += Pressure*Area;\n          Outlet_Temperature[iMarker] += Temperature*Area;\n          Outlet_Area[iMarker] += Area;\n          \n        }\n      }\n      \n    }\n    \n  }\n  \n  /*--- Copy to the appropriate structure ---*/\n  \n  su2double *Inlet_MassFlow_Local = new su2double [nMarker_ActDiskInlet];\n  su2double *Inlet_Temperature_Local = new su2double [nMarker_ActDiskInlet];\n  su2double *Inlet_Pressure_Local = new su2double [nMarker_ActDiskInlet];\n  su2double *Inlet_Area_Local = new su2double [nMarker_ActDiskInlet];\n  \n  su2double *Inlet_MassFlow_Total = new su2double [nMarker_ActDiskInlet];\n  su2double *Inlet_Temperature_Total = new su2double [nMarker_ActDiskInlet];\n  su2double *Inlet_Pressure_Total = new su2double [nMarker_ActDiskInlet];\n  su2double *Inlet_Area_Total = new su2double [nMarker_ActDiskInlet];\n  \n  for (iMarker_ActDiskInlet = 0; iMarker_ActDiskInlet < nMarker_ActDiskInlet; iMarker_ActDiskInlet++) {\n    Inlet_MassFlow_Local[iMarker_ActDiskInlet] = 0.0;\n    Inlet_Temperature_Local[iMarker_ActDiskInlet] = 0.0;\n    Inlet_Pressure_Local[iMarker_ActDiskInlet] = 0.0;\n    Inlet_Area_Local[iMarker_ActDiskInlet] = 0.0;\n    \n    Inlet_MassFlow_Total[iMarker_ActDiskInlet] = 0.0;\n    Inlet_Temperature_Total[iMarker_ActDiskInlet] = 0.0;\n    Inlet_Pressure_Total[iMarker_ActDiskInlet] = 0.0;\n    Inlet_Area_Total[iMarker_ActDiskInlet] = 0.0;\n  }\n  \n  su2double *Outlet_MassFlow_Local = new su2double [nMarker_ActDiskOutlet];\n  su2double *Outlet_Temperature_Local = new su2double [nMarker_ActDiskOutlet];\n  su2double *Outlet_Pressure_Local = new su2double [nMarker_ActDiskOutlet];\n  su2double *Outlet_Area_Local = new su2double [nMarker_ActDiskOutlet];\n  \n  su2double *Outlet_MassFlow_Total = new su2double [nMarker_ActDiskOutlet];\n  su2double *Outlet_Temperature_Total = new su2double [nMarker_ActDiskOutlet];\n  su2double *Outlet_Pressure_Total = new su2double [nMarker_ActDiskOutlet];\n  su2double *Outlet_Area_Total = new su2double [nMarker_ActDiskOutlet];\n  \n  for (iMarker_ActDiskOutlet = 0; iMarker_ActDiskOutlet < nMarker_ActDiskOutlet; iMarker_ActDiskOutlet++) {\n    Outlet_MassFlow_Local[iMarker_ActDiskOutlet] = 0.0;\n    Outlet_Temperature_Local[iMarker_ActDiskOutlet] = 0.0;\n    Outlet_Pressure_Local[iMarker_ActDiskOutlet] = 0.0;\n    Outlet_Area_Local[iMarker_ActDiskOutlet] = 0.0;\n    \n    Outlet_MassFlow_Total[iMarker_ActDiskOutlet] = 0.0;\n    Outlet_Temperature_Total[iMarker_ActDiskOutlet] = 0.0;\n    Outlet_Pressure_Total[iMarker_ActDiskOutlet] = 0.0;\n    Outlet_Area_Total[iMarker_ActDiskOutlet] = 0.0;\n  }\n  \n  /*--- Compute the numerical fan face Mach number, mach number, temperature and the total area ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ACTDISK_INLET) {\n      \n      for (iMarker_ActDiskInlet = 0; iMarker_ActDiskInlet < nMarker_ActDiskInlet; iMarker_ActDiskInlet++) {\n        \n        /*--- Add the Inlet_MassFlow, Inlet_Temperature, Inlet_Pressure and Inlet_Area to the particular boundary ---*/\n        \n        if (config->GetMarker_All_TagBound(iMarker) == config->GetMarker_ActDisk_Inlet(iMarker_ActDiskInlet)) {\n          Inlet_MassFlow_Local[iMarker_ActDiskInlet] += Inlet_MassFlow[iMarker];\n          Inlet_Temperature_Local[iMarker_ActDiskInlet] += Inlet_Temperature[iMarker];\n          Inlet_Pressure_Local[iMarker_ActDiskInlet] += Inlet_Pressure[iMarker];\n          Inlet_Area_Local[iMarker_ActDiskInlet] += Inlet_Area[iMarker];\n        }\n        \n      }\n      \n    }\n    \n    if (config->GetMarker_All_KindBC(iMarker) == ACTDISK_OUTLET) {\n      \n      for (iMarker_ActDiskOutlet= 0; iMarker_ActDiskOutlet < nMarker_ActDiskOutlet; iMarker_ActDiskOutlet++) {\n        \n        /*--- Add the Outlet_MassFlow, and Outlet_Area to the particular boundary ---*/\n        \n        if (config->GetMarker_All_TagBound(iMarker) == config->GetMarker_ActDisk_Outlet(iMarker_ActDiskOutlet)) {\n          Outlet_MassFlow_Local[iMarker_ActDiskOutlet] += Outlet_MassFlow[iMarker];\n          Outlet_Temperature_Local[iMarker_ActDiskOutlet] += Outlet_Temperature[iMarker];\n          Outlet_Pressure_Local[iMarker_ActDiskOutlet] += Outlet_Pressure[iMarker];\n          Outlet_Area_Local[iMarker_ActDiskOutlet] += Outlet_Area[iMarker];\n        }\n        \n      }\n      \n    }\n    \n  }\n  \n#ifdef HAVE_MPI\n  \n  SU2_MPI::Allreduce(Inlet_MassFlow_Local, Inlet_MassFlow_Total, nMarker_ActDiskInlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Inlet_Temperature_Local, Inlet_Temperature_Total, nMarker_ActDiskInlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Inlet_Pressure_Local, Inlet_Pressure_Total, nMarker_ActDiskInlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Inlet_Area_Local, Inlet_Area_Total, nMarker_ActDiskInlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n  SU2_MPI::Allreduce(Outlet_MassFlow_Local, Outlet_MassFlow_Total, nMarker_ActDiskOutlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Outlet_Temperature_Local, Outlet_Temperature_Total, nMarker_ActDiskOutlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Outlet_Pressure_Local, Outlet_Pressure_Total, nMarker_ActDiskOutlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(Outlet_Area_Local, Outlet_Area_Total, nMarker_ActDiskOutlet, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n#else\n  \n  for (iMarker_ActDiskInlet = 0; iMarker_ActDiskInlet < nMarker_ActDiskInlet; iMarker_ActDiskInlet++) {\n    Inlet_MassFlow_Total[iMarker_ActDiskInlet]    = Inlet_MassFlow_Local[iMarker_ActDiskInlet];\n    Inlet_Temperature_Total[iMarker_ActDiskInlet] = Inlet_Temperature_Local[iMarker_ActDiskInlet];\n    Inlet_Pressure_Total[iMarker_ActDiskInlet]    = Inlet_Pressure_Local[iMarker_ActDiskInlet];\n    Inlet_Area_Total[iMarker_ActDiskInlet]        = Inlet_Area_Local[iMarker_ActDiskInlet];\n  }\n  \n  for (iMarker_ActDiskOutlet = 0; iMarker_ActDiskOutlet < nMarker_ActDiskOutlet; iMarker_ActDiskOutlet++) {\n    Outlet_MassFlow_Total[iMarker_ActDiskOutlet]  = Outlet_MassFlow_Local[iMarker_ActDiskOutlet];\n    Outlet_Temperature_Total[iMarker_ActDiskOutlet] = Outlet_Temperature_Local[iMarker_ActDiskOutlet];\n    Outlet_Pressure_Total[iMarker_ActDiskOutlet]   = Outlet_Pressure_Local[iMarker_ActDiskOutlet];\n    Outlet_Area_Total[iMarker_ActDiskOutlet]      = Outlet_Area_Local[iMarker_ActDiskOutlet];\n  }\n  \n#endif\n  \n  /*--- Compute the value of Inlet_Area_Total, and Inlet_Pressure_Total, and\n   set the value in the config structure for future use ---*/\n  \n  for (iMarker_ActDiskInlet = 0; iMarker_ActDiskInlet < nMarker_ActDiskInlet; iMarker_ActDiskInlet++) {\n    if (Inlet_Area_Total[iMarker_ActDiskInlet] != 0.0) Inlet_Temperature_Total[iMarker_ActDiskInlet] /= Inlet_Area_Total[iMarker_ActDiskInlet];\n    else Inlet_Temperature_Total[iMarker_ActDiskInlet] = 0.0;\n    if (Inlet_Area_Total[iMarker_ActDiskInlet] != 0.0) Inlet_Pressure_Total[iMarker_ActDiskInlet] /= Inlet_Area_Total[iMarker_ActDiskInlet];\n    else Inlet_Pressure_Total[iMarker_ActDiskInlet] = 0.0;\n  }\n  \n  /*--- Compute the value of Outlet_Area_Total, and Outlet_Pressure_Total, and\n   set the value in the config structure for future use ---*/\n  \n  for (iMarker_ActDiskOutlet = 0; iMarker_ActDiskOutlet < nMarker_ActDiskOutlet; iMarker_ActDiskOutlet++) {\n    if (Outlet_Area_Total[iMarker_ActDiskOutlet] != 0.0) Outlet_Temperature_Total[iMarker_ActDiskOutlet] /= Outlet_Area_Total[iMarker_ActDiskOutlet];\n    else Outlet_Temperature_Total[iMarker_ActDiskOutlet] = 0.0;\n    if (Outlet_Area_Total[iMarker_ActDiskOutlet] != 0.0) Outlet_Pressure_Total[iMarker_ActDiskOutlet] /= Outlet_Area_Total[iMarker_ActDiskOutlet];\n    else Outlet_Pressure_Total[iMarker_ActDiskOutlet] = 0.0;\n  }\n  \n  bool write_heads = (((config->GetExtIter() % (config->GetWrt_Con_Freq()*40)) == 0));\n  \n  if ((rank == MASTER_NODE) && (iMesh == MESH_0) && write_heads && Output) {\n    \n    cout.precision(4);\n    cout.setf(ios::fixed, ios::floatfield);\n    \n    cout << endl << \"------------------------ Actuator Disk properties -----------------------\" << endl;\n    \n    for (iMarker_ActDiskInlet = 0; iMarker_ActDiskInlet < nMarker_ActDiskInlet; iMarker_ActDiskInlet++) {\n      cout << \"Actuator Disk Inlet (\"<< config->GetMarker_ActDisk_Inlet(iMarker_ActDiskInlet);\n      if (config->GetSystemMeasurements() == SI) cout << \"): Mass flow (kg/s): \";\n      else if (config->GetSystemMeasurements() == US) cout << \"): Mass flow (slug/s): \";\n      cout << -Inlet_MassFlow_Total[iMarker_ActDiskInlet] * config->GetDensity_Ref() * config->GetVelocity_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Temp (K): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Temp (R): \";\n      cout << Inlet_Temperature_Total[iMarker_ActDiskInlet] * config->GetTemperature_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Pressure (Pa): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Pressure (psf): \";\n      cout << Inlet_Pressure_Total[iMarker_ActDiskInlet] * config->GetPressure_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Area (m^2): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Area (ft^2): \";\n      cout << Inlet_Area_Total[iMarker_ActDiskInlet] <<\".\"<< endl;\n    }\n    \n    for (iMarker_ActDiskOutlet = 0; iMarker_ActDiskOutlet < nMarker_ActDiskOutlet; iMarker_ActDiskOutlet++) {\n      cout << \"Actuator Disk Outlet (\"<< config->GetMarker_ActDisk_Outlet(iMarker_ActDiskOutlet);\n      if (config->GetSystemMeasurements() == SI) cout << \"): Mass flow (kg/s): \";\n      else if (config->GetSystemMeasurements() == US) cout << \"): Mass flow (slug/s): \";\n      cout << Outlet_MassFlow_Total[iMarker_ActDiskOutlet] * config->GetDensity_Ref() * config->GetVelocity_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Temp (K): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Temp (R): \";\n      cout << Outlet_Temperature_Total[iMarker_ActDiskOutlet] * config->GetTemperature_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Pressure (Pa): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Pressure (psf): \";\n      cout << Outlet_Pressure_Total[iMarker_ActDiskOutlet] * config->GetPressure_Ref();\n      if (config->GetSystemMeasurements() == SI) cout << \", Area (m^2): \";\n      else if (config->GetSystemMeasurements() == US) cout << \", Area (ft^2): \";\n      cout << Outlet_Area_Total[iMarker_ActDiskOutlet] <<\".\"<< endl;\n    }\n    cout << \"-------------------------------------------------------------------------\" << endl;\n    \n  }\n  \n  delete [] Outlet_MassFlow_Local;\n  delete [] Outlet_Temperature_Local;\n  delete [] Outlet_Pressure_Local;\n  delete [] Outlet_Area_Local;\n  \n  delete [] Outlet_MassFlow_Total;\n  delete [] Outlet_Temperature_Total;\n  delete [] Outlet_Pressure_Total;\n  delete [] Outlet_Area_Total;\n  \n  delete [] Inlet_MassFlow_Local;\n  delete [] Inlet_Temperature_Local;\n  delete [] Inlet_Pressure_Local;\n  delete [] Inlet_Area_Local;\n  \n  delete [] Inlet_MassFlow_Total;\n  delete [] Inlet_Temperature_Total;\n  delete [] Inlet_Pressure_Total;\n  delete [] Inlet_Area_Total;\n  \n  \n  delete [] Inlet_MassFlow;\n  delete [] Inlet_Pressure;\n  delete [] Inlet_Temperature;\n  delete [] Inlet_Area;\n  \n  delete [] Outlet_MassFlow;\n  delete [] Outlet_Pressure;\n  delete [] Outlet_Temperature;\n  delete [] Outlet_Area;\n  \n}\n\nvoid CEulerSolver::SetFarfield_AoA(CGeometry *geometry, CSolver **solver_container,\n                                   CConfig *config, unsigned short iMesh, bool Output) {\n  \n  unsigned short iDim, iCounter;\n  bool Update_AoA = false;\n  su2double Target_CL, AoA_inc, AoA;\n  su2double DampingFactor = config->GetDamp_Fixed_CL();\n  unsigned long Iter_Fixed_CL = config->GetIter_Fixed_CL();\n  unsigned long ExtIter = config->GetExtIter();\n  su2double Beta = config->GetAoS()*PI_NUMBER/180.0;\n  su2double Vel_Infty[3], Vel_Infty_Mag;\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Only the fine mesh level should check the convergence criteria ---*/\n  \n  if (iMesh == MESH_0) {\n    \n    /*--- Initialize the update flag to false ---*/\n    \n    Update_AoA = false;\n    \n    /*--- Reevaluate Angle of Attack at a fix number of iterations ---*/\n    \n    if (ExtIter % Iter_Fixed_CL == 0) { Update_AoA = true; };\n    \n    /*--- Store the update boolean for use on other mesh levels in the MG ---*/\n    \n    config->SetUpdate_AoA(Update_AoA);\n    \n  }\n  \n  else {\n    Update_AoA = config->GetUpdate_AoA();\n  }\n  \n  /*--- If we are within two digits of convergence in the CL coefficient,\n   compute an updated value for the AoA at the farfield. We are iterating\n   on the AoA in order to match the specified fixed lift coefficient. ---*/\n  \n  if (Update_AoA) {\n    \n    /*--- Retrieve the specified target CL value. ---*/\n    \n    Target_CL = config->GetTarget_CL();\n    \n    /*--- Retrieve the old AoA. ---*/\n    \n    AoA_old = config->GetAoA()*PI_NUMBER/180.0;\n    \n    /*--- Estimate the increment in AoA based on a 2*pi lift curve slope ---*/\n    \n    AoA_inc = (1.0/(2.0*PI_NUMBER))*(Target_CL - Total_CLift);\n    \n    /*--- Compute a new value for AoA on the fine mesh only ---*/\n    \n    if (iMesh == MESH_0)\n      AoA = (1.0 - DampingFactor)*AoA_old + DampingFactor * (AoA_old + AoA_inc);\n    else\n      AoA = config->GetAoA()*PI_NUMBER/180.0;\n    \n    /*--- Update the freestream velocity vector at the farfield ---*/\n    \n    for (iDim = 0; iDim < nDim; iDim++)\n      Vel_Infty[iDim] = GetVelocity_Inf(iDim);\n    \n    /*--- Compute the magnitude of the free stream velocity ---*/\n    \n    Vel_Infty_Mag = 0;\n    for (iDim = 0; iDim < nDim; iDim++)\n      Vel_Infty_Mag += Vel_Infty[iDim]*Vel_Infty[iDim];\n    Vel_Infty_Mag = sqrt(Vel_Infty_Mag);\n    \n    /*--- Compute the new freestream velocity with the updated AoA ---*/\n    \n    if (nDim == 2) {\n      Vel_Infty[0] = cos(AoA)*Vel_Infty_Mag;\n      Vel_Infty[1] = sin(AoA)*Vel_Infty_Mag;\n    }\n    if (nDim == 3) {\n      Vel_Infty[0] = cos(AoA)*cos(Beta)*Vel_Infty_Mag;\n      Vel_Infty[1] = sin(Beta)*Vel_Infty_Mag;\n      Vel_Infty[2] = sin(AoA)*cos(Beta)*Vel_Infty_Mag;\n    }\n    \n    /*--- Store the new freestream velocity vector for the next iteration ---*/\n    \n    for (iDim = 0; iDim < nDim; iDim++) {\n      Velocity_Inf[iDim] = Vel_Infty[iDim];\n    }\n    \n    /*--- Only the fine mesh stores the updated values for AoA in config ---*/\n    if (iMesh == MESH_0) {\n      for (iDim = 0; iDim < nDim; iDim++)\n        config->SetVelocity_FreeStreamND(Vel_Infty[iDim], iDim);\n      config->SetAoA(AoA*180.0/PI_NUMBER);\n    }\n    \n    /*--- Reset the local cauchy criteria ---*/\n    Cauchy_Value = 0.0;\n    Cauchy_Counter = 0;\n    for (iCounter = 0; iCounter < config->GetCauchy_Elems(); iCounter++)\n      Cauchy_Serie[iCounter] = 0.0;\n  }\n  \n  /*--- Output some information to the console with the headers ---*/\n  \n  bool write_heads = (((config->GetExtIter() % (config->GetWrt_Con_Freq()*40)) == 0));\n  if ((rank == MASTER_NODE) && (iMesh == MESH_0) && write_heads && Output) {\n    cout.precision(7);\n    cout.setf(ios::fixed, ios::floatfield);\n    cout << endl << \"----------------------------- Fixed CL Mode -----------------------------\" << endl;\n    cout << \"Target CL: \" << config->GetTarget_CL();\n    cout << \", Current CL: \" << Total_CLift;\n    cout << \", Current AoA: \" << config->GetAoA() << \" deg.\" << endl;\n    cout << \"-------------------------------------------------------------------------\" << endl;\n  }\n  \n  \n}\n\nvoid CEulerSolver::BC_Euler_Wall(CGeometry *geometry, CSolver **solver_container,\n                                 CNumerics *numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iDim, iVar, jVar, kVar, jDim;\n  unsigned long iPoint, iVertex;\n  su2double Density = 0.0, Pressure = 0.0, *Normal = NULL, *GridVel = NULL, Area, UnitNormal[3], *NormalArea,\n  ProjGridVel = 0.0, turb_ke;\n  su2double Density_b, StaticEnergy_b, Enthalpy_b, *Velocity_b, Kappa_b, Chi_b, Energy_b, VelMagnitude2_b, Pressure_b;\n  su2double Density_i, *Velocity_i, ProjVelocity_i = 0.0, Energy_i, VelMagnitude2_i;\n  su2double **Jacobian_b, **DubDu;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool grid_movement = config->GetGrid_Movement();\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  \n  Normal = new su2double[nDim];\n  NormalArea = new su2double[nDim];\n  Velocity_b = new su2double[nDim];\n  Velocity_i = new su2double[nDim];\n  Jacobian_b = new su2double*[nVar];\n  DubDu = new su2double*[nVar];\n  for (iVar = 0; iVar < nVar; iVar++) {\n    Jacobian_b[iVar] = new su2double[nVar];\n    DubDu[iVar] = new su2double[nVar];\n  }\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Normal vector for this vertex (negative for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++) {\n        NormalArea[iDim] = -Normal[iDim];\n        UnitNormal[iDim] = -Normal[iDim]/Area;\n      }\n      \n      /*--- Compressible solver ---*/\n      \n      if (compressible) {\n        \n        /*--- Get the state i ---*/\n        \n        VelMagnitude2_i = 0.0; ProjVelocity_i = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n          Velocity_i[iDim] = node[iPoint]->GetVelocity(iDim);\n          ProjVelocity_i += Velocity_i[iDim]*UnitNormal[iDim];\n          VelMagnitude2_i += Velocity_i[iDim]*Velocity_i[iDim];\n        }\n        Density_i = node[iPoint]->GetDensity();\n        Energy_i = node[iPoint]->GetEnergy();\n        \n        /*--- Compute the boundary state b ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          Velocity_b[iDim] = Velocity_i[iDim] - ProjVelocity_i * UnitNormal[iDim]; //Force the velocity to be tangential to the surface.\n        \n        if (grid_movement) {\n          GridVel = geometry->node[iPoint]->GetGridVel();\n          ProjGridVel = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) ProjGridVel += GridVel[iDim]*UnitNormal[iDim];\n          for (iDim = 0; iDim < nDim; iDim++) Velocity_b[iDim] += GridVel[iDim] - ProjGridVel * UnitNormal[iDim];\n        }\n        \n        VelMagnitude2_b = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          VelMagnitude2_b += Velocity_b[iDim] * Velocity_b[iDim];\n        \n        /*--- Compute the residual ---*/\n        \n        turb_ke = 0.0;\n        if (tkeNeeded) turb_ke = solver_container[TURB_SOL]->node[iPoint]->GetSolution(0);\n        \n        Density_b = Density_i;\n        StaticEnergy_b = Energy_i - 0.5 * VelMagnitude2_i - turb_ke;\n        Energy_b = StaticEnergy_b + 0.5 * VelMagnitude2_b + turb_ke;\n        \n        FluidModel->SetTDState_rhoe(Density_b, StaticEnergy_b);\n        Kappa_b = FluidModel->GetdPde_rho() / Density_b;\n        Chi_b = FluidModel->GetdPdrho_e() - Kappa_b * StaticEnergy_b;\n        Pressure_b = FluidModel->GetPressure();\n        Enthalpy_b = Energy_b + Pressure_b/Density_b;\n        \n        numerics->GetInviscidProjFlux(&Density_b, Velocity_b, &Pressure_b, &Enthalpy_b, NormalArea, Residual);\n        \n        /*--- Grid velocity correction to the energy term ---*/\n        if (grid_movement) {\n          GridVel = geometry->node[iPoint]->GetGridVel();\n          ProjGridVel = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            ProjGridVel += GridVel[iDim]*UnitNormal[iDim];\n          Residual[nVar-1] += Pressure_b*ProjGridVel*Area;\n        }\n        \n        /*--- Add the Reynolds stress tensor contribution ---*/\n        \n        if (tkeNeeded) {\n          for (iDim = 0; iDim < nDim; iDim++)\n            Residual[iDim+1] += (2.0/3.0)*Density_b*turb_ke*NormalArea[iDim];\n        }\n        \n      }\n      \n      /*--- Incompressible solver ---*/\n      \n      if (incompressible || freesurface) {\n        \n        /*--- Compute the residual ---*/\n        \n        Pressure = node[iPoint]->GetPressureInc();\n        Density = node[iPoint]->GetPressureInc();\n        \n        Residual[0] = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          Residual[iDim+1] = Pressure*NormalArea[iDim];\n        if (compressible || freesurface) {\n          Residual[nVar-1] = 0.0;\n        }\n        \n        /*--- Add the Reynolds stress tensor contribution ---*/\n        \n        if (tkeNeeded) {\n          turb_ke = solver_container[TURB_SOL]->node[iPoint]->GetSolution(0);\n          for (iDim = 0; iDim < nDim; iDim++)\n            Residual[iDim+1] += (2.0/3.0)*Density*turb_ke*NormalArea[iDim];\n        }\n        \n        /*--- Adjustment to energy equation due to grid motion ---*/\n        \n        if (grid_movement) {\n          ProjGridVel = 0.0;\n          GridVel = geometry->node[iPoint]->GetGridVel();\n          for (iDim = 0; iDim < nDim; iDim++)\n            ProjGridVel += GridVel[iDim]*UnitNormal[iDim];\n          Residual[nVar-1] = Pressure*ProjGridVel*Area;\n        }\n        \n      }\n      \n      /*--- Add value to the residual ---*/\n      \n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Form Jacobians for implicit computations ---*/\n      \n      if (implicit) {\n        \n        /*--- Initialize Jacobian ---*/\n        \n        for (iVar = 0; iVar < nVar; iVar++) {\n          for (jVar = 0; jVar < nVar; jVar++)\n            Jacobian_i[iVar][jVar] = 0.0;\n        }\n        \n        /*--- Compressible solver ---*/\n        \n        if (compressible) {\n          \n          /*--- Compute DubDu ---*/\n          \n          for (iVar = 0; iVar < nVar; iVar++) {\n            for (jVar = 0; jVar < nVar; jVar++)\n              DubDu[iVar][jVar]= 0.0;\n            DubDu[iVar][iVar]= 1.0;\n          }\n          \n          for (iDim = 0; iDim < nDim; iDim++)\n            for (jDim = 0; jDim<nDim; jDim++)\n              DubDu[iDim+1][jDim+1] -= UnitNormal[iDim]*UnitNormal[jDim];\n          DubDu[nVar-1][0] += 0.5*ProjVelocity_i*ProjVelocity_i;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            DubDu[nVar-1][iDim+1] -= ProjVelocity_i*UnitNormal[iDim];\n          }\n          \n          /*--- Compute flux Jacobian in state b ---*/\n          \n          numerics->GetInviscidProjJac(Velocity_b, &Enthalpy_b, &Chi_b, &Kappa_b, NormalArea, 1, Jacobian_b);\n          \n          // Check for grid movement, should be already considered since Jacobian b is computed from u_b\n          // if (grid_movement) {\n          // Jacobian_b[nVar-1][0] += 0.5*ProjGridVel*ProjGridVel;\n          // for (iDim = 0; iDim < nDim; iDim++)\n          // Jacobian_b[nVar-1][iDim+1] -= ProjGridVel * UnitNormal[iDim];\n          // }\n          \n          /*--- Compute numerical flux Jacobian at node i ---*/\n          \n          for (iVar = 0; iVar < nVar; iVar++)\n            for (jVar = 0; jVar < nVar; jVar++)\n              for (kVar = 0; kVar < nVar; kVar++)\n                Jacobian_i[iVar][jVar] += Jacobian_b[iVar][kVar] * DubDu[kVar][jVar];\n          \n          /*--- Add the Jacobian to the sparse matrix ---*/\n          \n          Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n          \n        }\n        \n        /*--- Incompressible solver ---*/\n        \n        if (incompressible || freesurface) {\n          for (iDim = 0; iDim < nDim; iDim++)\n            Jacobian_i[iDim+1][0] = -Normal[iDim];\n          Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n        }\n        \n      }\n    }\n  }\n  \n  delete [] Normal;\n  delete [] NormalArea;\n  delete [] Velocity_b;\n  delete [] Velocity_i;\n  for (iVar = 0; iVar < nVar; iVar++) {\n    delete [] Jacobian_b[iVar];\n    delete [] DubDu[iVar];\n  }\n  delete [] Jacobian_b;\n  delete [] DubDu;\n  \n}\n\nvoid CEulerSolver::BC_Far_Field(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics,\n                                CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  \n  su2double *GridVel;\n  su2double Area, UnitNormal[3] = {0.0,0.0,0.0};\n  su2double Density, Pressure, Energy,  Velocity[3] = {0.0,0.0,0.0};\n  su2double Density_Bound, Pressure_Bound, Vel_Bound[3] = {0.0,0.0,0.0};\n  su2double Density_Infty, Pressure_Infty, Vel_Infty[3] = {0.0,0.0,0.0};\n  su2double SoundSpeed, Entropy, Velocity2, Vn;\n  su2double SoundSpeed_Bound, Entropy_Bound, Vel2_Bound, Vn_Bound;\n  su2double SoundSpeed_Infty, Entropy_Infty, Vel2_Infty, Vn_Infty, Qn_Infty;\n  su2double RiemannPlus, RiemannMinus;\n  su2double *V_infty, *V_domain;\n  \n  su2double Gas_Constant     = config->GetGas_ConstantND();\n  \n  bool implicit       = config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT;\n  bool grid_movement  = config->GetGrid_Movement();\n  bool compressible   = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface    = (config->GetKind_Regime() == FREESURFACE);\n  bool viscous        = config->GetViscous();\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS ) ||\n                     (config->GetKind_Solver() == DISC_ADJ_RANS))\n                    && (config->GetKind_Turb_Model() == SST));\n  \n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Allocate the value at the infinity ---*/\n    V_infty = GetCharacPrimVar(val_marker, iVertex);\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      conv_numerics->SetNormal(Normal);\n      \n      /*--- Retrieve solution at the farfield boundary node ---*/\n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Construct solution state at infinity (far-field) ---*/\n      \n      if (compressible) {\n        \n        /*--- Construct solution state at infinity for compressible flow by\n         using Riemann invariants, and then impose a weak boundary condition\n         by computing the flux using this new state for U. See CFD texts by\n         Hirsch or Blazek for more detail. Adapted from an original\n         implementation in the Stanford University multi-block (SUmb) solver\n         in the routine bcFarfield.f90 written by Edwin van der Weide,\n         last modified 06-12-2005. First, compute the unit normal at the\n         boundary nodes. ---*/\n        \n        Area = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim];\n        Area = sqrt(Area);\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          UnitNormal[iDim] = Normal[iDim]/Area;\n        \n        /*--- Store primitive variables (density, velocities, velocity squared,\n         energy, pressure, and sound speed) at the boundary node, and set some\n         other quantities for clarity. Project the current flow velocity vector\n         at this boundary node into the local normal direction, i.e. compute\n         v_bound.n.  ---*/\n        \n        Density_Bound = V_domain[nDim+2];\n        Vel2_Bound = 0.0; Vn_Bound = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n          Vel_Bound[iDim] = V_domain[iDim+1];\n          Vel2_Bound     += Vel_Bound[iDim]*Vel_Bound[iDim];\n          Vn_Bound       += Vel_Bound[iDim]*UnitNormal[iDim];\n        }\n        Pressure_Bound   = node[iPoint]->GetPressure();\n        SoundSpeed_Bound = sqrt(Gamma*Pressure_Bound/Density_Bound);\n        Entropy_Bound    = pow(Density_Bound, Gamma)/Pressure_Bound;\n        \n        /*--- Store the primitive variable state for the freestream. Project\n         the freestream velocity vector into the local normal direction,\n         i.e. compute v_infty.n. ---*/\n        \n        Density_Infty = GetDensity_Inf();\n        Vel2_Infty = 0.0; Vn_Infty = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n          Vel_Infty[iDim] = GetVelocity_Inf(iDim);\n          Vel2_Infty     += Vel_Infty[iDim]*Vel_Infty[iDim];\n          Vn_Infty       += Vel_Infty[iDim]*UnitNormal[iDim];\n        }\n        Pressure_Infty   = GetPressure_Inf();\n        SoundSpeed_Infty = sqrt(Gamma*Pressure_Infty/Density_Infty);\n        Entropy_Infty    = pow(Density_Infty, Gamma)/Pressure_Infty;\n        \n        /*--- Adjust the normal freestream velocity for grid movement ---*/\n        \n        Qn_Infty = Vn_Infty;\n        if (grid_movement) {\n          GridVel = geometry->node[iPoint]->GetGridVel();\n          for (iDim = 0; iDim < nDim; iDim++)\n            Qn_Infty -= GridVel[iDim]*UnitNormal[iDim];\n        }\n        \n        /*--- Compute acoustic Riemann invariants: R = u.n +/- 2c/(gamma-1).\n         These correspond with the eigenvalues (u+c) and (u-c), respectively,\n         which represent the acoustic waves. Positive characteristics are\n         incoming, and a physical boundary condition is imposed (freestream\n         state). This occurs when either (u.n+c) > 0 or (u.n-c) > 0. Negative\n         characteristics are leaving the domain, and numerical boundary\n         conditions are required by extrapolating from the interior state\n         using the Riemann invariants. This occurs when (u.n+c) < 0 or\n         (u.n-c) < 0. Note that grid movement is taken into account when\n         checking the sign of the eigenvalue. ---*/\n        \n        /*--- Check whether (u.n+c) is greater or less than zero ---*/\n        \n        if (Qn_Infty > -SoundSpeed_Infty) {\n          /*--- Subsonic inflow or outflow ---*/\n          RiemannPlus = Vn_Bound + 2.0*SoundSpeed_Bound/Gamma_Minus_One;\n        } else {\n          /*--- Supersonic inflow ---*/\n          RiemannPlus = Vn_Infty + 2.0*SoundSpeed_Infty/Gamma_Minus_One;\n        }\n        \n        /*--- Check whether (u.n-c) is greater or less than zero ---*/\n        \n        if (Qn_Infty > SoundSpeed_Infty) {\n          /*--- Supersonic outflow ---*/\n          RiemannMinus = Vn_Bound - 2.0*SoundSpeed_Bound/Gamma_Minus_One;\n        } else {\n          /*--- Subsonic outflow ---*/\n          RiemannMinus = Vn_Infty - 2.0*SoundSpeed_Infty/Gamma_Minus_One;\n        }\n        \n        /*--- Compute a new value for the local normal velocity and speed of\n         sound from the Riemann invariants. ---*/\n        \n        Vn = 0.5 * (RiemannPlus + RiemannMinus);\n        SoundSpeed = 0.25 * (RiemannPlus - RiemannMinus)*Gamma_Minus_One;\n        \n        /*--- Construct the primitive variable state at the boundary for\n         computing the flux for the weak boundary condition. The values\n         that we choose to construct the solution (boundary or freestream)\n         depend on whether we are at an inflow or outflow. At an outflow, we\n         choose boundary information (at most one characteristic is incoming),\n         while at an inflow, we choose infinity values (at most one\n         characteristic is outgoing). ---*/\n        \n        if (Qn_Infty > 0.0)   {\n          /*--- Outflow conditions ---*/\n          for (iDim = 0; iDim < nDim; iDim++)\n            Velocity[iDim] = Vel_Bound[iDim] + (Vn-Vn_Bound)*UnitNormal[iDim];\n          Entropy = Entropy_Bound;\n        } else  {\n          /*--- Inflow conditions ---*/\n          for (iDim = 0; iDim < nDim; iDim++)\n            Velocity[iDim] = Vel_Infty[iDim] + (Vn-Vn_Infty)*UnitNormal[iDim];\n          Entropy = Entropy_Infty;\n        }\n        \n        /*--- Recompute the primitive variables. ---*/\n        \n        Density = pow(Entropy*SoundSpeed*SoundSpeed/Gamma,1.0/Gamma_Minus_One);\n        Velocity2 = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n          Velocity2 += Velocity[iDim]*Velocity[iDim];\n        }\n        Pressure = Density*SoundSpeed*SoundSpeed/Gamma;\n        Energy   = Pressure/(Gamma_Minus_One*Density) + 0.5*Velocity2;\n        if (tkeNeeded) Energy += GetTke_Inf();\n        \n        /*--- Store new primitive state for computing the flux. ---*/\n        \n        V_infty[0] = Pressure/(Gas_Constant*Density);\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_infty[iDim+1] = Velocity[iDim];\n        V_infty[nDim+1] = Pressure;\n        V_infty[nDim+2] = Density;\n        V_infty[nDim+3] = Energy + Pressure/Density;\n        \n      }\n      if (incompressible) {\n        \n        /*--- All the values computed from the infinity ---*/\n        \n        V_infty[0] = GetPressure_Inf();\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_infty[iDim+1] = GetVelocity_Inf(iDim);\n        V_infty[nDim+1] = GetDensity_Inf();\n        V_infty[nDim+2] = config->GetArtComp_Factor();\n        \n      }\n      if (freesurface) {\n        \n        /*--- All the values computed from the infinity ---*/\n        \n        V_infty[0] = GetPressure_Inf();\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_infty[iDim+1] = GetVelocity_Inf(iDim);\n        V_infty[nDim+1] = GetDensity_Inf();\n        V_infty[nDim+2] = config->GetArtComp_Factor();\n        \n      }\n      \n      /*--- Set various quantities in the numerics class ---*/\n      \n      conv_numerics->SetPrimitive(V_domain, V_infty);\n      \n      if (grid_movement) {\n        conv_numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(),\n                                  geometry->node[iPoint]->GetGridVel());\n      }\n      \n      /*--- Compute the convective residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      \n      /*--- Update residual value ---*/\n      \n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Convective Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Roe Turkel preconditioning, set the value of beta ---*/\n      \n      if (config->GetKind_Upwind() == TURKEL)\n        node[iPoint]->SetPreconditioner_Beta(conv_numerics->GetPrecond_Beta());\n      \n      /*--- Viscous residual contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        if (compressible) {\n          V_infty[nDim+5] = node[iPoint]->GetLaminarViscosity();\n          V_infty[nDim+6] = node[iPoint]->GetEddyViscosity();\n        }\n        if (incompressible) {\n          V_infty[nDim+3] = node[iPoint]->GetLaminarViscosityInc();\n          V_infty[nDim+4] = node[iPoint]->GetEddyViscosityInc();\n        }\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(),\n                                geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_infty);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(),\n                                          node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0),\n                                              solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update viscous residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Viscous Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Riemann(CGeometry *geometry, CSolver **solver_container,\n                              CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  unsigned short iDim, iVar, jVar, kVar;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double P_Total, T_Total, P_static, T_static, Rho_static, *Mach, *Flow_Dir, Area, UnitNormal[3];\n  su2double *Velocity_b, Velocity2_b, Enthalpy_b, Energy_b, StaticEnergy_b, Density_b, Kappa_b, Chi_b, Pressure_b, Temperature_b;\n  su2double *Velocity_e, Velocity2_e, VelMag_e, Enthalpy_e, Entropy_e, Energy_e = 0.0, StaticEnthalpy_e, StaticEnergy_e, Density_e = 0.0, Pressure_e;\n  su2double *Velocity_i, Velocity2_i, Enthalpy_i, Energy_i, StaticEnergy_i, Density_i, Kappa_i, Chi_i, Pressure_i, SoundSpeed_i;\n  su2double ProjVelocity_i;\n  su2double **P_Tensor, **invP_Tensor, *Lambda_i, **Jacobian_b, **DubDu, *dw, *u_e, *u_i, *u_b;\n  su2double *gridVel;\n  su2double *V_boundary, *V_domain, *S_boundary, *S_domain;\n  \n  bool implicit             = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool grid_movement        = config->GetGrid_Movement();\n  string Marker_Tag         = config->GetMarker_All_TagBound(val_marker);\n  bool viscous              = config->GetViscous();\n  bool gravity = (config->GetGravityForce());\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  \n  su2double *Normal, *FlowDirMix, TangVelocity, NormalVelocity;\n  Normal = new su2double[nDim];\n  su2double ext_flow_angle;\n  \n  Velocity_i = new su2double[nDim];\n  Velocity_b = new su2double[nDim];\n  Velocity_e = new su2double[nDim];\n  FlowDirMix = new su2double[nDim];\n  Lambda_i = new su2double[nVar];\n  u_i = new su2double[nVar];\n  u_e = new su2double[nVar];\n  u_b = new su2double[nVar];\n  dw = new su2double[nVar];\n  \n  S_boundary = new su2double[8];\n  \n  P_Tensor = new su2double*[nVar];\n  invP_Tensor = new su2double*[nVar];\n  for (iVar = 0; iVar < nVar; iVar++)\n  {\n    P_Tensor[iVar] = new su2double[nVar];\n    invP_Tensor[iVar] = new su2double[nVar];\n  }\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    V_boundary= GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e., not a halo node) ---*/\n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      conv_numerics->SetNormal(Normal);\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Retrieve solution at this boundary node ---*/\n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /* --- Compute the internal state u_i --- */\n      Velocity2_i = 0;\n      for (iDim=0; iDim < nDim; iDim++)\n      {\n        Velocity_i[iDim] = node[iPoint]->GetVelocity(iDim);\n        Velocity2_i += Velocity_i[iDim]*Velocity_i[iDim];\n      }\n      \n      \n      Density_i = node[iPoint]->GetDensity();\n      \n      Energy_i = node[iPoint]->GetEnergy();\n      StaticEnergy_i = Energy_i - 0.5*Velocity2_i;\n      \n      FluidModel->SetTDState_rhoe(Density_i, StaticEnergy_i);\n      \n      Pressure_i = FluidModel->GetPressure();\n      Enthalpy_i = Energy_i + Pressure_i/Density_i;\n      \n      SoundSpeed_i = FluidModel->GetSoundSpeed();\n      \n      Kappa_i = FluidModel->GetdPde_rho() / Density_i;\n      Chi_i = FluidModel->GetdPdrho_e() - Kappa_i * StaticEnergy_i;\n      \n      ProjVelocity_i = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        ProjVelocity_i += Velocity_i[iDim]*UnitNormal[iDim];\n      \n      /*--- Build the external state u_e from boundary data and internal node ---*/\n      \n      switch(config->GetKind_Data_Riemann(Marker_Tag))\n      {\n          //TODO(turbo), generilize for 3D case\n          //TODO(turbo), generilize for Inlet and Outlet in for backflow treatment\n          //TODO(turbo), implement not uniform inlet and radial equilibrium for the outlet\n        case TOTAL_CONDITIONS_PT:\n          \n          /*--- Retrieve the specified total conditions for this boundary. ---*/\n          if (gravity) P_Total = config->GetRiemann_Var1(Marker_Tag) - geometry->node[iPoint]->GetCoord(nDim-1)*STANDART_GRAVITY;/// check in which case is true (only freesurface?)\n          else P_Total  = config->GetRiemann_Var1(Marker_Tag);\n          T_Total  = config->GetRiemann_Var2(Marker_Tag);\n          Flow_Dir = config->GetRiemann_FlowDir(Marker_Tag);\n          \n          /*--- Non-dim. the inputs if necessary. ---*/\n          P_Total /= config->GetPressure_Ref();\n          T_Total /= config->GetTemperature_Ref();\n          \n          /* --- Computes the total state --- */\n          FluidModel->SetTDState_PT(P_Total, T_Total);\n          Enthalpy_e = FluidModel->GetStaticEnergy()+ FluidModel->GetPressure()/FluidModel->GetDensity();\n          Entropy_e = FluidModel->GetEntropy();\n          \n          /* --- Compute the boundary state u_e --- */\n          Velocity2_e = Velocity2_i;\n          if (nDim == 2){\n            NormalVelocity= -sqrt(Velocity2_e)*Flow_Dir[0];\n            TangVelocity= -sqrt(Velocity2_e)*Flow_Dir[1];\n            Velocity_e[0]= UnitNormal[0]*NormalVelocity - UnitNormal[1]*TangVelocity;\n            Velocity_e[1]= UnitNormal[1]*NormalVelocity + UnitNormal[0]*TangVelocity;\n          }else{\n            for (iDim = 0; iDim < nDim; iDim++)\n              Velocity_e[iDim] = sqrt(Velocity2_e)*Flow_Dir[iDim];\n          }\n          StaticEnthalpy_e = Enthalpy_e - 0.5 * Velocity2_e;\n          FluidModel->SetTDState_hs(StaticEnthalpy_e, Entropy_e);\n          Density_e = FluidModel->GetDensity();\n          StaticEnergy_e = FluidModel->GetStaticEnergy();\n          Energy_e = StaticEnergy_e + 0.5 * Velocity2_e;\n          if (tkeNeeded) Energy_e += GetTke_Inf();\n          break;\n          \n        case STATIC_SUPERSONIC_INFLOW_PT:\n          \n          /*--- Retrieve the specified total conditions for this boundary. ---*/\n          if (gravity) P_static = config->GetRiemann_Var1(Marker_Tag) - geometry->node[iPoint]->GetCoord(nDim-1)*STANDART_GRAVITY;/// check in which case is true (only freesurface?)\n          else P_static  = config->GetRiemann_Var1(Marker_Tag);\n          T_static  = config->GetRiemann_Var2(Marker_Tag);\n          Mach = config->GetRiemann_FlowDir(Marker_Tag);\n          \n          /*--- Non-dim. the inputs if necessary. ---*/\n          P_static /= config->GetPressure_Ref();\n          T_static /= config->GetTemperature_Ref();\n          \n          /* --- Computes the total state --- */\n          FluidModel->SetTDState_PT(P_static, T_static);\n          \n          /* --- Compute the boundary state u_e --- */\n          Velocity2_e = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Velocity_e[iDim] = Mach[iDim]*FluidModel->GetSoundSpeed();\n            Velocity2_e += Velocity_e[iDim]*Velocity_e[iDim];\n          }\n          Density_e = FluidModel->GetDensity();\n          StaticEnergy_e = FluidModel->GetStaticEnergy();\n          Energy_e = StaticEnergy_e + 0.5 * Velocity2_e;\n          if (tkeNeeded) Energy_e += GetTke_Inf();\n          break;\n          \n        case STATIC_SUPERSONIC_INFLOW_PD:\n          \n          /*--- Retrieve the specified total conditions for this boundary. ---*/\n          \n          if (gravity) P_static = config->GetRiemann_Var1(Marker_Tag) - geometry->node[iPoint]->GetCoord(nDim-1)*STANDART_GRAVITY;/// check in which case is true (only freesurface?)\n          else P_static  = config->GetRiemann_Var1(Marker_Tag);\n          Rho_static  = config->GetRiemann_Var2(Marker_Tag);\n          Mach = config->GetRiemann_FlowDir(Marker_Tag);\n          \n          /*--- Non-dim. the inputs if necessary. ---*/\n          P_static /= config->GetPressure_Ref();\n          Rho_static /= config->GetDensity_Ref();\n          \n          /* --- Computes the total state --- */\n          FluidModel->SetTDState_Prho(P_static, Rho_static);\n          \n          /* --- Compute the boundary state u_e --- */\n          Velocity2_e = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Velocity_e[iDim] = Mach[iDim]*FluidModel->GetSoundSpeed();\n            Velocity2_e += Velocity_e[iDim]*Velocity_e[iDim];\n          }\n          Density_e = FluidModel->GetDensity();\n          StaticEnergy_e = FluidModel->GetStaticEnergy();\n          Energy_e = StaticEnergy_e + 0.5 * Velocity2_e;\n          if (tkeNeeded) Energy_e += GetTke_Inf();\n          break;\n          \n        case MIXING_IN:\n          \n          /*--- Retrieve the specified total conditions for this boundary. ---*/\n          P_Total = ExtAveragedTotPressure[val_marker];\n          T_Total = ExtAveragedTotTemperature[val_marker];\n          ext_flow_angle = atan(ExtAveragedTangVelocity[val_marker]/ExtAveragedNormalVelocity[val_marker]);\n          FlowDirMix[0] = cos(ext_flow_angle);\n          FlowDirMix[1] = sin(ext_flow_angle);\n          \n          /* --- Computes the total state --- */\n          FluidModel->SetTDState_PT(P_Total, T_Total);\n          Enthalpy_e = FluidModel->GetStaticEnergy()+ FluidModel->GetPressure()/FluidModel->GetDensity();\n          Entropy_e = FluidModel->GetEntropy();\n          \n          /* --- Compute the boundary state u_e --- */\n          Velocity2_e = Velocity2_i;\n          if (nDim == 2){\n            NormalVelocity= -sqrt(Velocity2_e)*FlowDirMix[0];\n            TangVelocity= -sqrt(Velocity2_e)*FlowDirMix[1];\n            Velocity_e[0]= UnitNormal[0]*NormalVelocity - UnitNormal[1]*TangVelocity;\n            Velocity_e[1]= UnitNormal[1]*NormalVelocity + UnitNormal[0]*TangVelocity;\n          }else{\n            for (iDim = 0; iDim < nDim; iDim++)\n              Velocity_e[iDim] = sqrt(Velocity2_e)*FlowDirMix[iDim];\n          }\n          StaticEnthalpy_e = Enthalpy_e - 0.5 * Velocity2_e;\n          FluidModel->SetTDState_hs(StaticEnthalpy_e, Entropy_e);\n          Density_e = FluidModel->GetDensity();\n          StaticEnergy_e = FluidModel->GetStaticEnergy();\n          Energy_e = StaticEnergy_e + 0.5 * Velocity2_e;\n          if (tkeNeeded) Energy_e += GetTke_Inf();\n          break;\n          \n        case DENSITY_VELOCITY:\n          \n          /*--- Retrieve the specified density and velocity magnitude ---*/\n          Density_e  = config->GetRiemann_Var1(Marker_Tag);\n          VelMag_e   = config->GetRiemann_Var2(Marker_Tag);\n          Flow_Dir = config->GetRiemann_FlowDir(Marker_Tag);\n          \n          /*--- Non-dim. the inputs if necessary. ---*/\n          Density_e /= config->GetDensity_Ref();\n          VelMag_e /= config->GetVelocity_Ref();\n          \n          for (iDim = 0; iDim < nDim; iDim++)\n            Velocity_e[iDim] = VelMag_e*Flow_Dir[iDim];\n          Energy_e = Energy_i;\n          break;\n          \n        case MIXING_OUT:\n          \n          /*--- Retrieve the staic pressure for this boundary. ---*/\n          Pressure_e = ExtAveragedPressure[val_marker];\n          Density_e = Density_i;\n          \n          /* --- Compute the boundary state u_e --- */\n          FluidModel->SetTDState_Prho(Pressure_e, Density_e);\n          Velocity2_e = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Velocity_e[iDim] = Velocity_i[iDim];\n            Velocity2_e += Velocity_e[iDim]*Velocity_e[iDim];\n          }\n          Energy_e = FluidModel->GetStaticEnergy() + 0.5*Velocity2_e;\n          break;\n          \n        case STATIC_PRESSURE:\n          \n          /*--- Retrieve the staic pressure for this boundary. ---*/\n          Pressure_e = config->GetRiemann_Var1(Marker_Tag);\n          Pressure_e /= config->GetPressure_Ref();\n          Density_e = Density_i;\n          \n          /* --- Compute the boundary state u_e --- */\n          FluidModel->SetTDState_Prho(Pressure_e, Density_e);\n          Velocity2_e = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Velocity_e[iDim] = Velocity_i[iDim];\n            Velocity2_e += Velocity_e[iDim]*Velocity_e[iDim];\n          }\n          Energy_e = FluidModel->GetStaticEnergy() + 0.5*Velocity2_e;\n          break;\n          \n        default:\n          cout << \"Warning! Invalid Riemann input!\" << endl;\n          exit(EXIT_FAILURE);\n          break;\n          \n      }\n      \n      /*--- Compute P (matrix of right eigenvectors) ---*/\n      conv_numerics->GetPMatrix(&Density_i, Velocity_i, &SoundSpeed_i, &Enthalpy_i, &Chi_i, &Kappa_i, UnitNormal, P_Tensor);\n      \n      /*--- Compute inverse P (matrix of left eigenvectors)---*/\n      conv_numerics->GetPMatrix_inv(invP_Tensor, &Density_i, Velocity_i, &SoundSpeed_i, &Chi_i, &Kappa_i, UnitNormal);\n      \n      /*--- eigenvalues contribution due to grid motion ---*/\n      if (grid_movement){\n        gridVel = geometry->node[iPoint]->GetGridVel();\n        \n        su2double ProjGridVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjGridVel   += gridVel[iDim]*UnitNormal[iDim];\n        ProjVelocity_i -= ProjGridVel;\n      }\n      \n      /*--- Flow eigenvalues ---*/\n      for (iDim = 0; iDim < nDim; iDim++)\n        Lambda_i[iDim] = ProjVelocity_i;\n      Lambda_i[nVar-2] = ProjVelocity_i + SoundSpeed_i;\n      Lambda_i[nVar-1] = ProjVelocity_i - SoundSpeed_i;\n      \n      /* --- Compute the boundary state u_e --- */\n      u_e[0] = Density_e;\n      for (iDim = 0; iDim < nDim; iDim++)\n        u_e[iDim+1] = Velocity_e[iDim]*Density_e;\n      u_e[nVar-1] = Energy_e*Density_e;\n      \n      /* --- Compute the boundary state u_i --- */\n      u_i[0] = Density_i;\n      for (iDim = 0; iDim < nDim; iDim++)\n        u_i[iDim+1] = Velocity_i[iDim]*Density_i;\n      u_i[nVar-1] = Energy_i*Density_i;\n      \n      /*--- Compute the characteristic jumps ---*/\n      for (iVar = 0; iVar < nVar; iVar++)\n      {\n        dw[iVar] = 0;\n        for (jVar = 0; jVar < nVar; jVar++)\n          dw[iVar] += invP_Tensor[iVar][jVar] * (u_e[jVar] - u_i[jVar]);\n        \n      }\n      \n      /*--- Compute the boundary state u_b using characteristics ---*/\n      for (iVar = 0; iVar < nVar; iVar++)\n      {\n        u_b[iVar] = u_i[iVar];\n        \n        for (jVar = 0; jVar < nVar; jVar++)\n        {\n          if (Lambda_i[jVar] < 0)\n          {\n            u_b[iVar] += P_Tensor[iVar][jVar]*dw[jVar];\n            \n          }\n        }\n      }\n      \n      \n      /*--- Compute the thermodynamic state in u_b ---*/\n      Density_b = u_b[0];\n      Velocity2_b = 0;\n      for (iDim = 0; iDim < nDim; iDim++)\n      {\n        Velocity_b[iDim] = u_b[iDim+1]/Density_b;\n        Velocity2_b += Velocity_b[iDim]*Velocity_b[iDim];\n      }\n      Energy_b = u_b[nVar-1]/Density_b;\n      StaticEnergy_b = Energy_b - 0.5*Velocity2_b;\n      FluidModel->SetTDState_rhoe(Density_b, StaticEnergy_b);\n      Pressure_b = FluidModel->GetPressure();\n      Temperature_b = FluidModel->GetTemperature();\n      Enthalpy_b = Energy_b + Pressure_b/Density_b;\n      Kappa_b = FluidModel->GetdPde_rho() / Density_b;\n      Chi_b = FluidModel->GetdPdrho_e() - Kappa_b * StaticEnergy_b;\n      \n      /*--- Compute the residuals ---*/\n      conv_numerics->GetInviscidProjFlux(&Density_b, Velocity_b, &Pressure_b, &Enthalpy_b, Normal, Residual);\n      \n      /*--- Residual contribution due to grid motion ---*/\n      if (grid_movement) {\n        gridVel = geometry->node[iPoint]->GetGridVel();\n        su2double projVelocity = 0.0;\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          projVelocity +=  gridVel[iDim]*Normal[iDim];\n        for (iVar = 0; iVar < nVar; iVar++)\n          Residual[iVar] -= projVelocity *(u_b[iVar]);\n      }\n      \n      if (implicit) {\n        \n        Jacobian_b = new su2double*[nVar];\n        DubDu = new su2double*[nVar];\n        for (iVar = 0; iVar < nVar; iVar++)\n        {\n          Jacobian_b[iVar] = new su2double[nVar];\n          DubDu[iVar] = new su2double[nVar];\n        }\n        \n        /*--- Initialize DubDu to unit matrix---*/\n        \n        for (iVar = 0; iVar < nVar; iVar++)\n        {\n          for (jVar = 0; jVar < nVar; jVar++)\n            DubDu[iVar][jVar]= 0;\n          \n          DubDu[iVar][iVar]= 1;\n        }\n        \n        /*--- Compute DubDu -= RNL---*/\n        for (iVar=0; iVar<nVar; iVar++)\n        {\n          for (jVar=0; jVar<nVar; jVar++)\n          {\n            for (kVar=0; kVar<nVar; kVar++)\n            {\n              if (Lambda_i[kVar]<0)\n                DubDu[iVar][jVar] -= P_Tensor[iVar][kVar] * invP_Tensor[kVar][jVar];\n            }\n          }\n        }\n        \n        /*--- Compute flux Jacobian in state b ---*/\n        conv_numerics->GetInviscidProjJac(Velocity_b, &Enthalpy_b, &Chi_b, &Kappa_b, Normal, 1.0, Jacobian_b);\n        \n        /*--- Jacobian contribution due to grid motion ---*/\n        if (grid_movement)\n        {\n          gridVel = geometry->node[iPoint]->GetGridVel();\n          su2double projVelocity = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            projVelocity +=  gridVel[iDim]*Normal[iDim];\n          for (iVar = 0; iVar < nVar; iVar++){\n            Residual[iVar] -= projVelocity *(u_b[iVar]);\n            Jacobian_b[iVar][iVar] -= projVelocity;\n          }\n          \n        }\n        \n        /*--- initiate Jacobian_i to zero matrix ---*/\n        for (iVar=0; iVar<nVar; iVar++)\n          for (jVar=0; jVar<nVar; jVar++)\n            Jacobian_i[iVar][jVar] = 0.0;\n        \n        /*--- Compute numerical flux Jacobian at node i ---*/\n        for (iVar=0; iVar<nVar; iVar++) {\n          for (jVar=0; jVar<nVar; jVar++) {\n            for (kVar=0; kVar<nVar; kVar++) {\n              Jacobian_i[iVar][jVar] += Jacobian_b[iVar][kVar] * DubDu[kVar][jVar];\n            }\n          }\n        }\n        \n        for (iVar = 0; iVar < nVar; iVar++) {\n          delete [] Jacobian_b[iVar];\n          delete [] DubDu[iVar];\n        }\n        delete [] Jacobian_b;\n        delete [] DubDu;\n      }\n      \n      /*--- Update residual value ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Roe Turkel preconditioning, set the value of beta ---*/\n      if (config->GetKind_Upwind() == TURKEL)\n        node[iPoint]->SetPreconditioner_Beta(conv_numerics->GetPrecond_Beta());\n      \n      /*--- Viscous contribution ---*/\n      if (viscous) {\n        \n        /*--- Primitive variables, using the derived quantities ---*/\n        V_boundary[0] = Temperature_b;\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_boundary[iDim+1] = Velocity_b[iDim];\n        V_boundary[nDim+1] = Pressure_b;\n        V_boundary[nDim+2] = Density_b;\n        V_boundary[nDim+3] = Enthalpy_b;\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        V_boundary[nDim+5] = FluidModel->GetLaminarViscosity();\n        V_boundary[nDim+6] = node[iPoint]->GetEddyViscosity();\n        V_boundary[nDim+7] = FluidModel->GetThermalConductivity();\n        V_boundary[nDim+8] = FluidModel->GetCp();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        visc_numerics->SetPrimitive(V_domain, V_boundary);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Secondary variables ---*/\n        S_domain = node[iPoint]->GetSecondary();\n        \n        /*--- Compute secondary thermodynamic properties (partial derivatives...) ---*/\n        \n        S_boundary[0]= FluidModel->GetdPdrho_e();\n        S_boundary[1]= FluidModel->GetdPde_rho();\n        \n        S_boundary[2]= FluidModel->GetdTdrho_e();\n        S_boundary[3]= FluidModel->GetdTde_rho();\n        \n        /*--- Compute secondary thermo-physical properties (partial derivatives...) ---*/\n        \n        S_boundary[4]= FluidModel->Getdmudrho_T();\n        S_boundary[5]= FluidModel->GetdmudT_rho();\n        \n        S_boundary[6]= FluidModel->Getdktdrho_T();\n        S_boundary[7]= FluidModel->GetdktdT_rho();\n        \n        visc_numerics->SetSecondary(S_domain, S_boundary);\n        \n        /*--- Turbulent kinetic energy ---*/\n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  delete [] Normal;\n  delete [] Velocity_e;\n  delete [] Velocity_b;\n  delete [] Velocity_i;\n  delete [] FlowDirMix;\n  \n  delete [] S_boundary;\n  delete [] Lambda_i;\n  delete [] u_i;\n  delete [] u_e;\n  delete [] u_b;\n  delete [] dw;\n  \n  \n  for (iVar = 0; iVar < nVar; iVar++)\n  {\n    delete [] P_Tensor[iVar];\n    delete [] invP_Tensor[iVar];\n  }\n  delete [] P_Tensor;\n  delete [] invP_Tensor;\n  \n}\n\n\nvoid CEulerSolver::Mixing_Process(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker) {\n  \n  unsigned long iVertex, iPoint, nVert;\n  unsigned short iDim, iVar;\n  unsigned short mixing_process = config->GetKind_MixingProcess();\n  su2double Pressure = 0.0, Density = 0.0, Enthalpy = 0.0,  *Velocity = NULL, *Normal, *gridVel,\n  Area, TotalArea, TotalAreaPressure, TotalAreaDensity, *TotalAreaVelocity, UnitNormal[3];\n  string Marker_Tag, Monitoring_Tag;\n  su2double val_init_pressure;\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool grid_movement        = config->GetGrid_Movement();\n  su2double TotalDensity, TotalPressure, *TotalVelocity, TotalNormal, avgVel2, avgTotalEnthaply;\n  \n  /*-- Variables declaration and allocation ---*/\n  Velocity = new su2double[nDim];\n  Normal = new su2double[nDim];\n  TotalVelocity = new su2double[nDim];\n  TotalAreaVelocity = new su2double[nDim];\n  \n  for (iDim=0; iDim<nDim; iDim++) {\n    TotalVelocity[iDim]=0;\n    TotalAreaVelocity[iDim]=0;\n  }\n  \n  TotalDensity = 0.0;\n  TotalPressure = 0.0;\n  TotalAreaPressure=0.0;\n  TotalAreaDensity=0.0;\n  TotalArea = 0.0;\n  TotalNormal=0.0;\n  \n  /*--- Forces initialization for Marker vector ---*/\n  AveragedPressure[val_Marker] = 0.0;\n  AveragedEnthalpy[val_Marker] = 0.0;\n  AveragedDensity[val_Marker] = 0.0;\n  AveragedSoundSpeed[val_Marker] = 0.0;\n  \n  for (iDim=0;iDim < nDim;iDim++){\n    AveragedVelocity[val_Marker][iDim] = 0.0;\n    AveragedNormal[val_Marker][iDim] = 0.0;\n    AveragedGridVel[val_Marker][iDim] = 0.0;\n  }\n  \n  for (iVar=0;iVar<nVar;iVar++)\n    TotalFlux[val_Marker][iVar]= 0.0;\n  \n  /*--- Loop over the vertices to compute the averaged quantities ---*/\n  nVert = 0;\n  for (iVertex = 0; iVertex < geometry->GetnVertex(val_Marker); iVertex++) {\n    \n    iPoint = geometry->vertex[val_Marker][iVertex]->GetNode();\n    \n    /*--- Compute the integral fluxes for the boundaries ---*/\n    if (compressible) {\n      Pressure = node[iPoint]->GetPressure();\n      Density = node[iPoint]->GetDensity();\n      Enthalpy = node[iPoint]->GetEnthalpy();\n    }\n    else {\n      cout << \"!!! Mixing process for incompressible and freesurface does not available yet !!! \" << endl;\n      cout << \"Press any key to exit...\" << endl;\n      cin.get();\n      exit(1);\n    }\n    \n    /*--- Note that the fluxes from halo cells are discarded ---*/\n    if ( (geometry->node[iPoint]->GetDomain())  ) {\n      nVert++;\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      geometry->vertex[val_Marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n      su2double VelNormal = 0.0, VelSq = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        UnitNormal[iDim] = Normal[iDim]/Area;\n        Velocity[iDim] = node[iPoint]->GetPrimitive(iDim+1);\n        VelNormal += UnitNormal[iDim]*Velocity[iDim];\n        VelSq += Velocity[iDim]*Velocity[iDim];\n      }\n      \n      \n      /*--- Compute the integral fluxes for the boundary of interest ---*/\n      \n      if ((mixing_process == AREA_AVERAGE) || (mixing_process == MIXEDOUT_AVERAGE)){\n        \n        TotalFlux[val_Marker][0] += Area*(Density*VelNormal );\n        for (iDim = 1; iDim < nDim+1; iDim++)\n          TotalFlux[val_Marker][iDim] += Area*(Density*VelNormal*Velocity[iDim -1] + Pressure*UnitNormal[iDim -1] );\n        TotalFlux[val_Marker][nDim+1] += Area*(Density*VelNormal*Enthalpy );\n        \n        TotalArea += Area;\n        TotalAreaPressure += Area*Pressure;\n        TotalAreaDensity  += Area*Density;\n        for (iDim = 0; iDim < nDim; iDim++)\n          TotalAreaVelocity[iDim] += Area*Velocity[iDim];\n        \n      }else{\n        \n        TotalDensity += Density;\n        TotalPressure += Pressure;\n        for (iDim = 0; iDim < nDim; iDim++)\n          TotalVelocity[iDim] += Velocity[iDim];\n        \n        \n      }\n      for (iDim = 0; iDim < nDim; iDim++) AveragedNormal[val_Marker][iDim] +=Normal[iDim];\n      if (grid_movement){\n        gridVel = geometry->node[iPoint]->GetGridVel();\n        for (iDim = 0; iDim < nDim; iDim++)\n          AveragedGridVel[val_Marker][iDim] +=gridVel[iDim];\n      }\n    }\n  }\n  \n  /*--- Compute the averaged value for the boundary of interest ---*/\n  for (iDim = 0; iDim < nDim; iDim++){\n    AveragedNormal[val_Marker][iDim] /=nVert;\n    TotalNormal+= AveragedNormal[val_Marker][iDim]*AveragedNormal[val_Marker][iDim];\n  }\n  for (iDim = 0; iDim < nDim; iDim++) AveragedNormal[val_Marker][iDim] /=sqrt(TotalNormal);\n  if (grid_movement){\n    for (iDim = 0; iDim < nDim; iDim++)\n      AveragedGridVel[val_Marker][iDim] /=nVert;\n  }\n  \n  switch(mixing_process){\n      \n      \n    case ALGEBRAIC_AVERAGE:\n      AveragedDensity[val_Marker] = TotalDensity / nVert;\n      AveragedPressure[val_Marker] = TotalPressure / nVert;\n      for (iDim = 0; iDim < nDim; iDim++)\n        AveragedVelocity[val_Marker][iDim] = TotalVelocity[iDim] / nVert;\n      break;\n      \n    case AREA_AVERAGE:\n      AveragedDensity[val_Marker] = TotalAreaDensity / TotalArea;\n      AveragedPressure[val_Marker] = TotalAreaPressure / TotalArea;\n      for (iDim = 0; iDim < nDim; iDim++)\n        AveragedVelocity[val_Marker][iDim] = TotalAreaVelocity[iDim] / TotalArea;\n      break;\n      \n    case MIXEDOUT_AVERAGE:\n      for (iVar = 0; iVar<nVar; iVar++){\n        AveragedFlux[val_Marker][iVar] = TotalFlux[val_Marker][iVar]/TotalArea;\n      }\n      val_init_pressure = TotalAreaPressure/TotalArea;\n      \n      if (abs(AveragedFlux[val_Marker][0])<(10.0e-9)*TotalAreaDensity) {\n        cout << \"Mass flux is 0.0 so a Area Averaged algorithm is used for the Mixing Procees\" << endl;\n        AveragedDensity[val_Marker] = TotalAreaDensity / TotalArea;\n        AveragedPressure[val_Marker] = TotalAreaPressure / TotalArea;\n        for (iDim = 0; iDim < nDim; iDim++)\n          AveragedVelocity[val_Marker][iDim] = TotalAreaVelocity[iDim] / TotalArea;\n        \n      }else {\n        MixedOut_Average (val_init_pressure, AveragedFlux[val_Marker], AveragedNormal[val_Marker], &AveragedPressure[val_Marker], &AveragedDensity[val_Marker]);\n        for (iDim = 1; iDim < nDim +1;iDim++)\n          AveragedVelocity[val_Marker][iDim-1]= ( AveragedFlux[val_Marker][iDim] - AveragedPressure[val_Marker]*AveragedNormal[val_Marker][iDim-1] ) / AveragedFlux[val_Marker][0];\n      }\n      break;\n      \n      \n    default:\n      cout << \"Warning! Invalid MIXING_PROCESS input!\" << endl;\n      exit(EXIT_FAILURE);\n      break;\n  }\n  \n  /* --- compute static averaged quantities ---*/\n  FluidModel->SetTDState_Prho(AveragedPressure[val_Marker], AveragedDensity[val_Marker]);\n  AveragedEnthalpy[val_Marker] = FluidModel->GetStaticEnergy() + AveragedPressure[val_Marker]/AveragedDensity[val_Marker];\n  AveragedSoundSpeed[val_Marker] = FluidModel->GetSoundSpeed();\n  AveragedEntropy[val_Marker] = FluidModel->GetEntropy();\n  AveragedNormalVelocity[val_Marker]= AveragedNormal[val_Marker][0]*AveragedVelocity[val_Marker][0] + AveragedNormal[val_Marker][1]*AveragedVelocity[val_Marker][1];\n  AveragedTangVelocity[val_Marker]= AveragedNormal[val_Marker][0]*AveragedVelocity[val_Marker][1] - AveragedNormal[val_Marker][1]*AveragedVelocity[val_Marker][0];\n  MassFlow[val_Marker]= AveragedDensity[val_Marker]*AveragedNormalVelocity[val_Marker]*TotalArea;\n  FlowAngle[val_Marker]= atan(AveragedTangVelocity[val_Marker]/AveragedNormalVelocity[val_Marker]);\n  \n  /* --- compute total averaged quantities ---*/\n  avgVel2 = 0.0;\n  for (iDim = 0; iDim < nDim; iDim++) avgVel2 += AveragedVelocity[val_Marker][iDim]*AveragedVelocity[val_Marker][iDim];\n  \n  avgTotalEnthaply = AveragedEnthalpy[val_Marker] + 0.5*avgVel2;\n  FluidModel->SetTDState_hs(avgTotalEnthaply,AveragedEntropy[val_Marker]);\n  AveragedTotTemperature[val_Marker] = FluidModel->GetTemperature();\n  AveragedTotPressure[val_Marker] = FluidModel->GetPressure();\n  \n  if(grid_movement){\n    AveragedTangGridVelocity[val_Marker] = AveragedNormal[val_Marker][0]*AveragedGridVel[val_Marker][1]-AveragedNormal[val_Marker][1]*AveragedGridVel[val_Marker][0];\n    AveragedMach[val_Marker] = sqrt(AveragedNormalVelocity[val_Marker]*AveragedNormalVelocity[val_Marker] + (AveragedTangVelocity[val_Marker] - AveragedTangGridVelocity[val_Marker])*(AveragedTangVelocity[val_Marker] - AveragedTangGridVelocity[val_Marker]));\n    AveragedMach[val_Marker] /= AveragedSoundSpeed[val_Marker];\n    AveragedTangMach[val_Marker] = (AveragedTangVelocity[val_Marker] - AveragedTangGridVelocity[val_Marker])/AveragedSoundSpeed[val_Marker];\n    FlowAngle[val_Marker]= atan((AveragedTangVelocity[val_Marker] - AveragedTangGridVelocity[val_Marker])/AveragedNormalVelocity[val_Marker]);\n    \n  }else{\n    AveragedMach[val_Marker] = 0.0;\n    for (iDim = 0; iDim < nDim; iDim++) {\n      AveragedMach[val_Marker] += AveragedVelocity[val_Marker][iDim]*AveragedVelocity[val_Marker][iDim];\n    }\n    AveragedMach[val_Marker] = sqrt(AveragedMach[val_Marker])/AveragedSoundSpeed[val_Marker];\n    AveragedTangMach[val_Marker] = AveragedTangVelocity[val_Marker]/AveragedSoundSpeed[val_Marker];\n    \n  }\n  \n  AveragedNormalMach[val_Marker] = AveragedNormalVelocity[val_Marker]/AveragedSoundSpeed[val_Marker];\n  \n  \n  if ((AveragedDensity[val_Marker]!= AveragedDensity[val_Marker]) || (AveragedEnthalpy[val_Marker]!=AveragedEnthalpy[val_Marker]))\n    cout<<\"nan in mixing process in boundary \"<<config->GetMarker_All_TagBound(val_Marker)<< endl;\n  \n  /*--- Free locally allocated memory ---*/\n  delete [] Velocity;\n  delete [] Normal;\n  delete [] TotalVelocity;\n  delete [] TotalAreaVelocity;\n}\n\nvoid CEulerSolver::MixedOut_Average (su2double val_init_pressure, su2double *val_Averaged_Flux, su2double *val_normal,\n                                     su2double *pressure_mix, su2double *density_mix) {\n  \n  unsigned short maxiter = 10;\n  unsigned short iter = 0;\n  su2double toll = 1.0e-07;\n  su2double resdl = 0.0;\n  \n  su2double *val_func = new su2double, *val_right_func = new su2double, *val_left_func = new su2double;\n  su2double deltaP, *p_mix = new su2double, *p_mix_right = new su2double, *p_mix_left = new su2double;\n  su2double epsilon = 1.0e-04;\n  su2double relax_factor = 1;\n  \n  *pressure_mix = val_init_pressure;\n  \n  /*--- Newton-Raphson's method with central difference formula ---*/\n  \n  while ( iter <= maxiter ) {\n    deltaP = 2*epsilon*(*pressure_mix);\n    *p_mix_right = *pressure_mix+deltaP/2;\n    *p_mix_left = *pressure_mix-deltaP/2;\n    *p_mix = *pressure_mix;\n    MixedOut_Root_Function(p_mix_right,val_Averaged_Flux,val_normal,val_right_func,density_mix);\n    MixedOut_Root_Function(p_mix_left,val_Averaged_Flux,val_normal,val_left_func,density_mix);\n    MixedOut_Root_Function(p_mix,val_Averaged_Flux,val_normal,val_func,density_mix);\n    su2double der_func = (*val_right_func-*val_left_func) / deltaP;\n    deltaP = -*val_func/der_func;\n    resdl = deltaP/val_init_pressure;\n    *pressure_mix += relax_factor*(deltaP);\n    \n    iter += 1;\n    if ( abs(resdl) <= toll ) {\n      break;\n    }\n    \n  }\n  \n  MixedOut_Root_Function(pressure_mix,val_Averaged_Flux,val_normal,val_func,density_mix);\n  \n  /*--- Free locally allocated memory ---*/\n  delete val_func;\n  delete val_right_func;\n  delete val_left_func;\n  delete p_mix;\n  delete p_mix_right;\n  delete p_mix_left;\n  \n}\n\nvoid CEulerSolver::MixedOut_Root_Function(su2double *pressure, su2double *val_Averaged_Flux, su2double *val_normal, su2double *valfunc, su2double *density) {\n  \n  su2double velnormal, velsq;\n  \n  su2double *vel;\n  vel = new su2double[nDim];\n  \n  \n  *valfunc = 0.0;\n  *density = 0.0;\n  \n  velnormal = 0.0;\n  velsq = 0.0;\n  \n  for (unsigned short iDim = 0; iDim < nDim; iDim++) {\n    vel[iDim]  = (val_Averaged_Flux[iDim+1] - (*pressure)*val_normal[iDim]) / val_Averaged_Flux[0];\n    velnormal += val_normal[iDim]*vel[iDim];\n    velsq += vel[iDim]*vel[iDim];\n  }\n  *density = val_Averaged_Flux[0] / velnormal;\n  if (*density <= 0) cout << \" desnity in mixedout routine negative : \" << endl;\n  FluidModel->SetTDState_Prho(*pressure, *density);\n  su2double enthalpy = FluidModel->GetStaticEnergy() + (*pressure)/(*density);\n  *valfunc = val_Averaged_Flux[nDim+1]/val_Averaged_Flux[0] - enthalpy - velsq/2;\n  if (*valfunc!=*valfunc) cout << \" mixedout root func gives nan: \" << endl;\n  \n  \n  /*--- Free locally allocated memory ---*/\n  delete [] vel;\n  \n}\n\nvoid CEulerSolver::Boundary_Fourier(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker, vector<std::complex<su2double> >& c4k,signed long& nboundaryvertex) {\n  /* Implementation of Fuorier Transformations for non-regfelcting BC will come soon */\n}\n\nvoid CEulerSolver::Boundary_Fourier(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short val_Marker, vector<std::complex<su2double> >& c2k,vector<std::complex<su2double> >& c3k,signed long& nboundaryvertex) {\n  /* Implementation of Fuorier Transformations for non-regfelcting BC will come soon */\n}\n\nvoid CEulerSolver::BC_NonReflecting(CGeometry *geometry, CSolver **solver_container,\n                                    CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  unsigned short iDim, iVar, jVar, kVar;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double  Area, UnitNormal[3];\n  \n  su2double *Velocity_b, Velocity2_b, Enthalpy_b, Energy_b, StaticEnergy_b, Density_b, Kappa_b, Chi_b, Pressure_b, Temperature_b;\n  su2double *Velocity_i, Velocity2_i, Enthalpy_i, Energy_i, StaticEnergy_i, Density_i, Kappa_i, Chi_i, Pressure_i, SoundSpeed_i;\n  su2double Pressure_e;\n  su2double ProjVelocity_i;\n  su2double **P_Tensor, **invP_Tensor, *Lambda_i, **Jacobian_b, **DubDu, *dw, *u_b;\n  su2double *gridVel;\n  su2double *V_boundary, *V_domain, *S_boundary, *S_domain;\n  \n  bool implicit             = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool grid_movement        = config->GetGrid_Movement();\n  string Marker_Tag         = config->GetMarker_All_TagBound(val_marker);\n  bool viscous              = config->GetViscous();\n  su2double *Normal;\n  \n  Normal = new su2double[nDim];\n  \n  Velocity_i = new su2double[nDim];\n  Velocity_b = new su2double[nDim];\n  \n  \n  Lambda_i = new su2double[nVar];\n  \n  u_b = new su2double[nVar];\n  dw = new su2double[nVar];\n  \n  S_boundary = new su2double[8];\n  \n  P_Tensor = new su2double*[nVar];\n  invP_Tensor = new su2double*[nVar];\n  for (iVar = 0; iVar < nVar; iVar++)\n  {\n    P_Tensor[iVar] = new su2double[nVar];\n    invP_Tensor[iVar] = new su2double[nVar];\n  }\n  \n  /*--- new declarations ---*/\n  std::vector<std::complex<su2double> > c4k ;//    std::complex<su2double> c3k[nVertex-OddEven]=0;\n  std::vector<std::complex<su2double> > c2k ;//    std::complex<su2double> c3k[nVertex-OddEven]=0;\n  std::vector<std::complex<su2double> > c3k ;//    std::complex<su2double> c3k[nVertex-OddEven]=0;\n  \n  su2double  deltaDensity, deltaPressure, AvgMach, deltaTangVelocity, deltaNormalVelocity, cc,rhoc,c1j,c2j,c3j,c4j,\n  avg_c1, avg_c2, avg_c3, avg_c4,TangVelocity, NormalVelocity, GilesBeta, c4js, dc4js, *delta_c, **R_Matrix, *deltaprim;\n  \n  \n  delta_c = new su2double[nVar];\n  deltaprim = new su2double[nVar];\n  R_Matrix= new su2double*[nVar];\n  for (iVar = 0; iVar < nVar; iVar++)\n  {\n    R_Matrix[iVar] = new su2double[nVar];\n  }\n  \n  \n  Mixing_Process(geometry, solver_container,  config, val_marker);\n  \n  cc = AveragedSoundSpeed[val_marker]*AveragedSoundSpeed[val_marker];\n  rhoc = AveragedSoundSpeed[val_marker]*AveragedDensity[val_marker];\n  AvgMach = AveragedMach[val_marker];\n  \n  conv_numerics->GetRMatrix(AveragedSoundSpeed[val_marker], AveragedDensity[val_marker], AveragedNormal[val_marker], R_Matrix);\n  \n  //  Boundary_Fourier(geometry, solver_container, config, val_marker, c4k, nboundaryvertex);\n  //  Boundary_Fourier(geometry, solver_container, config, val_marker, c2k,c3k,nboundaryvertex);\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    V_boundary= GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e., not a halo node) ---*/\n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      conv_numerics->SetNormal(Normal);\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Retrieve solution at this boundary node ---*/\n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Compute the internal state u_i ---*/\n      Velocity2_i = 0;\n      for (iDim = 0; iDim < nDim; iDim++)\n      {\n        Velocity_i[iDim] = node[iPoint]->GetVelocity(iDim);\n        Velocity2_i += Velocity_i[iDim]*Velocity_i[iDim];\n      }\n      \n      \n      Density_i = node[iPoint]->GetDensity();\n      \n      Energy_i = node[iPoint]->GetEnergy();\n      StaticEnergy_i = Energy_i - 0.5*Velocity2_i;\n      \n      FluidModel->SetTDState_rhoe(Density_i, StaticEnergy_i);\n      \n      Pressure_i = FluidModel->GetPressure();\n      Enthalpy_i = Energy_i + Pressure_i/Density_i;\n      \n      SoundSpeed_i = FluidModel->GetSoundSpeed();\n      \n      Kappa_i = FluidModel->GetdPde_rho() / Density_i;\n      Chi_i = FluidModel->GetdPdrho_e() - Kappa_i * StaticEnergy_i;\n      \n      ProjVelocity_i = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        ProjVelocity_i += Velocity_i[iDim]*UnitNormal[iDim];\n      \n      \n      switch(config->GetKind_Data_NRBC(Marker_Tag))\n      {\n          \n          //TODO(turbo), generilize for 3D case\n          //TODO(turbo), generilize for Inlet and Outlet in for backflow treatment\n          //TODO(turbo), implement not uniform inlet and radial equilibrium for the outlet\n          \n        case MIXING_IN:\n          \n          /* --- Compute jump of primitive variable  --- */\n          deltaDensity = ExtAveragedDensity[val_marker] - AveragedDensity[val_marker];\n          deltaPressure = ExtAveragedPressure[val_marker] - AveragedPressure[val_marker];\n          NormalVelocity= UnitNormal[0]*Velocity_i[0] + UnitNormal[1]*Velocity_i[1];\n          deltaTangVelocity= ExtAveragedTangVelocity[val_marker]+AveragedTangVelocity[val_marker];\n          deltaNormalVelocity= ExtAveragedNormalVelocity[val_marker]+AveragedNormalVelocity[val_marker];\n          \n          /* --- Compute characteristic jumps  --- */\n          avg_c1= -cc*deltaDensity +deltaPressure;\n          avg_c2= (rhoc*deltaTangVelocity);\n          avg_c3= (rhoc*deltaNormalVelocity +deltaPressure);\n          c4j= -rhoc*(-NormalVelocity +AveragedNormalVelocity[val_marker]) +(Pressure_i - AveragedPressure[val_marker]);\n          \n          /* --- Impose Inlet BC  --- */\n          delta_c[0] = avg_c1;\n          delta_c[1] = avg_c2;\n          delta_c[2] = avg_c3;\n          delta_c[3] = c4j;\n          break;\n          \n        case MIXING_OUT:\n          \n          /* --- Compute jump of primitive variable  --- */\n          deltaDensity = Density_i - AveragedDensity[val_marker];\n          deltaPressure = Pressure_i - AveragedPressure[val_marker];\n          TangVelocity= UnitNormal[0]*Velocity_i[1] - UnitNormal[1]*Velocity_i[0];\n          NormalVelocity= UnitNormal[0]*Velocity_i[0] + UnitNormal[1]*Velocity_i[1];\n          deltaTangVelocity= TangVelocity - AveragedTangVelocity[val_marker];\n          deltaNormalVelocity= NormalVelocity - AveragedNormalVelocity[val_marker];\n          \n          /* --- Compute characteristic jumps  --- */\n          c1j= -cc*deltaDensity +deltaPressure;\n          c2j= rhoc*deltaTangVelocity;\n          c3j= rhoc*deltaNormalVelocity + deltaPressure;\n          avg_c4 = rhoc*(AveragedNormalVelocity[val_marker]+ExtAveragedNormalVelocity[val_marker]) -(AveragedPressure[val_marker]-ExtAveragedPressure[val_marker]);\n          \n          /* --- implementation of supersonic NRBC ---*/\n          if (AvgMach > 1.001){\n            if (AveragedTangVelocity[val_marker] >= 0.0){\n              GilesBeta= -sqrt(pow(AvgMach,2)-1.0);\n            }else{\n              GilesBeta= sqrt(pow(AvgMach,2)-1.0);\n            }\n            c4js= (2.0 * AveragedNormalMach[val_marker])/(GilesBeta - AveragedTangMach[val_marker])*c2j - (GilesBeta+AveragedTangMach[val_marker])/(GilesBeta-AveragedTangMach[val_marker])*c3j;\n            dc4js = c4js;\n          }else{\n            dc4js = 0.0;\n          }\n          \n          /* --- Impose Outlet BC  --- */\n          delta_c[0] = c1j;\n          delta_c[1] = c2j;\n          delta_c[2] = c3j;\n          delta_c[3] = avg_c4 + dc4js;\n          break;\n          \n        case STATIC_PRESSURE:\n          \n          Pressure_e = config->GetNRBC_Var1(Marker_Tag);\n          Pressure_e /= config->GetPressure_Ref();\n          \n          /* --- Compute jump of primitive variable  --- */\n          deltaDensity = Density_i - AveragedDensity[val_marker];\n          deltaPressure = Pressure_i - AveragedPressure[val_marker];\n          TangVelocity= UnitNormal[0]*Velocity_i[1] - UnitNormal[1]*Velocity_i[0];\n          NormalVelocity= UnitNormal[0]*Velocity_i[0] + UnitNormal[1]*Velocity_i[1];\n          deltaTangVelocity= TangVelocity - AveragedTangVelocity[val_marker];\n          deltaNormalVelocity= NormalVelocity - AveragedNormalVelocity[val_marker];\n          \n          /* --- Compute characteristic jumps  --- */\n          c1j= -cc*deltaDensity +deltaPressure;\n          c2j= rhoc*deltaTangVelocity;\n          c3j=rhoc*deltaNormalVelocity + deltaPressure;\n          c4j=-rhoc*deltaNormalVelocity + deltaPressure;\n          avg_c4 = -2.0*(AveragedPressure[val_marker]-Pressure_e);\n          \n          /* --- implementation of supersonic NRBC ---*/\n          if (AvgMach > 1.001){\n            if (AveragedTangVelocity[val_marker] >= 0.0){\n              GilesBeta= -sqrt(pow(AvgMach,2)-1.0);\n            }else{\n              GilesBeta= sqrt(pow(AvgMach,2)-1.0);\n            }\n            c4js= (2.0 * AveragedNormalMach[val_marker])/(GilesBeta - AveragedTangMach[val_marker])*c2j - (GilesBeta+AveragedTangMach[val_marker])/(GilesBeta-AveragedTangMach[val_marker])*c3j;\n            dc4js = c4js;\n          }else{\n            dc4js = 0.0;\n          }\n          \n          /* --- Impose Outlet BC  --- */\n          delta_c[0] = c1j;\n          delta_c[1] = c2j;\n          delta_c[2] = c3j;\n          delta_c[3] = avg_c4 + dc4js;\n          break;\n          \n        default:\n          cout << \"Warning! Invalid NRBC input!\" << endl;\n          exit(EXIT_FAILURE);\n          break;\n          \n      }\n      \n      /*--- Compute primitive jump from characteristic variables  ---*/\n      for (iVar = 0; iVar < nVar; iVar++)\n      {\n        deltaprim[iVar]=0;\n        for (jVar = 0; jVar < nVar; jVar++)\n        {\n          deltaprim[iVar] +=  R_Matrix[iVar][jVar]*delta_c[jVar];\n        }\n      }\n      \n      /*--- Compute P (matrix of right eigenvectors) ---*/\n      conv_numerics->GetPMatrix(&Density_i, Velocity_i, &SoundSpeed_i, &Enthalpy_i, &Chi_i, &Kappa_i, UnitNormal, P_Tensor);\n      \n      /*--- Compute inverse P (matrix of left eigenvectors)---*/\n      conv_numerics->GetPMatrix_inv(invP_Tensor, &Density_i, Velocity_i, &SoundSpeed_i, &Chi_i, &Kappa_i, UnitNormal);\n      \n      /*--- eigenvalues contribution due to grid motion ---*/\n      if (grid_movement){\n        gridVel = geometry->node[iPoint]->GetGridVel();\n        su2double ProjGridVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjGridVel   += gridVel[iDim]*UnitNormal[iDim];\n        ProjVelocity_i -= ProjGridVel;\n      }\n      \n      /*--- Flow eigenvalues ---*/\n      for (iDim = 0; iDim < nDim; iDim++)\n        Lambda_i[iDim] = ProjVelocity_i;\n      Lambda_i[nVar-2] = ProjVelocity_i + SoundSpeed_i;\n      Lambda_i[nVar-1] = ProjVelocity_i - SoundSpeed_i;\n      \n      //TODO(turbo), provide the under relaxation factor sigma from cfg file\n      su2double sigma;\n      sigma = 1.0;\n      \n      /*--- retrieve boundary variables ---*/\n      Density_b = AveragedDensity[val_marker] + sigma*deltaprim[0];\n      Pressure_b = AveragedPressure[val_marker] + sigma*deltaprim[3];\n      switch(config->GetKind_Data_NRBC(Marker_Tag)){\n        case MIXING_IN:\n          NormalVelocity = AveragedNormalVelocity[val_marker] - sigma*deltaprim[1];\n          TangVelocity = AveragedTangVelocity[val_marker] - sigma*deltaprim[2];\n          break;\n        case MIXING_OUT: case STATIC_PRESSURE:\n          NormalVelocity = AveragedNormalVelocity[val_marker] + sigma*deltaprim[1];\n          TangVelocity = AveragedTangVelocity[val_marker] + sigma*deltaprim[2];\n          break;\n        default:\n          cout << \"Warning! Invalid NRBC input!\" << endl;\n          exit(EXIT_FAILURE);\n          break;\n      }\n      \n      Velocity_b[0] = NormalVelocity*UnitNormal[0] - TangVelocity*UnitNormal[1];\n      Velocity_b[1]\t= NormalVelocity*UnitNormal[1] + TangVelocity*UnitNormal[0];\n      Velocity2_b = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Velocity2_b+= Velocity_b[iDim]*Velocity_b[iDim];\n      }\n      \n      FluidModel->SetTDState_Prho(Pressure_b, Density_b);\n      Energy_b = FluidModel->GetStaticEnergy() + 0.5*Velocity2_b;\n      StaticEnergy_b = FluidModel->GetStaticEnergy();\n      Temperature_b= FluidModel->GetTemperature();\n      Enthalpy_b = Energy_b + Pressure_b/Density_b;\n      Kappa_b = FluidModel->GetdPde_rho() / Density_b;\n      Chi_b = FluidModel->GetdPdrho_e() - Kappa_b * StaticEnergy_b;\n      \n      /*--- Compute the thermodynamic state in u_b ---*/\n      u_b[0]=Density_b;\n      u_b[1]=Density_b*Velocity_b[0];\n      u_b[2]=Density_b*Velocity_b[1];\n      u_b[3]=Energy_b*Density_b;\n      \n      /*--- Compute the residuals ---*/\n      conv_numerics->GetInviscidProjFlux(&Density_b, Velocity_b, &Pressure_b, &Enthalpy_b, Normal, Residual);\n      \n      /*--- Residual contribution due to grid motion ---*/\n      if (grid_movement) {\n        gridVel = geometry->node[iPoint]->GetGridVel();\n        su2double projVelocity = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          projVelocity +=  gridVel[iDim]*Normal[iDim];\n        for (iVar = 0; iVar < nVar; iVar++)\n          Residual[iVar] -= projVelocity *(u_b[iVar]);\n      }\n      \n      if (implicit) {\n        /*--- Residual contribution due to grid motion ---*/\n        Jacobian_b = new su2double*[nVar];\n        DubDu = new su2double*[nVar];\n        for (iVar = 0; iVar < nVar; iVar++)\n        {\n          Jacobian_b[iVar] = new su2double[nVar];\n          DubDu[iVar] = new su2double[nVar];\n        }\n        \n        /*--- Initialize DubDu to unit matrix---*/\n        for (iVar = 0; iVar < nVar; iVar++)\n        {\n          for (jVar = 0; jVar < nVar; jVar++)\n            DubDu[iVar][jVar]= 0;\n          \n          DubDu[iVar][iVar]= 1;\n        }\n        \n        /*--- Compute DubDu -= RNL---*/\n        for (iVar=0; iVar<nVar; iVar++)\n        {\n          for (jVar=0; jVar<nVar; jVar++)\n          {\n            for (kVar=0; kVar<nVar; kVar++)\n            {\n              if (Lambda_i[kVar]<0)\n                DubDu[iVar][jVar] -= P_Tensor[iVar][kVar] * invP_Tensor[kVar][jVar];\n            }\n          }\n        }\n        \n        /*--- Compute flux Jacobian in state b ---*/\n        conv_numerics->GetInviscidProjJac(Velocity_b, &Enthalpy_b, &Chi_b, &Kappa_b, Normal, 1.0, Jacobian_b);\n        \n        /*--- Jacobian contribution due to grid motion ---*/\n        if (grid_movement)\n        {\n          su2double projVelocity = 0.0;\n          gridVel = geometry->node[iPoint]->GetGridVel();\n          for (iDim = 0; iDim < nDim; iDim++)\n            projVelocity +=  gridVel[iDim]*Normal[iDim];\n          for (iVar = 0; iVar < nVar; iVar++){\n            Residual[iVar] -= projVelocity *(u_b[iVar]);\n            Jacobian_b[iVar][iVar] -= projVelocity;\n          }\n          \n        }\n        \n        /*--- initiate Jacobian_i to zero matrix ---*/\n        for (iVar=0; iVar<nVar; iVar++)\n          for (jVar=0; jVar<nVar; jVar++)\n            Jacobian_i[iVar][jVar] = 0.0;\n        /*--- Compute numerical flux Jacobian at node i ---*/\n        \n        for (iVar=0; iVar<nVar; iVar++) {\n          for (jVar=0; jVar<nVar; jVar++) {\n            for (kVar=0; kVar<nVar; kVar++) {\n              Jacobian_i[iVar][jVar] += Jacobian_b[iVar][kVar] * DubDu[kVar][jVar];\n            }\n          }\n          \n        }\n        \n        for (iVar = 0; iVar < nVar; iVar++) {\n          delete [] Jacobian_b[iVar];\n          delete [] DubDu[iVar];\n        }\n        delete [] Jacobian_b;\n        delete [] DubDu;\n      }\n      \n      /*--- Update residual value ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Roe Turkel preconditioning, set the value of beta ---*/\n      if (config->GetKind_Upwind() == TURKEL)\n        node[iPoint]->SetPreconditioner_Beta(conv_numerics->GetPrecond_Beta());\n      \n      /*--- Viscous contribution ---*/\n      if (viscous) {\n        \n        /*--- Primitive variables, using the derived quantities ---*/\n        V_boundary[0] = Temperature_b;\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_boundary[iDim+1] = Velocity_b[iDim];\n        V_boundary[nDim+1] = Pressure_b;\n        V_boundary[nDim+2] = Density_b;\n        V_boundary[nDim+3] = Enthalpy_b;\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        V_boundary[nDim+5] = FluidModel->GetLaminarViscosity();\n        V_boundary[nDim+6] = node[iPoint]->GetEddyViscosity();\n        V_boundary[nDim+7] = FluidModel->GetThermalConductivity();\n        V_boundary[nDim+8] = FluidModel->GetCp();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        visc_numerics->SetPrimitive(V_domain, V_boundary);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Secondary variables ---*/\n        S_domain = node[iPoint]->GetSecondary();\n        \n        /*--- Compute secondary thermodynamic properties (partial derivatives...) ---*/\n        \n        S_boundary[0]= FluidModel->GetdPdrho_e();\n        S_boundary[1]= FluidModel->GetdPde_rho();\n        \n        S_boundary[2]= FluidModel->GetdTdrho_e();\n        S_boundary[3]= FluidModel->GetdTde_rho();\n        \n        /*--- Compute secondary thermo-physical properties (partial derivatives...) ---*/\n        \n        S_boundary[4]= FluidModel->Getdmudrho_T();\n        S_boundary[5]= FluidModel->GetdmudT_rho();\n        \n        S_boundary[6]= FluidModel->Getdktdrho_T();\n        S_boundary[7]= FluidModel->GetdktdT_rho();\n        \n        visc_numerics->SetSecondary(S_domain, S_boundary);\n        \n        /*--- Turbulent kinetic energy ---*/\n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  delete [] Normal;\n  \n  delete [] Velocity_b;\n  delete [] Velocity_i;\n  \n  delete [] S_boundary;\n  delete [] Lambda_i;\n  delete [] u_b;\n  delete [] dw;\n  \n  \n  for (iVar = 0; iVar < nVar; iVar++)\n  {\n    delete [] P_Tensor[iVar];\n    delete [] invP_Tensor[iVar];\n  }\n  delete [] P_Tensor;\n  delete [] invP_Tensor;\n  \n  \n  delete []\tdelta_c;\n  delete []\tdeltaprim;\n  for (iVar = 0; iVar < nVar; iVar++)\n  {\n    delete [] R_Matrix[iVar];\n  }\n  delete [] R_Matrix;\n  \n  \n}\n\nvoid CEulerSolver::BC_Inlet(CGeometry *geometry, CSolver **solver_container,\n                            CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double P_Total, T_Total, Velocity[3], Velocity2, H_Total, Temperature, Riemann,\n  Pressure, Density, Energy, *Flow_Dir, Mach2, SoundSpeed2, SoundSpeed_Total2, Vel_Mag,\n  alpha, aa, bb, cc, dd, Area, UnitNormal[3];\n  su2double *V_inlet, *V_domain;\n  \n  bool implicit             = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool grid_movement        = config->GetGrid_Movement();\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  su2double Two_Gamma_M1       = 2.0/Gamma_Minus_One;\n  su2double Gas_Constant       = config->GetGas_ConstantND();\n  unsigned short Kind_Inlet = config->GetKind_Inlet();\n  string Marker_Tag         = config->GetMarker_All_TagBound(val_marker);\n  bool viscous              = config->GetViscous();\n  bool gravity = (config->GetGravityForce());\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    /*--- Allocate the value at the inlet ---*/\n    \n    V_inlet = GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e., not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      conv_numerics->SetNormal(Normal);\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Retrieve solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Build the fictitious intlet state based on characteristics ---*/\n      \n      if (compressible) {\n        \n        /*--- Subsonic inflow: there is one outgoing characteristic (u-c),\n         therefore we can specify all but one state variable at the inlet.\n         The outgoing Riemann invariant provides the final piece of info.\n         Adapted from an original implementation in the Stanford University\n         multi-block (SUmb) solver in the routine bcSubsonicInflow.f90\n         written by Edwin van der Weide, last modified 04-20-2009. ---*/\n        \n        switch (Kind_Inlet) {\n            \n            /*--- Total properties have been specified at the inlet. ---*/\n            \n          case TOTAL_CONDITIONS:\n            \n            /*--- Retrieve the specified total conditions for this inlet. ---*/\n            \n            if (gravity) P_Total = config->GetInlet_Ptotal(Marker_Tag) - geometry->node[iPoint]->GetCoord(nDim-1)*STANDART_GRAVITY;\n            else P_Total  = config->GetInlet_Ptotal(Marker_Tag);\n            T_Total  = config->GetInlet_Ttotal(Marker_Tag);\n            Flow_Dir = config->GetInlet_FlowDir(Marker_Tag);\n            \n            /*--- Non-dim. the inputs if necessary. ---*/\n            \n            P_Total /= config->GetPressure_Ref();\n            T_Total /= config->GetTemperature_Ref();\n            \n            /*--- Store primitives and set some variables for clarity. ---*/\n            \n            Density = V_domain[nDim+2];\n            Velocity2 = 0.0;\n            for (iDim = 0; iDim < nDim; iDim++) {\n              Velocity[iDim] = V_domain[iDim+1];\n              Velocity2 += Velocity[iDim]*Velocity[iDim];\n            }\n            Energy      = V_domain[nDim+3] - V_domain[nDim+1]/V_domain[nDim+2];\n            Pressure    = V_domain[nDim+1];\n            H_Total     = (Gamma*Gas_Constant/Gamma_Minus_One)*T_Total;\n            SoundSpeed2 = Gamma*Pressure/Density;\n            \n            /*--- Compute the acoustic Riemann invariant that is extrapolated\n             from the domain interior. ---*/\n            \n            Riemann   = 2.0*sqrt(SoundSpeed2)/Gamma_Minus_One;\n            for (iDim = 0; iDim < nDim; iDim++)\n              Riemann += Velocity[iDim]*UnitNormal[iDim];\n            \n            /*--- Total speed of sound ---*/\n            \n            SoundSpeed_Total2 = Gamma_Minus_One*(H_Total - (Energy + Pressure/Density)+0.5*Velocity2) + SoundSpeed2;\n            \n            /*--- Dot product of normal and flow direction. This should\n             be negative due to outward facing boundary normal convention. ---*/\n            \n            alpha = 0.0;\n            for (iDim = 0; iDim < nDim; iDim++)\n              alpha += UnitNormal[iDim]*Flow_Dir[iDim];\n            \n            /*--- Coefficients in the quadratic equation for the velocity ---*/\n            \n            aa =  1.0 + 0.5*Gamma_Minus_One*alpha*alpha;\n            bb = -1.0*Gamma_Minus_One*alpha*Riemann;\n            cc =  0.5*Gamma_Minus_One*Riemann*Riemann\n            -2.0*SoundSpeed_Total2/Gamma_Minus_One;\n            \n            /*--- Solve quadratic equation for velocity magnitude. Value must\n             be positive, so the choice of root is clear. ---*/\n            \n            dd = bb*bb - 4.0*aa*cc;\n            dd = sqrt(max(0.0, dd));\n            Vel_Mag   = (-bb + dd)/(2.0*aa);\n            Vel_Mag   = max(0.0, Vel_Mag);\n            Velocity2 = Vel_Mag*Vel_Mag;\n            \n            /*--- Compute speed of sound from total speed of sound eqn. ---*/\n            \n            SoundSpeed2 = SoundSpeed_Total2 - 0.5*Gamma_Minus_One*Velocity2;\n            \n            /*--- Mach squared (cut between 0-1), use to adapt velocity ---*/\n            \n            Mach2 = Velocity2/SoundSpeed2;\n            Mach2 = min(1.0, Mach2);\n            Velocity2   = Mach2*SoundSpeed2;\n            Vel_Mag     = sqrt(Velocity2);\n            SoundSpeed2 = SoundSpeed_Total2 - 0.5*Gamma_Minus_One*Velocity2;\n            \n            /*--- Compute new velocity vector at the inlet ---*/\n            \n            for (iDim = 0; iDim < nDim; iDim++)\n              Velocity[iDim] = Vel_Mag*Flow_Dir[iDim];\n            \n            /*--- Static temperature from the speed of sound relation ---*/\n            \n            Temperature = SoundSpeed2/(Gamma*Gas_Constant);\n            \n            /*--- Static pressure using isentropic relation at a point ---*/\n            \n            Pressure = P_Total*pow((Temperature/T_Total), Gamma/Gamma_Minus_One);\n            \n            /*--- Density at the inlet from the gas law ---*/\n            \n            Density = Pressure/(Gas_Constant*Temperature);\n            \n            /*--- Using pressure, density, & velocity, compute the energy ---*/\n            \n            Energy = Pressure/(Density*Gamma_Minus_One) + 0.5*Velocity2;\n            if (tkeNeeded) Energy += GetTke_Inf();\n            \n            /*--- Primitive variables, using the derived quantities ---*/\n            \n            V_inlet[0] = Temperature;\n            for (iDim = 0; iDim < nDim; iDim++)\n              V_inlet[iDim+1] = Velocity[iDim];\n            V_inlet[nDim+1] = Pressure;\n            V_inlet[nDim+2] = Density;\n            V_inlet[nDim+3] = Energy + Pressure/Density;\n            \n            break;\n            \n            /*--- Mass flow has been specified at the inlet. ---*/\n            \n          case MASS_FLOW:\n            \n            /*--- Retrieve the specified mass flow for the inlet. ---*/\n            \n            Density  = config->GetInlet_Ttotal(Marker_Tag);\n            Vel_Mag  = config->GetInlet_Ptotal(Marker_Tag);\n            Flow_Dir = config->GetInlet_FlowDir(Marker_Tag);\n            \n            /*--- Non-dim. the inputs if necessary. ---*/\n            \n            Density /= config->GetDensity_Ref();\n            Vel_Mag /= config->GetVelocity_Ref();\n            \n            /*--- Get primitives from current inlet state. ---*/\n            \n            for (iDim = 0; iDim < nDim; iDim++)\n              Velocity[iDim] = node[iPoint]->GetVelocity(iDim);\n            Pressure    = node[iPoint]->GetPressure();\n            SoundSpeed2 = Gamma*Pressure/V_domain[nDim+2];\n            \n            /*--- Compute the acoustic Riemann invariant that is extrapolated\n             from the domain interior. ---*/\n            \n            Riemann = Two_Gamma_M1*sqrt(SoundSpeed2);\n            for (iDim = 0; iDim < nDim; iDim++)\n              Riemann += Velocity[iDim]*UnitNormal[iDim];\n            \n            /*--- Speed of sound squared for fictitious inlet state ---*/\n            \n            SoundSpeed2 = Riemann;\n            for (iDim = 0; iDim < nDim; iDim++)\n              SoundSpeed2 -= Vel_Mag*Flow_Dir[iDim]*UnitNormal[iDim];\n            \n            SoundSpeed2 = max(0.0,0.5*Gamma_Minus_One*SoundSpeed2);\n            SoundSpeed2 = SoundSpeed2*SoundSpeed2;\n            \n            /*--- Pressure for the fictitious inlet state ---*/\n            \n            Pressure = SoundSpeed2*Density/Gamma;\n            \n            /*--- Energy for the fictitious inlet state ---*/\n            \n            Energy = Pressure/(Density*Gamma_Minus_One) + 0.5*Vel_Mag*Vel_Mag;\n            if (tkeNeeded) Energy += GetTke_Inf();\n            \n            /*--- Primitive variables, using the derived quantities ---*/\n            \n            V_inlet[0] = Pressure / ( Gas_Constant * Density);\n            for (iDim = 0; iDim < nDim; iDim++)\n              V_inlet[iDim+1] = Vel_Mag*Flow_Dir[iDim];\n            V_inlet[nDim+1] = Pressure;\n            V_inlet[nDim+2] = Density;\n            V_inlet[nDim+3] = Energy + Pressure/Density;\n            \n            break;\n        }\n      }\n      if (incompressible) {\n        \n        /*--- Retrieve the specified velocity for the inlet. ---*/\n        \n        Vel_Mag  = config->GetInlet_Ptotal(Marker_Tag)/config->GetVelocity_Ref();\n        Flow_Dir = config->GetInlet_FlowDir(Marker_Tag);\n        \n        /*--- Store the velocity in the primitive variable vector ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          V_inlet[iDim+1] = Vel_Mag*Flow_Dir[iDim];\n        \n        /*--- Neumann condition for pressure ---*/\n        \n        V_inlet[0] = node[iPoint]->GetPressureInc();\n        \n        /*--- Constant value of density ---*/\n        \n        V_inlet[nDim+1] = GetDensity_Inf();\n        \n        /*--- Beta coefficient from the config file ---*/\n        \n        V_inlet[nDim+2] = config->GetArtComp_Factor();\n        \n      }\n      if (freesurface) {\n        \n        /*--- Neumann condition for pressure, density, level set, and distance ---*/\n        \n        V_inlet[0] = node[iPoint]->GetPressureInc();\n        V_inlet[nDim+1] = node[iPoint]->GetDensityInc();\n        V_inlet[nDim+5] = node[iPoint]->GetLevelSet();\n        V_inlet[nDim+6] = node[iPoint]->GetDistance();\n        \n        /*--- The velocity is computed from the infinity values ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          V_inlet[iDim+1] = GetVelocity_Inf(iDim);\n        }\n        \n        /*--- The y/z velocity is interpolated due to the\n         free surface effect on the pressure ---*/\n        \n        V_inlet[nDim] = node[iPoint]->GetPrimitive(nDim);\n        \n        /*--- Neumann condition for artifical compresibility factor ---*/\n        \n        V_inlet[nDim+2] = config->GetArtComp_Factor();\n        \n      }\n      \n      /*--- Set various quantities in the solver class ---*/\n      \n      conv_numerics->SetPrimitive(V_domain, V_inlet);\n      \n      if (grid_movement)\n        conv_numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(), geometry->node[iPoint]->GetGridVel());\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      \n      /*--- Update residual value ---*/\n      \n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Roe Turkel preconditioning, set the value of beta ---*/\n      \n      if (config->GetKind_Upwind() == TURKEL)\n        node[iPoint]->SetPreconditioner_Beta(conv_numerics->GetPrecond_Beta());\n      \n      /*--- Viscous contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        if (compressible) {\n          V_inlet[nDim+5] = node[iPoint]->GetLaminarViscosity();\n          V_inlet[nDim+6] = node[iPoint]->GetEddyViscosity();\n        }\n        if (incompressible || freesurface) {\n          V_inlet[nDim+3] = node[iPoint]->GetLaminarViscosityInc();\n          V_inlet[nDim+4] = node[iPoint]->GetEddyViscosityInc();\n        }\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_inlet);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  \n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Outlet(CGeometry *geometry, CSolver **solver_container,\n                             CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  unsigned short iVar, iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double LevelSet, Density_Outlet = 0.0, Pressure, P_Exit, Velocity[3],\n  Velocity2, Entropy, Density, Energy, Riemann, Vn, SoundSpeed, Mach_Exit, Vn_Exit,\n  Area, UnitNormal[3], Height, yCoordRef, yCoord;\n  su2double *V_outlet, *V_domain;\n  \n  bool implicit           = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  su2double Gas_Constant     = config->GetGas_ConstantND();\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement      = config->GetGrid_Movement();\n  su2double FreeSurface_Zero = config->GetFreeSurface_Zero();\n  su2double epsilon          = config->GetFreeSurface_Thickness();\n  su2double RatioDensity     = config->GetRatioDensity();\n  string Marker_Tag       = config->GetMarker_All_TagBound(val_marker);\n  bool viscous              = config->GetViscous();\n  bool gravity = (config->GetGravityForce());\n  su2double PressFreeSurface = GetPressure_Inf();\n  su2double Froude           = config->GetFroude();\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    /*--- Allocate the value at the outlet ---*/\n    V_outlet = GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e., not a halo node) ---*/\n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      conv_numerics->SetNormal(Normal);\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Current solution at this boundary node ---*/\n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Build the fictitious intlet state based on characteristics ---*/\n      if (compressible) {\n        \n        /*--- Retrieve the specified back pressure for this outlet. ---*/\n        if (gravity) P_Exit = config->GetOutlet_Pressure(Marker_Tag) - geometry->node[iPoint]->GetCoord(nDim-1)*STANDART_GRAVITY;\n        else P_Exit = config->GetOutlet_Pressure(Marker_Tag);\n        \n        /*--- Non-dim. the inputs if necessary. ---*/\n        P_Exit = P_Exit/config->GetPressure_Ref();\n        \n        /*--- Check whether the flow is supersonic at the exit. The type\n         of boundary update depends on this. ---*/\n        Density = V_domain[nDim+2];\n        Velocity2 = 0.0; Vn = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++) {\n          Velocity[iDim] = V_domain[iDim+1];\n          Velocity2 += Velocity[iDim]*Velocity[iDim];\n          Vn += Velocity[iDim]*UnitNormal[iDim];\n        }\n        Pressure   = V_domain[nDim+1];\n        SoundSpeed = sqrt(Gamma*Pressure/Density);\n        Mach_Exit  = sqrt(Velocity2)/SoundSpeed;\n        \n        if (Mach_Exit >= 1.0) {\n          \n          /*--- Supersonic exit flow: there are no incoming characteristics,\n           so no boundary condition is necessary. Set outlet state to current\n           state so that upwinding handles the direction of propagation. ---*/\n          for (iVar = 0; iVar < nPrimVar; iVar++) V_outlet[iVar] = V_domain[iVar];\n          \n        } else {\n          \n          /*--- Subsonic exit flow: there is one incoming characteristic,\n           therefore one variable can be specified (back pressure) and is used\n           to update the conservative variables. Compute the entropy and the\n           acoustic Riemann variable. These invariants, as well as the\n           tangential velocity components, are extrapolated. Adapted from an\n           original implementation in the Stanford University multi-block\n           (SUmb) solver in the routine bcSubsonicOutflow.f90 by Edwin van\n           der Weide, last modified 09-10-2007. ---*/\n          \n          Entropy = Pressure*pow(1.0/Density, Gamma);\n          Riemann = Vn + 2.0*SoundSpeed/Gamma_Minus_One;\n          \n          /*--- Compute the new fictious state at the outlet ---*/\n          Density    = pow(P_Exit/Entropy,1.0/Gamma);\n          Pressure   = P_Exit;\n          SoundSpeed = sqrt(Gamma*P_Exit/Density);\n          Vn_Exit    = Riemann - 2.0*SoundSpeed/Gamma_Minus_One;\n          Velocity2  = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++) {\n            Velocity[iDim] = Velocity[iDim] + (Vn_Exit-Vn)*UnitNormal[iDim];\n            Velocity2 += Velocity[iDim]*Velocity[iDim];\n          }\n          Energy = P_Exit/(Density*Gamma_Minus_One) + 0.5*Velocity2;\n          if (tkeNeeded) Energy += GetTke_Inf();\n          \n          /*--- Conservative variables, using the derived quantities ---*/\n          V_outlet[0] = Pressure / ( Gas_Constant * Density);\n          for (iDim = 0; iDim < nDim; iDim++)\n            V_outlet[iDim+1] = Velocity[iDim];\n          V_outlet[nDim+1] = Pressure;\n          V_outlet[nDim+2] = Density;\n          V_outlet[nDim+3] = Energy + Pressure/Density;\n          \n        }\n      }\n      if (incompressible) {\n        \n        /*--- The pressure is computed from the infinity values ---*/\n        if (gravity) {\n          yCoordRef = 0.0;\n          yCoord = geometry->node[iPoint]->GetCoord(nDim-1);\n          V_outlet[0] = GetPressure_Inf() + GetDensity_Inf()*((yCoordRef-yCoord)/(config->GetFroude()*config->GetFroude()));\n        }\n        else {\n          V_outlet[0] = GetPressure_Inf();\n        }\n        \n        /*--- Neumann condition for the velocity ---*/\n        for (iDim = 0; iDim < nDim; iDim++) {\n          V_outlet[iDim+1] = node[Point_Normal]->GetPrimitive(iDim+1);\n        }\n        \n        /*--- Constant value of density ---*/\n        V_outlet[nDim+1] = GetDensity_Inf();\n        \n        /*--- Beta coefficient from the config file ---*/\n        V_outlet[nDim+2] = config->GetArtComp_Factor();\n        \n      }\n      if (freesurface) {\n        \n        /*--- Imposed pressure, density, level set and distance ---*/\n        Height = geometry->node[iPoint]->GetCoord(nDim-1);\n        LevelSet = Height - FreeSurface_Zero;\n        if (LevelSet < -epsilon) Density_Outlet = config->GetDensity_FreeStreamND();\n        if (LevelSet > epsilon) Density_Outlet = RatioDensity*config->GetDensity_FreeStreamND();\n        V_outlet[0] = PressFreeSurface + Density_Outlet*((FreeSurface_Zero-Height)/(Froude*Froude));\n        V_outlet[nDim+1] = Density_Outlet;\n        V_outlet[nDim+5] = LevelSet;\n        V_outlet[nDim+6] = LevelSet;\n        \n        /*--- Neumann condition in the interface for the pressure, density and level set and distance ---*/\n        if (fabs(LevelSet) <= epsilon) {\n          V_outlet[0] = node[Point_Normal]->GetPressureInc();\n          V_outlet[nDim+1] = node[Point_Normal]->GetDensityInc();\n          V_outlet[nDim+5] = node[Point_Normal]->GetLevelSet();\n          V_outlet[nDim+6] = node[Point_Normal]->GetDistance();\n        }\n        \n        /*--- Neumann condition for the velocity ---*/\n        for (iDim = 0; iDim < nDim; iDim++) {\n          V_outlet[iDim+1] = node[Point_Normal]->GetPrimitive(iDim+1);\n        }\n        \n        /*--- Neumann condition for artifical compresibility factor ---*/\n        V_outlet[nDim+2] = config->GetArtComp_Factor();\n        \n      }\n      \n      /*--- Set various quantities in the solver class ---*/\n      conv_numerics->SetPrimitive(V_domain, V_outlet);\n      \n      if (grid_movement)\n        conv_numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(), geometry->node[iPoint]->GetGridVel());\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      \n      /*--- Update residual value ---*/\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      if (implicit) {\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      }\n      \n      /*--- Roe Turkel preconditioning, set the value of beta ---*/\n      if (config->GetKind_Upwind() == TURKEL)\n        node[iPoint]->SetPreconditioner_Beta(conv_numerics->GetPrecond_Beta());\n      \n      /*--- Viscous contribution ---*/\n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        if (compressible) {\n          V_outlet[nDim+5] = node[iPoint]->GetLaminarViscosity();\n          V_outlet[nDim+6] = node[iPoint]->GetEddyViscosity();\n        }\n        if (incompressible || freesurface) {\n          V_outlet[nDim+3] = node[iPoint]->GetLaminarViscosityInc();\n          V_outlet[nDim+4] = node[iPoint]->GetEddyViscosityInc();\n        }\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        visc_numerics->SetPrimitive(V_domain, V_outlet);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Supersonic_Inlet(CGeometry *geometry, CSolver **solver_container,\n                                       CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double *V_inlet, *V_domain;\n  \n  su2double Density, Pressure, Temperature, Energy, *Velocity, Velocity2;\n  su2double Gas_Constant = config->GetGas_ConstantND();\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool grid_movement  = config->GetGrid_Movement();\n  bool viscous              = config->GetViscous();\n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Supersonic inlet flow: there are no outgoing characteristics,\n   so all flow variables can be imposed at the inlet.\n   First, retrieve the specified values for the primitive variables. ---*/\n  \n  Temperature = config->GetInlet_Temperature(Marker_Tag);\n  Pressure    = config->GetInlet_Pressure(Marker_Tag);\n  Velocity    = config->GetInlet_Velocity(Marker_Tag);\n  \n  /*--- Density at the inlet from the gas law ---*/\n  \n  Density = Pressure/(Gas_Constant*Temperature);\n  \n  /*--- Non-dim. the inputs if necessary. ---*/\n  \n  Temperature = Temperature/config->GetTemperature_Ref();\n  Pressure    = Pressure/config->GetPressure_Ref();\n  Density     = Density/config->GetDensity_Ref();\n  for (iDim = 0; iDim < nDim; iDim++)\n    Velocity[iDim] = Velocity[iDim]/config->GetVelocity_Ref();\n  \n  /*--- Compute the energy from the specified state ---*/\n  \n  Velocity2 = 0.0;\n  for (iDim = 0; iDim < nDim; iDim++)\n    Velocity2 += Velocity[iDim]*Velocity[iDim];\n  Energy = Pressure/(Density*Gamma_Minus_One)+0.5*Velocity2;\n  if (tkeNeeded) Energy += GetTke_Inf();\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    /*--- Allocate the value at the outlet ---*/\n    \n    V_inlet = GetCharacPrimVar(val_marker, iVertex);\n    \n    /*--- Primitive variables, using the derived quantities ---*/\n    \n    V_inlet[0] = Temperature;\n    for (iDim = 0; iDim < nDim; iDim++)\n      V_inlet[iDim+1] = Velocity[iDim];\n    V_inlet[nDim+1] = Pressure;\n    V_inlet[nDim+2] = Density;\n    V_inlet[nDim+3] = Energy + Pressure/Density;\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Current solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      \n      /*--- Set various quantities in the solver class ---*/\n      \n      conv_numerics->SetNormal(Normal);\n      conv_numerics->SetPrimitive(V_domain, V_inlet);\n      \n      if (grid_movement)\n        conv_numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(),\n                                  geometry->node[iPoint]->GetGridVel());\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Viscous contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        V_inlet[nDim+5] = node[iPoint]->GetLaminarViscosity();\n        V_inlet[nDim+6] = node[iPoint]->GetEddyViscosity();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_inlet);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  \n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Supersonic_Outlet(CGeometry *geometry, CSolver **solver_container,\n                                        CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double *V_outlet, *V_domain;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool grid_movement  = config->GetGrid_Movement();\n  bool viscous              = config->GetViscous();\n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  \n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Supersonic outlet flow: there are no ingoing characteristics,\n   so all flow variables can should be interpolated from the domain. ---*/\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Current solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Allocate the value at the outlet ---*/\n      \n      V_outlet = GetCharacPrimVar(val_marker, iVertex);\n      \n      /*--- Primitive variables, using the derived quantities ---*/\n      \n      V_outlet[0] = V_domain[0];\n      for (iDim = 0; iDim < nDim; iDim++)\n        V_outlet[iDim+1] = V_domain[iDim+1];\n      V_outlet[nDim+1] = V_domain[nDim+1];\n      V_outlet[nDim+2] = V_domain[nDim+2];\n      V_outlet[nDim+3] = V_domain[nDim+3];\n      \n      /*--- Current solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      \n      /*--- Set various quantities in the solver class ---*/\n      \n      conv_numerics->SetNormal(Normal);\n      conv_numerics->SetPrimitive(V_domain, V_outlet);\n      \n      if (grid_movement)\n        conv_numerics->SetGridVel(geometry->node[iPoint]->GetGridVel(),\n                                  geometry->node[iPoint]->GetGridVel());\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Viscous contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        V_outlet[nDim+5] = node[iPoint]->GetLaminarViscosity();\n        V_outlet[nDim+6] = node[iPoint]->GetEddyViscosity();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_outlet);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n      }\n      \n    }\n  }\n  \n  /*--- Free locally allocated memory ---*/\n  \n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Engine_Inflow(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double Pressure, Inflow_Pressure, Velocity[3], Velocity2, Entropy, Target_Inflow_Mach = 0.0, Density, Energy,\n  Riemann, Area, UnitNormal[3], Vn, SoundSpeed, Vn_Exit, Inflow_Pressure_inc, Inflow_Pressure_old, Inflow_Mach_old;\n  su2double *V_inflow, *V_domain;\n  \n  su2double DampingFactor = config->GetDamp_Engine_Inflow();\n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool viscous              = config->GetViscous();\n  su2double Gas_Constant = config->GetGas_ConstantND();\n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  su2double Baseline_Press = 0.75 * config->GetPressure_FreeStreamND();\n  \n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Retrieve the specified target fan face mach in the nacelle. ---*/\n  \n  Target_Inflow_Mach = config->GetInflow_Mach_Target(Marker_Tag);\n  \n  /*--- Retrieve the old fan face pressure and mach number in the nacelle (this has been computed in a preprocessing). ---*/\n  \n  Inflow_Pressure_old = config->GetInflow_Pressure(Marker_Tag);  // Note that has been computed by the code (non-dimensional).\n  Inflow_Mach_old = config->GetInflow_Mach(Marker_Tag);\n  \n  /*--- Compute the pressure increment (note that increasing pressure decreases flow speed) ---*/\n  \n  Inflow_Pressure_inc = - (1.0 - (Inflow_Mach_old/Target_Inflow_Mach)) * Baseline_Press;\n  \n  /*--- Estimate the new fan face pressure ---*/\n  \n  Inflow_Pressure = (1.0 - DampingFactor)*Inflow_Pressure_old + DampingFactor * (Inflow_Pressure_old + Inflow_Pressure_inc);\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    /*--- Allocate the value at the outlet ---*/\n    \n    V_inflow = GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Current solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Subsonic nacelle inflow: there is one incoming characteristic,\n       therefore one variable can be specified (back pressure) and is used\n       to update the conservative variables.\n       \n       Compute the entropy and the acoustic variable. These\n       riemann invariants, as well as the tangential velocity components,\n       are extrapolated. ---*/\n      \n      Density = V_domain[nDim+2];\n      Velocity2 = 0.0; Vn = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Velocity[iDim] = V_domain[iDim+1];\n        Velocity2 += Velocity[iDim]*Velocity[iDim];\n        Vn += Velocity[iDim]*UnitNormal[iDim];\n      }\n      Pressure   = V_domain[nDim+1];\n      SoundSpeed = sqrt(Gamma*Pressure/Density);\n      Entropy = Pressure*pow(1.0/Density, Gamma);\n      Riemann = Vn + 2.0*SoundSpeed/Gamma_Minus_One;\n      \n      /*--- Compute the new fictious state at the outlet ---*/\n      \n      Density    = pow(Inflow_Pressure/Entropy,1.0/Gamma);\n      Pressure   = Inflow_Pressure;\n      SoundSpeed = sqrt(Gamma*Inflow_Pressure/Density);\n      Vn_Exit    = Riemann - 2.0*SoundSpeed/Gamma_Minus_One;\n      Velocity2  = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Velocity[iDim] = Velocity[iDim] + (Vn_Exit-Vn)*UnitNormal[iDim];\n        Velocity2 += Velocity[iDim]*Velocity[iDim];\n      }\n      \n      Energy = Inflow_Pressure/(Density*Gamma_Minus_One) + 0.5*Velocity2;\n      if (tkeNeeded) Energy += GetTke_Inf();\n      \n      /*--- Conservative variables, using the derived quantities ---*/\n      \n      V_inflow[0] = Pressure / ( Gas_Constant * Density);\n      for (iDim = 0; iDim < nDim; iDim++)\n        V_inflow[iDim+1] = Velocity[iDim];\n      V_inflow[nDim+1] = Pressure;\n      V_inflow[nDim+2] = Density;\n      V_inflow[nDim+3] = Energy + Pressure/Density;\n      \n      /*--- Set various quantities in the solver class ---*/\n      \n      conv_numerics->SetNormal(Normal);\n      conv_numerics->SetPrimitive(V_domain, V_inflow);\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Viscous contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        V_inflow[nDim+5] = node[iPoint]->GetLaminarViscosity();\n        V_inflow[nDim+6] = node[iPoint]->GetEddyViscosity();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_inflow);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Engine_Exhaust(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double Exhaust_Pressure, Exhaust_Temperature, Velocity[3], Velocity2, H_Exhaust, Temperature, Riemann, Area, UnitNormal[3], Pressure, Density, Energy, Mach2, SoundSpeed2, SoundSpeed_Exhaust2, Vel_Mag, alpha, aa, bb, cc, dd, Flow_Dir[3];\n  su2double *V_exhaust, *V_domain;\n  su2double Gas_Constant = config->GetGas_ConstantND();\n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool viscous = config->GetViscous();\n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  //  su2double Target_Exhaust_Pressure, Exhaust_Pressure_old, Exhaust_Pressure_inc;\n  //  su2double DampingFactor = config->GetDamp_Engine_Exhaust();\n  //  su2double Baseline_Press = 0.75 * config->GetPressure_FreeStreamND();\n  \n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Retrieve the specified exhaust pressure in the engine (non-dimensional). ---*/\n  \n  //  Target_Exhaust_Pressure = config->GetExhaust_Pressure_Target(Marker_Tag) / config->GetPressure_Ref();\n  \n  /*--- Retrieve the old exhaust pressure in the engine exhaust (this has been computed in a preprocessing). ---*/\n  \n  //  Exhaust_Pressure_old = config->GetExhaust_Pressure(Marker_Tag);\n  \n  /*--- Compute the Pressure increment ---*/\n  \n  //  Exhaust_Pressure_inc = (1.0 - (Exhaust_Pressure_old/Target_Exhaust_Pressure)) * Baseline_Press;\n  \n  /*--- Estimate the new exhaust pressure ---*/\n  \n  //  Exhaust_Pressure = (1.0 - DampingFactor) * Exhaust_Pressure_old + DampingFactor * (Exhaust_Pressure_old + Exhaust_Pressure_inc);\n  \n  /*--- The temperature is given (no iteration is required) ---*/\n  \n  Exhaust_Temperature  = config->GetExhaust_Temperature_Target(Marker_Tag);\n  Exhaust_Temperature /= config->GetTemperature_Ref();\n  \n  /*--- The pressure is given (no iteration is required) ---*/\n  /*--- CHECK: the above iterative process is overwritten on the next line. ---*/\n  \n  Exhaust_Pressure  = config->GetExhaust_Pressure_Target(Marker_Tag);\n  Exhaust_Pressure /= config->GetPressure_Ref();\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    /*--- Allocate the value at the exhaust ---*/\n    \n    V_exhaust = GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Current solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Subsonic inflow: there is one outgoing characteristic (u-c),\n       therefore we can specify all but one state variable at the inlet.\n       The outgoing Riemann invariant provides the final piece of info. ---*/\n      \n      /*--- Store primitives and set some variables for clarity. ---*/\n      \n      Density = V_domain[nDim+2];\n      Velocity2 = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Velocity[iDim] = V_domain[iDim+1];\n        Velocity2 += Velocity[iDim]*Velocity[iDim];\n      }\n      Energy      = V_domain[nDim+3] - V_domain[nDim+1]/V_domain[nDim+2];\n      Pressure    = V_domain[nDim+1];\n      H_Exhaust   = (Gamma*Gas_Constant/Gamma_Minus_One)*Exhaust_Temperature;\n      SoundSpeed2 = Gamma*Pressure/Density;\n      \n      /*--- Compute the acoustic Riemann invariant that is extrapolated\n       from the domain interior. ---*/\n      \n      Riemann   = 2.0*sqrt(SoundSpeed2)/Gamma_Minus_One;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Riemann += Velocity[iDim]*UnitNormal[iDim];\n      \n      /*--- Total speed of sound ---*/\n      \n      SoundSpeed_Exhaust2 = Gamma_Minus_One*(H_Exhaust - (Energy + Pressure/Density)+0.5*Velocity2) + SoundSpeed2;\n      \n      /*--- The flow direction is defined by the surface normal ---*/\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        Flow_Dir[iDim] = -UnitNormal[iDim];\n      \n      /*--- Dot product of normal and flow direction. This should\n       be negative due to outward facing boundary normal convention. ---*/\n      \n      alpha = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        alpha += UnitNormal[iDim]*Flow_Dir[iDim];\n      \n      /*--- Coefficients in the quadratic equation for the velocity ---*/\n      \n      aa =  1.0 + 0.5*Gamma_Minus_One*alpha*alpha;\n      bb = -1.0*Gamma_Minus_One*alpha*Riemann;\n      cc =  0.5*Gamma_Minus_One*Riemann*Riemann - 2.0*SoundSpeed_Exhaust2/Gamma_Minus_One;\n      \n      /*--- Solve quadratic equation for velocity magnitude. Value must\n       be positive, so the choice of root is clear. ---*/\n      \n      dd      = bb*bb - 4.0*aa*cc;\n      dd      = sqrt(max(0.0, dd));\n      Vel_Mag = (-bb + dd)/(2.0*aa);\n      \n      if (Vel_Mag >= 0.0) {\n        \n        Velocity2 = Vel_Mag*Vel_Mag;\n        \n        /*--- Compute speed of sound from total speed of sound eqn. ---*/\n        \n        SoundSpeed2 = SoundSpeed_Exhaust2 - 0.5*Gamma_Minus_One*Velocity2;\n        Mach2       = Velocity2/SoundSpeed2;\n        Velocity2   = Mach2*SoundSpeed2;\n        Vel_Mag     = sqrt(Velocity2);\n        SoundSpeed2 = SoundSpeed_Exhaust2 - 0.5*Gamma_Minus_One*Velocity2;\n        \n        /*--- Compute new velocity vector at the inlet ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          Velocity[iDim] = Vel_Mag*Flow_Dir[iDim];\n        \n        /*--- Static temperature from the speed of sound relation ---*/\n        \n        Temperature = SoundSpeed2/(Gamma*Gas_Constant);\n        \n        /*--- Static pressure using isentropic relation at a point ---*/\n        \n        Pressure = Exhaust_Pressure*pow((Temperature/Exhaust_Temperature), Gamma/Gamma_Minus_One);\n        \n        /*--- Density at the exhaust from the gas law ---*/\n        \n        Density = Pressure/(Gas_Constant*Temperature);\n        \n        /*--- Using pressure, density, & velocity, compute the energy ---*/\n        \n        Energy = Pressure/(Density*Gamma_Minus_One) + 0.5*Velocity2;\n        if (tkeNeeded) Energy += GetTke_Inf();\n        \n        /*--- Primitive variables, using the derived quantities ---*/\n        \n        V_exhaust[0] = Temperature;\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_exhaust[iDim+1] = Velocity[iDim];\n        V_exhaust[nDim+1] = Pressure;\n        V_exhaust[nDim+2] = Density;\n        V_exhaust[nDim+3] = Energy + Pressure/Density;\n        \n      }\n      \n      /*--- The flow goes in the wrong direction ---*/\n      \n      else {\n        \n        V_exhaust[0] = V_domain[0];\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_exhaust[iDim+1] = V_domain[iDim+1];\n        V_exhaust[nDim+1] = V_domain[nDim+1];\n        V_exhaust[nDim+2] = V_domain[nDim+2];\n        V_exhaust[nDim+3] = V_domain[nDim+3];\n        \n      }\n      \n      /*--- Set various quantities in the solver class ---*/\n      \n      conv_numerics->SetNormal(Normal);\n      conv_numerics->SetPrimitive(V_domain, V_exhaust);\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Viscous contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        V_exhaust[nDim+5] = node[iPoint]->GetLaminarViscosity();\n        V_exhaust[nDim+6] = node[iPoint]->GetEddyViscosity();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_exhaust);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Engine_Bleed(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iDim;\n  unsigned long iVertex, iPoint, Point_Normal;\n  su2double Bleed_Pressure, Target_Bleed_MassFlow, Bleed_Pressure_old, Bleed_MassFlow_old, Bleed_Pressure_inc, Bleed_Temperature, Velocity[3], Velocity2, H_Bleed, Temperature, Riemann, Area, UnitNormal[3], Pressure, Density, Energy, Mach2, SoundSpeed2, SoundSpeed_Bleed2, Vel_Mag, alpha, aa, bb, cc, dd, Flow_Dir[3];\n  su2double *V_bleed, *V_domain;\n  su2double Gas_Constant = config->GetGas_ConstantND();\n  \n  su2double DampingFactor = config->GetDamp_Engine_Bleed();\n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool viscous = config->GetViscous();\n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  bool tkeNeeded = (((config->GetKind_Solver() == RANS )|| (config->GetKind_Solver() == DISC_ADJ_RANS)) &&\n                    (config->GetKind_Turb_Model() == SST));\n  su2double Baseline_Press = 0.25 * config->GetPressure_FreeStreamND();\n  \n  su2double *Normal = new su2double[nDim];\n  \n  /*--- Retrieve the specified target bleed mass flow in the engine (non-dimensional). ---*/\n  \n  Target_Bleed_MassFlow = config->GetBleed_MassFlow_Target(Marker_Tag) / (config->GetDensity_Ref() * config->GetVelocity_Ref());\n  \n  /*--- Retrieve the old Bleed pressure and mass flow rate number in the engine bleed (this has been computed in a preprocessing). ---*/\n  \n  Bleed_Pressure_old = config->GetBleed_Pressure(Marker_Tag);\n  Bleed_MassFlow_old = config->GetBleed_MassFlow(Marker_Tag);\n  \n  /*--- Compute the Pressure increment (note that increasing pressure also increases mass flow rate) ---*/\n  \n  Bleed_Pressure_inc = (1.0 - (Bleed_MassFlow_old/Target_Bleed_MassFlow)) * Baseline_Press;\n  \n  /*--- Estimate the new bleed pressure ---*/\n  \n  Bleed_Pressure = (1.0 - DampingFactor)*Bleed_Pressure_old + DampingFactor * (Bleed_Pressure_old + Bleed_Pressure_inc);\n  \n  /*--- The temperature is given (no iteration is required) ---*/\n  \n  Bleed_Temperature  = config->GetBleed_Temperature_Target(Marker_Tag);\n  Bleed_Temperature /= config->GetTemperature_Ref();\n  \n  /*--- Loop over all the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    /*--- Allocate the value at the exhaust ---*/\n    \n    V_bleed = GetCharacPrimVar(val_marker, iVertex);\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Index of the closest interior node ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Normal vector for this vertex (negate for outward convention) ---*/\n      \n      geometry->vertex[val_marker][iVertex]->GetNormal(Normal);\n      for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = Normal[iDim]/Area;\n      \n      /*--- Current solution at this boundary node ---*/\n      \n      V_domain = node[iPoint]->GetPrimitive();\n      \n      /*--- Subsonic inflow: there is one outgoing characteristic (u-c),\n       therefore we can specify all but one state variable at the inlet.\n       The outgoing Riemann invariant provides the final piece of info. ---*/\n      \n      /*--- Store primitives and set some variables for clarity. ---*/\n      \n      Density = V_domain[nDim+2];\n      Velocity2 = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        Velocity[iDim] = V_domain[iDim+1];\n        Velocity2 += Velocity[iDim]*Velocity[iDim];\n      }\n      Energy = V_domain[nDim+3] - V_domain[nDim+1]/V_domain[nDim+2];\n      Pressure = V_domain[nDim+1];\n      H_Bleed     = (Gamma*Gas_Constant/Gamma_Minus_One)*Bleed_Temperature;\n      SoundSpeed2 = Gamma*Pressure/Density;\n      \n      /*--- Compute the acoustic Riemann invariant that is extrapolated\n       from the domain interior. ---*/\n      \n      Riemann   = 2.0*sqrt(SoundSpeed2)/Gamma_Minus_One;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Riemann += Velocity[iDim]*UnitNormal[iDim];\n      \n      /*--- Total speed of sound ---*/\n      \n      SoundSpeed_Bleed2 = Gamma_Minus_One*(H_Bleed - (Energy + Pressure/Density)+0.5*Velocity2) + SoundSpeed2;\n      \n      /*--- The flow direction is defined by the surface normal ---*/\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        Flow_Dir[iDim] = -UnitNormal[iDim];\n      \n      /*--- Dot product of normal and flow direction. This should\n       be negative due to outward facing boundary normal convention. ---*/\n      \n      alpha = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        alpha += UnitNormal[iDim]*Flow_Dir[iDim];\n      \n      /*--- Coefficients in the quadratic equation for the velocity ---*/\n      \n      aa =  1.0 + 0.5*Gamma_Minus_One*alpha*alpha;\n      bb = -1.0*Gamma_Minus_One*alpha*Riemann;\n      cc =  0.5*Gamma_Minus_One*Riemann*Riemann - 2.0*SoundSpeed_Bleed2/Gamma_Minus_One;\n      \n      /*--- Solve quadratic equation for velocity magnitude. Value must\n       be positive, so the choice of root is clear. ---*/\n      \n      dd = bb*bb - 4.0*aa*cc;\n      dd = sqrt(max(0.0, dd));\n      Vel_Mag   = (-bb + dd)/(2.0*aa);\n      \n      if (Vel_Mag >= 0.0) {\n        \n        Velocity2 = Vel_Mag*Vel_Mag;\n        \n        /*--- Compute speed of sound from total speed of sound eqn. ---*/\n        \n        SoundSpeed2 = SoundSpeed_Bleed2 - 0.5*Gamma_Minus_One*Velocity2;\n        \n        /*--- Mach squared (cut between 0-1), use to adapt velocity ---*/\n        \n        Mach2 = Velocity2/SoundSpeed2;\n        Mach2 = min(1.0, Mach2);\n        Velocity2   = Mach2*SoundSpeed2;\n        Vel_Mag     = sqrt(Velocity2);\n        SoundSpeed2 = SoundSpeed_Bleed2 - 0.5*Gamma_Minus_One*Velocity2;\n        \n        /*--- Compute new velocity vector at the inlet ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          Velocity[iDim] = Vel_Mag*Flow_Dir[iDim];\n        \n        /*--- Static temperature from the speed of sound relation ---*/\n        \n        Temperature = SoundSpeed2/(Gamma*Gas_Constant);\n        \n        /*--- Static pressure using isentropic relation at a point ---*/\n        \n        Pressure = Bleed_Pressure*pow((Temperature/Bleed_Temperature), Gamma/Gamma_Minus_One);\n        \n        /*--- Density at the inlet from the gas law ---*/\n        \n        Density = Pressure/(Gas_Constant*Temperature);\n        \n        /*--- Using pressure, density, & velocity, compute the energy ---*/\n        \n        Energy = Pressure/(Density*Gamma_Minus_One) + 0.5*Velocity2;\n        if (tkeNeeded) Energy += GetTke_Inf();\n        \n        /*--- Primitive variables, using the derived quantities ---*/\n        \n        V_bleed[0] = Temperature;\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_bleed[iDim+1] = Velocity[iDim];\n        V_bleed[nDim+1] = Pressure;\n        V_bleed[nDim+2] = Density;\n        V_bleed[nDim+3] = Energy + Pressure/Density;\n        \n      }\n      \n      /*--- The flow goes in the wrong direction ---*/\n      \n      else {\n        \n        V_bleed[0] = V_domain[0];\n        for (iDim = 0; iDim < nDim; iDim++)\n          V_bleed[iDim+1] = V_domain[iDim+1];\n        V_bleed[nDim+1] = V_domain[nDim+1];\n        V_bleed[nDim+2] = V_domain[nDim+2];\n        V_bleed[nDim+3] = V_domain[nDim+3];\n        \n      }\n      \n      /*--- Set various quantities in the solver class ---*/\n      \n      conv_numerics->SetNormal(Normal);\n      conv_numerics->SetPrimitive(V_domain, V_bleed);\n      \n      /*--- Compute the residual using an upwind scheme ---*/\n      \n      conv_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Jacobian contribution for implicit integration ---*/\n      \n      if (implicit)\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      \n      /*--- Viscous contribution ---*/\n      \n      if (viscous) {\n        \n        /*--- Set laminar and eddy viscosity at the infinity ---*/\n        \n        V_bleed[nDim+5] = node[iPoint]->GetLaminarViscosity();\n        V_bleed[nDim+6] = node[iPoint]->GetEddyViscosity();\n        \n        /*--- Set the normal vector and the coordinates ---*/\n        \n        visc_numerics->SetNormal(Normal);\n        visc_numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[Point_Normal]->GetCoord());\n        \n        /*--- Primitive variables, and gradient ---*/\n        \n        visc_numerics->SetPrimitive(V_domain, V_bleed);\n        visc_numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[iPoint]->GetGradient_Primitive());\n        \n        /*--- Turbulent kinetic energy ---*/\n        \n        if (config->GetKind_Turb_Model() == SST)\n          visc_numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0), solver_container[TURB_SOL]->node[iPoint]->GetSolution(0));\n        \n        /*--- Compute and update residual ---*/\n        \n        visc_numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n        LinSysRes.SubtractBlock(iPoint, Residual);\n        \n        /*--- Jacobian contribution for implicit integration ---*/\n        \n        if (implicit)\n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n    }\n  }\n  \n  delete [] Normal;\n  \n}\n\nvoid CEulerSolver::BC_Sym_Plane(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics,\n                                CConfig *config, unsigned short val_marker) {\n  \n  /*--- Call the Euler residual ---*/\n  \n  BC_Euler_Wall(geometry, solver_container, conv_numerics, config, val_marker);\n  \n}\n\nvoid CEulerSolver::BC_Interface_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                         CConfig *config) {\n  \n  unsigned long iVertex, iPoint, jPoint;\n  unsigned short iDim, iVar, iMarker;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  \n  su2double *Normal = new su2double[nDim];\n  su2double *PrimVar_i = new su2double[nPrimVar];\n  su2double *PrimVar_j = new su2double[nPrimVar];\n  \n#ifndef HAVE_MPI\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if (config->GetMarker_All_KindBC(iMarker) == INTERFACE_BOUNDARY) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          /*--- Find the associate pair to the original node ---*/\n          \n          jPoint = geometry->vertex[iMarker][iVertex]->GetDonorPoint();\n          \n          if (iPoint != jPoint) {\n            \n            /*--- Store the solution for both points ---*/\n            \n            for (iVar = 0; iVar < nPrimVar; iVar++) {\n              PrimVar_i[iVar] = node[iPoint]->GetPrimitive(iVar);\n              PrimVar_j[iVar] = node[jPoint]->GetPrimitive(iVar);\n            }\n            \n            /*--- Set primitive variables ---*/\n            \n            numerics->SetPrimitive(PrimVar_i, PrimVar_j);\n            \n            /*--- Set the normal vector ---*/\n            \n            geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n            for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n            numerics->SetNormal(Normal);\n            \n            /*--- Compute the convective residual using an upwind scheme ---*/\n            \n            numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n            \n            /*--- Add Residuals and Jacobians ---*/\n            \n            LinSysRes.AddBlock(iPoint, Residual);\n            if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n            \n          }\n          \n        }\n      }\n    }\n  }\n  \n#else\n  \n  int rank, jProcessor;\n  MPI_Status status;\n  //MPI_Status send_stat[1], recv_stat[1];\n  //MPI_Request send_req[1], recv_req[1];\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  \n  bool compute;\n  su2double *Buffer_Send_V = new su2double [nPrimVar];\n  su2double *Buffer_Receive_V = new su2double [nPrimVar];\n  \n  /*--- Do the send process, by the moment we are sending each\n   node individually, this must be changed ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if (config->GetMarker_All_KindBC(iMarker) == INTERFACE_BOUNDARY) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          /*--- Find the associate pair to the original node ---*/\n          \n          jPoint = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[0];\n          jProcessor = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[1];\n          \n          if ((iPoint == jPoint) && (jProcessor == rank)) compute = false;\n          else compute = true;\n          \n          /*--- We only send the information that belong to other boundary, -1 processor\n           means that the boundary condition is not applied ---*/\n          \n          if (compute) {\n            \n            if (jProcessor != rank) {\n              \n              /*--- Copy the primitive variable ---*/\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                Buffer_Send_V[iVar] = node[iPoint]->GetPrimitive(iVar);\n              \n              SU2_MPI::Bsend(Buffer_Send_V, nPrimVar, MPI_DOUBLE, jProcessor, iPoint, MPI_COMM_WORLD);\n              \n              //          SU2_MPI::Isend(Buffer_Send_V, nPrimVar, MPI_DOUBLE, jProcessor, iPoint, MPI_COMM_WORLD, &send_req[0]);\n              \n              //          /*--- Wait for this set of non-blocking comm. to complete ---*/\n              //\n              //          SU2_MPI::Waitall(1, send_req, send_stat);\n              \n            }\n            \n          }\n          \n        }\n      }\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          /*--- Find the associate pair to the original node ---*/\n          \n          jPoint = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[0];\n          jProcessor = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[1];\n          \n          if ((iPoint == jPoint) && (jProcessor == rank)) compute = false;\n          else compute = true;\n          \n          if (compute) {\n            \n            /*--- We only receive the information that belong to other boundary ---*/\n            \n            if (jProcessor != rank) {\n              \n              SU2_MPI::Recv(Buffer_Receive_V, nPrimVar, MPI_DOUBLE, jProcessor, jPoint, MPI_COMM_WORLD, &status);\n              \n              //         SU2_MPI::Irecv(Buffer_Receive_V, nPrimVar, MPI_DOUBLE, jProcessor, jPoint, MPI_COMM_WORLD, &recv_req[0]);\n              \n              /*--- Wait for the this set of non-blocking recv's to complete ---*/\n              \n              //          SU2_MPI::Waitall(1, recv_req, recv_stat);\n              \n            }\n            else {\n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                Buffer_Receive_V[iVar] = node[jPoint]->GetPrimitive(iVar);\n            }\n            \n            /*--- Store the solution for both points ---*/\n            \n            for (iVar = 0; iVar < nPrimVar; iVar++) {\n              PrimVar_i[iVar] = node[iPoint]->GetPrimitive(iVar);\n              PrimVar_j[iVar] = Buffer_Receive_V[iVar];\n            }\n            \n            /*--- Set Conservative Variables ---*/\n            \n            numerics->SetPrimitive(PrimVar_i, PrimVar_j);\n            \n            /*--- Set Normal ---*/\n            \n            geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n            for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n            numerics->SetNormal(Normal);\n            \n            /*--- Compute the convective residual using an upwind scheme ---*/\n            \n            numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n            \n            /*--- Add Residuals and Jacobians ---*/\n            \n            LinSysRes.AddBlock(iPoint, Residual);\n            if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n            \n          }\n          \n        }\n      }\n    }\n  }\n  \n  MPI_Barrier(MPI_COMM_WORLD);\n  \n  delete[] Buffer_Send_V;\n  delete[] Buffer_Receive_V;\n  \n#endif\n  \n  /*--- Free locally allocated memory ---*/\n  \n  delete [] Normal;\n  delete [] PrimVar_i;\n  delete [] PrimVar_j;\n  \n}\n\nvoid CEulerSolver::BC_NearField_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                         CConfig *config) {\n  \n  unsigned long iVertex, iPoint, jPoint;\n  unsigned short iDim, iVar, iMarker;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  \n  su2double *Normal = new su2double[nDim];\n  su2double *PrimVar_i = new su2double[nPrimVar];\n  su2double *PrimVar_j = new su2double[nPrimVar];\n  \n#ifndef HAVE_MPI\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if (config->GetMarker_All_KindBC(iMarker) == NEARFIELD_BOUNDARY) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          /*--- Find the associate pair to the original node ---*/\n          \n          jPoint = geometry->vertex[iMarker][iVertex]->GetDonorPoint();\n          \n          if (iPoint != jPoint) {\n            \n            /*--- Store the solution for both points ---*/\n            \n            for (iVar = 0; iVar < nPrimVar; iVar++) {\n              PrimVar_i[iVar] = node[iPoint]->GetPrimitive(iVar);\n              PrimVar_j[iVar] = node[jPoint]->GetPrimitive(iVar);\n            }\n            \n            /*--- Set primitive variables ---*/\n            \n            numerics->SetPrimitive(PrimVar_i, PrimVar_j);\n            \n            /*--- Set the normal vector ---*/\n            \n            geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n            for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n            numerics->SetNormal(Normal);\n            \n            /*--- Compute the convective residual using an upwind scheme ---*/\n            \n            numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n            \n            /*--- Add Residuals and Jacobians ---*/\n            \n            LinSysRes.AddBlock(iPoint, Residual);\n            if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n            \n          }\n          \n        }\n      }\n    }\n  }\n  \n#else\n  \n  int rank, jProcessor;\n  MPI_Status status;\n  //MPI_Status send_stat[1], recv_stat[1];\n  //MPI_Request send_req[1], recv_req[1];\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  \n  bool compute;\n  su2double *Buffer_Send_V    = new su2double [nPrimVar];\n  su2double *Buffer_Receive_V = new su2double [nPrimVar];\n  \n  /*--- Do the send process, by the moment we are sending each\n   node individually, this must be changed ---*/\n  \n  for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n    \n    if (config->GetMarker_All_KindBC(iMarker) == NEARFIELD_BOUNDARY) {\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          /*--- Find the associate pair to the original node ---*/\n          \n          jPoint = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[0];\n          jProcessor = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[1];\n          \n          if ((iPoint == jPoint) && (jProcessor == rank)) compute = false;\n          else compute = true;\n          \n          /*--- We only send the information that belong to other boundary, -1 processor\n           means that the boundary condition is not applied ---*/\n          \n          if (compute) {\n            \n            if (jProcessor != rank) {\n              \n              /*--- Copy the primitive variable ---*/\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                Buffer_Send_V[iVar] = node[iPoint]->GetPrimitive(iVar);\n              \n              SU2_MPI::Bsend(Buffer_Send_V, nPrimVar, MPI_DOUBLE, jProcessor, iPoint, MPI_COMM_WORLD);\n              \n              //          SU2_MPI::Isend(Buffer_Send_V, nPrimVar, MPI_DOUBLE, jProcessor, iPoint, MPI_COMM_WORLD, &send_req[0]);\n              \n              //          /*--- Wait for this set of non-blocking comm. to complete ---*/\n              //\n              //          SU2_MPI::Waitall(1, send_req, send_stat);\n              \n            }\n            \n          }\n          \n        }\n      }\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        \n        if (geometry->node[iPoint]->GetDomain()) {\n          \n          /*--- Find the associate pair to the original node ---*/\n          \n          jPoint = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[0];\n          jProcessor = geometry->vertex[iMarker][iVertex]->GetPeriodicPointDomain()[1];\n          \n          if ((iPoint == jPoint) && (jProcessor == rank)) compute = false;\n          else compute = true;\n          \n          if (compute) {\n            \n            /*--- We only receive the information that belong to other boundary ---*/\n            \n            if (jProcessor != rank) {\n              \n              SU2_MPI::Recv(Buffer_Receive_V, nPrimVar, MPI_DOUBLE, jProcessor, jPoint, MPI_COMM_WORLD, &status);\n              \n              //         SU2_MPI::Irecv(Buffer_Receive_V, nPrimVar, MPI_DOUBLE, jProcessor, jPoint, MPI_COMM_WORLD, &recv_req[0]);\n              \n              /*--- Wait for the this set of non-blocking recv's to complete ---*/\n              \n              //          SU2_MPI::Waitall(1, recv_req, recv_stat);\n              \n            }\n            else {\n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                Buffer_Receive_V[iVar] = node[jPoint]->GetPrimitive(iVar);\n            }\n            \n            /*--- Store the solution for both points ---*/\n            \n            for (iVar = 0; iVar < nPrimVar; iVar++) {\n              PrimVar_i[iVar] = node[iPoint]->GetPrimitive(iVar);\n              PrimVar_j[iVar] = Buffer_Receive_V[iVar];\n            }\n            \n            /*--- Set Conservative Variables ---*/\n            \n            numerics->SetPrimitive(PrimVar_i, PrimVar_j);\n            \n            /*--- Set Normal ---*/\n            \n            geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n            for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n            numerics->SetNormal(Normal);\n            \n            /*--- Compute the convective residual using an upwind scheme ---*/\n            \n            numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n            \n            /*--- Add Residuals and Jacobians ---*/\n            \n            LinSysRes.AddBlock(iPoint, Residual);\n            if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n            \n          }\n          \n        }\n      }\n    }\n  }\n  \n  MPI_Barrier(MPI_COMM_WORLD);\n  \n  delete[] Buffer_Send_V;\n  delete[] Buffer_Receive_V;\n  \n#endif\n  \n  /*--- Free locally allocated memory ---*/\n  \n  delete [] Normal;\n  delete [] PrimVar_i;\n  delete [] PrimVar_j;\n  \n}\n\nvoid CEulerSolver::BC_ActDisk_Boundary(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                       CConfig *config) {\n  \n  unsigned long iVertex, iPoint, jPoint, Pin = 0, Pout = 0, jProcessor;\n  unsigned short iDim, iVar, iMarker;\n  int iProcessor;\n  su2double *Coord, radius, DeltaP_avg, DeltaP_tip, DeltaT_avg, DeltaT_tip,\n  Radial[3] = {0.0,0.0,0.0}, Tangent[3] = {0.0,0.0,0.0}, Normal[3] = {0.0,0.0,0.0},\n  UnitRadial[3] = {0.0,0.0,0.0}, UnitTangent[3] = {0.0,0.0,0.0}, UnitNormal[3] = {0.0,0.0,0.0};\n  su2double H_in_ghost, P_in_ghost, Vel_Swirl_out_ghost, T_in_ghost, Rho_in_ghost, sos_in_ghost, Area, Vel_in_ghost;\n  su2double H_out_ghost, P_out_ghost, T_out_ghost, Rho_out_ghost, sos_out_ghost, Vel_Normal_in, Rho_in, Vel_Normal_out_ghost, Vel_out_ghost;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  unsigned short nMarker_ActDisk_Inlet = config->GetnMarker_ActDisk_Inlet();\n  //  su2double DampingFactor = 0.75;\n  \n  if (nMarker_ActDisk_Inlet != 0) {\n    \n    su2double *PrimVar_out = new su2double[nPrimVar];\n    su2double *PrimVar_in = new su2double[nPrimVar];\n    su2double *MeanPrimVar = new su2double[nPrimVar];\n    su2double *PrimVar_out_ghost = new su2double[nPrimVar];\n    su2double *PrimVar_in_ghost = new su2double[nPrimVar];\n    su2double *ActDisk_Jump = new su2double[nPrimVar];\n    su2double *Buffer_Send_V = new su2double [nPrimVar];\n    su2double *Buffer_Receive_V = new su2double [nPrimVar];\n    \n#ifndef HAVE_MPI\n    iProcessor = MASTER_NODE;\n#else\n    MPI_Status status;\n    //MPI_Status send_stat[1], recv_stat[1];\n    //MPI_Request send_req[1], recv_req[1];\n    MPI_Comm_rank(MPI_COMM_WORLD, &iProcessor);\n#endif\n    \n    /*--- Identify the points that should be sended in a MPI implementation.\n     Do the send process, by the moment we are sending each node individually, this must be changed---*/\n    \n#ifdef HAVE_MPI\n    \n    for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n      \n      if ((config->GetMarker_All_KindBC(iMarker) == ACTDISK_INLET) ||\n          (config->GetMarker_All_KindBC(iMarker) == ACTDISK_OUTLET)) {\n        \n        for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n          \n          iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n          \n          if (geometry->node[iPoint]->GetDomain()) {\n            \n            /*--- Find the associate pair to the original node ---*/\n            \n            jPoint = geometry->vertex[iMarker][iVertex]->GetDonorPoint();\n            jProcessor = geometry->vertex[iMarker][iVertex]->GetDonorProcessor();\n            \n            /*--- We only send the information that belong to other boundary, using jPoint as the ID for the message  ---*/\n            \n            if ((int)jProcessor != iProcessor) {\n              \n              /*--- Copy the primitive variables ---*/\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                Buffer_Send_V[iVar] = node[iPoint]->GetPrimitive(iVar);\n              \n              SU2_MPI::Bsend(Buffer_Send_V, nPrimVar, MPI_DOUBLE, jProcessor, iPoint, MPI_COMM_WORLD);\n              \n              //              SU2_MPI::Isend(Buffer_Send_V, nPrimVar, MPI_DOUBLE, jProcessor, iPoint, MPI_COMM_WORLD, &send_req[0]);\n              //              SU2_MPI::Waitall(1, send_req, send_stat);\n              \n            }\n            \n          }\n        }\n      }\n    }\n    \n#endif\n    \n    /*--- Evaluate the fluxes, the donor solution has been sended using MPI ---*/\n    \n    for (iMarker = 0; iMarker < config->GetnMarker_All(); iMarker++) {\n      \n      if ((config->GetMarker_All_KindBC(iMarker) == ACTDISK_INLET) ||\n          (config->GetMarker_All_KindBC(iMarker) == ACTDISK_OUTLET)) {\n        \n        unsigned short boundary = config->GetMarker_All_KindBC(iMarker);\n        su2double *Origin = config->GetActDisk_Origin(config->GetMarker_All_TagBound(iMarker));\n        su2double R_root = config->GetActDisk_RootRadius(config->GetMarker_All_TagBound(iMarker));\n        su2double R_tip = config->GetActDisk_TipRadius(config->GetMarker_All_TagBound(iMarker));\n        su2double Target_Press_Jump = config->GetActDisk_PressJump(config->GetMarker_All_TagBound(iMarker))/ config->GetPressure_Ref();\n        su2double Target_Temp_Jump = config->GetActDisk_TempJump(config->GetMarker_All_TagBound(iMarker))/ config->GetTemperature_Ref();\n        su2double Omega = config->GetActDisk_Omega(config->GetMarker_All_TagBound(iMarker))*(PI_NUMBER/30.0);\n        unsigned short Distribution = config->GetActDisk_Distribution(config->GetMarker_All_TagBound(iMarker));\n        \n        for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n          \n          iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n          \n          if (geometry->node[iPoint]->GetDomain()) {\n            \n            /*--- Find the associate pair to the original node ---*/\n            \n            jPoint = geometry->vertex[iMarker][iVertex]->GetDonorPoint();\n            jProcessor = geometry->vertex[iMarker][iVertex]->GetDonorProcessor();\n            \n            /*--- Receive the information, using jPoint as the ID for the message ---*/\n            \n            if ((int)jProcessor != iProcessor) {\n#ifdef HAVE_MPI\n              \n              SU2_MPI::Recv(Buffer_Receive_V, nPrimVar, MPI_DOUBLE, jProcessor, jPoint, MPI_COMM_WORLD, &status);\n              \n              //              SU2_MPI::Irecv(Buffer_Receive_V, nPrimVar, MPI_DOUBLE, jProcessor, jPoint, MPI_COMM_WORLD, &recv_req[0]);\n              //              SU2_MPI::Waitall(1, send_req, send_stat);\n              \n#endif\n            }\n            else {\n              \n              /*--- The point is in the same processor... no MPI required ---*/\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                Buffer_Receive_V[iVar] = node[jPoint]->GetPrimitive(iVar);\n              \n            }\n            \n            /*--- Identify the inner and the outer point (based on the normal direction) ---*/\n            \n            if (boundary == ACTDISK_INLET) {\n              \n              Pin = iPoint;\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++) {\n                PrimVar_out[iVar] = Buffer_Receive_V[iVar];\n                PrimVar_in[iVar] = node[Pin]->GetPrimitive(iVar);\n              }\n              \n            }\n            if (boundary == ACTDISK_OUTLET) {\n              \n              Pout = iPoint;\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++) {\n                PrimVar_out[iVar] = node[Pout]->GetPrimitive(iVar);\n                PrimVar_in[iVar] = Buffer_Receive_V[iVar];\n              }\n              \n            }\n            \n            /*--- Set the jump in the actuator disk ---*/\n            \n            for (iVar = 0; iVar < nPrimVar; iVar++) {\n              ActDisk_Jump[iVar] = 0.0;\n            }\n            \n            /*--- Compute the distance to the center of the rotor ---*/\n            \n            Coord = geometry->node[iPoint]->GetCoord();\n            radius = 0.0;\n            for (iDim = 0; iDim < nDim; iDim++)\n              radius += (Coord[iDim]-Origin[iDim])*(Coord[iDim]-Origin[iDim]);\n            radius = sqrt(radius);\n            \n            /*--- Compute the pressure jump ---*/\n            \n            //            su2double Press_Jump = fabs(PrimVar_in[nDim+1]-PrimVar_in[nDim+1]);\n            //            su2double Press_inc = (1.0 - (Press_Jump/Target_Press_Jump)) * 0.01 * config->GetPressure_FreeStreamND();\n            //            DeltaP_avg = (1.0 - DampingFactor)*Press_Jump + DampingFactor * (Press_Jump + Press_inc);\n            \n            DeltaP_avg = Target_Press_Jump;\n            if (Distribution == 1) {\n              DeltaP_tip = (3.0/2.0)*DeltaP_avg*R_tip*(R_tip*R_tip-R_root*R_root)/(R_tip*R_tip*R_tip-R_root*R_root*R_root);\n              ActDisk_Jump[nDim+1] = DeltaP_tip*radius/R_tip;\n            }\n            else\n              ActDisk_Jump[nDim+1] = DeltaP_avg;\n            \n            /*--- Compute the temperature jump ---*/\n            \n            //            su2double Temp_Jump = fabs(PrimVar_in[0]-PrimVar_in[0]);\n            //            su2double Temp_inc = (1.0 - (Temp_Jump/Target_Temp_Jump)) * 0.01 * config->GetTemperature_FreeStreamND();\n            //            DeltaT_avg = (1.0 - DampingFactor)*Temp_Jump + DampingFactor * (Temp_Jump + Temp_inc);\n            \n            DeltaT_avg = Target_Temp_Jump;\n            if (Distribution == 1) {\n              DeltaT_tip = (3.0/2.0)*DeltaT_avg*R_tip*(R_tip*R_tip-R_root*R_root)/(R_tip*R_tip*R_tip-R_root*R_root*R_root);\n              ActDisk_Jump[0] = DeltaT_tip*radius/R_tip;\n            }\n            else\n              ActDisk_Jump[0] = DeltaT_avg;\n            \n            /*--- Inner point ---*/\n            \n            if (boundary == ACTDISK_INLET) {\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                PrimVar_in_ghost[iVar] = PrimVar_out[iVar] - ActDisk_Jump[iVar];\n              \n              /*--- Check that this is a meaningful state ---*/\n              \n              P_in_ghost = PrimVar_in_ghost[nDim+1];\n              T_in_ghost = PrimVar_in_ghost[0];\n              \n              FluidModel->SetTDState_PT(P_in_ghost, T_in_ghost);\n              Rho_in_ghost = FluidModel->GetDensity();\n              sos_in_ghost = FluidModel->GetSoundSpeed();\n              \n              /*--- Find unit normal to the actuator disk ---*/\n              \n              geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n              \n              Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n              for (iDim = 0; iDim < nDim; iDim++) { UnitNormal[iDim] = -Normal[iDim]/Area; }\n              \n              /*--- Impose only normal velocity on the disk inflow ---*/\n              \n              Vel_in_ghost = 0.0;\n              for (iDim = 0; iDim < nDim; iDim++) {\n                Vel_in_ghost += PrimVar_in[iDim+1]*UnitNormal[iDim];\n              }\n              \n              /*--- COmpute the enthalpy ---*/\n              \n              H_in_ghost = FluidModel->GetStaticEnergy() + 0.5*Vel_in_ghost*Vel_in_ghost + P_in_ghost/Rho_in_ghost;\n              \n              PrimVar_in_ghost[0] = T_in_ghost;\n              PrimVar_in_ghost[1] = Vel_in_ghost*UnitNormal[0];\n              PrimVar_in_ghost[2] = Vel_in_ghost*UnitNormal[1];\n              PrimVar_in_ghost[3] = Vel_in_ghost*UnitNormal[2];\n              PrimVar_in_ghost[nDim+1]= P_in_ghost;\n              PrimVar_in_ghost[nDim+2]= Rho_in_ghost;\n              PrimVar_in_ghost[nDim+3]= H_in_ghost;\n              PrimVar_in_ghost[nDim+4]= sos_in_ghost;\n              \n              numerics->SetPrimitive(PrimVar_in, PrimVar_in_ghost);\n              \n            }\n            \n            /*--- Outer point ---*/\n            \n            if (boundary == ACTDISK_OUTLET) {\n              \n              for (iVar = 0; iVar < nPrimVar; iVar++)\n                PrimVar_out_ghost[iVar] = PrimVar_in[iVar] + ActDisk_Jump[iVar];\n              \n              /*--- Check that this is a meaningful state ---*/\n              \n              P_out_ghost = PrimVar_out_ghost[nDim+1];\n              T_out_ghost = PrimVar_out_ghost[0];\n              \n              FluidModel->SetTDState_PT(P_out_ghost, T_out_ghost);\n              Rho_out_ghost = FluidModel->GetDensity();\n              sos_out_ghost = FluidModel->GetSoundSpeed();\n              \n              /*--- Find unit normal to the actuator disk ---*/\n              \n              geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n              \n              Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n              for (iDim = 0; iDim < nDim; iDim++) { UnitNormal[iDim] = Normal[iDim]/Area; }\n              \n              /*--- Find unit radial to the actuator disk ---*/\n              \n              for (iDim = 0; iDim < nDim; iDim++)\n                Radial[iDim] = Coord[iDim]-Origin[iDim];\n              \n              Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Radial[iDim]*Radial[iDim]; Area = sqrt(Area);\n              for (iDim = 0; iDim < nDim; iDim++) { UnitRadial[iDim] = Radial[iDim]/Area; }\n              \n              /*--- Find unit tangent to the actuator disk ---*/\n              \n              Tangent[0] = UnitNormal[1]*UnitRadial[2] - UnitNormal[2]*UnitRadial[1];\n              Tangent[1] = UnitNormal[2]*UnitRadial[0] - UnitNormal[0]*UnitRadial[2];\n              Tangent[2] = UnitNormal[0]*UnitRadial[1] - UnitNormal[1]*UnitRadial[0];\n              \n              Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Tangent[iDim]*Tangent[iDim]; Area = sqrt(Area);\n              for (iDim = 0; iDim < nDim; iDim++) { UnitTangent[iDim] = Tangent[iDim]/Area; }\n              \n              /*--- Normal velocity to the disk and density at the inlet---*/\n              \n              Vel_Normal_in = 0.0;\n              for (iDim = 0; iDim < nDim; iDim++) {\n                Vel_Normal_in += PrimVar_in[iDim+1]*UnitNormal[iDim];\n              }\n              \n              Rho_in = PrimVar_in[nDim+2];\n              \n              /*--- Conservation of mass to evaluate velocity at the outlet ---*/\n              \n              Vel_out_ghost = (Rho_in*Vel_Normal_in)/Rho_out_ghost;\n              \n              /*--- Compute the swirl velocity (check the formula) ---*/\n              \n              if (Omega != 0.0)\n                Vel_Swirl_out_ghost = Omega*radius*(1.0-(1.0-sqrt(2.0*ActDisk_Jump[nDim+1]/(Rho_in*pow(Omega*radius, 2.0)))));\n              else\n                Vel_Swirl_out_ghost = 0.0;\n              \n              /*--- Compute normal component of the velocity ---*/\n              \n              Vel_Normal_out_ghost = sqrt(Vel_out_ghost*Vel_out_ghost-Vel_Swirl_out_ghost*Vel_Swirl_out_ghost);\n              \n              /*--- Compute total entalphy ---*/\n              \n              H_out_ghost = FluidModel->GetStaticEnergy() + 0.5*(Vel_Normal_out_ghost+Vel_Swirl_out_ghost)*(Vel_Normal_out_ghost+Vel_Swirl_out_ghost) + P_out_ghost/Rho_out_ghost;\n              \n              PrimVar_out_ghost[0] = T_out_ghost;\n              PrimVar_out_ghost[1] = Vel_Normal_out_ghost*UnitNormal[0] + Vel_Swirl_out_ghost*UnitTangent[0];\n              PrimVar_out_ghost[2] = Vel_Normal_out_ghost*UnitNormal[1] + Vel_Swirl_out_ghost*UnitTangent[1];\n              PrimVar_out_ghost[3] = Vel_Normal_out_ghost*UnitNormal[2] + Vel_Swirl_out_ghost*UnitTangent[2];\n              PrimVar_out_ghost[nDim+1]= P_out_ghost;\n              PrimVar_out_ghost[nDim+2]= Rho_out_ghost;\n              PrimVar_out_ghost[nDim+3]= H_out_ghost;\n              PrimVar_out_ghost[nDim+4]= sos_out_ghost;\n              \n              numerics->SetPrimitive(PrimVar_out, PrimVar_out_ghost);\n              \n            }\n            \n            /*--- Set the normal vector ---*/\n            \n            geometry->vertex[iMarker][iVertex]->GetNormal(Normal);\n            for (iDim = 0; iDim < nDim; iDim++) Normal[iDim] = -Normal[iDim];\n            numerics->SetNormal(Normal);\n            \n            /*--- Compute the convective residual using an upwind scheme ---*/\n            \n            numerics->ComputeResidual(Residual, Jacobian_i, Jacobian_j, config);\n            \n            /*--- Add Residuals and Jacobians ---*/\n            \n            LinSysRes.AddBlock(iPoint, Residual);\n            if (implicit) Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    /*--- We are using non-blocking communications ---*/\n    \n#ifdef HAVE_MPI\n    \n    MPI_Barrier(MPI_COMM_WORLD);\n    \n#endif\n    \n    /*--- Free locally allocated memory ---*/\n    \n    delete [] PrimVar_out;\n    delete [] PrimVar_in;\n    delete [] MeanPrimVar;\n    delete [] PrimVar_out_ghost;\n    delete [] PrimVar_in_ghost;\n    delete [] ActDisk_Jump;\n    delete[] Buffer_Send_V;\n    delete[] Buffer_Receive_V;\n    \n  }\n  \n}\n\nvoid CEulerSolver::BC_Dirichlet(CGeometry *geometry, CSolver **solver_container,\n                                CConfig *config, unsigned short val_marker) { }\n\nvoid CEulerSolver::BC_Custom(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics, CConfig *config, unsigned short val_marker) { }\n\nvoid CEulerSolver::SetResidual_DualTime(CGeometry *geometry, CSolver **solver_container, CConfig *config,\n                                        unsigned short iRKStep, unsigned short iMesh, unsigned short RunTime_EqSystem) {\n  \n  /*--- Local variables ---*/\n  \n  unsigned short iVar, jVar, iMarker, iDim;\n  unsigned long iPoint, jPoint, iEdge, iVertex;\n  \n  su2double *U_time_nM1, *U_time_n, *U_time_nP1;\n  su2double Volume_nM1, Volume_nP1, TimeStep;\n  su2double *Normal = NULL, *GridVel_i = NULL, *GridVel_j = NULL, Residual_GCL;\n  \n  bool implicit       = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool FlowEq         = (RunTime_EqSystem == RUNTIME_FLOW_SYS);\n  bool AdjEq          = (RunTime_EqSystem == RUNTIME_ADJFLOW_SYS);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface    = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement  = config->GetGrid_Movement();\n  \n  /*--- Store the physical time step ---*/\n  \n  TimeStep = config->GetDelta_UnstTimeND();\n  \n  /*--- Compute the dual time-stepping source term for static meshes ---*/\n  \n  if (!grid_movement) {\n    \n    /*--- Loop over all nodes (excluding halos) ---*/\n    \n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Retrieve the solution at time levels n-1, n, and n+1. Note that\n       we are currently iterating on U^n+1 and that U^n & U^n-1 are fixed,\n       previous solutions that are stored in memory. ---*/\n      \n      U_time_nM1 = node[iPoint]->GetSolution_time_n1();\n      U_time_n   = node[iPoint]->GetSolution_time_n();\n      U_time_nP1 = node[iPoint]->GetSolution();\n      \n      /*--- CV volume at time n+1. As we are on a static mesh, the volume\n       of the CV will remained fixed for all time steps. ---*/\n      \n      Volume_nP1 = geometry->node[iPoint]->GetVolume();\n      \n      /*--- Compute the dual time-stepping source term based on the chosen\n       time discretization scheme (1st- or 2nd-order).---*/\n      \n      for (iVar = 0; iVar < nVar; iVar++) {\n        if (config->GetUnsteady_Simulation() == DT_STEPPING_1ST)\n          Residual[iVar] = (U_time_nP1[iVar] - U_time_n[iVar])*Volume_nP1 / TimeStep;\n        if (config->GetUnsteady_Simulation() == DT_STEPPING_2ND)\n          Residual[iVar] = ( 3.0*U_time_nP1[iVar] - 4.0*U_time_n[iVar]\n                            +1.0*U_time_nM1[iVar])*Volume_nP1 / (2.0*TimeStep);\n      }\n      if ((incompressible || freesurface) && (FlowEq || AdjEq)) Residual[0] = 0.0;\n      \n      /*--- Store the residual and compute the Jacobian contribution due\n       to the dual time source term. ---*/\n      \n      LinSysRes.AddBlock(iPoint, Residual);\n      if (implicit) {\n        for (iVar = 0; iVar < nVar; iVar++) {\n          for (jVar = 0; jVar < nVar; jVar++) Jacobian_i[iVar][jVar] = 0.0;\n          if (config->GetUnsteady_Simulation() == DT_STEPPING_1ST)\n            Jacobian_i[iVar][iVar] = Volume_nP1 / TimeStep;\n          if (config->GetUnsteady_Simulation() == DT_STEPPING_2ND)\n            Jacobian_i[iVar][iVar] = (Volume_nP1*3.0)/(2.0*TimeStep);\n        }\n        if ((incompressible || freesurface) && (FlowEq || AdjEq)) Jacobian_i[0][0] = 0.0;\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      }\n    }\n    \n  }\n  \n  else {\n    \n    /*--- For unsteady flows on dynamic meshes (rigidly transforming or\n     dynamically deforming), the Geometric Conservation Law (GCL) should be\n     satisfied in conjunction with the ALE formulation of the governing\n     equations. The GCL prevents accuracy issues caused by grid motion, i.e.\n     a uniform free-stream should be preserved through a moving grid. First,\n     we will loop over the edges and boundaries to compute the GCL component\n     of the dual time source term that depends on grid velocities. ---*/\n    \n    for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n      \n      /*--- Get indices for nodes i & j plus the face normal ---*/\n      \n      iPoint = geometry->edge[iEdge]->GetNode(0);\n      jPoint = geometry->edge[iEdge]->GetNode(1);\n      Normal = geometry->edge[iEdge]->GetNormal();\n      \n      /*--- Grid velocities stored at nodes i & j ---*/\n      \n      GridVel_i = geometry->node[iPoint]->GetGridVel();\n      GridVel_j = geometry->node[jPoint]->GetGridVel();\n      \n      /*--- Compute the GCL term by averaging the grid velocities at the\n       edge mid-point and dotting with the face normal. ---*/\n      \n      Residual_GCL = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Residual_GCL += 0.5*(GridVel_i[iDim]+GridVel_j[iDim])*Normal[iDim];\n      \n      /*--- Compute the GCL component of the source term for node i ---*/\n      \n      U_time_n = node[iPoint]->GetSolution_time_n();\n      for (iVar = 0; iVar < nVar; iVar++)\n        Residual[iVar] = U_time_n[iVar]*Residual_GCL;\n      if ((incompressible || freesurface) && (FlowEq || AdjEq)) Residual[0] = 0.0;\n      LinSysRes.AddBlock(iPoint, Residual);\n      \n      /*--- Compute the GCL component of the source term for node j ---*/\n      \n      U_time_n = node[jPoint]->GetSolution_time_n();\n      for (iVar = 0; iVar < nVar; iVar++)\n        Residual[iVar] = U_time_n[iVar]*Residual_GCL;\n      if ((incompressible || freesurface) && (FlowEq || AdjEq)) Residual[0] = 0.0;\n      LinSysRes.SubtractBlock(jPoint, Residual);\n      \n    }\n    \n    /*---\tLoop over the boundary edges ---*/\n    \n    for (iMarker = 0; iMarker < geometry->GetnMarker(); iMarker++) {\n      for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n        \n        /*--- Get the index for node i plus the boundary face normal ---*/\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n        \n        /*--- Grid velocities stored at boundary node i ---*/\n        \n        GridVel_i = geometry->node[iPoint]->GetGridVel();\n        \n        /*--- Compute the GCL term by dotting the grid velocity with the face\n         normal. The normal is negated to match the boundary convention. ---*/\n        \n        Residual_GCL = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          Residual_GCL -= 0.5*(GridVel_i[iDim]+GridVel_i[iDim])*Normal[iDim];\n        \n        /*--- Compute the GCL component of the source term for node i ---*/\n        \n        U_time_n = node[iPoint]->GetSolution_time_n();\n        for (iVar = 0; iVar < nVar; iVar++)\n          Residual[iVar] = U_time_n[iVar]*Residual_GCL;\n        if ((incompressible || freesurface) && (FlowEq || AdjEq)) Residual[0] = 0.0;\n        LinSysRes.AddBlock(iPoint, Residual);\n        \n      }\n    }\n    \n    /*--- Loop over all nodes (excluding halos) to compute the remainder\n     of the dual time-stepping source term. ---*/\n    \n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      \n      /*--- Retrieve the solution at time levels n-1, n, and n+1. Note that\n       we are currently iterating on U^n+1 and that U^n & U^n-1 are fixed,\n       previous solutions that are stored in memory. ---*/\n      \n      U_time_nM1 = node[iPoint]->GetSolution_time_n1();\n      U_time_n   = node[iPoint]->GetSolution_time_n();\n      U_time_nP1 = node[iPoint]->GetSolution();\n      \n      /*--- CV volume at time n-1 and n+1. In the case of dynamically deforming\n       grids, the volumes will change. On rigidly transforming grids, the\n       volumes will remain constant. ---*/\n      \n      Volume_nM1 = geometry->node[iPoint]->GetVolume_nM1();\n      Volume_nP1 = geometry->node[iPoint]->GetVolume();\n      \n      /*--- Compute the dual time-stepping source residual. Due to the\n       introduction of the GCL term above, the remainder of the source residual\n       due to the time discretization has a new form.---*/\n      \n      for (iVar = 0; iVar < nVar; iVar++) {\n        if (config->GetUnsteady_Simulation() == DT_STEPPING_1ST)\n          Residual[iVar] = (U_time_nP1[iVar] - U_time_n[iVar])*(Volume_nP1/TimeStep);\n        if (config->GetUnsteady_Simulation() == DT_STEPPING_2ND)\n          Residual[iVar] = (U_time_nP1[iVar] - U_time_n[iVar])*(3.0*Volume_nP1/(2.0*TimeStep))\n          + (U_time_nM1[iVar] - U_time_n[iVar])*(Volume_nM1/(2.0*TimeStep));\n      }\n      if ((incompressible || freesurface) && (FlowEq || AdjEq)) Residual[0] = 0.0;\n      \n      /*--- Store the residual and compute the Jacobian contribution due\n       to the dual time source term. ---*/\n      \n      LinSysRes.AddBlock(iPoint, Residual);\n      if (implicit) {\n        for (iVar = 0; iVar < nVar; iVar++) {\n          for (jVar = 0; jVar < nVar; jVar++) Jacobian_i[iVar][jVar] = 0.0;\n          if (config->GetUnsteady_Simulation() == DT_STEPPING_1ST)\n            Jacobian_i[iVar][iVar] = Volume_nP1/TimeStep;\n          if (config->GetUnsteady_Simulation() == DT_STEPPING_2ND)\n            Jacobian_i[iVar][iVar] = (3.0*Volume_nP1)/(2.0*TimeStep);\n        }\n        if ((incompressible || freesurface) && (FlowEq || AdjEq)) Jacobian_i[0][0] = 0.0;\n        Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n      }\n    }\n  }\n  \n}\n\nvoid CEulerSolver::SetFlow_Displacement(CGeometry **flow_geometry, CVolumetricMovement *flow_grid_movement,\n                                        CConfig *flow_config, CConfig *fea_config, CGeometry **fea_geometry, CSolver ***fea_solution) {\n    unsigned short iDim;\r\n    unsigned long iVertex;\r\n    su2double *Coord, VarCoord[3] = {0,0,0};\r\n\r\n  #ifndef HAVE_MPI\r\n    unsigned long iPoint_Donor, iPoint;\r\n    unsigned short iMarker;\r\n    su2double *CoordDonor, *DisplacementDonor;\r\n\r\n    for (iMarker = 0; iMarker < flow_config->GetnMarker_All(); iMarker++) {\r\n\r\n      if (flow_config->GetMarker_All_FSIinterface(iMarker) != 0) {\r\n\r\n        for(iVertex = 0; iVertex < flow_geometry[MESH_0]->nVertex[iMarker]; iVertex++) {\r\n\r\n          iPoint = flow_geometry[MESH_0]->vertex[iMarker][iVertex]->GetNode();\r\n\r\n          iPoint_Donor = flow_geometry[MESH_0]->vertex[iMarker][iVertex]->GetDonorPoint();\r\n\r\n          Coord = flow_geometry[MESH_0]->node[iPoint]->GetCoord();\r\n\r\n          CoordDonor = fea_geometry[MESH_0]->node[iPoint_Donor]->GetCoord();\r\n\r\n          /*--- The displacements come from the predicted solution ---*/\r\n          DisplacementDonor = fea_solution[MESH_0][FEA_SOL]->node[iPoint_Donor]->GetSolution_Pred();\r\n\r\n          for (iDim = 0; iDim < nDim; iDim++)\r\n\r\n            VarCoord[iDim] = (CoordDonor[iDim]+DisplacementDonor[iDim])-Coord[iDim];\r\n\r\n          flow_geometry[MESH_0]->vertex[iMarker][iVertex]->SetVarCoord(VarCoord);\r\n        }\r\n      }\n    }\n\r\n  #else\r\n\r\n    int rank = MASTER_NODE;\r\n    int size = SINGLE_NODE;\r\n\r\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\r\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\r\n\r\n    unsigned long nLocalVertexStruct = 0, nLocalVertexFlow = 0;\r\n\r\n\tunsigned short nMarkerFSI, nMarkerStruct, nMarkerFlow;\t\t// Number of markers on FSI problem, FEA and Flow side\r\n\tunsigned short iMarkerFSI, iMarkerStruct, iMarkerFlow;\t\t// Variables for iteration over markers\r\n\r\n\tunsigned long MaxLocalVertexStruct = 0, MaxLocalVertexFlow = 0;\r\n\r\n\tunsigned long nBuffer_StructCoord = 0, nBuffer_FlowNewCoord = 0;\r\n\tunsigned long nBuffer_DonorIndices = 0, nBuffer_SetIndex = 0;\r\n\r\n\tunsigned long Point_Flow, Point_Struct;\r\n\tlong Point_Flow_Rcv, Processor_Flow_Rcv;\r\n\tunsigned long Processor_Flow;\r\n\r\n\tint Marker_Flow = -1, Marker_Struct = -1;\r\n\r\n\tint iProcessor, nProcessor = 0;\r\n\r\n\r\n\tsu2double *Coord_Struct, *Displacement_Struct;\r\n\r\n\t/*--- Number of markers on the FSI interface ---*/\r\n\r\n\tnMarkerFSI     = (flow_config->GetMarker_n_FSIinterface())/2;\r\n\tnMarkerStruct  = fea_geometry[MESH_0]->GetnMarker();\r\n\tnMarkerFlow    = flow_geometry[MESH_0]->GetnMarker();\r\n\r\n\tnProcessor = size;\r\n\r\n\t/*--- Outer loop over the markers on the FSI interface: compute one by one ---*/\r\n\t/*--- The tags are always an integer greater than 1: loop from 1 to nMarkerFSI ---*/\r\n\r\n\tfor (iMarkerFSI = 1; iMarkerFSI <= nMarkerFSI; iMarkerFSI++){\r\n\r\n\t\tMarker_Struct = -1;\r\n\t\tMarker_Flow = -1;\r\n\r\n\t\t/*--- Initialize pointer buffers inside the loop, so we can delete for each marker. ---*/\r\n\t\tunsigned long Buffer_Send_nVertexStruct[1], *Buffer_Recv_nVertexStruct = NULL;\r\n\t\tunsigned long Buffer_Send_nVertexFlow[1], *Buffer_Recv_nVertexFlow = NULL;\r\n\r\n\t\t/*--- The markers on the fluid and structural side are tagged with the same index.\r\n\t\t *--- This is independent of the MPI domain decomposition.\r\n\t\t *--- We need to loop over all markers on structural side and get the number of nodes\r\n\t\t *--- that belong to each FSI marker for each processor ---*/\r\n\r\n\t\t/*--- On the structural side ---*/\r\n\r\n\t\tfor (iMarkerStruct = 0; iMarkerStruct < nMarkerStruct; iMarkerStruct++){\r\n\t\t\t/*--- If the tag GetMarker_All_FSIinterface(iMarkerFEA) equals the index we are looping at ---*/\r\n\t\t\tif ( fea_config->GetMarker_All_FSIinterface(iMarkerStruct) == iMarkerFSI ){\r\n\t\t\t\t/*--- We have identified the local index of the FEA marker ---*/\r\n\t\t\t\t/*--- Store the number of local points that belong to markFEA on each processor ---*/\r\n\t\t\t\t/*--- This includes the halo nodes ---*/\r\n\t\t\t\tnLocalVertexStruct = fea_geometry[MESH_0]->GetnVertex(iMarkerStruct);\r\n\t\t\t\t/*--- Store the identifier for the structural marker ---*/\r\n\t\t\t\tMarker_Struct = iMarkerStruct;\r\n\t\t\t\t/*--- Exit the for loop: we have found the local index for iMarkerFSI on the FEA side ---*/\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/*--- If the tag hasn't matched any tag within the FEA markers ---*/\r\n\t\t\t\tnLocalVertexStruct = 0;\r\n\t\t\t\tMarker_Struct = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*--- On the fluid side ---*/\r\n\r\n\t\tfor (iMarkerFlow = 0; iMarkerFlow < nMarkerFlow; iMarkerFlow++){\r\n\t\t\t/*--- If the tag GetMarker_All_FSIinterface(iMarkerFlow) equals the index we are looping at ---*/\r\n\t\t\tif ( flow_config->GetMarker_All_FSIinterface(iMarkerFlow) == iMarkerFSI ){\r\n\t\t\t\t/*--- We have identified the local index of the Flow marker ---*/\r\n\t\t\t\t/*--- Store the number of local points that belong to markFlow on each processor ---*/\r\n\t\t\t\t/*--- This includes the halo nodes ---*/\r\n\t\t\t\tnLocalVertexFlow = flow_geometry[MESH_0]->GetnVertex(iMarkerFlow);\r\n\t\t\t\t/*--- Store the identifier for the fluid marker ---*/\r\n\t\t\t\tMarker_Flow = iMarkerFlow;\r\n\t\t\t\t/*--- Exit the for loop: we have found the local index for iMarkerFSI on the FEA side ---*/\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/*--- If the tag hasn't matched any tag within the Flow markers ---*/\r\n\t\t\t\tnLocalVertexFlow = 0;\r\n\t\t\t\tMarker_Flow = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tBuffer_Send_nVertexStruct[0] = nLocalVertexStruct;\t\t\t\t\t\t\t\t // Retrieve total number of vertices on FEA marker\r\n\t\tBuffer_Send_nVertexFlow[0] = nLocalVertexFlow;\t\t\t\t\t\t\t\t // Retrieve total number of vertices on Flow marker\r\n\t\tif (rank == MASTER_NODE) Buffer_Recv_nVertexStruct = new unsigned long[size];   // Allocate memory to receive how many vertices are on each rank on the structural side\r\n\t\tif (rank == MASTER_NODE) Buffer_Recv_nVertexFlow = new unsigned long[size];  // Allocate memory to receive how many vertices are on each rank on the fluid side\r\n\r\n\t\t/*--- We receive MaxLocalVertexFEA as the maximum number of vertices in one single processor on the structural side---*/\r\n\t\tSU2_MPI::Allreduce(&nLocalVertexStruct, &MaxLocalVertexStruct, 1, MPI_UNSIGNED_LONG, MPI_MAX, MPI_COMM_WORLD);\r\n\t\t/*--- We receive MaxLocalVertexFlow as the maximum number of vertices in one single processor on the fluid side ---*/\r\n\t\tSU2_MPI::Allreduce(&nLocalVertexFlow, &MaxLocalVertexFlow, 1, MPI_UNSIGNED_LONG, MPI_MAX, MPI_COMM_WORLD);\r\n\r\n\t\t/*--- We gather a vector in MASTER_NODE that determines how many elements are there on each processor on the structural side ---*/\r\n\t\tSU2_MPI::Gather(&Buffer_Send_nVertexStruct, 1, MPI_UNSIGNED_LONG, Buffer_Recv_nVertexStruct, 1, MPI_UNSIGNED_LONG, MASTER_NODE, MPI_COMM_WORLD);\r\n\t\t/*--- We gather a vector in MASTER_NODE that determines how many elements are there on each processor on the fluid side ---*/\r\n\t\tSU2_MPI::Gather(&Buffer_Send_nVertexFlow, 1, MPI_UNSIGNED_LONG, Buffer_Recv_nVertexFlow, 1, MPI_UNSIGNED_LONG, MASTER_NODE, MPI_COMM_WORLD);\r\n\r\n\t\t/*--- We will be gathering the structural coordinates into the master node ---*/\r\n\t\t/*--- Then we will distribute them using a scatter operation into the appropriate fluid processor ---*/\r\n\t\tnBuffer_StructCoord = MaxLocalVertexStruct * nDim;\r\n\t\tnBuffer_FlowNewCoord = MaxLocalVertexFlow * nDim;\r\n\r\n\t\t/*--- We will be gathering donor index and donor processor (for structure -> donor = flow) ---*/\r\n\t\t/*--- Then we will pass on to the fluid side the index (flow point) to the appropriate processor ---*/\r\n\t\tnBuffer_DonorIndices = 2 * MaxLocalVertexStruct;\r\n\t\tnBuffer_SetIndex = MaxLocalVertexFlow;\r\n\r\n\t\t/*--- Send and Recv buffers ---*/\r\n\r\n\t\t/*--- Buffers to send and receive the structural coordinates ---*/\r\n\t\tsu2double *Buffer_Send_StructCoord = new su2double[nBuffer_StructCoord];\r\n\t\tsu2double *Buffer_Recv_StructCoord = NULL;\r\n\r\n\t\t/*--- Buffers to send and receive the donor index and processor ---*/\r\n\t\tlong *Buffer_Send_DonorIndices = new long[nBuffer_DonorIndices];\r\n\t\tlong *Buffer_Recv_DonorIndices = NULL;\r\n\r\n\t\t/*--- Buffers to send and receive the new fluid coordinates ---*/\r\n\t\tsu2double *Buffer_Send_FlowNewCoord = NULL;\r\n\t\tsu2double *Buffer_Recv_FlowNewCoord = new su2double[nBuffer_FlowNewCoord];\r\n\r\n\t\t/*--- Buffers to send and receive the fluid index ---*/\r\n\t\tlong *Buffer_Send_SetIndex = NULL;\r\n\t\tlong *Buffer_Recv_SetIndex = new long[nBuffer_SetIndex];\r\n\r\n\t\t/*--- Prepare the receive buffers (1st step) and send buffers (2nd step) on the master node only. ---*/\r\n\r\n\t\tif (rank == MASTER_NODE) {\r\n\t\t\tBuffer_Recv_StructCoord  = new su2double[size*nBuffer_StructCoord];\r\n\t\t\tBuffer_Recv_DonorIndices = new long[size*nBuffer_DonorIndices];\r\n\t\t\tBuffer_Send_FlowNewCoord = new su2double[size*nBuffer_FlowNewCoord];\r\n\t\t\tBuffer_Send_SetIndex     = new long[size*nBuffer_SetIndex];\r\n\t\t}\r\n\r\n\t\t/*--- On the structural side ---*/\r\n\r\n\t\t/*--- If this processor owns the marker we are looping at on the structural side ---*/\r\n\r\n\t\t/*--- First we initialize all of the indices and processors to -1 ---*/\r\n\t\t/*--- This helps on identifying halo nodes and avoids setting wrong values ---*/\r\n\t\tfor (iVertex = 0; iVertex < nBuffer_DonorIndices; iVertex++)\r\n\t\t\tBuffer_Send_DonorIndices[iVertex] = -1;\r\n\r\n\t\tif (Marker_Struct >= 0){\r\n\r\n\t\t\t/*--- We have identified the local index of the FEA marker ---*/\r\n\t\t\t/*--- We loop over all the vertices in that marker and in that particular processor ---*/\r\n\r\n\t\t\tfor (iVertex = 0; iVertex < nLocalVertexStruct; iVertex++){\r\n\r\n\t\t        Point_Struct = fea_geometry[MESH_0]->vertex[Marker_Struct][iVertex]->GetNode();\r\n\r\n\t\t        Point_Flow = fea_geometry[MESH_0]->vertex[Marker_Struct][iVertex]->GetDonorPoint();\r\n\r\n\t\t        Processor_Flow = fea_geometry[MESH_0]->vertex[Marker_Struct][iVertex]->GetDonorProcessor();\r\n\r\n\t\t        Coord_Struct = fea_geometry[MESH_0]->node[Point_Struct]->GetCoord();\r\n\r\n\t\t        /*--- The displacements come from the predicted solution ---*/\r\n\t\t        Displacement_Struct = fea_solution[MESH_0][FEA_SOL]->node[Point_Struct]->GetSolution_Pred();\r\n\r\n\t\t\t\tfor (iDim = 0; iDim < nDim; iDim++){\r\n\t\t\t\t\tBuffer_Send_StructCoord[iVertex*nDim+iDim] = Coord_Struct[iDim] + Displacement_Struct[iDim];\r\n\t\t\t\t}\r\n\t\t\t\t/*--- If this processor owns the node ---*/\r\n\t\t\t\tif (fea_geometry[MESH_0]->node[Point_Struct]->GetDomain()){\r\n\t\t\t\t\tBuffer_Send_DonorIndices[2*iVertex]     = Point_Flow;\r\n\t\t\t\t\tBuffer_Send_DonorIndices[2*iVertex + 1] = Processor_Flow;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t/*--- We set the values to be -1 to be able to identify them later as halo nodes ---*/\r\n\t\t\t\t\tBuffer_Send_DonorIndices[2*iVertex]     = -1;\r\n\t\t\t\t\tBuffer_Send_DonorIndices[2*iVertex + 1] = -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*--- Once all the messages have been sent, we gather them all into the MASTER_NODE ---*/\r\n\t\tSU2_MPI::Gather(Buffer_Send_StructCoord, nBuffer_StructCoord, MPI_DOUBLE, Buffer_Recv_StructCoord, nBuffer_StructCoord, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\r\n\t\tSU2_MPI::Gather(Buffer_Send_DonorIndices, nBuffer_DonorIndices, MPI_LONG, Buffer_Recv_DonorIndices, nBuffer_DonorIndices, MPI_LONG, MASTER_NODE, MPI_COMM_WORLD);\r\n\r\n\t\t/*--- Counter to determine where in the array we have to set the information ---*/\r\n\t\tlong *Counter_Processor_Flow = NULL;\r\n\t\tlong iProcessor_Struct = 0, iIndex_Struct = 0;\r\n\t\tlong iProcessor_Flow = 0, iPoint_Flow = 0, iIndex_Flow = 0;\r\n\r\n\t\t/*--- Now we pack the information to send it over to the different processors ---*/\r\n\r\n\t\tif (rank == MASTER_NODE){\r\n\r\n\t\t\t/*--- We set the counter to 0 ---*/\r\n\t\t\tCounter_Processor_Flow = new long[nProcessor];\r\n\t\t\tfor (iProcessor = 0; iProcessor < nProcessor; iProcessor++){\r\n\t\t\t\tCounter_Processor_Flow[iProcessor] = 0;\r\n\t\t\t}\r\n\r\n\t\t\t/*--- First we initialize the index vector to -1 ---*/\r\n\t\t\t/*--- This helps on identifying halo nodes and avoids setting wrong values ---*/\r\n\t\t\tfor (iVertex = 0; iVertex < nProcessor*nBuffer_SetIndex; iVertex++)\r\n\t\t\t\tBuffer_Send_SetIndex[iVertex] = -2;\r\n\r\n\t\t\t/*--- As of now we do the loop over the structural points ---*/\r\n\t\t\t/*--- The number of points for flow and structure does not necessarily have to match ---*/\r\n\t\t\t/*--- In fact, it's possible that a processor asks for nFlow nodes and there are only ---*/\r\n\t\t\t/*--- nStruc < nFlow available; this is due to halo nodes ---*/\r\n\r\n\t\t\t/*--- For every processor from which we have received information ---*/\r\n\t\t\t/*--- (This is, for every processor on the structural side) ---*/\r\n\t\t\tfor (iProcessor = 0; iProcessor < nProcessor; iProcessor++){\r\n\r\n\t\t\t\t/*--- This is the initial index on the coordinates buffer for that particular processor on the structural side ---*/\r\n\t\t\t\tiProcessor_Struct = iProcessor*nBuffer_StructCoord;\r\n\t\t\t\t/*--- This is the initial index on the donor index/processor buffer for that particular processor on the structural side ---*/\r\n\t\t\t\tiIndex_Struct = iProcessor*nBuffer_DonorIndices;\r\n\r\n\t\t\t\t/*--- For every vertex in the information retreived from iProcessor ---*/\r\n\t\t\t\tfor (iVertex = 0; iVertex < Buffer_Recv_nVertexStruct[iProcessor]; iVertex++) {\r\n\r\n\t\t\t\t\t/*--- The processor and index for the flow are: ---*/\r\n\t\t\t\t\tProcessor_Flow_Rcv = Buffer_Recv_DonorIndices[iIndex_Struct+iVertex*2+1];\r\n\t\t\t\t\tPoint_Flow_Rcv     = Buffer_Recv_DonorIndices[iIndex_Struct+iVertex*2];\r\n\r\n\t\t\t\t\t/*--- Load the buffer at the appropriate position ---*/\r\n\t\t\t\t\t/*--- This is determined on the fluid side by:\r\n\t\t\t\t\t *--- Processor_Flow*nBuffer_FlowNewCoord -> Initial position of the processor array (fluid side)\r\n\t\t\t\t\t *--- +\r\n\t\t\t\t\t *--- Counter_Processor_Flow*nDim -> Initial position of the nDim array for the particular point on the fluid side\r\n\t\t\t\t\t *--- +\r\n\t\t\t\t\t *--- iDim -> Position within the nDim array that corresponds to a point\r\n\t\t\t\t\t *---\r\n\t\t\t\t\t *--- While on the structural side is:\r\n\t\t\t\t\t *--- iProcessor*nBuffer_StructCoord -> Initial position on the processor array (structural side)\r\n\t\t\t\t\t *--- +\r\n\t\t\t\t\t *--- iVertex*nDim -> Initial position of the nDim array for the particular point on the structural side\r\n\t\t\t\t\t */\r\n\r\n\t\t\t\t\t/*--- We check that we are not setting the value for a halo node ---*/\r\n\t\t\t\t\tif (Point_Flow_Rcv != -1){\r\n\t\t\t\t\t\tiProcessor_Flow = Processor_Flow_Rcv*nBuffer_FlowNewCoord;\r\n\t\t\t\t\t\tiIndex_Flow = Processor_Flow_Rcv*nBuffer_SetIndex;\r\n\t\t\t\t\t\tiPoint_Flow = Counter_Processor_Flow[Processor_Flow_Rcv]*nDim;\r\n\r\n\t\t\t\t\t\tfor (iDim = 0; iDim < nDim; iDim++)\r\n\t\t\t\t\t\t\tBuffer_Send_FlowNewCoord[iProcessor_Flow + iPoint_Flow + iDim] = Buffer_Recv_StructCoord[iProcessor_Struct + iVertex*nDim + iDim];\r\n\r\n\t\t\t\t\t\t/*--- We set the fluid index at an appropriate position matching the coordinates ---*/\r\n\t\t\t\t\t\tBuffer_Send_SetIndex[iIndex_Flow + Counter_Processor_Flow[Processor_Flow_Rcv]] = Point_Flow_Rcv;\r\n\r\n\t\t\t\t\t\tCounter_Processor_Flow[Processor_Flow_Rcv]++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t/*--- Once all the messages have been prepared, we scatter them all from the MASTER_NODE ---*/\r\n\t\tSU2_MPI::Scatter(Buffer_Send_FlowNewCoord, nBuffer_FlowNewCoord, MPI_DOUBLE, Buffer_Recv_FlowNewCoord, nBuffer_FlowNewCoord, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\r\n\t\tSU2_MPI::Scatter(Buffer_Send_SetIndex, nBuffer_SetIndex, MPI_LONG, Buffer_Recv_SetIndex, nBuffer_SetIndex, MPI_LONG, MASTER_NODE, MPI_COMM_WORLD);\r\n\r\n\t\tlong indexPoint_iVertex, Point_Flow_Check;\r\n\r\n\t\t/*--- For the flow marker we are studying ---*/\r\n\t\tif (Marker_Flow >= 0){\r\n\r\n\t\t\t/*--- We have identified the local index of the Flow marker ---*/\r\n\t\t\t/*--- We loop over all the vertices in that marker and in that particular processor ---*/\r\n\r\n\t\t\tfor (iVertex = 0; iVertex < nLocalVertexFlow; iVertex++){\r\n\r\n\t\t\t\tPoint_Flow = flow_geometry[MESH_0]->vertex[Marker_Flow][iVertex]->GetNode();\r\n\r\n\t\t\t\tif (flow_geometry[MESH_0]->node[Point_Flow]->GetDomain()){\r\n\t\t\t\t\t/*--- Find the index of the point Point_Flow in the buffer Buffer_Recv_SetIndex ---*/\r\n\t\t\t\t\tindexPoint_iVertex = std::distance(Buffer_Recv_SetIndex, std::find(Buffer_Recv_SetIndex, Buffer_Recv_SetIndex + MaxLocalVertexFlow, Point_Flow));\r\n\r\n\t\t\t\t\tPoint_Flow_Check = Buffer_Recv_SetIndex[indexPoint_iVertex];\r\n\r\n\t\t\t\t\tif (Point_Flow_Check < 0) {\r\n\t\t\t\t\t\tcout << \"WARNING: A nonphysical point is being considered for mesh deformation.\" << endl;\r\n\t\t\t\t\t\texit(EXIT_FAILURE);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tCoord = flow_geometry[MESH_0]->node[Point_Flow]->GetCoord();\r\n\r\n\t\t\t\t\tfor (iDim = 0; iDim < nDim; iDim++)\r\n\t\t\t\t\t\tVarCoord[iDim] = (Buffer_Recv_FlowNewCoord[indexPoint_iVertex*nDim+iDim])-Coord[iDim];\r\n\r\n\t\t\t\t\tflow_geometry[MESH_0]->vertex[Marker_Flow][iVertex]->SetVarCoord(VarCoord);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdelete [] Buffer_Send_StructCoord;\r\n\t\tdelete [] Buffer_Send_DonorIndices;\r\n\t\tdelete [] Buffer_Recv_FlowNewCoord;\r\n\t\tdelete [] Buffer_Recv_SetIndex;\r\n\r\n\t\tif (rank == MASTER_NODE) {\r\n\t\t\tdelete [] Buffer_Recv_nVertexStruct;\r\n\t\t\tdelete [] Buffer_Recv_nVertexFlow;\r\n\t\t\tdelete [] Buffer_Recv_StructCoord;\r\n\t\t\tdelete [] Buffer_Recv_DonorIndices;\r\n\t\t\tdelete [] Buffer_Send_FlowNewCoord;\r\n\t\t\tdelete [] Buffer_Send_SetIndex;\r\n\t\t\tdelete [] Counter_Processor_Flow;\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n  #endif\r\n\r\n    flow_grid_movement->SetVolume_Deformation(flow_geometry[MESH_0], flow_config, true);\r\n\r\n}\r\n\r\nvoid CEulerSolver::SetFlow_Displacement_Int(CGeometry **flow_geometry, CVolumetricMovement *flow_grid_movement,\r\n                                        CConfig *flow_config, CConfig *fea_config, CGeometry **fea_geometry, CSolver ***fea_solution) {\r\n    unsigned short iMarker, iDim, iDonor, nDonor;\r\n    unsigned long iVertex;\r\n    su2double VarCoord[3];\r\n\r\n    unsigned long iPoint_Donor;\r\n    su2double *DisplacementDonor, *DisplacementDonor_Prev, coeff;\r\n\r\n    for (iMarker = 0; iMarker < flow_config->GetnMarker_All(); iMarker++) {\r\n\r\n      if (flow_config->GetMarker_All_FSIinterface(iMarker) != 0) {\r\n\r\n        for(iVertex = 0; iVertex < flow_geometry[MESH_0]->nVertex[iMarker]; iVertex++) {\r\n\r\n          for (iDim = 0; iDim < nDim; iDim++)\r\n            VarCoord[iDim]=0.0;\r\n\r\n          nDonor = flow_geometry[MESH_0]->vertex[iMarker][iVertex]->GetnDonorPoints();\r\n\r\n          for (iDonor = 0; iDonor < nDonor; iDonor++){\r\n            iPoint_Donor = flow_geometry[MESH_0]->vertex[iMarker][iVertex]->GetInterpDonorPoint(iDonor);\r\n            coeff = flow_geometry[MESH_0]->vertex[iMarker][iVertex]->GetDonorCoeff(iDonor);\r\n\r\n            /*--- The displacements come from the predicted solution ---*/\r\n            DisplacementDonor = fea_solution[MESH_0][FEA_SOL]->node[iPoint_Donor]->GetSolution_Pred();\r\n\r\n            DisplacementDonor_Prev = fea_solution[MESH_0][FEA_SOL]->node[iPoint_Donor]->GetSolution_Pred_Old();\r\n\r\n            for (iDim = 0; iDim < nDim; iDim++)\r\n\r\n              VarCoord[iDim] += (DisplacementDonor[iDim] - DisplacementDonor_Prev[iDim])*coeff;\r\n          }\r\n\r\n          flow_geometry[MESH_0]->vertex[iMarker][iVertex]->SetVarCoord(VarCoord);\r\n        }\r\n      }\r\n    }\r\n    flow_grid_movement->SetVolume_Deformation(flow_geometry[MESH_0], flow_config, true);\r\n\r\n}\n\nvoid CEulerSolver::LoadRestart(CGeometry **geometry, CSolver ***solver, CConfig *config, int val_iter) {\n  \n  /*--- Restart the solution from file information ---*/\n  unsigned short iDim, iVar, iMesh, iMeshFine;\n  unsigned long iPoint, index, iChildren, Point_Fine;\n  unsigned short turb_model = config->GetKind_Turb_Model();\n  su2double Area_Children, Area_Parent, *Coord, *Solution_Fine, dull_val;\n  bool compressible   = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface    = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement  = config->GetGrid_Movement();\n  bool dual_time = ((config->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n                    (config->GetUnsteady_Simulation() == DT_STEPPING_2ND));\n  bool steady_restart = config->GetSteadyRestart();\n  bool time_stepping = config->GetUnsteady_Simulation() == TIME_STEPPING;\n  string UnstExt, text_line;\n  ifstream restart_file;\n  \n  unsigned short iZone = config->GetiZone();\n  unsigned short nZone = geometry[iZone]->GetnZone();\n\n  string restart_filename = config->GetSolution_FlowFileName();\n\n  Coord = new su2double [nDim];\n  for (iDim = 0; iDim < nDim; iDim++)\n    Coord[iDim] = 0.0;\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Multizone problems require the number of the zone to be appended. ---*/\n\n  if (nZone > 1)\n\trestart_filename = config->GetMultizone_FileName(restart_filename, iZone);\n\n  /*--- Modify file name for an unsteady restart ---*/\n  \n  if (dual_time || time_stepping)\n    restart_filename = config->GetUnsteady_FileName(restart_filename, val_iter);\n  \n  /*--- Open the restart file, and throw an error if this fails. ---*/\n  \n  restart_file.open(restart_filename.data(), ios::in);\n  if (restart_file.fail()) {\n    if (rank == MASTER_NODE)\n      cout << \"There is no flow restart file!! \" << restart_filename.data() << \".\"<< endl;\n    exit(EXIT_FAILURE);\n  }\n  \n  /*--- In case this is a parallel simulation, we need to perform the\n   Global2Local index transformation first. ---*/\n  \n  long *Global2Local = NULL;\n  Global2Local = new long[geometry[MESH_0]->GetGlobal_nPointDomain()];\n  /*--- First, set all indices to a negative value by default ---*/\n  for (iPoint = 0; iPoint < geometry[MESH_0]->GetGlobal_nPointDomain(); iPoint++) {\n    Global2Local[iPoint] = -1;\n  }\n  \n  /*--- Now fill array with the transform values only for local points ---*/\n  \n  for (iPoint = 0; iPoint < geometry[MESH_0]->GetnPointDomain(); iPoint++) {\n    Global2Local[geometry[MESH_0]->node[iPoint]->GetGlobalIndex()] = iPoint;\n  }\n  \n  /*--- Read all lines in the restart file ---*/\n  \n  long iPoint_Local = 0; unsigned long iPoint_Global = 0;\n  \n  /*--- The first line is the header ---*/\n  \n  getline (restart_file, text_line);\n  \n  while (getline (restart_file, text_line)) {\n    istringstream point_line(text_line);\n    \n    /*--- Retrieve local index. If this node from the restart file lives\n     on a different processor, the value of iPoint_Local will be -1, as\n     initialized above. Otherwise, the local index for this node on the\n     current processor will be returned and used to instantiate the vars. ---*/\n    \n    iPoint_Local = Global2Local[iPoint_Global];\n    if (iPoint_Local >= 0) {\n      \n      if (compressible) {\n        if (nDim == 2) point_line >> index >> Coord[0] >> Coord[1] >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n        if (nDim == 3) point_line >> index >> Coord[0] >> Coord[1] >> Coord[2] >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3] >> Solution[4];\n      }\n      if (incompressible) {\n        if (nDim == 2) point_line >> index >> Coord[0] >> Coord[1] >> Solution[0] >> Solution[1] >> Solution[2];\n        if (nDim == 3) point_line >> index >> Coord[0] >> Coord[1] >> Coord[2] >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n      }\n      if (freesurface) {\n        if (nDim == 2) point_line >> index >> Coord[0] >> Coord[1] >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n        if (nDim == 3) point_line >> index >> Coord[0] >> Coord[1] >> Coord[2] >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3] >> Solution[4];\n      }\n      \n      node[iPoint_Local]->SetSolution(Solution);\n      \n      /*--- For dynamic meshes, read in and store the\n       grid coordinates and grid velocities for each node. ---*/\n      \n      if (grid_movement) {\n        \n        /*--- First, remove any variables for the turbulence model that\n         appear in the restart file before the grid velocities. ---*/\n        \n        if (turb_model == SA || turb_model == SA_NEG) {\n          point_line >> dull_val;\n        } else if (turb_model == SST) {\n          point_line >> dull_val >> dull_val;\n        }\n        \n        /*--- Read in the next 2 or 3 variables which are the grid velocities ---*/\n        /*--- If we are restarting the solution from a previously computed static calculation (no grid movement) ---*/\r\n        /*--- the grid velocities are set to 0. This is useful for FSI computations ---*/\r\n        \n        su2double GridVel[3] = {0.0,0.0,0.0};\n        if (!steady_restart){\r\n            if (nDim == 2) point_line >> GridVel[0] >> GridVel[1];\r\n            else point_line >> GridVel[0] >> GridVel[1] >> GridVel[2];\r\n        }\r\n\r\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          geometry[MESH_0]->node[iPoint_Local]->SetCoord(iDim, Coord[iDim]);\n          geometry[MESH_0]->node[iPoint_Local]->SetGridVel(iDim, GridVel[iDim]);\n        }\n        \n      }\n      \n    }\n    iPoint_Global++;\n  }\n  \n  /*--- Close the restart file ---*/\n  \n  restart_file.close();\n  \n  /*--- Free memory needed for the transformation ---*/\n  \n  delete [] Global2Local;\n  \n  /*--- MPI solution ---*/\n  \n  solver[MESH_0][FLOW_SOL]->Set_MPI_Solution(geometry[MESH_0], config);\n  \n  /*--- Interpolate the solution down to the coarse multigrid levels ---*/\n  \n  for (iMesh = 1; iMesh <= config->GetnMGLevels(); iMesh++) {\n    for (iPoint = 0; iPoint < geometry[iMesh]->GetnPoint(); iPoint++) {\n      Area_Parent = geometry[iMesh]->node[iPoint]->GetVolume();\n      for (iVar = 0; iVar < nVar; iVar++) Solution[iVar] = 0.0;\n      for (iChildren = 0; iChildren < geometry[iMesh]->node[iPoint]->GetnChildren_CV(); iChildren++) {\n        Point_Fine = geometry[iMesh]->node[iPoint]->GetChildren_CV(iChildren);\n        Area_Children = geometry[iMesh-1]->node[Point_Fine]->GetVolume();\n        Solution_Fine = solver[iMesh-1][FLOW_SOL]->node[Point_Fine]->GetSolution();\n        for (iVar = 0; iVar < nVar; iVar++) {\n          Solution[iVar] += Solution_Fine[iVar]*Area_Children/Area_Parent;\n        }\n      }\n      solver[iMesh][FLOW_SOL]->node[iPoint]->SetSolution(Solution);\n    }\n    solver[iMesh][FLOW_SOL]->Set_MPI_Solution(geometry[iMesh], config);\n  }\n  \n  /*--- Update the geometry for flows on dynamic meshes ---*/\n  \n  if (grid_movement) {\n    \n    /*--- Communicate the new coordinates and grid velocities at the halos ---*/\n    \n    geometry[MESH_0]->Set_MPI_Coord(config);\n    geometry[MESH_0]->Set_MPI_GridVel(config);\n    \n    /*--- Recompute the edges and  dual mesh control volumes in the\n     domain and on the boundaries. ---*/\n    \n    geometry[MESH_0]->SetCoord_CG();\n    geometry[MESH_0]->SetControlVolume(config, UPDATE);\n    geometry[MESH_0]->SetBoundControlVolume(config, UPDATE);\n    \n    /*--- Update the multigrid structure after setting up the finest grid,\n     including computing the grid velocities on the coarser levels. ---*/\n    \n    for (iMesh = 1; iMesh <= config->GetnMGLevels(); iMesh++) {\n      iMeshFine = iMesh-1;\n      geometry[iMesh]->SetControlVolume(config, geometry[iMeshFine], UPDATE);\n      geometry[iMesh]->SetBoundControlVolume(config, geometry[iMeshFine],UPDATE);\n      geometry[iMesh]->SetCoord(geometry[iMeshFine]);\n      geometry[iMesh]->SetRestricted_GridVelocity(geometry[iMeshFine], config);\n    }\n  }\n  \n  delete [] Coord;\n  \n}\n\nvoid CEulerSolver::SetFreeSurface_Distance(CGeometry *geometry, CConfig *config) {\n  su2double *coord = NULL, dist2, *iCoord = NULL, *jCoord = NULL, LevelSet_i, LevelSet_j,\n  **Coord_LevelSet = NULL, *xCoord = NULL, *yCoord = NULL, *zCoord = NULL, auxCoordx, auxCoordy,\n  auxCoordz, FreeSurface, volume, LevelSetDiff_Squared, LevelSetDiff, dist, Min_dist;\n  unsigned short iDim;\n  unsigned long iPoint, jPoint, iVertex, jVertex, nVertex_LevelSet, iEdge;\n  ifstream index_file;\n  ofstream LevelSet_file;\n  string text_line;\n  int rank = MASTER_NODE;\n  char cstr[200], buffer[50];\n  \n  unsigned short nDim = geometry->GetnDim();\n  unsigned long iExtIter = config->GetExtIter();\n  \n#ifndef HAVE_MPI\n  \n  /*--- Identification of the 0 level set points and coordinates ---*/\n  nVertex_LevelSet = 0;\n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    iPoint = geometry->edge[iEdge]->GetNode(0); LevelSet_i = node[iPoint]->GetSolution(nDim+1);\n    jPoint = geometry->edge[iEdge]->GetNode(1); LevelSet_j = node[jPoint]->GetSolution(nDim+1);\n    if (LevelSet_i*LevelSet_j < 0.0) nVertex_LevelSet ++;\n  }\n  \n  /*--- Allocate vector of boundary coordinates ---*/\n  Coord_LevelSet = new su2double* [nVertex_LevelSet];\n  for (iVertex = 0; iVertex < nVertex_LevelSet; iVertex++)\n    Coord_LevelSet[iVertex] = new su2double [nDim];\n  \n  /*--- Get coordinates of the points of the surface ---*/\n  nVertex_LevelSet = 0;\n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    iPoint = geometry->edge[iEdge]->GetNode(0); LevelSet_i = node[iPoint]->GetSolution(nDim+1); iCoord = geometry->node[iPoint]->GetCoord();\n    jPoint = geometry->edge[iEdge]->GetNode(1); LevelSet_j = node[jPoint]->GetSolution(nDim+1); jCoord = geometry->node[jPoint]->GetCoord();\n    if (LevelSet_i*LevelSet_j < 0.0) {\n      for (iDim = 0; iDim < nDim; iDim++)\n        Coord_LevelSet[nVertex_LevelSet][iDim] = iCoord[iDim]-LevelSet_i*(jCoord[iDim]-iCoord[iDim])/(LevelSet_j-LevelSet_i);\n      nVertex_LevelSet++;\n    }\n  }\n  \n#else\n  \n  int nProcessor, iProcessor;\n  unsigned long *Buffer_Send_nVertex = NULL, *Buffer_Receive_nVertex = NULL,\n  nLocalVertex_LevelSet = 0, nGlobalVertex_LevelSet = 0, MaxLocalVertex_LevelSet = 0, nBuffer;\n  su2double *Buffer_Send_Coord = NULL, *Buffer_Receive_Coord = NULL;\n  \n  MPI_Comm_size(MPI_COMM_WORLD, &nProcessor);\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  \n  Buffer_Send_nVertex = new unsigned long [1];\n  Buffer_Receive_nVertex = new unsigned long [nProcessor];\n  \n  nLocalVertex_LevelSet = 0;\n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    iPoint = geometry->edge[iEdge]->GetNode(0); LevelSet_i = node[iPoint]->GetSolution(nDim+1);\n    jPoint = geometry->edge[iEdge]->GetNode(1); LevelSet_j = node[jPoint]->GetSolution(nDim+1);\n    if (LevelSet_i*LevelSet_j < 0.0) nLocalVertex_LevelSet ++;\n  }\n  \n  Buffer_Send_nVertex[0] = nLocalVertex_LevelSet;\n  \n  SU2_MPI::Allreduce(&nLocalVertex_LevelSet, &nGlobalVertex_LevelSet, 1, MPI_UNSIGNED_LONG, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&nLocalVertex_LevelSet, &MaxLocalVertex_LevelSet, 1, MPI_UNSIGNED_LONG, MPI_MAX, MPI_COMM_WORLD);\n  SU2_MPI::Allgather(Buffer_Send_nVertex, 1, MPI_UNSIGNED_LONG, Buffer_Receive_nVertex, 1, MPI_UNSIGNED_LONG, MPI_COMM_WORLD);\n  \n  nBuffer = MaxLocalVertex_LevelSet*nDim;\n  Buffer_Send_Coord = new su2double [nBuffer];\n  Buffer_Receive_Coord = new su2double [nProcessor*nBuffer];\n  \n  for (iVertex = 0; iVertex < MaxLocalVertex_LevelSet; iVertex++)\n    for (iDim = 0; iDim < nDim; iDim++)\n      Buffer_Send_Coord[iVertex*nDim+iDim] = 0.0;\n  \n  nLocalVertex_LevelSet = 0;\n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    iPoint = geometry->edge[iEdge]->GetNode(0); LevelSet_i = node[iPoint]->GetSolution(nDim+1); iCoord = geometry->node[iPoint]->GetCoord();\n    jPoint = geometry->edge[iEdge]->GetNode(1); LevelSet_j = node[jPoint]->GetSolution(nDim+1); jCoord = geometry->node[jPoint]->GetCoord();\n    \n    if (LevelSet_i*LevelSet_j < 0.0) {\n      for (iDim = 0; iDim < nDim; iDim++)\n        Buffer_Send_Coord[nLocalVertex_LevelSet*nDim+iDim] = iCoord[iDim]-LevelSet_i*(jCoord[iDim]-iCoord[iDim])/(LevelSet_j-LevelSet_i);\n      nLocalVertex_LevelSet++;\n    }\n  }\n  \n  SU2_MPI::Allgather(Buffer_Send_Coord, nBuffer, MPI_DOUBLE, Buffer_Receive_Coord, nBuffer, MPI_DOUBLE, MPI_COMM_WORLD);\n  \n  /*--- Identification of the 0 level set points and coordinates ---*/\n  nVertex_LevelSet = 0;\n  for (iProcessor = 0; iProcessor < nProcessor; iProcessor++)\n    nVertex_LevelSet += Buffer_Receive_nVertex[iProcessor];\n  \n  /*--- Allocate vector of boundary coordinates ---*/\n  Coord_LevelSet = new su2double* [nVertex_LevelSet];\n  for (iVertex = 0; iVertex < nVertex_LevelSet; iVertex++)\n    Coord_LevelSet[iVertex] = new su2double [nDim];\n  \n  /*--- Set the value of the coordinates at the level set zero ---*/\n  nVertex_LevelSet = 0;\n  for (iProcessor = 0; iProcessor < nProcessor; iProcessor++)\n    for (iVertex = 0; iVertex < Buffer_Receive_nVertex[iProcessor]; iVertex++) {\n      for (iDim = 0; iDim < nDim; iDim++)\n        Coord_LevelSet[nVertex_LevelSet][iDim] = Buffer_Receive_Coord[(iProcessor*MaxLocalVertex_LevelSet+iVertex)*nDim+iDim];\n      nVertex_LevelSet++;\n    }\n  \n  delete [] Buffer_Send_Coord;\n  delete [] Buffer_Receive_Coord;\n  delete [] Buffer_Send_nVertex;\n  delete [] Buffer_Receive_nVertex;\n  \n#endif\n  \n  /*--- Get coordinates of the points and compute distances to the surface ---*/\n  for (iPoint = 0; iPoint < nPoint; iPoint++) {\n    coord = geometry->node[iPoint]->GetCoord();\n    \n    /*--- Compute the min distance ---*/\n    Min_dist = 1E20;\n    for (iVertex = 0; iVertex < nVertex_LevelSet; iVertex++) {\n      \n      dist2 = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        dist2 += (coord[iDim] - Coord_LevelSet[iVertex][iDim])*(coord[iDim]-Coord_LevelSet[iVertex][iDim]);\n      dist = sqrt(dist2);\n      if (dist < Min_dist) { Min_dist = dist; }\n      \n    }\n    \n    /*--- Compute the sign using the current solution ---*/\n    su2double NumberSign = 1.0;\n    if (node[iPoint]->GetSolution(0) != 0.0)\n      NumberSign = node[iPoint]->GetSolution(nDim+1)/fabs(node[iPoint]->GetSolution(nDim+1));\n    \n    /*--- Store the value of the Level Set and the Distance (primitive variables) ---*/\n    node[iPoint]->SetPrimitive(nDim+5, node[iPoint]->GetSolution(nDim+1));\n    node[iPoint]->SetPrimitive(nDim+6, Min_dist*NumberSign);\n    \n  }\n  \n  if (config->GetIntIter() == 0) {\n    \n    /*--- Order the arrays (x Coordinate, y Coordinate, z Coordiante) ---*/\n    for (iVertex = 0; iVertex < nVertex_LevelSet; iVertex++) {\n      for (jVertex = 0; jVertex < nVertex_LevelSet - 1 - iVertex; jVertex++) {\n        if (Coord_LevelSet[jVertex][0] > Coord_LevelSet[jVertex+1][0]) {\n          auxCoordx = Coord_LevelSet[jVertex][0]; Coord_LevelSet[jVertex][0] = Coord_LevelSet[jVertex+1][0]; Coord_LevelSet[jVertex+1][0] = auxCoordx;\n          auxCoordy = Coord_LevelSet[jVertex][1]; Coord_LevelSet[jVertex][1] = Coord_LevelSet[jVertex+1][1]; Coord_LevelSet[jVertex+1][1] = auxCoordy;\n          if (nDim == 3) { auxCoordz = Coord_LevelSet[jVertex][2]; Coord_LevelSet[jVertex][2] = Coord_LevelSet[jVertex+1][2]; Coord_LevelSet[jVertex+1][2] = auxCoordz; }\n        }\n      }\n    }\n    \n    /*--- Get coordinates of the points and compute distances to the surface ---*/\n    FreeSurface = 0.0;\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      coord = geometry->node[iPoint]->GetCoord();\n      volume = geometry->node[iPoint]->GetVolume();\n      LevelSetDiff = (node[iPoint]->GetSolution(nDim+1) - coord[nDim-1]);\n      LevelSetDiff_Squared = LevelSetDiff*LevelSetDiff;\n      FreeSurface += 0.5*LevelSetDiff_Squared*volume;\n      \n      node[iPoint]->SetDiffLevelSet(LevelSetDiff);\n      \n    }\n    \n    if ((rank == MASTER_NODE) && (iExtIter % config->GetWrt_Sol_Freq_DualTime() == 0)) {\n      \n      /*--- Write the Level Set distribution, the target level set---*/\n      LevelSet_file.precision(15);\n      \n      /*--- Write file name with extension ---*/\n      strcpy (cstr, \"LevelSet\");\n      if (config->GetUnsteady_Simulation()) {\n        if ((SU2_TYPE::Int(iExtIter) >= 0) && (SU2_TYPE::Int(iExtIter) < 10)) SPRINTF (buffer, \"_0000%d.dat\", SU2_TYPE::Int(iExtIter));\n        if ((SU2_TYPE::Int(iExtIter) >= 10) && (SU2_TYPE::Int(iExtIter) < 100)) SPRINTF (buffer, \"_000%d.dat\", SU2_TYPE::Int(iExtIter));\n        if ((SU2_TYPE::Int(iExtIter) >= 100) && (SU2_TYPE::Int(iExtIter) < 1000)) SPRINTF (buffer, \"_00%d.dat\", SU2_TYPE::Int(iExtIter));\n        if ((SU2_TYPE::Int(iExtIter) >= 1000) && (SU2_TYPE::Int(iExtIter) < 10000)) SPRINTF (buffer, \"_0%d.dat\", SU2_TYPE::Int(iExtIter));\n        if (SU2_TYPE::Int(iExtIter) >= 10000) SPRINTF (buffer, \"_%d.dat\", SU2_TYPE::Int(iExtIter));\n      }\n      else {\n        SPRINTF (buffer, \".dat\");\n      }\n      \n      strcat(cstr, buffer);\n      \n      LevelSet_file.open(cstr, ios::out);\n      LevelSet_file << \"TITLE = \\\"SU2 Free surface simulation\\\"\" << endl;\n      if (nDim == 2) LevelSet_file << \"VARIABLES = \\\"x coord\\\",\\\"y coord\\\"\" << endl;\n      if (nDim == 3) LevelSet_file << \"VARIABLES = \\\"x coord\\\",\\\"y coord\\\",\\\"z coord\\\"\" << endl;\n      LevelSet_file << \"ZONE T= \\\"Free Surface\\\"\" << endl;\n      \n      for (iVertex = 0; iVertex < nVertex_LevelSet; iVertex++) {\n        if (nDim == 2) LevelSet_file << scientific << Coord_LevelSet[iVertex][0] << \", \" << Coord_LevelSet[iVertex][1] << endl;\n        if (nDim == 3) LevelSet_file << scientific << Coord_LevelSet[iVertex][0] << \", \" << Coord_LevelSet[iVertex][1] << \", \" << Coord_LevelSet[iVertex][2] << endl;\n      }\n      LevelSet_file.close();\n      \n    }\n    \n    /*--- Store the value of the free surface coefficient ---*/\n    SetTotal_CFreeSurface(FreeSurface);\n    \n    delete [] xCoord;\n    delete [] yCoord;\n    if (nDim == 3) delete [] zCoord;\n    \n  }\n  \n  /*--- Deallocate vector of boundary coordinates ---*/\n  for (iVertex = 0; iVertex < nVertex_LevelSet; iVertex++)\n    delete Coord_LevelSet[iVertex];\n  delete [] Coord_LevelSet;\n  \n}\n\nCNSSolver::CNSSolver(void) : CEulerSolver() {\n  \n  /*--- Basic array initialization ---*/\n  \n  CDrag_Visc = NULL; CLift_Visc = NULL; CSideForce_Visc = NULL; CEff_Visc = NULL;\n  CMx_Visc = NULL;   CMy_Visc = NULL;   CMz_Visc = NULL;\n  CFx_Visc = NULL;   CFy_Visc = NULL;   CFz_Visc = NULL;\n  \n  ForceViscous = NULL; MomentViscous = NULL; CSkinFriction = NULL;\n  \n  /*--- Surface based array initialization ---*/\n  \n  Surface_CLift_Visc = NULL; Surface_CDrag_Visc = NULL; Surface_CSideForce_Visc = NULL; Surface_CEff_Visc = NULL;\n  Surface_CFx_Visc = NULL;   Surface_CFy_Visc = NULL;   Surface_CFz_Visc = NULL;\n  Surface_CMx_Visc = NULL;   Surface_CMy_Visc = NULL;   Surface_CMz_Visc = NULL;\n  \n  /*--- Rotorcraft simulation array initialization ---*/\n  \n  CMerit_Visc = NULL; CT_Visc = NULL; CQ_Visc = NULL;\n  \n}\n\nCNSSolver::CNSSolver(CGeometry *geometry, CConfig *config, unsigned short iMesh) : CEulerSolver() {\n  \n  unsigned long iPoint, index, counter_local = 0, counter_global = 0, iVertex;\n  unsigned short iVar, iDim, iMarker, nLineLets;\n  su2double Density, Velocity2, Pressure, Temperature, dull_val, StaticEnergy;\n  int Unst_RestartIter;\n  ifstream restart_file;\n  unsigned short iZone = config->GetiZone();\n  unsigned short nZone = geometry->GetnZone();\n  bool restart = (config->GetRestart() || config->GetRestart_Flow());\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool dual_time = ((config->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n                    (config->GetUnsteady_Simulation() == DT_STEPPING_2ND));\n\tbool time_stepping = config->GetUnsteady_Simulation() == TIME_STEPPING;\n  bool roe_turkel = (config->GetKind_Upwind_Flow() == TURKEL);\n  bool adjoint = config->GetAdjoint();\n  string filename = config->GetSolution_FlowFileName();\n  \n  unsigned short direct_diff = config->GetDirectDiff();\n  unsigned short nMarkerTurboPerf = config->Get_nMarkerTurboPerf();\n  \n  int rank = MASTER_NODE;\n#ifdef HAVE_MPI\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  /*--- Array initialization ---*/\n  \n  CDrag_Visc = NULL; CLift_Visc = NULL; CSideForce_Visc = NULL; CEff_Visc = NULL;\n  CMx_Visc = NULL;   CMy_Visc = NULL;   CMz_Visc = NULL;\n  CFx_Visc = NULL;   CFy_Visc = NULL;   CFz_Visc = NULL;\n  \n  Surface_CLift_Visc = NULL; Surface_CDrag_Visc = NULL; Surface_CSideForce_Visc = NULL; Surface_CEff_Visc = NULL;\n  Surface_CFx_Visc = NULL;   Surface_CFy_Visc = NULL;   Surface_CFz_Visc = NULL;\n  Surface_CMx_Visc = NULL;   Surface_CMy_Visc = NULL;   Surface_CMz_Visc = NULL;\n  \n  CMerit_Visc = NULL;      CT_Visc = NULL;      CQ_Visc = NULL;\n  MaxHeatFlux_Visc = NULL; ForceViscous = NULL; MomentViscous = NULL;\n  CSkinFriction = NULL;    Cauchy_Serie = NULL; Heat_Visc = NULL;\n  \n  /*--- Set the gamma value ---*/\n  \n  Gamma = config->GetGamma();\n  Gamma_Minus_One = Gamma - 1.0;\n  \n  /*--- Define geometry constants in the solver structure\n   Compressible flow, primitive variables (T, vx, vy, vz, P, rho, h, c, lamMu, EddyMu, ThCond, Cp)\n   Incompressible flow, primitive variables (P, vx, vy, vz, rho, beta, lamMu, EddyMu),\n   FreeSurface Incompressible flow, primitive variables (P, vx, vy, vz, rho, beta, lamMu, EddyMu, LevelSet, Dist),\n   ---*/\n  \n  nDim = geometry->GetnDim();\n  \n  if (incompressible) { nVar = nDim+1; nPrimVar = nDim+5; nPrimVarGrad = nDim+3; }\n  if (freesurface)    { nVar = nDim+2; nPrimVar = nDim+7; nPrimVarGrad = nDim+6; }\n  if (compressible)   { nVar = nDim+2;\n    nPrimVar = nDim+9; nPrimVarGrad = nDim+4;\n    nSecondaryVar = 8; nSecondaryVarGrad = 2;\n  }\n  \n  nMarker      = config->GetnMarker_All();\n  nPoint       = geometry->GetnPoint();\n  nPointDomain = geometry->GetnPointDomain();\n  \n  /*--- Perform the non-dimensionalization for the flow equations using the\n   specified reference values. ---*/\n  \n  SetNondimensionalization(geometry, config, iMesh);\n  \n  /*--- Allocate the node variables ---*/\n  node = new CVariable*[nPoint];\n  \n  /*--- Define some auxiliar vector related with the residual ---*/\n  \n  Residual      = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Residual[iVar]      = 0.0;\n  Residual_RMS  = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Residual_RMS[iVar]  = 0.0;\n  Residual_Max  = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Residual_Max[iVar]  = 0.0;\n  Residual_i    = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Residual_i[iVar]    = 0.0;\n  Residual_j    = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Residual_j[iVar]    = 0.0;\n  Res_Conv      = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Res_Conv[iVar]      = 0.0;\n  Res_Visc      = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Res_Visc[iVar]      = 0.0;\n  Res_Sour      = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Res_Sour[iVar]      = 0.0;\n  \n  /*--- Define some structures for locating max residuals ---*/\n  \n  Point_Max     = new unsigned long[nVar];  for (iVar = 0; iVar < nVar; iVar++) Point_Max[iVar]     = 0;\n  Point_Max_Coord = new su2double*[nVar];\n  for (iVar = 0; iVar < nVar; iVar++) {\n    Point_Max_Coord[iVar] = new su2double[nDim];\n    for (iDim = 0; iDim < nDim; iDim++) Point_Max_Coord[iVar][iDim] = 0.0;\n  }\n  \n  /*--- Define some auxiliary vectors related to the solution ---*/\n  \n  Solution   = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Solution[iVar]   = 0.0;\n  Solution_i = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Solution_i[iVar] = 0.0;\n  Solution_j = new su2double[nVar]; for (iVar = 0; iVar < nVar; iVar++) Solution_j[iVar] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the geometry ---*/\n  \n  Vector   = new su2double[nDim]; for (iDim = 0; iDim < nDim; iDim++) Vector[iDim]   = 0.0;\n  Vector_i = new su2double[nDim]; for (iDim = 0; iDim < nDim; iDim++) Vector_i[iDim] = 0.0;\n  Vector_j = new su2double[nDim]; for (iDim = 0; iDim < nDim; iDim++) Vector_j[iDim] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the primitive solution ---*/\n  \n  Primitive   = new su2double[nPrimVar]; for (iVar = 0; iVar < nPrimVar; iVar++) Primitive[iVar]   = 0.0;\n  Primitive_i = new su2double[nPrimVar]; for (iVar = 0; iVar < nPrimVar; iVar++) Primitive_i[iVar] = 0.0;\n  Primitive_j = new su2double[nPrimVar]; for (iVar = 0; iVar < nPrimVar; iVar++) Primitive_j[iVar] = 0.0;\n  \n  /*--- Define some auxiliary vectors related to the Secondary solution ---*/\n  \n  if (compressible){\n    Secondary   = new su2double[nSecondaryVar]; for (iVar = 0; iVar < nSecondaryVar; iVar++) Secondary[iVar]   = 0.0;\n    Secondary_i = new su2double[nSecondaryVar]; for (iVar = 0; iVar < nSecondaryVar; iVar++) Secondary_i[iVar] = 0.0;\n    Secondary_j = new su2double[nSecondaryVar]; for (iVar = 0; iVar < nSecondaryVar; iVar++) Secondary_j[iVar] = 0.0;\n  }\n  \n  /*--- Define some auxiliar vector related with the undivided lapalacian computation ---*/\n  \n  if (config->GetKind_ConvNumScheme_Flow() == SPACE_CENTERED) {\n    iPoint_UndLapl = new su2double [nPoint];\n    jPoint_UndLapl = new su2double [nPoint];\n  }\n  \n  /*--- Define some auxiliary vectors related to low-speed preconditioning ---*/\n  \n  if (roe_turkel) {\n    LowMach_Precontioner = new su2double* [nVar];\n    for (iVar = 0; iVar < nVar; iVar ++)\n      LowMach_Precontioner[iVar] = new su2double[nVar];\n  }\n  \n  /*--- Initialize the solution and right hand side vectors for storing\n   the residuals and updating the solution (always needed even for\n   explicit schemes). ---*/\n  \n  LinSysSol.Initialize(nPoint, nPointDomain, nVar, 0.0);\n  LinSysRes.Initialize(nPoint, nPointDomain, nVar, 0.0);\n  \n  /*--- Jacobians and vector structures for implicit computations ---*/\n  \n  if (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT) {\n    \n    Jacobian_i = new su2double* [nVar];\n    Jacobian_j = new su2double* [nVar];\n    for (iVar = 0; iVar < nVar; iVar++) {\n      Jacobian_i[iVar] = new su2double [nVar];\n      Jacobian_j[iVar] = new su2double [nVar];\n    }\n    \n    if (rank == MASTER_NODE) cout << \"Initialize Jacobian structure (Navier-Stokes). MG level: \" << iMesh <<\".\" << endl;\n    Jacobian.Initialize(nPoint, nPointDomain, nVar, nVar, true, geometry, config);\n    \n    if ((config->GetKind_Linear_Solver_Prec() == LINELET) ||\n        (config->GetKind_Linear_Solver() == SMOOTHER_LINELET)) {\n      nLineLets = Jacobian.BuildLineletPreconditioner(geometry, config);\n      if (rank == MASTER_NODE) cout << \"Compute linelet structure. \" << nLineLets << \" elements in each line (average).\" << endl;\n    }\n    \n  }\n  \n  else {\n    if (rank == MASTER_NODE)\n      cout << \"Explicit scheme. No Jacobian structure (Navier-Stokes). MG level: \" << iMesh <<\".\" << endl;\n  }\n  \n  /*--- Define some auxiliary vectors for computing flow variable\n   gradients by least squares, S matrix := inv(R)*traspose(inv(R)),\n   c vector := transpose(WA)*(Wb) ---*/\n  \n  if (config->GetKind_Gradient_Method() == WEIGHTED_LEAST_SQUARES) {\n    \n    Smatrix = new su2double* [nDim];\n    for (iDim = 0; iDim < nDim; iDim++)\n      Smatrix[iDim] = new su2double [nDim];\n    \n    cvector = new su2double* [nPrimVarGrad];\n    for (iVar = 0; iVar < nPrimVarGrad; iVar++)\n      cvector[iVar] = new su2double [nDim];\n  }\n  \n  /*--- Store the value of the characteristic primitive variables at the boundaries ---*/\n  \n  CharacPrimVar = new su2double** [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    CharacPrimVar[iMarker] = new su2double* [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      CharacPrimVar[iMarker][iVertex] = new su2double [nPrimVar];\n      for (iVar = 0; iVar < nPrimVar; iVar++) {\n        CharacPrimVar[iMarker][iVertex][iVar] = 0.0;\n      }\n    }\n  }\n  \n  /*--- Inviscid force definition and coefficient in all the markers ---*/\n  \n  CPressure = new su2double* [nMarker];\n  CPressureTarget = new su2double* [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    CPressure[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    CPressureTarget[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      CPressure[iMarker][iVertex] = 0.0;\n      CPressureTarget[iMarker][iVertex] = 0.0;\n    }\n  }\n  \n  /*--- Heat flux in all the markers ---*/\n  \n  HeatFlux = new su2double* [nMarker];\n  HeatFluxTarget = new su2double* [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    HeatFlux[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    HeatFluxTarget[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      HeatFlux[iMarker][iVertex] = 0.0;\n      HeatFluxTarget[iMarker][iVertex] = 0.0;\n    }\n  }\n  \n  /*--- Y plus in all the markers ---*/\n  \n  YPlus = new su2double* [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    YPlus[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      YPlus[iMarker][iVertex] = 0.0;\n    }\n  }\n  \n  /*--- Skin friction in all the markers ---*/\n  \n  CSkinFriction = new su2double* [nMarker];\n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    CSkinFriction[iMarker] = new su2double [geometry->nVertex[iMarker]];\n    for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n      CSkinFriction[iMarker][iVertex] = 0.0;\n    }\n  }\n  \n  /*--- Non dimensional coefficients ---*/\n  \n  ForceInviscid  = new su2double[3];\n  MomentInviscid = new su2double[3];\n  CDrag_Inv      = new su2double[nMarker];\n  CLift_Inv      = new su2double[nMarker];\n  CSideForce_Inv = new su2double[nMarker];\n  CMx_Inv        = new su2double[nMarker];\n  CMy_Inv        = new su2double[nMarker];\n  CMz_Inv        = new su2double[nMarker];\n  CEff_Inv       = new su2double[nMarker];\n  CFx_Inv        = new su2double[nMarker];\n  CFy_Inv        = new su2double[nMarker];\n  CFz_Inv        = new su2double[nMarker];\n  \n  ForceViscous     = new su2double[3];\n  MomentViscous    = new su2double[3];\n  CDrag_Visc       = new su2double[nMarker];\n  CLift_Visc       = new su2double[nMarker];\n  CSideForce_Visc  = new su2double[nMarker];\n  CMx_Visc         = new su2double[nMarker];\n  CMy_Visc         = new su2double[nMarker];\n  CMz_Visc         = new su2double[nMarker];\n  CEff_Visc        = new su2double[nMarker];\n  CFx_Visc         = new su2double[nMarker];\n  CFy_Visc         = new su2double[nMarker];\n  CFz_Visc         = new su2double[nMarker];\n  \n  Surface_CLift_Inv      = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CDrag_Inv      = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CSideForce_Inv = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CEff_Inv       = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFx_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFy_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFz_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMx_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMy_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMz_Inv        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CLift          = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CDrag          = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CSideForce     = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CEff           = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFx            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFy            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFz            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMx            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMy            = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMz            = new su2double[config->GetnMarker_Monitoring()];\n  \n  Surface_CLift_Visc      = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CDrag_Visc      = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CSideForce_Visc = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CEff_Visc       = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFx_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFy_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CFz_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMx_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMy_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  Surface_CMz_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  \n  /*--- Rotational coefficients ---*/\n  \n  CMerit_Inv = new su2double[nMarker];\n  CT_Inv     = new su2double[nMarker];\n  CQ_Inv     = new su2double[nMarker];\n  \n  CMerit_Visc = new su2double[nMarker];\n  CT_Visc     = new su2double[nMarker];\n  CQ_Visc     = new su2double[nMarker];\n  \n  /*--- Heat based coefficients ---*/\n  \n  Heat_Visc        = new su2double[nMarker];\n  MaxHeatFlux_Visc = new su2double[nMarker];\n  \n  /*--- Supersonic coefficients ---*/\n  \n  CEquivArea_Inv   = new su2double[nMarker];\n  CNearFieldOF_Inv = new su2double[nMarker];\n  \n  /*--- Engine simulation ---*/\n  \n  Inflow_MassFlow     = new su2double[nMarker];\n  Inflow_Pressure     = new su2double[nMarker];\n  Inflow_Mach         = new su2double[nMarker];\n  Inflow_Area         = new su2double[nMarker];\n  \n  Exhaust_MassFlow    = new su2double[nMarker];\n  Exhaust_Pressure    = new su2double[nMarker];\n  Exhaust_Temperature = new su2double[nMarker];\n  Exhaust_Area        = new su2double[nMarker];\n  \n  Bleed_MassFlow      = new su2double[nMarker];\n  Bleed_Pressure      = new su2double[nMarker];\n  Bleed_Temperature   = new su2double[nMarker];\n  Bleed_Area          = new su2double[nMarker];\n  \n  /*--- Init total coefficients ---*/\n  \n  Total_CDrag   = 0.0;\tTotal_CLift        = 0.0;  Total_CSideForce   = 0.0;\n  Total_CMx     = 0.0;\tTotal_CMy          = 0.0;  Total_CMz          = 0.0;\n  Total_CEff    = 0.0;\tTotal_CEquivArea   = 0.0;  Total_CNearFieldOF = 0.0;\n  Total_CFx     = 0.0;\tTotal_CFy          = 0.0;  Total_CFz          = 0.0;\n  Total_CT      = 0.0;\tTotal_CQ           = 0.0;  Total_CMerit       = 0.0;\n  Total_MaxHeat = 0.0;  Total_Heat         = 0.0;\n  Total_CpDiff  = 0.0;  Total_HeatFluxDiff = 0.0;\n  \n  /*--- Read farfield conditions from config ---*/\n  \n  Density_Inf     = config->GetDensity_FreeStreamND();\n  Pressure_Inf    = config->GetPressure_FreeStreamND();\n  Velocity_Inf    = config->GetVelocity_FreeStreamND();\n  Energy_Inf      = config->GetEnergy_FreeStreamND();\n  Temperature_Inf = config->GetTemperature_FreeStreamND();\n  Viscosity_Inf   = config->GetViscosity_FreeStreamND();\n  Mach_Inf        = config->GetMach();\n  Prandtl_Lam     = config->GetPrandtl_Lam();\n  Prandtl_Turb    = config->GetPrandtl_Turb();\n  Tke_Inf         = config->GetTke_FreeStreamND();\n  \n  /*--- Initialize the secondary values for direct derivative approxiations ---*/\n  \n  switch(direct_diff){\n    case NO_DERIVATIVE:\n      break;\n    case D_DENSITY:\n      SU2_TYPE::SetDerivative(Density_Inf, 1.0);\n      break;\n    case D_PRESSURE:\n      SU2_TYPE::SetDerivative(Pressure_Inf, 1.0);\n      break;\n    case D_TEMPERATURE:\n      SU2_TYPE::SetDerivative(Temperature_Inf, 1.0);\n      break;\n    case D_VISCOSITY:\n      SU2_TYPE::SetDerivative(Viscosity_Inf, 1.0);\n      break;\n    case D_MACH: case D_AOA:\n    case D_SIDESLIP: case D_REYNOLDS:\n    case D_TURB2LAM: case D_DESIGN:\n      /*--- Already done in postprocessing of config ---*/\n      break;\n    default:\n      break;\n  }\n  \n  /*--- Initializate fan face pressure, fan face mach number, and mass flow rate ---*/\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    Inflow_MassFlow[iMarker]     = 0.0;\n    Inflow_Mach[iMarker]         = Mach_Inf;\n    Inflow_Pressure[iMarker]     = Pressure_Inf;\n    Inflow_Area[iMarker]         = 0.0;\n    \n    Exhaust_MassFlow[iMarker]    = 0.0;\n    Exhaust_Temperature[iMarker] = Temperature_Inf;\n    Exhaust_Pressure[iMarker]    = Pressure_Inf;\n    Exhaust_Area[iMarker]        = 0.0;\n    \n    Bleed_MassFlow[iMarker]      = 0.0;\n    Bleed_Temperature[iMarker]   = Temperature_Inf;\n    Bleed_Pressure[iMarker]      = Pressure_Inf;\n    Bleed_Area[iMarker]          = 0.0;\n  }\n  \n  /*--- Initializate quantities for the mixing process*/\n  \n  AveragedVelocity = new su2double* [nMarker];\n  AveragedNormal = new su2double* [nMarker];\n  AveragedGridVel = new su2double* [nMarker];\n  AveragedFlux = new su2double* [nMarker];\n  TotalFlux = new su2double* [nMarker];\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    AveragedVelocity[iMarker] = new su2double [nDim];\n    AveragedNormal[iMarker] = new su2double [nDim];\n    AveragedGridVel[iMarker] = new su2double [nDim];\n    for (iDim = 0; iDim < nDim; iDim++) {\n      AveragedVelocity[iMarker][iDim] = 0.0;\n      AveragedNormal[iMarker][iDim] = 0.0;\n      AveragedGridVel[iMarker][iDim] = 0.0;\n    }\n  }\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    AveragedFlux[iMarker] = new su2double [nVar];\n    TotalFlux[iMarker] = new su2double [nVar];\n    for (iVar = 0; iVar < nVar; iVar++) {\n      AveragedFlux[iMarker][iVar] = 0.0;\n      TotalFlux[iMarker][iVar] = 0.0;\n    }\n  }\n  \n  AveragedNormalVelocity = new su2double[nMarker];\n  AveragedTangVelocity = new su2double[nMarker];\n  ExtAveragedNormalVelocity = new su2double[nMarker];\n  ExtAveragedTangVelocity = new su2double[nMarker];\n  MassFlow= new su2double[nMarker];\n  FlowAngle= new su2double[nMarker];\n  AveragedEnthalpy  = new su2double[nMarker];\n  AveragedPressure  = new su2double[nMarker];\n  AveragedTotPressure  = new su2double[nMarker];\n  AveragedTotTemperature  = new su2double[nMarker];\n  ExtAveragedTotPressure  = new su2double[nMarker];\n  ExtAveragedTotTemperature  = new su2double[nMarker];\n  ExtAveragedPressure  = new su2double[nMarker];\n  AveragedDensity   = new su2double[nMarker];\n  ExtAveragedDensity   = new su2double[nMarker];\n  AveragedSoundSpeed= new su2double[nMarker];\n  AveragedEntropy   = new su2double[nMarker];\n  AveragedTangGridVelocity = new su2double[nMarker];\n  AveragedMach = new su2double[nMarker];\n  AveragedNormalMach = new su2double[nMarker];\n  AveragedTangMach = new su2double[nMarker];\n  \n  \n  /*--- Initializate quantities for turboperformace ---*/\n  \n  TotalStaticEfficiency = new su2double[nMarkerTurboPerf];\n  TotalTotalEfficiency = new su2double[nMarkerTurboPerf];\n  KineticEnergyLoss= new su2double[nMarkerTurboPerf];\n  TotalPressureLoss= new su2double[nMarkerTurboPerf];\n  MassFlowIn= new su2double[nMarkerTurboPerf];\n  MassFlowOut= new su2double[nMarkerTurboPerf];\n  FlowAngleIn= new su2double[nMarkerTurboPerf];\n  FlowAngleOut= new su2double[nMarkerTurboPerf];\n  EulerianWork= new su2double[nMarkerTurboPerf];\n  TotalEnthalpyIn= new su2double[nMarkerTurboPerf];\n  PressureRatio= new su2double[nMarkerTurboPerf];\n  PressureOut= new su2double[nMarkerTurboPerf];\n  EnthalpyOut= new su2double[nMarkerTurboPerf];\n  MachIn= new su2double[nMarkerTurboPerf];\n  MachOut= new su2double[nMarkerTurboPerf];\n  NormalMachIn= new su2double[nMarkerTurboPerf];\n  NormalMachOut= new su2double[nMarkerTurboPerf];\n  VelocityOutIs= new su2double[nMarkerTurboPerf];\n  \n  for (iMarker = 0; iMarker < nMarkerTurboPerf; iMarker++){\n    TotalStaticEfficiency[iMarker]= 0.0;\n    TotalTotalEfficiency[iMarker]= 0.0;\n    KineticEnergyLoss[iMarker]= 0.0;\n    TotalPressureLoss[iMarker]= 0.0;\n    MassFlowIn[iMarker]= 0.0;\n    MassFlowOut[iMarker]= 0.0;\n    FlowAngleIn[iMarker]= 0.0;\n    FlowAngleOut[iMarker]= 0.0;\n    EulerianWork[iMarker]= 0.0;\n    TotalEnthalpyIn[iMarker]= 0.0;\n    PressureRatio[iMarker]= 0.0;\n    PressureOut[iMarker]= 0.0;\n    EnthalpyOut[iMarker]= 0.0;\n    MachIn[iMarker]= 0.0;\n    MachOut[iMarker]= 0.0;\n    NormalMachIn[iMarker]= 0.0;\n    NormalMachOut[iMarker]= 0.0;\n    VelocityOutIs[iMarker]= 0.0;\n  }\n  \n  \n  /*--- Initialize the cauchy critera array for fixed CL mode ---*/\n  \n  if (config->GetFixed_CL_Mode())\n    \n    Cauchy_Serie = new su2double [config->GetCauchy_Elems()+1];\n  \n  /*--- Check for a restart and set up the variables at each node\n   appropriately. Coarse multigrid levels will be intitially set to\n   the farfield values bc the solver will immediately interpolate\n   the solution from the finest mesh to the coarser levels. ---*/\n  \n  if (!restart || (iMesh != MESH_0)) {\n    \n    /*--- Restart the solution from the free-stream state ---*/\n    \n    for (iPoint = 0; iPoint < nPoint; iPoint++)\n      node[iPoint] = new CNSVariable(Density_Inf, Velocity_Inf, Energy_Inf, nDim, nVar, config);\n    \n  }\n  \n  else {\n    \n    /*--- Modify file name for an unsteady restart ---*/\n\n    if (nZone >1)\n    \tfilename = config->GetMultizone_FileName(filename, iZone);\n    \n    if (dual_time) {\n      \n      if (adjoint) {\n        Unst_RestartIter = SU2_TYPE::Int(config->GetUnst_AdjointIter()) - 1;\n      } else if (config->GetUnsteady_Simulation() == DT_STEPPING_1ST)\n        Unst_RestartIter = SU2_TYPE::Int(config->GetUnst_RestartIter())-1;\n      else\n        Unst_RestartIter = SU2_TYPE::Int(config->GetUnst_RestartIter())-2;\n      \n      filename = config->GetUnsteady_FileName(filename, Unst_RestartIter);\n      \n    }\n    \n\t\t\n\t\t\n\t\t/*--- Modify file name for a simple unsteady restart ---*/\n\t\t\n\t\tif (time_stepping) {\n\t\t\tif (adjoint) {\n\t\t\t\tUnst_RestartIter = SU2_TYPE::Int(config->GetUnst_AdjointIter()) - 1;\n\t\t\t} else {\n\t\t\t\tUnst_RestartIter = SU2_TYPE::Int(config->GetUnst_RestartIter())-1;\n\t\t\t}\n\t\t\tfilename = config->GetUnsteady_FileName(filename, Unst_RestartIter);\n\t\t}\n    \n    /*--- Open the restart file, throw an error if this fails. ---*/\n    \n    restart_file.open(filename.data(), ios::in);\n    if (restart_file.fail()) {\n      if (rank == MASTER_NODE)\n        cout << \"There is no flow restart file!! \" << filename.data() << \".\"<< endl;\n      exit(EXIT_FAILURE);\n    }\n    \n    /*--- In case this is a parallel simulation, we need to perform the\n     Global2Local index transformation first. ---*/\n    \n    long *Global2Local = new long[geometry->GetGlobal_nPointDomain()];\n    \n    /*--- First, set all indices to a negative value by default ---*/\n    \n    for (iPoint = 0; iPoint < geometry->GetGlobal_nPointDomain(); iPoint++)\n      Global2Local[iPoint] = -1;\n    \n    /*--- Now fill array with the transform values only for local points ---*/\n    \n    for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n      Global2Local[geometry->node[iPoint]->GetGlobalIndex()] = iPoint;\n    \n    /*--- Read all lines in the restart file ---*/\n    \n    long iPoint_Local;\n    unsigned long iPoint_Global_Local = 0, iPoint_Global = 0; string text_line;\n    unsigned short rbuf_NotMatching = 0, sbuf_NotMatching = 0;\n    \n    /*--- The first line is the header ---*/\n    \n    getline (restart_file, text_line);\n    \n    while (getline (restart_file, text_line)) {\n      istringstream point_line(text_line);\n      \n      /*--- Retrieve local index. If this node from the restart file lives\n       on a different processor, the value of iPoint_Local will be -1.\n       Otherwise, the local index for this node on the current processor\n       will be returned and used to instantiate the vars. ---*/\n      \n      if (iPoint_Global >= geometry->GetGlobal_nPointDomain()) { sbuf_NotMatching = 1; break; }\n      \n      iPoint_Local = Global2Local[iPoint_Global];\n      \n      /*--- Load the solution for this node. Note that the first entry\n       on the restart file line is the global index, followed by the\n       node coordinates, and then the conservative variables. ---*/\n      \n      if (iPoint_Local >= 0) {\n        if (compressible) {\n          if (nDim == 2) point_line >> index >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n          if (nDim == 3) point_line >> index >> dull_val >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3] >> Solution[4];\n        }\n        if (incompressible) {\n          if (nDim == 2) point_line >> index >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2];\n          if (nDim == 3) point_line >> index >> dull_val >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n        }\n        if (freesurface) {\n          if (nDim == 2) point_line >> index >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3];\n          if (nDim == 3) point_line >> index >> dull_val >> dull_val >> dull_val >> Solution[0] >> Solution[1] >> Solution[2] >> Solution[3] >> Solution[4];\n        }\n        node[iPoint_Local] = new CNSVariable(Solution, nDim, nVar, config);\n        iPoint_Global_Local++;\n      }\n      iPoint_Global++;\n    }\n    \n    /*--- Detect a wrong solution file ---*/\n    \n    if (iPoint_Global_Local < nPointDomain) { sbuf_NotMatching = 1; }\n    \n#ifndef HAVE_MPI\n    rbuf_NotMatching = sbuf_NotMatching;\n#else\n    SU2_MPI::Allreduce(&sbuf_NotMatching, &rbuf_NotMatching, 1, MPI_UNSIGNED_SHORT, MPI_SUM, MPI_COMM_WORLD);\n#endif\n    \n    if (rbuf_NotMatching != 0) {\n      if (rank == MASTER_NODE) {\n        cout << endl << \"The solution file \" << filename.data() << \" doesn't match with the mesh file!\" << endl;\n        cout << \"It could be empty lines at the end of the file.\" << endl << endl;\n      }\n#ifndef HAVE_MPI\n      exit(EXIT_FAILURE);\n#else\n      MPI_Barrier(MPI_COMM_WORLD);\n      MPI_Abort(MPI_COMM_WORLD,1);\n      MPI_Finalize();\n#endif\n    }\n    \n    /*--- Instantiate the variable class with an arbitrary solution\n     at any halo/periodic nodes. The initial solution can be arbitrary,\n     because a send/recv is performed immediately in the solver. ---*/\n    \n    for (iPoint = nPointDomain; iPoint < nPoint; iPoint++)\n      node[iPoint] = new CNSVariable(Solution, nDim, nVar, config);\n    \n    /*--- Close the restart file ---*/\n    \n    restart_file.close();\n    \n    /*--- Free memory needed for the transformation ---*/\n    \n    delete [] Global2Local;\n    \n  }\n  \n  /*--- Check that the initial solution is physical, report any non-physical nodes ---*/\n  \n  if (compressible) {\n    \n    counter_local = 0;\n    \n    for (iPoint = 0; iPoint < nPoint; iPoint++) {\n      \n      Density = node[iPoint]->GetSolution(0);\n      \n      Velocity2 = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Velocity2 += (node[iPoint]->GetSolution(iDim+1)/Density)*(node[iPoint]->GetSolution(iDim+1)/Density);\n      \n      StaticEnergy= node[iPoint]->GetSolution(nDim+1)/Density - 0.5*Velocity2;\n      \n      FluidModel->SetTDState_rhoe(Density, StaticEnergy);\n      Pressure= FluidModel->GetPressure();\n      Temperature= FluidModel->GetTemperature();\n      \n      /*--- Use the values at the infinity ---*/\n      \n      if ((Pressure < 0.0) || (Density < 0.0) || (Temperature < 0.0)) {\n        Solution[0] = Density_Inf;\n        for (iDim = 0; iDim < nDim; iDim++)\n          Solution[iDim+1] = Velocity_Inf[iDim]*Density_Inf;\n        Solution[nDim+1] = Energy_Inf*Density_Inf;\n        node[iPoint]->SetSolution(Solution);\n        node[iPoint]->SetSolution_Old(Solution);\n        counter_local++;\n      }\n      \n    }\n    \n    /*--- Warning message about non-physical points ---*/\n    \n    if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n#ifdef HAVE_MPI\n      SU2_MPI::Reduce(&counter_local, &counter_global, 1, MPI_UNSIGNED_LONG, MPI_SUM, MASTER_NODE, MPI_COMM_WORLD);\n#else\n      counter_global = counter_local;\n#endif\n      if ((rank == MASTER_NODE) && (counter_global != 0))\n        cout << \"Warning. The original solution contains \"<< counter_global << \" points that are not physical.\" << endl;\n    }\n    \n  }\n  \n  /*--- For incompressible solver set the initial values for the density and viscosity,\n   unless a freesurface problem, this must be constant during the computation ---*/\n  \n  if (incompressible || freesurface) {\n    for (iPoint = 0; iPoint < nPoint; iPoint++) {\n      node[iPoint]->SetDensityInc(Density_Inf);\n      node[iPoint]->SetLaminarViscosityInc(Viscosity_Inf);\n    }\n  }\n  \n  /*--- Define solver parameters needed for execution of destructor ---*/\n  \n  if (config->GetKind_ConvNumScheme_Flow() == SPACE_CENTERED) space_centered = true;\n  else space_centered = false;\n  \n  if (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT) euler_implicit = true;\n  else euler_implicit = false;\n  \n  if (config->GetKind_Gradient_Method() == WEIGHTED_LEAST_SQUARES) least_squares = true;\n  else least_squares = false;\n  \n  /*--- Perform the MPI communication of the solution ---*/\n  \n  Set_MPI_Solution(geometry, config);\n  \n}\n\nCNSSolver::~CNSSolver(void) {\n  unsigned short iMarker;\n  \n  if (CDrag_Visc != NULL)       delete [] CDrag_Visc;\n  if (CLift_Visc != NULL)       delete [] CLift_Visc;\n  if (CSideForce_Visc != NULL)  delete [] CSideForce_Visc;\n  if (CMx_Visc != NULL)         delete [] CMx_Visc;\n  if (CMy_Visc != NULL)         delete [] CMy_Visc;\n  if (CMz_Visc != NULL)         delete [] CMz_Visc;\n  if (CFx_Visc != NULL)         delete [] CFx_Visc;\n  if (CFy_Visc != NULL)         delete [] CFy_Visc;\n  if (CFz_Visc != NULL)         delete [] CFz_Visc;\n  if (CEff_Visc != NULL)        delete [] CEff_Visc;\n  if (CMerit_Visc != NULL)      delete [] CMerit_Visc;\n  if (CT_Visc != NULL)          delete [] CT_Visc;\n  if (CQ_Visc != NULL)          delete [] CQ_Visc;\n  if (Heat_Visc != NULL)        delete [] Heat_Visc;\n  if (MaxHeatFlux_Visc != NULL) delete [] MaxHeatFlux_Visc;\n  if (ForceViscous != NULL)     delete [] ForceViscous;\n  if (MomentViscous != NULL)    delete [] MomentViscous;\n  \n  \n  if (Surface_CLift_Visc != NULL)      delete [] Surface_CLift_Visc;\n  if (Surface_CDrag_Visc != NULL)      delete [] Surface_CDrag_Visc;\n  if (Surface_CSideForce_Visc != NULL) delete [] Surface_CSideForce_Visc;\n  if (Surface_CEff_Visc != NULL)       delete [] Surface_CEff_Visc;\n  if (Surface_CFx_Visc != NULL)        delete [] Surface_CFx_Visc;\n  if (Surface_CFy_Visc != NULL)        delete [] Surface_CFy_Visc;\n  if (Surface_CFz_Visc != NULL)        delete [] Surface_CFz_Visc;\n  if (Surface_CMx_Visc != NULL)        delete [] Surface_CMx_Visc;\n  if (Surface_CMy_Visc != NULL)        delete [] Surface_CMy_Visc;\n  if (Surface_CMz_Visc != NULL)        delete [] Surface_CMz_Visc;\n  \n  if (Cauchy_Serie != NULL) delete [] Cauchy_Serie;\n  \n  if (CSkinFriction != NULL) {\n    for (iMarker = 0; iMarker < nMarker; iMarker++) {\n      delete CSkinFriction[iMarker];\n    }\n    delete [] CSkinFriction;\n  }\n  \n}\n\nvoid CNSSolver::Preprocessing(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned short iRKStep, unsigned short RunTime_EqSystem, bool Output) {\n  \n  unsigned long iPoint, ErrorCounter = 0;\n  su2double StrainMag = 0.0, Omega = 0.0, *Vorticity;\n  \n#ifdef HAVE_MPI\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n#endif\n  \n  unsigned long ExtIter     = config->GetExtIter();\n  bool adjoint              = config->GetAdjoint();\n  bool implicit             = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool center               = (config->GetKind_ConvNumScheme_Flow() == SPACE_CENTERED) || (adjoint && config->GetKind_ConvNumScheme_AdjFlow() == SPACE_CENTERED);\n  bool center_jst           = center && config->GetKind_Centered_Flow() == JST;\n  bool limiter_flow         = ((config->GetSpatialOrder_Flow() == SECOND_ORDER_LIMITER) && (ExtIter <= config->GetLimiterIter()));\n  bool limiter_turb         = ((config->GetSpatialOrder_Turb() == SECOND_ORDER_LIMITER) && (ExtIter <= config->GetLimiterIter()));\n  bool limiter_adjflow      = ((config->GetSpatialOrder_AdjFlow() == SECOND_ORDER_LIMITER) && (ExtIter <= config->GetLimiterIter()));\n  bool limiter_visc         = config->GetViscous_Limiter_Flow();\n  bool freesurface          = (config->GetKind_Regime() == FREESURFACE);\n  bool fixed_cl             = config->GetFixed_CL_Mode();\n  bool engine               = ((config->GetnMarker_EngineInflow() != 0) || (config->GetnMarker_EngineBleed() != 0) || (config->GetnMarker_EngineExhaust() != 0));\n  bool actuator_disk        = ((config->GetnMarker_ActDisk_Inlet() != 0) || (config->GetnMarker_ActDisk_Outlet() != 0));\n  \n  /*--- Compute the engine properties ---*/\n  \n  if (engine) { GetEngine_Properties(geometry, config, iMesh, Output); }\n  \n  /*--- Compute the actuator disk properties ---*/\n  \n  if (actuator_disk) { GetActuatorDisk_Properties(geometry, config, iMesh, Output); }\n  \n  /*--- Update the angle of attack at the far-field for fixed CL calculations. ---*/\n  \n  if (fixed_cl) { SetFarfield_AoA(geometry, solver_container, config, iMesh, Output); }\n  \n  /*--- Compute distance function to zero level set ---*/\n  \n  if (freesurface) { SetFreeSurface_Distance(geometry, config); }\n  \n  /*--- Set the primitive variables ---*/\n  \n  ErrorCounter = SetPrimitive_Variables(solver_container, config, Output);\n  \n  /*--- Artificial dissipation ---*/\n  \n  if (center && !Output) {\n    SetMax_Eigenvalue(geometry, config);\n    if ((center_jst) && (iMesh == MESH_0)) {\n      SetDissipation_Switch(geometry, config);\n      SetUndivided_Laplacian(geometry, config);\n    }\n  }\n  \n  /*--- Compute gradient of the primitive variables ---*/\n  \n  if (config->GetKind_Gradient_Method() == GREEN_GAUSS) {\n    SetPrimitive_Gradient_GG(geometry, config);\n    //\t  if (compressible && !ideal_gas) SetSecondary_Gradient_GG(geometry, config);\n  }\n  if (config->GetKind_Gradient_Method() == WEIGHTED_LEAST_SQUARES) {\n    SetPrimitive_Gradient_LS(geometry, config);\n    //\t  if (compressible && !ideal_gas) SetSecondary_Gradient_LS(geometry, config);\n  }\n  \n  /*--- Compute the limiter in case we need it in the turbulence model\n   or to limit the viscous terms (check this logic with JST and 2nd order turbulence model) ---*/\n  \n  if ((iMesh == MESH_0) && (limiter_flow || limiter_turb || limiter_adjflow || limiter_visc) && !Output) { SetPrimitive_Limiter(geometry, config);\n    //  if (compressible && !ideal_gas) SetSecondary_Limiter(geometry, config);\n  }\n  \n  /*--- Evaluate the vorticity and strain rate magnitude ---*/\n  \n  StrainMag_Max = 0.0, Omega_Max = 0.0;\n  for (iPoint = 0; iPoint < nPoint; iPoint++) {\n    \n    solver_container[FLOW_SOL]->node[iPoint]->SetVorticity(limiter_visc);\n    solver_container[FLOW_SOL]->node[iPoint]->SetStrainMag(limiter_visc);\n    \n    StrainMag = solver_container[FLOW_SOL]->node[iPoint]->GetStrainMag();\n    Vorticity = solver_container[FLOW_SOL]->node[iPoint]->GetVorticity();\n    Omega = sqrt(Vorticity[0]*Vorticity[0]+ Vorticity[1]*Vorticity[1]+ Vorticity[2]*Vorticity[2]);\n    \n    StrainMag_Max = max(StrainMag_Max, StrainMag);\n    Omega_Max = max(Omega_Max, Omega);\n    \n  }\n  \n  /*--- Initialize the Jacobian matrices ---*/\n  \n  if (implicit && !config->GetDiscrete_Adjoint()) Jacobian.SetValZero();\n  \n  /*--- Error message ---*/\n  \n  if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n    \n#ifdef HAVE_MPI\n    unsigned long MyErrorCounter = ErrorCounter; ErrorCounter = 0;\n    su2double MyOmega_Max = Omega_Max; Omega_Max = 0.0;\n    su2double MyStrainMag_Max = StrainMag_Max; StrainMag_Max = 0.0;\n    \n    SU2_MPI::Allreduce(&MyErrorCounter, &ErrorCounter, 1, MPI_UNSIGNED_LONG, MPI_SUM, MPI_COMM_WORLD);\n    SU2_MPI::Allreduce(&MyStrainMag_Max, &StrainMag_Max, 1, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);\n    SU2_MPI::Allreduce(&MyOmega_Max, &Omega_Max, 1, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);\n#endif\n    \n    if (iMesh == MESH_0) {\n      config->SetNonphysical_Points(ErrorCounter);\n      solver_container[FLOW_SOL]->SetStrainMag_Max(StrainMag_Max);\n      solver_container[FLOW_SOL]->SetOmega_Max(Omega_Max);\n    }\n    \n  }\n  \n}\n\nunsigned long CNSSolver::SetPrimitive_Variables(CSolver **solver_container, CConfig *config, bool Output) {\n  \n  unsigned long iPoint, ErrorCounter = 0;\n  su2double eddy_visc = 0.0, turb_ke = 0.0;\n  unsigned short turb_model = config->GetKind_Turb_Model();\n  bool RightSol = true;\n  \n  bool tkeNeeded            = (turb_model == SST);\n  bool compressible         = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible       = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface          = (config->GetKind_Regime() == FREESURFACE);\n  \n  for (iPoint = 0; iPoint < nPoint; iPoint ++) {\n    \n    /*--- Retrieve the value of the kinetic energy (if need it) ---*/\n    \n    if (turb_model != NONE) {\n      eddy_visc = solver_container[TURB_SOL]->node[iPoint]->GetmuT();\n      if (tkeNeeded) turb_ke = solver_container[TURB_SOL]->node[iPoint]->GetSolution(0);\n    }\n    \n    /*--- Initialize the non-physical points vector ---*/\n    \n    node[iPoint]->SetNon_Physical(false);\n    \n    /*--- Incompressible flow, primitive variables nDim+3, (P, vx, vy, vz, rho, beta),\n     FreeSurface Incompressible flow, primitive variables nDim+4, (P, vx, vy, vz, rho, beta, dist),\n     Compressible flow, primitive variables nDim+5, (T, vx, vy, vz, P, rho, h, c, lamMu, eddyMu, ThCond, Cp) ---*/\n    \n    if (compressible) {\n      RightSol = node[iPoint]->SetPrimVar_Compressible(eddy_visc, turb_ke, FluidModel);\n      node[iPoint]->SetSecondaryVar_Compressible(FluidModel);\n    }\n    \n    if (incompressible){\n      RightSol = node[iPoint]->SetPrimVar_Incompressible(Density_Inf, Viscosity_Inf, eddy_visc, turb_ke, config);\n    }\n    \n    if (freesurface){\n      RightSol = node[iPoint]->SetPrimVar_FreeSurface(eddy_visc, turb_ke, config);\n    }\n    \n    if (!RightSol) { node[iPoint]->SetNon_Physical(true); ErrorCounter++; }\n    \n    /*--- Initialize the convective, source and viscous residual vector ---*/\n    \n    if (!Output) LinSysRes.SetBlock_Zero(iPoint);\n    \n  }\n  \n  return ErrorCounter;\n}\n\nvoid CNSSolver::SetTime_Step(CGeometry *geometry, CSolver **solver_container, CConfig *config, unsigned short iMesh, unsigned long Iteration) {\n  \n  su2double Mean_BetaInc2, *Normal, Area, Vol, Mean_SoundSpeed = 0.0, Mean_ProjVel = 0.0, Lambda, Local_Delta_Time, Local_Delta_Time_Visc, Mean_DensityInc,\n  Global_Delta_Time = 1E6, Mean_LaminarVisc = 0.0, Mean_EddyVisc = 0.0, Mean_Density = 0.0, Lambda_1, Lambda_2, K_v = 0.25, Global_Delta_UnstTimeND;\n  unsigned long iEdge, iVertex, iPoint = 0, jPoint = 0;\n  unsigned short iDim, iMarker;\n  su2double ProjVel, ProjVel_i, ProjVel_j;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool compressible = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement = config->GetGrid_Movement();\n  bool dual_time = ((config->GetUnsteady_Simulation() == DT_STEPPING_1ST) ||\n                    (config->GetUnsteady_Simulation() == DT_STEPPING_2ND));\n  \n  Min_Delta_Time = 1.E6; Max_Delta_Time = 0.0;\n  \n  /*--- Set maximum inviscid eigenvalue to zero, and compute sound speed and viscosity ---*/\n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    node[iPoint]->SetMax_Lambda_Inv(0.0);\n    node[iPoint]->SetMax_Lambda_Visc(0.0);\n  }\n  \n  /*--- Loop interior edges ---*/\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Point identification, Normal vector and area ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    \n    Normal = geometry->edge[iEdge]->GetNormal();\n    Area = 0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n    \n    /*--- Mean Values ---*/\n    \n    if (compressible) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_SoundSpeed = 0.5 * (node[iPoint]->GetSoundSpeed() + node[jPoint]->GetSoundSpeed()) * Area;\n    }\n    if (incompressible || freesurface) {\n      Mean_ProjVel = 0.5 * (node[iPoint]->GetProjVel(Normal) + node[jPoint]->GetProjVel(Normal));\n      Mean_BetaInc2 = 0.5 * (node[iPoint]->GetBetaInc2() + node[jPoint]->GetBetaInc2());\n      Mean_DensityInc = 0.5 * (node[iPoint]->GetDensityInc() + node[jPoint]->GetDensityInc());\n      Mean_SoundSpeed = sqrt(Mean_ProjVel*Mean_ProjVel + (Mean_BetaInc2/Mean_DensityInc)*Area*Area);\n    }\n    \n    /*--- Adjustment for grid movement ---*/\n    \n    if (grid_movement) {\n      su2double *GridVel_i = geometry->node[iPoint]->GetGridVel();\n      su2double *GridVel_j = geometry->node[jPoint]->GetGridVel();\n      ProjVel_i = 0.0; ProjVel_j =0.0;\n      for (iDim = 0; iDim < nDim; iDim++) {\n        ProjVel_i += GridVel_i[iDim]*Normal[iDim];\n        ProjVel_j += GridVel_j[iDim]*Normal[iDim];\n      }\n      Mean_ProjVel -= 0.5 * (ProjVel_i + ProjVel_j) ;\n    }\n    \n    /*--- Inviscid contribution ---*/\n    \n    Lambda = fabs(Mean_ProjVel) + Mean_SoundSpeed ;\n    if (geometry->node[iPoint]->GetDomain()) node[iPoint]->AddMax_Lambda_Inv(Lambda);\n    if (geometry->node[jPoint]->GetDomain()) node[jPoint]->AddMax_Lambda_Inv(Lambda);\n    \n    /*--- Viscous contribution ---*/\n    \n    if (compressible) {\n      Mean_LaminarVisc = 0.5*(node[iPoint]->GetLaminarViscosity() + node[jPoint]->GetLaminarViscosity());\n      Mean_EddyVisc    = 0.5*(node[iPoint]->GetEddyViscosity() + node[jPoint]->GetEddyViscosity());\n      Mean_Density     = 0.5*(node[iPoint]->GetSolution(0) + node[jPoint]->GetSolution(0));\n    }\n    if (incompressible || freesurface) {\n      Mean_LaminarVisc = 0.5*(node[iPoint]->GetLaminarViscosityInc() + node[jPoint]->GetLaminarViscosityInc());\n      Mean_EddyVisc    = 0.5*(node[iPoint]->GetEddyViscosityInc() + node[jPoint]->GetEddyViscosityInc());\n      Mean_Density     = 0.5*(node[iPoint]->GetDensityInc() + node[jPoint]->GetDensityInc());\n    }\n    \n    Lambda_1 = (4.0/3.0)*(Mean_LaminarVisc + Mean_EddyVisc);\n    //TODO (REAL_GAS) removing Gamma it cannot work with FLUIDPROP\n    Lambda_2 = (1.0 + (Prandtl_Lam/Prandtl_Turb)*(Mean_EddyVisc/Mean_LaminarVisc))*(Gamma*Mean_LaminarVisc/Prandtl_Lam);\n    Lambda = (Lambda_1 + Lambda_2)*Area*Area/Mean_Density;\n    \n    if (geometry->node[iPoint]->GetDomain()) node[iPoint]->AddMax_Lambda_Visc(Lambda);\n    if (geometry->node[jPoint]->GetDomain()) node[jPoint]->AddMax_Lambda_Visc(Lambda);\n    \n  }\n  \n  /*--- Loop boundary edges ---*/\n  \n  for (iMarker = 0; iMarker < geometry->GetnMarker(); iMarker++) {\n    for (iVertex = 0; iVertex < geometry->GetnVertex(iMarker); iVertex++) {\n      \n      /*--- Point identification, Normal vector and area ---*/\n      \n      iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n      Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n      Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n      \n      /*--- Mean Values ---*/\n      \n      if (compressible) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_SoundSpeed = node[iPoint]->GetSoundSpeed() * Area;\n      }\n      if (incompressible || freesurface) {\n        Mean_ProjVel = node[iPoint]->GetProjVel(Normal);\n        Mean_BetaInc2 = node[iPoint]->GetBetaInc2();\n        Mean_DensityInc = node[iPoint]->GetDensityInc();\n        Mean_SoundSpeed = sqrt(Mean_ProjVel*Mean_ProjVel + (Mean_BetaInc2/Mean_DensityInc)*Area*Area);\n      }\n      \n      /*--- Adjustment for grid movement ---*/\n      \n      if (grid_movement) {\n        su2double *GridVel = geometry->node[iPoint]->GetGridVel();\n        ProjVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjVel += GridVel[iDim]*Normal[iDim];\n        Mean_ProjVel -= ProjVel;\n      }\n      \n      /*--- Inviscid contribution ---*/\n      \n      Lambda = fabs(Mean_ProjVel) + Mean_SoundSpeed;\n      if (geometry->node[iPoint]->GetDomain()) {\n        node[iPoint]->AddMax_Lambda_Inv(Lambda);\n      }\n      \n      /*--- Viscous contribution ---*/\n      \n      if (compressible) {\n        Mean_LaminarVisc = node[iPoint]->GetLaminarViscosity();\n        Mean_EddyVisc    = node[iPoint]->GetEddyViscosity();\n        Mean_Density     = node[iPoint]->GetSolution(0);\n      }\n      if (incompressible || freesurface) {\n        Mean_LaminarVisc = 0.5*(node[iPoint]->GetLaminarViscosityInc() + node[jPoint]->GetLaminarViscosityInc());\n        Mean_EddyVisc    = 0.5*(node[iPoint]->GetEddyViscosityInc() + node[jPoint]->GetEddyViscosityInc());\n        Mean_Density     = 0.5*(node[iPoint]->GetDensityInc() + node[jPoint]->GetDensityInc());\n      }\n      \n      Lambda_1 = (4.0/3.0)*(Mean_LaminarVisc + Mean_EddyVisc);\n      Lambda_2 = (1.0 + (Prandtl_Lam/Prandtl_Turb)*(Mean_EddyVisc/Mean_LaminarVisc))*(Gamma*Mean_LaminarVisc/Prandtl_Lam);\n      Lambda = (Lambda_1 + Lambda_2)*Area*Area/Mean_Density;\n      \n      if (geometry->node[iPoint]->GetDomain()) node[iPoint]->AddMax_Lambda_Visc(Lambda);\n      \n    }\n  }\n  \n  /*--- Each element uses their own speed, steady state simulation ---*/\n  \n  \n  for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n    \n    Vol = geometry->node[iPoint]->GetVolume();\n    \n    if (Vol != 0.0) {\n      Local_Delta_Time = config->GetCFL(iMesh)*Vol / node[iPoint]->GetMax_Lambda_Inv();\n      Local_Delta_Time_Visc = config->GetCFL(iMesh)*K_v*Vol*Vol/ node[iPoint]->GetMax_Lambda_Visc();\n      Local_Delta_Time = min(Local_Delta_Time, Local_Delta_Time_Visc);\n      Global_Delta_Time = min(Global_Delta_Time, Local_Delta_Time);\n      Min_Delta_Time = min(Min_Delta_Time, Local_Delta_Time);\n      Max_Delta_Time = max(Max_Delta_Time, Local_Delta_Time);\n      if (Local_Delta_Time > config->GetMax_DeltaTime())\n        Local_Delta_Time = config->GetMax_DeltaTime();\n      node[iPoint]->SetDelta_Time(Local_Delta_Time);\n    }\n    else {\n      node[iPoint]->SetDelta_Time(0.0);\n    }\n    \n  }\n  \n  \n  /*--- Compute the max and the min dt (in parallel) ---*/\n  if (config->GetConsole_Output_Verb() == VERB_HIGH) {\n#ifdef HAVE_MPI\n    su2double rbuf_time, sbuf_time;\n    sbuf_time = Min_Delta_Time;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MIN, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Min_Delta_Time = rbuf_time;\n    \n    sbuf_time = Max_Delta_Time;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MAX, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Max_Delta_Time = rbuf_time;\n#endif\n  }\n  \n  /*--- For exact time solution use the minimum delta time of the whole mesh ---*/\n  if (config->GetUnsteady_Simulation() == TIME_STEPPING) {\n#ifdef HAVE_MPI\n    su2double rbuf_time, sbuf_time;\n    sbuf_time = Global_Delta_Time;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MIN, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Global_Delta_Time = rbuf_time;\n#endif\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++)\n      node[iPoint]->SetDelta_Time(Global_Delta_Time);\n  }\n  \n  /*--- Recompute the unsteady time step for the dual time strategy\n   if the unsteady CFL is diferent from 0 ---*/\n  if ((dual_time) && (Iteration == 0) && (config->GetUnst_CFL() != 0.0) && (iMesh == MESH_0)) {\n    Global_Delta_UnstTimeND = config->GetUnst_CFL()*Global_Delta_Time/config->GetCFL(iMesh);\n    \n#ifdef HAVE_MPI\n    su2double rbuf_time, sbuf_time;\n    sbuf_time = Global_Delta_UnstTimeND;\n    SU2_MPI::Reduce(&sbuf_time, &rbuf_time, 1, MPI_DOUBLE, MPI_MIN, MASTER_NODE, MPI_COMM_WORLD);\n    SU2_MPI::Bcast(&rbuf_time, 1, MPI_DOUBLE, MASTER_NODE, MPI_COMM_WORLD);\n    Global_Delta_UnstTimeND = rbuf_time;\n#endif\n    config->SetDelta_UnstTimeND(Global_Delta_UnstTimeND);\n  }\n  \n  /*--- The pseudo local time (explicit integration) cannot be greater than the physical time ---*/\n  if (dual_time)\n    for (iPoint = 0; iPoint < nPointDomain; iPoint++) {\n      if (!implicit) {\n        Local_Delta_Time = min((2.0/3.0)*config->GetDelta_UnstTimeND(), node[iPoint]->GetDelta_Time());\n        node[iPoint]->SetDelta_Time(Local_Delta_Time);\n      }\n    }\n  \n}\n\nvoid CNSSolver::Viscous_Residual(CGeometry *geometry, CSolver **solver_container, CNumerics *numerics,\n                                 CConfig *config, unsigned short iMesh, unsigned short iRKStep) {\n  \n  unsigned long iPoint, jPoint, iEdge;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  \n  for (iEdge = 0; iEdge < geometry->GetnEdge(); iEdge++) {\n    \n    /*--- Points, coordinates and normal vector in edge ---*/\n    \n    iPoint = geometry->edge[iEdge]->GetNode(0);\n    jPoint = geometry->edge[iEdge]->GetNode(1);\n    numerics->SetCoord(geometry->node[iPoint]->GetCoord(), geometry->node[jPoint]->GetCoord());\n    numerics->SetNormal(geometry->edge[iEdge]->GetNormal());\n    \n    /*--- Primitive and secondary variables ---*/\n    \n    numerics->SetPrimitive(node[iPoint]->GetPrimitive(), node[jPoint]->GetPrimitive());\n    numerics->SetSecondary(node[iPoint]->GetSecondary(), node[jPoint]->GetSecondary());\n    \n    /*--- Gradient and limiters ---*/\n    \n    numerics->SetPrimVarGradient(node[iPoint]->GetGradient_Primitive(), node[jPoint]->GetGradient_Primitive());\n    numerics->SetPrimVarLimiter(node[iPoint]->GetLimiter_Primitive(), node[jPoint]->GetLimiter_Primitive());\n    \n    /*--- Turbulent kinetic energy ---*/\n    \n    if (config->GetKind_Turb_Model() == SST)\n      numerics->SetTurbKineticEnergy(solver_container[TURB_SOL]->node[iPoint]->GetSolution(0),\n                                     solver_container[TURB_SOL]->node[jPoint]->GetSolution(0));\n    \n    /*--- Compute and update residual ---*/\n    \n    numerics->ComputeResidual(Res_Visc, Jacobian_i, Jacobian_j, config);\n    \n    LinSysRes.SubtractBlock(iPoint, Res_Visc);\n    LinSysRes.AddBlock(jPoint, Res_Visc);\n    \n    /*--- Implicit part ---*/\n    \n    if (implicit) {\n      Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n      Jacobian.SubtractBlock(iPoint, jPoint, Jacobian_j);\n      Jacobian.AddBlock(jPoint, iPoint, Jacobian_i);\n      Jacobian.AddBlock(jPoint, jPoint, Jacobian_j);\n    }\n    \n  }\n  \n}\n\nvoid CNSSolver::Viscous_Forces(CGeometry *geometry, CConfig *config) {\n  \n  unsigned long iVertex, iPoint, iPointNormal;\n  unsigned short Boundary, Monitoring, iMarker, iMarker_Monitoring, iDim, jDim;\n  su2double Viscosity = 0.0, div_vel, *Normal, MomentDist[3] = {0.0, 0.0, 0.0}, WallDist[3] = {0.0, 0.0, 0.0},\n  *Coord, *Coord_Normal, Area, WallShearStress, TauNormal, factor, RefTemp, RefVel2,\n  RefDensity, GradTemperature, Density = 0.0, WallDistMod, FrictionVel,\n  Mach2Vel, Mach_Motion, UnitNormal[3] = {0.0, 0.0, 0.0}, TauElem[3] = {0.0, 0.0, 0.0}, TauTangent[3] = {0.0, 0.0, 0.0},\n  Tau[3][3] = {{0.0, 0.0, 0.0},{0.0, 0.0, 0.0},{0.0, 0.0, 0.0}}, Force[3] = {0.0, 0.0, 0.0}, Cp, thermal_conductivity, MaxNorm = 8.0,\n  Grad_Vel[3][3] = {{0.0, 0.0, 0.0},{0.0, 0.0, 0.0},{0.0, 0.0, 0.0}}, Grad_Temp[3] = {0.0, 0.0, 0.0},\n  delta[3][3] = {{1.0, 0.0, 0.0},{0.0,1.0,0.0},{0.0,0.0,1.0}};\n  \n#ifdef HAVE_MPI\n  su2double MyAllBound_CDrag_Visc, MyAllBound_CLift_Visc, MyAllBound_CSideForce_Visc, MyAllBound_CMx_Visc, MyAllBound_CMy_Visc, MyAllBound_CMz_Visc, MyAllBound_CFx_Visc, MyAllBound_CFy_Visc, MyAllBound_CFz_Visc, MyAllBound_CT_Visc, MyAllBound_CQ_Visc, MyAllBound_HeatFlux_Visc, MyAllBound_MaxHeatFlux_Visc, *MySurface_CLift_Visc = NULL, *MySurface_CDrag_Visc = NULL, *MySurface_CSideForce_Visc = NULL, *MySurface_CEff_Visc = NULL, *MySurface_CFx_Visc = NULL, *MySurface_CFy_Visc = NULL, *MySurface_CFz_Visc = NULL, *MySurface_CMx_Visc = NULL, *MySurface_CMy_Visc = NULL, *MySurface_CMz_Visc = NULL;\n#endif\n  \n  string Marker_Tag, Monitoring_Tag;\n  \n  su2double Alpha           = config->GetAoA()*PI_NUMBER/180.0;\n  su2double Beta            = config->GetAoS()*PI_NUMBER/180.0;\n  su2double RefAreaCoeff    = config->GetRefAreaCoeff();\n  su2double RefLengthMoment = config->GetRefLengthMoment();\n  su2double Gas_Constant    = config->GetGas_ConstantND();\n  su2double *Origin         = config->GetRefOriginMoment(0);\n  bool grid_movement        = config->GetGrid_Movement();\n  bool compressible         = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible       = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface          = (config->GetKind_Regime() == FREESURFACE);\n  su2double Prandtl_Lam     = config->GetPrandtl_Lam();\n  \n  /*--- Evaluate reference values for non-dimensionalization.\n   For dynamic meshes, use the motion Mach number as a reference value\n   for computing the force coefficients. Otherwise, use the freestream values,\n   which is the standard convention. ---*/\n  \n  RefTemp    = Temperature_Inf;\n  RefDensity = Density_Inf;\n  if (grid_movement) {\n    Mach2Vel = sqrt(Gamma*Gas_Constant*RefTemp);\n    Mach_Motion = config->GetMach_Motion();\n    RefVel2 = (Mach_Motion*Mach2Vel)*(Mach_Motion*Mach2Vel);\n  } else {\n    RefVel2 = 0.0;\n    for (iDim = 0; iDim < nDim; iDim++)\n      RefVel2  += Velocity_Inf[iDim]*Velocity_Inf[iDim];\n  }\n  \n  factor = 1.0 / (0.5*RefDensity*RefAreaCoeff*RefVel2);\n  \n  /*--- Variables initialization ---*/\n  \n  AllBound_CDrag_Visc = 0.0;    AllBound_CLift_Visc = 0.0;       AllBound_CSideForce_Visc = 0.0;\n  AllBound_CMx_Visc = 0.0;      AllBound_CMy_Visc = 0.0;         AllBound_CMz_Visc = 0.0;\n  AllBound_CFx_Visc = 0.0;      AllBound_CFy_Visc = 0.0;         AllBound_CFz_Visc = 0.0;\n  AllBound_CT_Visc = 0.0;       AllBound_CQ_Visc = 0.0;          AllBound_CMerit_Visc = 0.0;\n  AllBound_HeatFlux_Visc = 0.0; AllBound_MaxHeatFlux_Visc = 0.0; AllBound_CEff_Visc = 0.0;\n  \n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n    Surface_CLift_Visc[iMarker_Monitoring]      = 0.0; Surface_CDrag_Visc[iMarker_Monitoring]      = 0.0;\n    Surface_CSideForce_Visc[iMarker_Monitoring] = 0.0; Surface_CEff_Visc[iMarker_Monitoring]       = 0.0;\n    Surface_CFx_Visc[iMarker_Monitoring]        = 0.0; Surface_CFy_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CFz_Visc[iMarker_Monitoring]        = 0.0; Surface_CMx_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CMy_Visc[iMarker_Monitoring]        = 0.0; Surface_CMz_Visc[iMarker_Monitoring]        = 0.0;\n  }\n  \n  /*--- Loop over the Navier-Stokes markers ---*/\n  \n  for (iMarker = 0; iMarker < nMarker; iMarker++) {\n    \n    Boundary = config->GetMarker_All_KindBC(iMarker);\n    Monitoring = config->GetMarker_All_Monitoring(iMarker);\n    \n    /*--- Obtain the origin for the moment computation for a particular marker ---*/\n    \n    if (Monitoring == YES) {\n      for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n        Monitoring_Tag = config->GetMarker_Monitoring(iMarker_Monitoring);\n        Marker_Tag = config->GetMarker_All_TagBound(iMarker);\n        if (Marker_Tag == Monitoring_Tag)\n          Origin = config->GetRefOriginMoment(iMarker_Monitoring);\n      }\n    }\n    \n    if ((Boundary == HEAT_FLUX) || (Boundary == ISOTHERMAL)) {\n      \n      /*--- Forces initialization at each Marker ---*/\n      \n      CDrag_Visc[iMarker] = 0.0; CLift_Visc[iMarker] = 0.0;       CSideForce_Visc[iMarker] = 0.0;\n      CMx_Visc[iMarker] = 0.0;   CMy_Visc[iMarker] = 0.0;         CMz_Visc[iMarker] = 0.0;\n      CFx_Visc[iMarker] = 0.0;   CFy_Visc[iMarker] = 0.0;         CFz_Visc[iMarker] = 0.0;\n      CT_Visc[iMarker] = 0.0;    CQ_Visc[iMarker] = 0.0;          CMerit_Visc[iMarker] = 0.0;\n      Heat_Visc[iMarker] = 0.0;  MaxHeatFlux_Visc[iMarker] = 0.0; CEff_Visc[iMarker] = 0.0;\n      \n      for (iDim = 0; iDim < nDim; iDim++) ForceViscous[iDim] = 0.0;\n      MomentViscous[0] = 0.0; MomentViscous[1] = 0.0; MomentViscous[2] = 0.0;\n      \n      /*--- Loop over the vertices to compute the forces ---*/\n      \n      for (iVertex = 0; iVertex < geometry->nVertex[iMarker]; iVertex++) {\n        \n        iPoint = geometry->vertex[iMarker][iVertex]->GetNode();\n        iPointNormal = geometry->vertex[iMarker][iVertex]->GetNormal_Neighbor();\n        \n        Coord = geometry->node[iPoint]->GetCoord();\n        Coord_Normal = geometry->node[iPointNormal]->GetCoord();\n        \n        Normal = geometry->vertex[iMarker][iVertex]->GetNormal();\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          for (jDim = 0 ; jDim < nDim; jDim++) {\n            Grad_Vel[iDim][jDim] = node[iPoint]->GetGradient_Primitive(iDim+1, jDim);\n          }\n          Grad_Temp[iDim] = node[iPoint]->GetGradient_Primitive(0, iDim);\n        }\n        \n        if (compressible) {\n          Viscosity = node[iPoint]->GetLaminarViscosity();\n          Density = node[iPoint]->GetDensity();\n        }\n        if (incompressible || freesurface) {\n          Viscosity = node[iPoint]->GetLaminarViscosityInc();\n          Density = node[iPoint]->GetDensityInc();\n        }\n        \n        Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt(Area);\n        for (iDim = 0; iDim < nDim; iDim++) {\n          UnitNormal[iDim] = Normal[iDim]/Area;\n          MomentDist[iDim] = Coord[iDim] - Origin[iDim];\n        }\n        \n        /*--- Evaluate Tau ---*/\n        \n        div_vel = 0.0; for (iDim = 0; iDim < nDim; iDim++) div_vel += Grad_Vel[iDim][iDim];\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          for (jDim = 0 ; jDim < nDim; jDim++) {\n            Tau[iDim][jDim] = Viscosity*(Grad_Vel[jDim][iDim] + Grad_Vel[iDim][jDim]) - TWO3*Viscosity*div_vel*delta[iDim][jDim];\n          }\n        }\n        \n        /*--- Project Tau in each surface element ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          TauElem[iDim] = 0.0;\n          for (jDim = 0; jDim < nDim; jDim++) {\n            TauElem[iDim] += Tau[iDim][jDim]*UnitNormal[jDim];\n          }\n        }\n        \n        /*--- Compute wall shear stress (using the stress tensor) ---*/\n        \n        TauNormal = 0.0; for (iDim = 0; iDim < nDim; iDim++) TauNormal += TauElem[iDim] * UnitNormal[iDim];\n        for (iDim = 0; iDim < nDim; iDim++) TauTangent[iDim] = TauElem[iDim] - TauNormal * UnitNormal[iDim];\n        WallShearStress = 0.0; for (iDim = 0; iDim < nDim; iDim++) WallShearStress += TauTangent[iDim]*TauTangent[iDim];\n        WallShearStress = sqrt(WallShearStress);\n        \n        for (iDim = 0; iDim < nDim; iDim++) WallDist[iDim] = (Coord[iDim] - Coord_Normal[iDim]);\n        WallDistMod = 0.0; for (iDim = 0; iDim < nDim; iDim++) WallDistMod += WallDist[iDim]*WallDist[iDim]; WallDistMod = sqrt(WallDistMod);\n        \n        /*--- Compute wall skin friction coefficient, and heat flux on the wall ---*/\n        \n        CSkinFriction[iMarker][iVertex] = WallShearStress / (0.5*RefDensity*RefVel2);\n        \n        /*--- Compute y+ and non-dimensional velocity ---*/\n        \n        FrictionVel = sqrt(fabs(WallShearStress)/Density);\n        YPlus[iMarker][iVertex] = WallDistMod*FrictionVel/(Viscosity/Density);\n        \n        /*--- Compute total and maximum heat flux on the wall ---*/\n        \n        if (compressible) {\n          \n          GradTemperature = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            GradTemperature -= Grad_Temp[iDim]*UnitNormal[iDim];\n          \n          Cp = (Gamma / Gamma_Minus_One) * Gas_Constant;\n          thermal_conductivity = Cp * Viscosity/Prandtl_Lam;\n          HeatFlux[iMarker][iVertex] = -thermal_conductivity*GradTemperature;\n          Heat_Visc[iMarker] += HeatFlux[iMarker][iVertex]*Area;\n          MaxHeatFlux_Visc[iMarker] += pow(HeatFlux[iMarker][iVertex], MaxNorm);\n          \n        }\n        \n        /*--- Note that y+, and heat are computed at the\n         halo cells (for visualization purposes), but not the forces ---*/\n        \n        if ((geometry->node[iPoint]->GetDomain()) && (Monitoring == YES)) {\n          \n          /*--- Force computation ---*/\n          \n          for (iDim = 0; iDim < nDim; iDim++) {\n            Force[iDim] = TauElem[iDim]*Area*factor;\n            ForceViscous[iDim] += Force[iDim];\n          }\n          \n          /*--- Moment with respect to the reference axis ---*/\n          \n          if (iDim == 3) {\n            MomentViscous[0] += (Force[2]*MomentDist[1] - Force[1]*MomentDist[2])/RefLengthMoment;\n            MomentViscous[1] += (Force[0]*MomentDist[2] - Force[2]*MomentDist[0])/RefLengthMoment;\n          }\n          MomentViscous[2] += (Force[1]*MomentDist[0] - Force[0]*MomentDist[1])/RefLengthMoment;\n          \n        }\n        \n      }\n      \n      /*--- Project forces and store the non-dimensional coefficients ---*/\n      \n      if (Monitoring == YES) {\n        if (nDim == 2) {\n          CDrag_Visc[iMarker]       =  ForceViscous[0]*cos(Alpha) + ForceViscous[1]*sin(Alpha);\n          CLift_Visc[iMarker]       = -ForceViscous[0]*sin(Alpha) + ForceViscous[1]*cos(Alpha);\n          CEff_Visc[iMarker]        = CLift_Visc[iMarker] / (CDrag_Visc[iMarker]+EPS);\n          CMz_Visc[iMarker]         = MomentViscous[2];\n          CFx_Visc[iMarker]         = ForceViscous[0];\n          CFy_Visc[iMarker]         = ForceViscous[1];\n          CT_Visc[iMarker]          = -CFx_Visc[iMarker];\n          CQ_Visc[iMarker]          = -CMz_Visc[iMarker];\n          CMerit_Visc[iMarker]      = CT_Visc[iMarker] / (CQ_Visc[iMarker]+EPS);\n          MaxHeatFlux_Visc[iMarker] = pow(MaxHeatFlux_Visc[iMarker], 1.0/MaxNorm);\n        }\n        if (nDim == 3) {\n          CDrag_Visc[iMarker]       =  ForceViscous[0]*cos(Alpha)*cos(Beta) + ForceViscous[1]*sin(Beta) + ForceViscous[2]*sin(Alpha)*cos(Beta);\n          CLift_Visc[iMarker]       = -ForceViscous[0]*sin(Alpha) + ForceViscous[2]*cos(Alpha);\n          CSideForce_Visc[iMarker]  = -ForceViscous[0]*sin(Beta)*cos(Alpha) + ForceViscous[1]*cos(Beta) - ForceViscous[2]*sin(Beta)*sin(Alpha);\n          CEff_Visc[iMarker]        = CLift_Visc[iMarker]/(CDrag_Visc[iMarker] + EPS);\n          CMx_Visc[iMarker]         = MomentViscous[0];\n          CMy_Visc[iMarker]         = MomentViscous[1];\n          CMz_Visc[iMarker]         = MomentViscous[2];\n          CFx_Visc[iMarker]         = ForceViscous[0];\n          CFy_Visc[iMarker]         = ForceViscous[1];\n          CFz_Visc[iMarker]         = ForceViscous[2];\n          CT_Visc[iMarker]          = -CFz_Visc[iMarker];\n          CQ_Visc[iMarker]          = -CMz_Visc[iMarker];\n          CMerit_Visc[iMarker]      = CT_Visc[iMarker] / (CQ_Visc[iMarker] + EPS);\n          MaxHeatFlux_Visc[iMarker] = pow(MaxHeatFlux_Visc[iMarker], 1.0/MaxNorm);\n        }\n        \n        AllBound_CDrag_Visc       += CDrag_Visc[iMarker];\n        AllBound_CLift_Visc       += CLift_Visc[iMarker];\n        AllBound_CSideForce_Visc  += CSideForce_Visc[iMarker];\n        AllBound_CMx_Visc         += CMx_Visc[iMarker];\n        AllBound_CMy_Visc         += CMy_Visc[iMarker];\n        AllBound_CMz_Visc         += CMz_Visc[iMarker];\n        AllBound_CFx_Visc         += CFx_Visc[iMarker];\n        AllBound_CFy_Visc         += CFy_Visc[iMarker];\n        AllBound_CFz_Visc         += CFz_Visc[iMarker];\n        AllBound_CT_Visc          += CT_Visc[iMarker];\n        AllBound_CQ_Visc          += CQ_Visc[iMarker];\n        AllBound_HeatFlux_Visc    += Heat_Visc[iMarker];\n        AllBound_MaxHeatFlux_Visc += pow(MaxHeatFlux_Visc[iMarker], MaxNorm);\n        \n        /*--- Compute the coefficients per surface ---*/\n        \n        for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n          Monitoring_Tag = config->GetMarker_Monitoring(iMarker_Monitoring);\n          Marker_Tag = config->GetMarker_All_TagBound(iMarker);\n          if (Marker_Tag == Monitoring_Tag) {\n            Surface_CLift_Visc[iMarker_Monitoring]      += CLift_Visc[iMarker];\n            Surface_CDrag_Visc[iMarker_Monitoring]      += CDrag_Visc[iMarker];\n            Surface_CSideForce_Visc[iMarker_Monitoring] += CSideForce_Visc[iMarker];\n            Surface_CEff_Visc[iMarker_Monitoring]       += CEff_Visc[iMarker];\n            Surface_CFx_Visc[iMarker_Monitoring]        += CFx_Visc[iMarker];\n            Surface_CFy_Visc[iMarker_Monitoring]        += CFy_Visc[iMarker];\n            Surface_CFz_Visc[iMarker_Monitoring]        += CFz_Visc[iMarker];\n            Surface_CMx_Visc[iMarker_Monitoring]        += CMx_Visc[iMarker];\n            Surface_CMy_Visc[iMarker_Monitoring]        += CMy_Visc[iMarker];\n            Surface_CMz_Visc[iMarker_Monitoring]        += CMz_Visc[iMarker];\n          }\n        }\n        \n      }\n      \n    }\n  }\n  \n  /*--- Update some global coeffients ---*/\n  \n  AllBound_CEff_Visc = AllBound_CLift_Visc / (AllBound_CDrag_Visc + EPS);\n  AllBound_CMerit_Visc = AllBound_CT_Visc / (AllBound_CQ_Visc + EPS);\n  AllBound_MaxHeatFlux_Visc = pow(AllBound_MaxHeatFlux_Visc, 1.0/MaxNorm);\n  \n  \n#ifdef HAVE_MPI\n  \n  /*--- Add AllBound information using all the nodes ---*/\n  \n  MyAllBound_CDrag_Visc        = AllBound_CDrag_Visc;                      AllBound_CDrag_Visc = 0.0;\n  MyAllBound_CLift_Visc        = AllBound_CLift_Visc;                      AllBound_CLift_Visc = 0.0;\n  MyAllBound_CSideForce_Visc   = AllBound_CSideForce_Visc;                 AllBound_CSideForce_Visc = 0.0;\n  AllBound_CEff_Visc = 0.0;\n  MyAllBound_CMx_Visc          = AllBound_CMx_Visc;                        AllBound_CMx_Visc = 0.0;\n  MyAllBound_CMy_Visc          = AllBound_CMy_Visc;                        AllBound_CMy_Visc = 0.0;\n  MyAllBound_CMz_Visc          = AllBound_CMz_Visc;                        AllBound_CMz_Visc = 0.0;\n  MyAllBound_CFx_Visc          = AllBound_CFx_Visc;                        AllBound_CFx_Visc = 0.0;\n  MyAllBound_CFy_Visc          = AllBound_CFy_Visc;                        AllBound_CFy_Visc = 0.0;\n  MyAllBound_CFz_Visc          = AllBound_CFz_Visc;                        AllBound_CFz_Visc = 0.0;\n  MyAllBound_CT_Visc           = AllBound_CT_Visc;                         AllBound_CT_Visc = 0.0;\n  MyAllBound_CQ_Visc           = AllBound_CQ_Visc;                         AllBound_CQ_Visc = 0.0;\n  AllBound_CMerit_Visc = 0.0;\n  MyAllBound_HeatFlux_Visc     = AllBound_HeatFlux_Visc;                   AllBound_HeatFlux_Visc = 0.0;\n  MyAllBound_MaxHeatFlux_Visc  = pow(AllBound_MaxHeatFlux_Visc, MaxNorm);  AllBound_MaxHeatFlux_Visc = 0.0;\n  \n  SU2_MPI::Allreduce(&MyAllBound_CDrag_Visc, &AllBound_CDrag_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CLift_Visc, &AllBound_CLift_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CSideForce_Visc, &AllBound_CSideForce_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  AllBound_CEff_Visc = AllBound_CLift_Visc / (AllBound_CDrag_Visc + EPS);\n  SU2_MPI::Allreduce(&MyAllBound_CMx_Visc, &AllBound_CMx_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CMy_Visc, &AllBound_CMy_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CMz_Visc, &AllBound_CMz_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CFx_Visc, &AllBound_CFx_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CFy_Visc, &AllBound_CFy_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CFz_Visc, &AllBound_CFz_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CT_Visc, &AllBound_CT_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_CQ_Visc, &AllBound_CQ_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  AllBound_CMerit_Visc = AllBound_CT_Visc / (AllBound_CQ_Visc + EPS);\n  SU2_MPI::Allreduce(&MyAllBound_HeatFlux_Visc, &AllBound_HeatFlux_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(&MyAllBound_MaxHeatFlux_Visc, &AllBound_MaxHeatFlux_Visc, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  AllBound_MaxHeatFlux_Visc = pow(AllBound_MaxHeatFlux_Visc, 1.0/MaxNorm);\n  \n  /*--- Add the forces on the surfaces using all the nodes ---*/\n  \n  MySurface_CLift_Visc      = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CDrag_Visc      = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CSideForce_Visc = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CEff_Visc       = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CFx_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CFy_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CFz_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CMx_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CMy_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  MySurface_CMz_Visc        = new su2double[config->GetnMarker_Monitoring()];\n  \n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n    \n    MySurface_CLift_Visc[iMarker_Monitoring]      = Surface_CLift_Visc[iMarker_Monitoring];\n    MySurface_CDrag_Visc[iMarker_Monitoring]      = Surface_CDrag_Visc[iMarker_Monitoring];\n    MySurface_CSideForce_Visc[iMarker_Monitoring] = Surface_CSideForce_Visc[iMarker_Monitoring];\n    MySurface_CEff_Visc[iMarker_Monitoring]       = Surface_CEff_Visc[iMarker_Monitoring];\n    MySurface_CFx_Visc[iMarker_Monitoring]        = Surface_CFx_Visc[iMarker_Monitoring];\n    MySurface_CFy_Visc[iMarker_Monitoring]        = Surface_CFy_Visc[iMarker_Monitoring];\n    MySurface_CFz_Visc[iMarker_Monitoring]        = Surface_CFz_Visc[iMarker_Monitoring];\n    MySurface_CMx_Visc[iMarker_Monitoring]        = Surface_CMx_Visc[iMarker_Monitoring];\n    MySurface_CMy_Visc[iMarker_Monitoring]        = Surface_CMy_Visc[iMarker_Monitoring];\n    MySurface_CMz_Visc[iMarker_Monitoring]        = Surface_CMz_Visc[iMarker_Monitoring];\n    \n    Surface_CLift_Visc[iMarker_Monitoring]      = 0.0;\n    Surface_CDrag_Visc[iMarker_Monitoring]      = 0.0;\n    Surface_CSideForce_Visc[iMarker_Monitoring] = 0.0;\n    Surface_CEff_Visc[iMarker_Monitoring]       = 0.0;\n    Surface_CFx_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CFy_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CFz_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CMx_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CMy_Visc[iMarker_Monitoring]        = 0.0;\n    Surface_CMz_Visc[iMarker_Monitoring]        = 0.0;\n  }\n  \n  SU2_MPI::Allreduce(MySurface_CLift_Visc, Surface_CLift_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CDrag_Visc, Surface_CDrag_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CSideForce_Visc, Surface_CSideForce_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++)\n    Surface_CEff_Visc[iMarker_Monitoring] = Surface_CLift_Visc[iMarker_Monitoring] / (Surface_CDrag_Visc[iMarker_Monitoring] + EPS);\n  SU2_MPI::Allreduce(MySurface_CFx_Visc, Surface_CFx_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CFy_Visc, Surface_CFy_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CFz_Visc, Surface_CFz_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CMx_Visc, Surface_CMx_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CMy_Visc, Surface_CMy_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  SU2_MPI::Allreduce(MySurface_CMz_Visc, Surface_CMz_Visc, config->GetnMarker_Monitoring(), MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);\n  \n  delete [] MySurface_CLift_Visc; delete [] MySurface_CDrag_Visc; delete [] MySurface_CSideForce_Visc;\n  delete [] MySurface_CEff_Visc;  delete [] MySurface_CFx_Visc;   delete [] MySurface_CFy_Visc;\n  delete [] MySurface_CFz_Visc;   delete [] MySurface_CMx_Visc;   delete [] MySurface_CMy_Visc;\n  delete [] MySurface_CMz_Visc;\n  \n#endif\n  \n  /*--- Update the total coefficients (note that all the nodes have the same value)---*/\n  \n  Total_CDrag       += AllBound_CDrag_Visc;\n  Total_CLift       += AllBound_CLift_Visc;\n  Total_CSideForce  += AllBound_CSideForce_Visc;\n  Total_CEff        = Total_CLift / (Total_CDrag + EPS);\n  Total_CMx         += AllBound_CMx_Visc;\n  Total_CMy         += AllBound_CMy_Visc;\n  Total_CMz         += AllBound_CMz_Visc;\n  Total_CFx         += AllBound_CFx_Visc;\n  Total_CFy         += AllBound_CFy_Visc;\n  Total_CFz         += AllBound_CFz_Visc;\n  Total_CT          += AllBound_CT_Visc;\n  Total_CQ          += AllBound_CQ_Visc;\n  Total_CMerit       = AllBound_CT_Visc / (AllBound_CQ_Visc + EPS);\n  Total_Heat        = AllBound_HeatFlux_Visc;\n  Total_MaxHeat     = AllBound_MaxHeatFlux_Visc;\n  \n  /*--- Update the total coefficients per surface (note that all the nodes have the same value)---*/\n  \n  for (iMarker_Monitoring = 0; iMarker_Monitoring < config->GetnMarker_Monitoring(); iMarker_Monitoring++) {\n    Surface_CLift[iMarker_Monitoring]      += Surface_CLift_Visc[iMarker_Monitoring];\n    Surface_CDrag[iMarker_Monitoring]      += Surface_CDrag_Visc[iMarker_Monitoring];\n    Surface_CSideForce[iMarker_Monitoring] += Surface_CSideForce_Visc[iMarker_Monitoring];\n    Surface_CEff[iMarker_Monitoring]       = Surface_CLift[iMarker_Monitoring] / (Surface_CDrag[iMarker_Monitoring] + EPS);\n    Surface_CFx[iMarker_Monitoring]        += Surface_CFx_Visc[iMarker_Monitoring];\n    Surface_CFy[iMarker_Monitoring]        += Surface_CFy_Visc[iMarker_Monitoring];\n    Surface_CFz[iMarker_Monitoring]        += Surface_CFz_Visc[iMarker_Monitoring];\n    Surface_CMx[iMarker_Monitoring]        += Surface_CMx_Visc[iMarker_Monitoring];\n    Surface_CMy[iMarker_Monitoring]        += Surface_CMy_Visc[iMarker_Monitoring];\n    Surface_CMz[iMarker_Monitoring]        += Surface_CMz_Visc[iMarker_Monitoring];\n  }\n  \n}\n\nvoid CNSSolver::BC_HeatFlux_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iDim, jDim, iVar, jVar;\n  unsigned long iVertex, iPoint, Point_Normal, total_index;\n  \n  su2double Wall_HeatFlux, dist_ij, *Coord_i, *Coord_j, theta2;\n  su2double thetax, thetay, thetaz, etax, etay, etaz, pix, piy, piz, factor;\n  su2double ProjGridVel, *GridVel, GridVel2, *Normal, Area, Pressure = 0.0;\n  su2double total_viscosity, div_vel, Density, tau_vel[3] = {0.0, 0.0, 0.0}, UnitNormal[3] = {0.0, 0.0, 0.0};\n  su2double laminar_viscosity = 0.0, eddy_viscosity = 0.0, Grad_Vel[3][3] = {{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}},\n  tau[3][3] = {{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}};\n  su2double delta[3][3] = {{1.0, 0.0, 0.0},{0.0,1.0,0.0},{0.0,0.0,1.0}};\n  \n  bool implicit       = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool compressible   = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface    = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement  = config->GetGrid_Movement();\n  \n  /*--- Identify the boundary by string name ---*/\n  \n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  \n  /*--- Get the specified wall heat flux from config ---*/\n  \n  Wall_HeatFlux = config->GetWall_HeatFlux(Marker_Tag);\n  \n  /*--- Loop over all of the vertices on this boundary marker ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    /*--- Check if the node belongs to the domain (i.e, not a halo node) ---*/\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Compute dual-grid area and boundary normal ---*/\n      \n      Normal = geometry->vertex[val_marker][iVertex]->GetNormal();\n      \n      Area = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        Area += Normal[iDim]*Normal[iDim];\n      Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = -Normal[iDim]/Area;\n      \n      /*--- Initialize the convective & viscous residuals to zero ---*/\n      \n      for (iVar = 0; iVar < nVar; iVar++) {\n        Res_Conv[iVar] = 0.0;\n        Res_Visc[iVar] = 0.0;\n      }\n      \n      /*--- Store the corrected velocity at the wall which will\n       be zero (v = 0), unless there are moving walls (v = u_wall)---*/\n      \n      if (grid_movement) {\n        GridVel = geometry->node[iPoint]->GetGridVel();\n        for (iDim = 0; iDim < nDim; iDim++) Vector[iDim] = GridVel[iDim];\n      } else {\n        for (iDim = 0; iDim < nDim; iDim++) Vector[iDim] = 0.0;\n      }\n      \n      /*--- Impose the value of the velocity as a strong boundary\n       condition (Dirichlet). Fix the velocity and remove any\n       contribution to the residual at this node. ---*/\n      \n      if (compressible) node[iPoint]->SetVelocity_Old(Vector);\n      if (incompressible || freesurface) node[iPoint]->SetVelocityInc_Old(Vector);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        LinSysRes.SetBlock_Zero(iPoint, iDim+1);\n      node[iPoint]->SetVel_ResTruncError_Zero();\n      \n      /*--- Apply a weak boundary condition for the energy equation.\n       Compute the residual due to the prescribed heat flux. ---*/\n      \n      if (compressible) Res_Visc[nDim+1] = Wall_HeatFlux * Area;\n      \n      /*--- If the wall is moving, there are additional residual contributions\n       due to pressure (p v_wall.n) and shear stress (tau.v_wall.n). ---*/\n      \n      if (grid_movement) {\n        \n        /*--- Get the grid velocity at the current boundary node ---*/\n        \n        GridVel = geometry->node[iPoint]->GetGridVel();\n        ProjGridVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjGridVel += GridVel[iDim]*UnitNormal[iDim]*Area;\n        \n        /*--- Retrieve other primitive quantities and viscosities ---*/\n        \n        Density  = node[iPoint]->GetSolution(0);\n        if (compressible) {\n          Pressure = node[iPoint]->GetPressure();\n          laminar_viscosity = node[iPoint]->GetLaminarViscosity();\n          eddy_viscosity    = node[iPoint]->GetEddyViscosity();\n        }\n        if (incompressible || freesurface) {\n          Pressure = node[iPoint]->GetPressureInc();\n          laminar_viscosity = node[iPoint]->GetLaminarViscosityInc();\n          eddy_viscosity    = node[iPoint]->GetEddyViscosityInc();\n        }\n        total_viscosity   = laminar_viscosity + eddy_viscosity;\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          for (jDim = 0 ; jDim < nDim; jDim++) {\n            Grad_Vel[iDim][jDim] = node[iPoint]->GetGradient_Primitive(iDim+1, jDim);\n          }\n        }\n        \n        /*--- Divergence of the velocity ---*/\n        \n        div_vel = 0.0; for (iDim = 0 ; iDim < nDim; iDim++) div_vel += Grad_Vel[iDim][iDim];\n        \n        /*--- Compute the viscous stress tensor ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          for (jDim = 0; jDim < nDim; jDim++) {\n            tau[iDim][jDim] = total_viscosity*( Grad_Vel[jDim][iDim]+Grad_Vel[iDim][jDim] ) - TWO3*total_viscosity*div_vel*delta[iDim][jDim];\n          }\n        }\n        \n        /*--- Dot product of the stress tensor with the grid velocity ---*/\n        \n        for (iDim = 0 ; iDim < nDim; iDim++) {\n          tau_vel[iDim] = 0.0;\n          for (jDim = 0 ; jDim < nDim; jDim++)\n            tau_vel[iDim] += tau[iDim][jDim]*GridVel[jDim];\n        }\n        \n        /*--- Compute the convective and viscous residuals (energy eqn.) ---*/\n        \n        Res_Conv[nDim+1] = Pressure*ProjGridVel;\n        for (iDim = 0 ; iDim < nDim; iDim++)\n          Res_Visc[nDim+1] += tau_vel[iDim]*UnitNormal[iDim]*Area;\n        \n        /*--- Implicit Jacobian contributions due to moving walls ---*/\n        \n        if (implicit) {\n          \n          /*--- Jacobian contribution related to the pressure term ---*/\n          \n          GridVel2 = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            GridVel2 += GridVel[iDim]*GridVel[iDim];\n          for (iVar = 0; iVar < nVar; iVar++)\n            for (jVar = 0; jVar < nVar; jVar++)\n              Jacobian_i[iVar][jVar] = 0.0;\n          Jacobian_i[nDim+1][0] = 0.5*(Gamma-1.0)*GridVel2*ProjGridVel;\n          for (jDim = 0; jDim < nDim; jDim++)\n            Jacobian_i[nDim+1][jDim+1] = -(Gamma-1.0)*GridVel[jDim]*ProjGridVel;\n          Jacobian_i[nDim+1][nDim+1] = (Gamma-1.0)*ProjGridVel;\n          \n          /*--- Add the block to the Global Jacobian structure ---*/\n          \n          Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n          \n          /*--- Now the Jacobian contribution related to the shear stress ---*/\n          \n          for (iVar = 0; iVar < nVar; iVar++)\n            for (jVar = 0; jVar < nVar; jVar++)\n              Jacobian_i[iVar][jVar] = 0.0;\n          \n          /*--- Compute closest normal neighbor ---*/\n          \n          Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n          \n          /*--- Get coordinates of i & nearest normal and compute distance ---*/\n          \n          Coord_i = geometry->node[iPoint]->GetCoord();\n          Coord_j = geometry->node[Point_Normal]->GetCoord();\n          \n          dist_ij = 0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            dist_ij += (Coord_j[iDim]-Coord_i[iDim])*(Coord_j[iDim]-Coord_i[iDim]);\n          dist_ij = sqrt(dist_ij);\n          \n          theta2 = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            theta2 += UnitNormal[iDim]*UnitNormal[iDim];\n          \n          factor = total_viscosity*Area/(Density*dist_ij);\n          \n          if (nDim == 2) {\n            thetax = theta2 + UnitNormal[0]*UnitNormal[0]/3.0;\n            thetay = theta2 + UnitNormal[1]*UnitNormal[1]/3.0;\n            \n            etaz   = UnitNormal[0]*UnitNormal[1]/3.0;\n            \n            pix = GridVel[0]*thetax + GridVel[1]*etaz;\n            piy = GridVel[0]*etaz   + GridVel[1]*thetay;\n            \n            Jacobian_i[nDim+1][0] -= factor*(-pix*GridVel[0]+piy*GridVel[1]);\n            Jacobian_i[nDim+1][1] -= factor*pix;\n            Jacobian_i[nDim+1][2] -= factor*piy;\n          } else {\n            thetax = theta2 + UnitNormal[0]*UnitNormal[0]/3.0;\n            thetay = theta2 + UnitNormal[1]*UnitNormal[1]/3.0;\n            thetaz = theta2 + UnitNormal[2]*UnitNormal[2]/3.0;\n            \n            etaz = UnitNormal[0]*UnitNormal[1]/3.0;\n            etax = UnitNormal[1]*UnitNormal[2]/3.0;\n            etay = UnitNormal[0]*UnitNormal[2]/3.0;\n            \n            pix = GridVel[0]*thetax + GridVel[1]*etaz   + GridVel[2]*etay;\n            piy = GridVel[0]*etaz   + GridVel[1]*thetay + GridVel[2]*etax;\n            piz = GridVel[0]*etay   + GridVel[1]*etax   + GridVel[2]*thetaz;\n            \n            Jacobian_i[nDim+1][0] -= factor*(-pix*GridVel[0]+piy*GridVel[1]+piz*GridVel[2]);\n            Jacobian_i[nDim+1][1] -= factor*pix;\n            Jacobian_i[nDim+1][2] -= factor*piy;\n            Jacobian_i[nDim+1][3] -= factor*piz;\n          }\n          \n          /*--- Subtract the block from the Global Jacobian structure ---*/\n          \n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n          \n        }\n      }\n      \n      /*--- Convective contribution to the residual at the wall ---*/\n      \n      LinSysRes.AddBlock(iPoint, Res_Conv);\n      \n      /*--- Viscous contribution to the residual at the wall ---*/\n      \n      LinSysRes.SubtractBlock(iPoint, Res_Visc);\n      \n      /*--- Enforce the no-slip boundary condition in a strong way by\n       modifying the velocity-rows of the Jacobian (1 on the diagonal). ---*/\n      \n      if (implicit) {\n        for (iVar = 1; iVar <= nDim; iVar++) {\n          total_index = iPoint*nVar+iVar;\n          Jacobian.DeleteValsRowi(total_index);\n        }\n      }\n      \n    }\n  }\n}\n\nvoid CNSSolver::BC_Isothermal_Wall(CGeometry *geometry, CSolver **solver_container, CNumerics *conv_numerics, CNumerics *visc_numerics, CConfig *config, unsigned short val_marker) {\n  \n  unsigned short iVar, jVar, iDim, jDim;\n  unsigned long iVertex, iPoint, Point_Normal, total_index;\n  \n  su2double *Normal, *Coord_i, *Coord_j, Area, dist_ij, theta2;\n  su2double Twall, dTdn, dTdrho, thermal_conductivity;\n  su2double thetax, thetay, thetaz, etax, etay, etaz, pix, piy, piz, factor;\n  su2double ProjGridVel, *GridVel, GridVel2, Pressure = 0.0, Density, Vel2;\n  su2double total_viscosity, div_vel, tau_vel[3] = {0.0,0.0,0.0}, UnitNormal[3] = {0.0,0.0,0.0};\n  su2double laminar_viscosity, eddy_viscosity, Grad_Vel[3][3] = {{1.0, 0.0, 0.0},{0.0,1.0,0.0},{0.0,0.0,1.0}},\n  tau[3][3] = {{0.0, 0.0, 0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}}, delta[3][3] = {{1.0, 0.0, 0.0},{0.0,1.0,0.0},{0.0,0.0,1.0}};\n  \n  su2double Prandtl_Lam  = config->GetPrandtl_Lam();\n  su2double Prandtl_Turb = config->GetPrandtl_Turb();\n  su2double Gas_Constant = config->GetGas_ConstantND();\n  su2double Cp = (Gamma / Gamma_Minus_One) * Gas_Constant;\n  \n  bool implicit = (config->GetKind_TimeIntScheme_Flow() == EULER_IMPLICIT);\n  bool compressible   = (config->GetKind_Regime() == COMPRESSIBLE);\n  bool incompressible = (config->GetKind_Regime() == INCOMPRESSIBLE);\n  bool freesurface    = (config->GetKind_Regime() == FREESURFACE);\n  bool grid_movement  = config->GetGrid_Movement();\n  \n  /*--- Identify the boundary ---*/\n  \n  string Marker_Tag = config->GetMarker_All_TagBound(val_marker);\n  \n  /*--- Retrieve the specified wall temperature ---*/\n  \n  Twall = config->GetIsothermal_Temperature(Marker_Tag)/config->GetTemperature_Ref();\n  \n  /*--- Loop over boundary points ---*/\n  \n  for (iVertex = 0; iVertex < geometry->nVertex[val_marker]; iVertex++) {\n    \n    iPoint = geometry->vertex[val_marker][iVertex]->GetNode();\n    \n    if (geometry->node[iPoint]->GetDomain()) {\n      \n      /*--- Compute dual-grid area and boundary normal ---*/\n      \n      Normal = geometry->vertex[val_marker][iVertex]->GetNormal();\n      \n      Area = 0.0; for (iDim = 0; iDim < nDim; iDim++) Area += Normal[iDim]*Normal[iDim]; Area = sqrt (Area);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        UnitNormal[iDim] = -Normal[iDim]/Area;\n      \n      /*--- Calculate useful quantities ---*/\n      \n      theta2 = 0.0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        theta2 += UnitNormal[iDim]*UnitNormal[iDim];\n      \n      /*--- Compute closest normal neighbor ---*/\n      \n      Point_Normal = geometry->vertex[val_marker][iVertex]->GetNormal_Neighbor();\n      \n      /*--- Get coordinates of i & nearest normal and compute distance ---*/\n      \n      Coord_i = geometry->node[iPoint]->GetCoord();\n      Coord_j = geometry->node[Point_Normal]->GetCoord();\n      dist_ij = 0;\n      for (iDim = 0; iDim < nDim; iDim++)\n        dist_ij += (Coord_j[iDim]-Coord_i[iDim])*(Coord_j[iDim]-Coord_i[iDim]);\n      dist_ij = sqrt(dist_ij);\n      \n      /*--- Store the corrected velocity at the wall which will\n       be zero (v = 0), unless there is grid motion (v = u_wall)---*/\n      \n      if (grid_movement) {\n        GridVel = geometry->node[iPoint]->GetGridVel();\n        for (iDim = 0; iDim < nDim; iDim++) Vector[iDim] = GridVel[iDim];\n      }\n      else {\n        for (iDim = 0; iDim < nDim; iDim++) Vector[iDim] = 0.0;\n      }\n      \n      /*--- Initialize the convective & viscous residuals to zero ---*/\n      \n      for (iVar = 0; iVar < nVar; iVar++) {\n        Res_Conv[iVar] = 0.0;\n        Res_Visc[iVar] = 0.0;\n      }\n      \n      /*--- Set the residual, truncation error and velocity value on the boundary ---*/\n      \n      if (compressible) node[iPoint]->SetVelocity_Old(Vector);\n      if (incompressible || freesurface) node[iPoint]->SetVelocityInc_Old(Vector);\n      \n      for (iDim = 0; iDim < nDim; iDim++)\n        LinSysRes.SetBlock_Zero(iPoint, iDim+1);\n      node[iPoint]->SetVel_ResTruncError_Zero();\n      \n      /*--- Compute the normal gradient in temperature using Twall ---*/\n      \n      dTdn = -(node[Point_Normal]->GetPrimitive(0) - Twall)/dist_ij;\n      \n      /*--- Get transport coefficients ---*/\n      \n      laminar_viscosity    = node[iPoint]->GetLaminarViscosity();\n      eddy_viscosity       = node[iPoint]->GetEddyViscosity();\n      thermal_conductivity = Cp * ( laminar_viscosity/Prandtl_Lam + eddy_viscosity/Prandtl_Turb);\n      \n      // work in progress on real-gases...\n      //thermal_conductivity = node[iPoint]->GetThermalConductivity();\n      //Cp = node[iPoint]->GetSpecificHeatCp();\n      //thermal_conductivity += Cp*eddy_viscosity/Prandtl_Turb;\n      \n      /*--- Apply a weak boundary condition for the energy equation.\n       Compute the residual due to the prescribed heat flux. ---*/\n      \n      Res_Visc[nDim+1] = thermal_conductivity * dTdn * Area;\n      \n      /*--- Calculate Jacobian for implicit time stepping ---*/\n      \n      if (implicit) {\n        \n        for (iVar = 0; iVar < nVar; iVar ++)\n          for (jVar = 0; jVar < nVar; jVar ++)\n            Jacobian_i[iVar][jVar] = 0.0;\n        \n        /*--- Calculate useful quantities ---*/\n        \n        Density = node[iPoint]->GetPrimitive(nDim+2);\n        Vel2 = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          Vel2 += node[iPoint]->GetPrimitive(iDim+1) * node[iPoint]->GetPrimitive(iDim+1);\n        dTdrho = 1.0/Density * ( -Twall + (Gamma-1.0)/Gas_Constant*(Vel2/2.0) );\n        \n        /*--- Enforce the no-slip boundary condition in a strong way ---*/\n        \n        for (iVar = 1; iVar <= nDim; iVar++) {\n          total_index = iPoint*nVar+iVar;\n          Jacobian.DeleteValsRowi(total_index);\n        }\n        \n        /*--- Add contributions to the Jacobian from the weak enforcement of the energy equations ---*/\n        \n        Jacobian_i[nDim+1][0]      = -thermal_conductivity*theta2/dist_ij * dTdrho * Area;\n        Jacobian_i[nDim+1][nDim+1] = -thermal_conductivity*theta2/dist_ij * (Gamma-1.0)/(Gas_Constant*Density) * Area;\n        \n        /*--- Subtract the block from the Global Jacobian structure ---*/\n        \n        Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        \n      }\n      \n      /*--- If the wall is moving, there are additional residual contributions\n       due to pressure (p v_wall.n) and shear stress (tau.v_wall.n). ---*/\n      \n      if (grid_movement) {\n        \n        /*--- Get the grid velocity at the current boundary node ---*/\n        \n        GridVel = geometry->node[iPoint]->GetGridVel();\n        ProjGridVel = 0.0;\n        for (iDim = 0; iDim < nDim; iDim++)\n          ProjGridVel += GridVel[iDim]*UnitNormal[iDim]*Area;\n        \n        /*--- Retrieve other primitive quantities and viscosities ---*/\n        \n        Density  = node[iPoint]->GetSolution(0);\n        if (compressible) {\n          Pressure = node[iPoint]->GetPressure();\n          laminar_viscosity = node[iPoint]->GetLaminarViscosity();\n          eddy_viscosity    = node[iPoint]->GetEddyViscosity();\n        }\n        if (incompressible || freesurface) {\n          Pressure = node[iPoint]->GetPressureInc();\n          laminar_viscosity = node[iPoint]->GetLaminarViscosityInc();\n          eddy_viscosity    = node[iPoint]->GetEddyViscosityInc();\n        }\n        \n        total_viscosity   = laminar_viscosity + eddy_viscosity;\n        \n        for (iDim = 0; iDim < nDim; iDim++) {\n          for (jDim = 0 ; jDim < nDim; jDim++) {\n            Grad_Vel[iDim][jDim] = node[iPoint]->GetGradient_Primitive(iDim+1, jDim);\n          }\n        }\n        \n        /*--- Divergence of the velocity ---*/\n        \n        div_vel = 0.0; for (iDim = 0 ; iDim < nDim; iDim++) div_vel += Grad_Vel[iDim][iDim];\n        \n        /*--- Compute the viscous stress tensor ---*/\n        \n        for (iDim = 0; iDim < nDim; iDim++)\n          for (jDim = 0; jDim < nDim; jDim++) {\n            tau[iDim][jDim] = total_viscosity*( Grad_Vel[jDim][iDim] + Grad_Vel[iDim][jDim] ) - TWO3*total_viscosity*div_vel*delta[iDim][jDim];\n          }\n        \n        /*--- Dot product of the stress tensor with the grid velocity ---*/\n        \n        for (iDim = 0 ; iDim < nDim; iDim++) {\n          tau_vel[iDim] = 0.0;\n          for (jDim = 0 ; jDim < nDim; jDim++)\n            tau_vel[iDim] += tau[iDim][jDim]*GridVel[jDim];\n        }\n        \n        /*--- Compute the convective and viscous residuals (energy eqn.) ---*/\n        \n        Res_Conv[nDim+1] = Pressure*ProjGridVel;\n        for (iDim = 0 ; iDim < nDim; iDim++)\n          Res_Visc[nDim+1] += tau_vel[iDim]*UnitNormal[iDim]*Area;\n        \n        /*--- Implicit Jacobian contributions due to moving walls ---*/\n        \n        if (implicit) {\n          \n          /*--- Jacobian contribution related to the pressure term ---*/\n          \n          GridVel2 = 0.0;\n          for (iDim = 0; iDim < nDim; iDim++)\n            GridVel2 += GridVel[iDim]*GridVel[iDim];\n          for (iVar = 0; iVar < nVar; iVar++)\n            for (jVar = 0; jVar < nVar; jVar++)\n              Jacobian_i[iVar][jVar] = 0.0;\n          \n          Jacobian_i[nDim+1][0] = 0.5*(Gamma-1.0)*GridVel2*ProjGridVel;\n          for (jDim = 0; jDim < nDim; jDim++)\n            Jacobian_i[nDim+1][jDim+1] = -(Gamma-1.0)*GridVel[jDim]*ProjGridVel;\n          Jacobian_i[nDim+1][nDim+1] = (Gamma-1.0)*ProjGridVel;\n          \n          /*--- Add the block to the Global Jacobian structure ---*/\n          \n          Jacobian.AddBlock(iPoint, iPoint, Jacobian_i);\n          \n          /*--- Now the Jacobian contribution related to the shear stress ---*/\n          \n          for (iVar = 0; iVar < nVar; iVar++)\n            for (jVar = 0; jVar < nVar; jVar++)\n              Jacobian_i[iVar][jVar] = 0.0;\n          \n          factor = total_viscosity*Area/(Density*dist_ij);\n          \n          if (nDim == 2) {\n            thetax = theta2 + UnitNormal[0]*UnitNormal[0]/3.0;\n            thetay = theta2 + UnitNormal[1]*UnitNormal[1]/3.0;\n            \n            etaz   = UnitNormal[0]*UnitNormal[1]/3.0;\n            \n            pix = GridVel[0]*thetax + GridVel[1]*etaz;\n            piy = GridVel[0]*etaz   + GridVel[1]*thetay;\n            \n            Jacobian_i[nDim+1][0] -= factor*(-pix*GridVel[0]+piy*GridVel[1]);\n            Jacobian_i[nDim+1][1] -= factor*pix;\n            Jacobian_i[nDim+1][2] -= factor*piy;\n          }\n          else {\n            thetax = theta2 + UnitNormal[0]*UnitNormal[0]/3.0;\n            thetay = theta2 + UnitNormal[1]*UnitNormal[1]/3.0;\n            thetaz = theta2 + UnitNormal[2]*UnitNormal[2]/3.0;\n            \n            etaz = UnitNormal[0]*UnitNormal[1]/3.0;\n            etax = UnitNormal[1]*UnitNormal[2]/3.0;\n            etay = UnitNormal[0]*UnitNormal[2]/3.0;\n            \n            pix = GridVel[0]*thetax + GridVel[1]*etaz   + GridVel[2]*etay;\n            piy = GridVel[0]*etaz   + GridVel[1]*thetay + GridVel[2]*etax;\n            piz = GridVel[0]*etay   + GridVel[1]*etax   + GridVel[2]*thetaz;\n            \n            Jacobian_i[nDim+1][0] -= factor*(-pix*GridVel[0]+piy*GridVel[1]+piz*GridVel[2]);\n            Jacobian_i[nDim+1][1] -= factor*pix;\n            Jacobian_i[nDim+1][2] -= factor*piy;\n            Jacobian_i[nDim+1][3] -= factor*piz;\n          }\n          \n          /*--- Subtract the block from the Global Jacobian structure ---*/\n          \n          Jacobian.SubtractBlock(iPoint, iPoint, Jacobian_i);\n        }\n        \n      }\n      \n      /*--- Convective contribution to the residual at the wall ---*/\n      \n      LinSysRes.AddBlock(iPoint, Res_Conv);\n      \n      /*--- Viscous contribution to the residual at the wall ---*/\n      \n      LinSysRes.SubtractBlock(iPoint, Res_Visc);\n      \n      /*--- Enforce the no-slip boundary condition in a strong way by\n       modifying the velocity-rows of the Jacobian (1 on the diagonal). ---*/\n      \n      if (implicit) {\n        for (iVar = 1; iVar <= nDim; iVar++) {\n          total_index = iPoint*nVar+iVar;\n          Jacobian.DeleteValsRowi(total_index);\n        }\n      }\n      \n    }\n  }\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":332,"id":"0","maintainHistory":false,"markersById":{"0-42":{"range":{"start":{"row":3258,"column":79},"end":{"row":3258,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"0-43":{"range":{"start":{"row":3492,"column":0},"end":{"row":3492,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":3302,"column":37},"end":{"row":3302,"column":37}},"properties":{"type":"selection","autoscroll":true,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":14,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/solver_direct_mean.cpp","digestWhenLastPersisted":"9e618cbadafdef74ab4df66a0d357083d3a4bf15","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":1520,"softTabs":true,"firstVisibleScreenRow":381,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1521,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/SU2_CFD.cpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1866,"softTabs":true,"firstVisibleScreenRow":4181,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1867,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/solver_direct_mean.cpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1834,"softTabs":true,"firstVisibleScreenRow":19,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1835,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/driver_structure.cpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1750,"softTabs":true,"firstVisibleScreenRow":13,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1751,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/variable_structure.cpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1766,"softTabs":true,"firstVisibleScreenRow":3187,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1767,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/variable_structure.hpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1324,"softTabs":true,"firstVisibleScreenRow":24,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1325,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/SU2_CFD.hpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1230,"softTabs":true,"firstVisibleScreenRow":37,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1231,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/solver_structure.hpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":832,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":833,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/braid_wrapper.cpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":1850,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":1851,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/sguenther/Numerics/SU2/SU2_CFD/include/braid_structure.hpp","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/sguenther/Numerics/SU2/SU2_CFD/src/SU2_CFD.cpp","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-c","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/sguenther/Numerics/SU2/conf_SU2_AD.err","/home/sguenther/Numerics/SU2/conf_SU2_AD.log","/home/sguenther/Numerics/SU2/conf_SU2_BASE.err","/home/sguenther/Numerics/SU2/conf_SU2_BASE.log","/home/sguenther/Numerics/SU2/COPYING","/home/sguenther/Numerics/SU2/depcomp","/home/sguenther/Numerics/SU2/missing","/home/sguenther/Numerics/SU2/README.md","/home/sguenther/.atom/projects.cson","/home/sguenther/Numerics/SU2/SU2_CFD/include/variable_structure.inl","/home/sguenther/Numerics/SU2/SU2_CFD/include/transport_model.inl","/home/sguenther/Numerics/SU2/SU2_CFD/include/transport_model.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/transfer_structure.inl","/home/sguenther/Numerics/SU2/SU2_CFD/include/transfer_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/numerics_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/src/fluid_model_pig.cpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/integration_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/solver_structure.inl","/home/sguenther/Numerics/SU2/SU2_CFD/include/output_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/iteration_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/integration_structure.inl","/home/sguenther/Numerics/SU2/SU2_CFD/include/fluid_model.inl","/home/sguenther/Numerics/SU2/SU2_CFD/src/fluid_model_ppr.cpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/driver_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/include/fluid_model.hpp","/home/sguenther/Numerics/SU2/Common/src/config_structure.cpp","/home/sguenther/Numerics/SU2/Common/include/config_structure.inl","/home/sguenther/Numerics/SU2/SU2_CFD/src/solver_structure.cpp","atom://about","/home/sguenther/Numerics/SU2/SU2_CFD/obj/Makefile.am","atom://config","/home/sguenther/Numerics/SU2/SU2_CFD/include/definition_structure.hpp","/home/sguenther/Numerics/SU2/SU2_CFD/src/definition_structure.cpp"]},"packageStates":{"autocomplete-bibtex":{"provider":{"deserializer":"BibtexProvider","data":{"bibtex":[],"possibleWords":[]}},"saveTime":1455721102882},"latextools":{"ltConsoleState":{}},"find-and-replace":{"findOptions":{"findPattern":"global_delta_time","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["sin","sing","single","iter","itera","iteraion_container","iteration_container","cvariable","set","setgradient","Driver_Preprocessing","CSingleZoneDriver","global_delta_time"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/home/sguenther/Numerics/SU2/SU2_CFD/src/SU2_CFD.cpp":1458306637420,"/home/sguenther/Numerics/SU2/SU2_CFD/src/solver_direct_mean.cpp":1458232743902,"/home/sguenther/Numerics/SU2/SU2_CFD/src/driver_structure.cpp":1458218988682,"/home/sguenther/Numerics/SU2/SU2_CFD/src/variable_structure.cpp":1458218978510,"/home/sguenther/Numerics/SU2/SU2_CFD/include/variable_structure.hpp":1458209525845,"/home/sguenther/Numerics/SU2/SU2_CFD/include/SU2_CFD.hpp":1458209524601,"/home/sguenther/Numerics/SU2/SU2_CFD/include/solver_structure.hpp":1458218982126,"/home/sguenther/Numerics/SU2/SU2_CFD/src/braid_wrapper.cpp":1458218985315,"/home/sguenther/Numerics/SU2/SU2_CFD/include/braid_structure.hpp":1458218934976},"metrics":{"sessionLength":21480},"tabs":[{"previewTabURI":"/home/sguenther/Numerics/SU2/SU2_CFD/src/solver_direct_mean.cpp"}],"tree-view":{"directoryExpansionStates":{"/home/sguenther/Numerics/SU2":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"autom4te.cache":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"Common":{"isExpanded":false,"entries":{}},"externals":{"isExpanded":false,"entries":{}},"m4":{"isExpanded":false,"entries":{}},"QuickStart":{"isExpanded":false,"entries":{}},"SU2_AD":{"isExpanded":false,"entries":{}},"SU2_BASE":{"isExpanded":false,"entries":{}},"SU2_CFD":{"isExpanded":true,"entries":{"bin":{"isExpanded":false,"entries":{}},"include":{"isExpanded":true,"entries":{}},"obj":{"isExpanded":true,"entries":{}},"src":{"isExpanded":true,"entries":{}}}},"SU2_DEF":{"isExpanded":false,"entries":{}},"SU2_DOT":{"isExpanded":false,"entries":{}},"SU2_GEO":{"isExpanded":false,"entries":{}},"SU2_IDE":{"isExpanded":false,"entries":{}},"SU2_MSH":{"isExpanded":false,"entries":{}},"SU2_PY":{"isExpanded":false,"entries":{}},"SU2_SOL":{"isExpanded":false,"entries":{}},"TestCases":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/sguenther/Numerics/SU2/SU2_CFD/src/SU2_CFD.cpp","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":170,"width":220},"keybinding-resolver":{}},"fullScreen":false}